export CG_BubbleTrail
code
proc CG_BubbleTrail 96 4
file "../../../code/cgame/cg_effects.c"
line 36
;1:/*
;2:===========================================================================
;3:Copyright (C) 1999-2005 Id Software, Inc.
;4:
;5:This file is part of Quake III Arena source code.
;6:
;7:Quake III Arena source code is free software; you can redistribute it
;8:and/or modify it under the terms of the GNU General Public License as
;9:published by the Free Software Foundation; either version 2 of the License,
;10:or (at your option) any later version.
;11:
;12:Quake III Arena source code is distributed in the hope that it will be
;13:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;14:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;15:GNU General Public License for more details.
;16:
;17:You should have received a copy of the GNU General Public License
;18:along with Quake III Arena source code; if not, write to the Free Software
;19:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;20:===========================================================================
;21:*/
;22://
;23:// cg_effects.c -- these functions generate localentities, usually as a result
;24:// of event processing
;25:
;26:#include "cg_local.h"
;27:
;28:
;29:/*
;30:==================
;31:CG_BubbleTrail
;32:
;33:Bullets shot underwater
;34:==================
;35:*/
;36:void CG_BubbleTrail( vec3_t start, vec3_t end, float spacing ) {
line 42
;37:	vec3_t		move;
;38:	vec3_t		vec;
;39:	float		len;
;40:	int			i;
;41:
;42:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $82
line 43
;43:		return;
ADDRGP4 $81
JUMPV
LABELV $82
line 46
;44:	}
;45:
;46:	VectorCopy (start, move);
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 47
;47:	VectorSubtract (end, start, vec);
ADDRLP4 32
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
CNSTI4 4
ASGNI4
ADDRLP4 12+4
ADDRLP4 32
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 44
CNSTI4 8
ASGNI4
ADDRLP4 12+8
ADDRFP4 4
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 48
;48:	len = VectorNormalize (vec);
ADDRLP4 12
ARGP4
ADDRLP4 48
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 48
INDIRF4
ASGNF4
line 51
;49:
;50:	// advance a random amount first
;51:	i = rand() % (int)spacing;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 52
INDIRI4
ADDRFP4 8
INDIRF4
CVFI4 4
MODI4
ASGNI4
line 52
;52:	VectorMA( move, i, vec, move );
ADDRLP4 56
ADDRLP4 24
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
ADDRLP4 56
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDRLP4 56
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDRLP4 24
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 54
;53:
;54:	VectorScale (vec, spacing, vec);
ADDRLP4 60
ADDRFP4 8
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 60
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 60
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
ADDRFP4 8
INDIRF4
MULF4
ASGNF4
line 56
;55:
;56:	for ( ; i < len; i += spacing ) {
ADDRGP4 $100
JUMPV
LABELV $97
line 60
;57:		localEntity_t	*le;
;58:		refEntity_t		*re;
;59:
;60:		le = CG_AllocLocalEntity();
ADDRLP4 72
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 64
ADDRLP4 72
INDIRP4
ASGNP4
line 61
;61:		le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 64
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 62
;62:		le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 5
ASGNI4
line 63
;63:		le->startTime = cg.time;
ADDRLP4 64
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 64
;64:		le->endTime = cg.time + 1000 + random() * 250;
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 1000
ADDI4
CVIF4 4
CNSTF4 1132068864
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 65
;65:		le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 64
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 64
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 67
;66:
;67:		re = &le->refEntity;
ADDRLP4 68
ADDRLP4 64
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 68
;68:		re->shaderTime = cg.time / 1000.0f;
ADDRLP4 68
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 70
;69:
;70:		re->reType = RT_SPRITE;
ADDRLP4 68
INDIRP4
CNSTI4 2
ASGNI4
line 71
;71:		re->rotation = 0;
ADDRLP4 68
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 0
ASGNF4
line 72
;72:		re->radius = 3;
ADDRLP4 68
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1077936128
ASGNF4
line 73
;73:		re->customShader = cgs.media.waterBubbleShader;
ADDRLP4 68
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+956380+1296
INDIRI4
ASGNI4
line 74
;74:		re->shaderRGBA[0] = 0xff;
ADDRLP4 68
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 255
ASGNU1
line 75
;75:		re->shaderRGBA[1] = 0xff;
ADDRLP4 68
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 255
ASGNU1
line 76
;76:		re->shaderRGBA[2] = 0xff;
ADDRLP4 68
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 255
ASGNU1
line 77
;77:		re->shaderRGBA[3] = 0xff;
ADDRLP4 68
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 79
;78:
;79:		le->color[3] = 1.0;
ADDRLP4 64
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 81
;80:
;81:		le->pos.trType = TR_LINEAR;
ADDRLP4 64
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 82
;82:		le->pos.trTime = cg.time;
ADDRLP4 64
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 83
;83:		VectorCopy( move, le->pos.trBase );
ADDRLP4 64
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0
INDIRB
ASGNB 12
line 84
;84:		le->pos.trDelta[0] = crandom()*5;
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1084227584
CNSTF4 1073741824
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 85
;85:		le->pos.trDelta[1] = crandom()*5;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 1084227584
CNSTF4 1073741824
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 86
;86:		le->pos.trDelta[2] = crandom()*5 + 6;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 64
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1084227584
CNSTF4 1073741824
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1086324736
ADDF4
ASGNF4
line 88
;87:
;88:		VectorAdd (move, vec, move);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDF4
ASGNF4
line 89
;89:	}
LABELV $98
line 56
ADDRLP4 24
ADDRLP4 24
INDIRI4
CVIF4 4
ADDRFP4 8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
LABELV $100
ADDRLP4 24
INDIRI4
CVIF4 4
ADDRLP4 28
INDIRF4
LTF4 $97
line 90
;90:}
LABELV $81
endproc CG_BubbleTrail 96 4
data
align 4
LABELV $114
byte 4 146
export CG_SmokePuff
code
proc CG_SmokePuff 52 4
line 106
;91:
;92:/*
;93:=====================
;94:CG_SmokePuff
;95:
;96:Adds a smoke puff or blood trail localEntity.
;97:=====================
;98:*/
;99:localEntity_t *CG_SmokePuff(const vec3_t p, const vec3_t vel, 
;100:							float radius,
;101:							float r, float g, float b, float a,
;102:							float duration,
;103:							int startTime,
;104:							int fadeInTime,
;105:							int leFlags,
;106:							qhandle_t hShader) {
line 111
;107:	static int	seed = 0x92;
;108:	localEntity_t	*le;
;109:	refEntity_t		*re;
;110:
;111:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 112
;112:	le->leFlags = leFlags;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 40
INDIRI4
ASGNI4
line 113
;113:	le->radius = radius;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRFP4 8
INDIRF4
ASGNF4
line 115
;114:
;115:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 116
;116:	re->rotation = Q_random( &seed ) * 360;
ADDRGP4 $114
ARGP4
ADDRLP4 12
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 1135869952
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 117
;117:	re->radius = radius;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 8
INDIRF4
ASGNF4
line 118
;118:	re->shaderTime = startTime / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRFP4 32
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 120
;119:
;120:	le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 5
ASGNI4
line 121
;121:	le->startTime = startTime;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 122
;122:	le->fadeInTime = fadeInTime;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 36
INDIRI4
ASGNI4
line 123
;123:	le->endTime = startTime + duration;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 32
INDIRI4
CVIF4 4
ADDRFP4 28
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 124
;124:	if ( fadeInTime > startTime ) {
ADDRFP4 36
INDIRI4
ADDRFP4 32
INDIRI4
LEI4 $115
line 125
;125:		le->lifeRate = 1.0 / ( le->endTime - le->fadeInTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 126
;126:	}
ADDRGP4 $116
JUMPV
LABELV $115
line 127
;127:	else {
line 128
;128:		le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 129
;129:	}
LABELV $116
line 130
;130:	le->color[0] = r;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 12
INDIRF4
ASGNF4
line 131
;131:	le->color[1] = g; 
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 16
INDIRF4
ASGNF4
line 132
;132:	le->color[2] = b;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 20
INDIRF4
ASGNF4
line 133
;133:	le->color[3] = a;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRFP4 24
INDIRF4
ASGNF4
line 136
;134:
;135:
;136:	le->pos.trType = TR_LINEAR_STOP;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 3
ASGNI4
line 137
;137:	le->pos.trTime = startTime;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 138
;138:	VectorCopy( vel, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 139
;139:	VectorCopy( p, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 141
;140:
;141:	VectorCopy( p, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 142
;142:	re->customShader = hShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 44
INDIRI4
ASGNI4
line 144
;143:
;144:	re->shaderRGBA[0] = le->color[0] * 0xff;
ADDRLP4 20
CNSTF4 1132396544
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 24
CNSTF4 1325400064
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
LTF4 $118
ADDRLP4 16
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $119
JUMPV
LABELV $118
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $119
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 16
INDIRU4
CVUU1 4
ASGNU1
line 145
;145:	re->shaderRGBA[1] = le->color[1] * 0xff;
ADDRLP4 32
CNSTF4 1132396544
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $121
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $122
JUMPV
LABELV $121
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $122
ADDRLP4 4
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 146
;146:	re->shaderRGBA[2] = le->color[2] * 0xff;
ADDRLP4 44
CNSTF4 1132396544
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $124
ADDRLP4 40
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $125
JUMPV
LABELV $124
ADDRLP4 40
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $125
ADDRLP4 4
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 40
INDIRU4
CVUU1 4
ASGNU1
line 147
;147:	re->shaderRGBA[3] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 149
;148:
;149:	re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 150
;150:	re->radius = le->radius;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ASGNF4
line 152
;151:
;152:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $113
endproc CG_SmokePuff 52 4
data
align 4
LABELV $127
byte 4 146
export CG_SlowPuff
code
proc CG_SlowPuff 52 4
line 163
;153:}
;154:
;155:// LEILEI same as above, but slows down.......
;156:localEntity_t *CG_SlowPuff( const vec3_t p, const vec3_t vel, 
;157:				   float radius,
;158:				   float r, float g, float b, float a,
;159:				   float duration,
;160:				   int startTime,
;161:				   int fadeInTime,
;162:				   int leFlags,
;163:				   qhandle_t hShader ) {
line 168
;164:	static int	seed = 0x92;
;165:	localEntity_t	*le;
;166:	refEntity_t		*re;
;167:
;168:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 169
;169:	le->leFlags = leFlags;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 40
INDIRI4
ASGNI4
line 170
;170:	le->radius = radius;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRFP4 8
INDIRF4
ASGNF4
line 172
;171:
;172:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 173
;173:	re->rotation = Q_random( &seed ) * 360;
ADDRGP4 $127
ARGP4
ADDRLP4 12
ADDRGP4 Q_random
CALLF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 1135869952
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 174
;174:	re->radius = radius;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 8
INDIRF4
ASGNF4
line 175
;175:	re->shaderTime = startTime / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRFP4 32
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 177
;176:
;177:	le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 5
ASGNI4
line 178
;178:	le->startTime = startTime;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 179
;179:	le->fadeInTime = fadeInTime;
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 36
INDIRI4
ASGNI4
line 180
;180:	le->endTime = startTime + duration;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 32
INDIRI4
CVIF4 4
ADDRFP4 28
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 181
;181:	if ( fadeInTime > startTime ) {
ADDRFP4 36
INDIRI4
ADDRFP4 32
INDIRI4
LEI4 $128
line 182
;182:		le->lifeRate = 1.0 / ( le->endTime - le->fadeInTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 183
;183:	}
ADDRGP4 $129
JUMPV
LABELV $128
line 184
;184:	else {
line 185
;185:		le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 186
;186:	}
LABELV $129
line 187
;187:	le->color[0] = r;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 12
INDIRF4
ASGNF4
line 188
;188:	le->color[1] = g; 
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 16
INDIRF4
ASGNF4
line 189
;189:	le->color[2] = b;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 20
INDIRF4
ASGNF4
line 190
;190:	le->color[3] = a;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRFP4 24
INDIRF4
ASGNF4
line 193
;191:
;192:
;193:	le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 194
;194:	le->pos.trTime = startTime;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 32
INDIRI4
ASGNI4
line 195
;195:	VectorCopy( vel, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 196
;196:	VectorCopy( p, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 198
;197:
;198:	VectorCopy( p, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 199
;199:	re->customShader = hShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 44
INDIRI4
ASGNI4
line 201
;200:
;201:	re->shaderRGBA[0] = le->color[0] * 0xff;
ADDRLP4 20
CNSTF4 1132396544
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 24
CNSTF4 1325400064
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
LTF4 $131
ADDRLP4 16
ADDRLP4 20
INDIRF4
ADDRLP4 24
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $132
JUMPV
LABELV $131
ADDRLP4 16
ADDRLP4 20
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $132
ADDRLP4 4
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 16
INDIRU4
CVUU1 4
ASGNU1
line 202
;202:	re->shaderRGBA[1] = le->color[1] * 0xff;
ADDRLP4 32
CNSTF4 1132396544
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
CNSTF4 1325400064
ASGNF4
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
LTF4 $134
ADDRLP4 28
ADDRLP4 32
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $135
JUMPV
LABELV $134
ADDRLP4 28
ADDRLP4 32
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $135
ADDRLP4 4
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 28
INDIRU4
CVUU1 4
ASGNU1
line 203
;203:	re->shaderRGBA[2] = le->color[2] * 0xff;
ADDRLP4 44
CNSTF4 1132396544
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 48
CNSTF4 1325400064
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
LTF4 $137
ADDRLP4 40
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $138
JUMPV
LABELV $137
ADDRLP4 40
ADDRLP4 44
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $138
ADDRLP4 4
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 40
INDIRU4
CVUU1 4
ASGNU1
line 204
;204:	re->shaderRGBA[3] = 0xff;
ADDRLP4 4
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 206
;205:
;206:	re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 207
;207:	re->radius = le->radius;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
ASGNF4
line 209
;208:
;209:	return le;
ADDRLP4 0
INDIRP4
RETP4
LABELV $126
endproc CG_SlowPuff 52 4
export CG_SpawnEffect
proc CG_SpawnEffect 28 4
line 219
;210:}
;211:
;212:/*
;213:==================
;214:CG_SpawnEffect
;215:
;216:Player teleporting in or out
;217:==================
;218:*/
;219:void CG_SpawnEffect( vec3_t org ) {
line 223
;220:	localEntity_t	*le;
;221:	refEntity_t		*re;
;222:
;223:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 224
;224:	le->leFlags = 0;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 225
;225:	le->leType = LE_FADE_RGB;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 226
;226:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 227
;227:	le->endTime = cg.time + 500;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 228
;228:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 230
;229:
;230:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
ADDRLP4 20
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 232
;231:
;232:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 234
;233:
;234:	re->reType = RT_MODEL;
ADDRLP4 4
INDIRP4
CNSTI4 0
ASGNI4
line 235
;235:	re->shaderTime = cg.time / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 240
;236:
;237:#ifndef MISSIONPACK
;238:	re->customShader = cgs.media.teleportEffectShader;
;239:#endif
;240:	re->hModel = cgs.media.teleportEffectModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+956380+1684
INDIRI4
ASGNI4
line 241
;241:	AxisClear( re->axis );
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 243
;242:
;243:	VectorCopy( org, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 245
;244:#ifdef MISSIONPACK
;245:	re->origin[2] += 16;
ADDRLP4 24
ADDRLP4 4
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1098907648
ADDF4
ASGNF4
line 249
;246:#else
;247:	re->origin[2] -= 24;
;248:#endif
;249:}
LABELV $139
endproc CG_SpawnEffect 28 4
export CG_LightningBoltBeam
proc CG_LightningBoltBeam 12 0
line 256
;250:
;251:/*
;252:===============
;253:CG_LightningBoltBeam
;254:===============
;255:*/
;256:void CG_LightningBoltBeam( vec3_t start, vec3_t end ) {
line 260
;257:	localEntity_t	*le;
;258:	refEntity_t		*beam;
;259:
;260:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 261
;261:	le->leFlags = 0;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 262
;262:	le->leType = LE_SHOWREFENTITY;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 13
ASGNI4
line 263
;263:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 264
;264:	le->endTime = cg.time + 50;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 266
;265:
;266:	beam = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 268
;267:
;268:	VectorCopy( start, beam->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 270
;269:	// this is the end point
;270:	VectorCopy( end, beam->oldorigin );
ADDRLP4 4
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 272
;271:
;272:	beam->reType = RT_LIGHTNING;
ADDRLP4 4
INDIRP4
CNSTI4 6
ASGNI4
line 273
;273:	beam->customShader = cgs.media.lightningShader;
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+956380+440
INDIRI4
ASGNI4
line 274
;274:}
LABELV $145
endproc CG_LightningBoltBeam 12 0
export CG_KamikazeEffect
proc CG_KamikazeEffect 32 0
line 281
;275:
;276:/*
;277:==================
;278:CG_KamikazeEffect
;279:==================
;280:*/
;281:void CG_KamikazeEffect( vec3_t org ) {
line 285
;282:	localEntity_t	*le;
;283:	refEntity_t		*re;
;284:
;285:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 286
;286:	le->leFlags = 0;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 287
;287:	le->leType = LE_KAMIKAZE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 10
ASGNI4
line 288
;288:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 289
;289:	le->endTime = cg.time + 3000;//2250;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 3000
ADDI4
ASGNI4
line 290
;290:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 292
;291:
;292:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
ADDRLP4 20
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 20
INDIRF4
ASGNF4
line 294
;293:
;294:	VectorClear(le->angles.trBase);
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
line 296
;295:
;296:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 298
;297:
;298:	re->reType = RT_MODEL;
ADDRLP4 4
INDIRP4
CNSTI4 0
ASGNI4
line 299
;299:	re->shaderTime = cg.time / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 301
;300:
;301:	re->hModel = cgs.media.kamikazeEffectModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+956380+1692
INDIRI4
ASGNI4
line 303
;302:
;303:	VectorCopy( org, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 305
;304:
;305:}
LABELV $150
endproc CG_KamikazeEffect 32 0
export CG_ObeliskExplode
proc CG_ObeliskExplode 20 24
line 312
;306:
;307:/*
;308:==================
;309:CG_ObeliskExplode
;310:==================
;311:*/
;312:void CG_ObeliskExplode( vec3_t org, int entityNum ) {
line 317
;313:	localEntity_t	*le;
;314:	vec3_t origin;
;315:
;316:	// create an explosion
;317:	VectorCopy( org, origin );
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 318
;318:	origin[2] += 64;
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
CNSTF4 1115684864
ADDF4
ASGNF4
line 319
;319:	le = CG_MakeExplosion( origin, vec3_origin,
ADDRLP4 4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRGP4 cgs+956380+1648
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1668
INDIRI4
ARGI4
CNSTI4 600
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 16
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
line 323
;320:						   cgs.media.dishFlashModel,
;321:						   cgs.media.rocketExplosionShader,
;322:						   600, qtrue );
;323:	le->light = 300;
ADDRLP4 0
INDIRP4
CNSTI4 128
ADDP4
CNSTF4 1133903872
ASGNF4
line 324
;324:	le->lightColor[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1065353216
ASGNF4
line 325
;325:	le->lightColor[1] = 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 1061158912
ASGNF4
line 326
;326:	le->lightColor[2] = 0.0;
ADDRLP4 0
INDIRP4
CNSTI4 140
ADDP4
CNSTF4 0
ASGNF4
line 327
;327:}
LABELV $156
endproc CG_ObeliskExplode 20 24
export CG_ObeliskPain
proc CG_ObeliskPain 12 16
line 334
;328:
;329:/*
;330:==================
;331:CG_ObeliskPain
;332:==================
;333:*/
;334:void CG_ObeliskPain( vec3_t org ) {
line 339
;335:	float r;
;336:	sfxHandle_t sfx;
;337:
;338:	// hit sound
;339:	r = rand() & 3;
ADDRLP4 8
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
CNSTI4 3
BANDI4
CVIF4 4
ASGNF4
line 340
;340:	if ( r < 2 ) {
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
GEF4 $163
line 341
;341:		sfx = cgs.media.obeliskHitSound1;
ADDRLP4 4
ADDRGP4 cgs+956380+2092
INDIRI4
ASGNI4
line 342
;342:	} else if ( r == 2 ) {
ADDRGP4 $164
JUMPV
LABELV $163
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
NEF4 $167
line 343
;343:		sfx = cgs.media.obeliskHitSound2;
ADDRLP4 4
ADDRGP4 cgs+956380+2096
INDIRI4
ASGNI4
line 344
;344:	} else {
ADDRGP4 $168
JUMPV
LABELV $167
line 345
;345:		sfx = cgs.media.obeliskHitSound3;
ADDRLP4 4
ADDRGP4 cgs+956380+2100
INDIRI4
ASGNI4
line 346
;346:	}
LABELV $168
LABELV $164
line 347
;347:	trap_S_StartSound ( org, ENTITYNUM_NONE, CHAN_BODY, sfx );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 5
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 348
;348:}
LABELV $162
endproc CG_ObeliskPain 12 16
export CG_InvulnerabilityImpact
proc CG_InvulnerabilityImpact 36 16
line 356
;349:
;350:
;351:/*
;352:==================
;353:CG_InvulnerabilityImpact
;354:==================
;355:*/
;356:void CG_InvulnerabilityImpact( vec3_t org, vec3_t angles ) {
line 362
;357:	localEntity_t	*le;
;358:	refEntity_t		*re;
;359:	int				r;
;360:	sfxHandle_t		sfx;
;361:
;362:	le = CG_AllocLocalEntity();
ADDRLP4 16
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
line 363
;363:	le->leFlags = 0;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 364
;364:	le->leType = LE_INVULIMPACT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 11
ASGNI4
line 365
;365:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 366
;366:	le->endTime = cg.time + 1000;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 367
;367:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 369
;368:
;369:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
ADDRLP4 28
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
line 371
;370:
;371:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 373
;372:
;373:	re->reType = RT_MODEL;
ADDRLP4 4
INDIRP4
CNSTI4 0
ASGNI4
line 374
;374:	re->shaderTime = cg.time / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 376
;375:
;376:	re->hModel = cgs.media.invulnerabilityImpactModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+956380+1724
INDIRI4
ASGNI4
line 378
;377:
;378:	VectorCopy( org, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 379
;379:	AnglesToAxis( angles, re->axis );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 381
;380:
;381:	r = rand() & 3;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 32
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 382
;382:	if ( r < 2 ) {
ADDRLP4 8
INDIRI4
CNSTI4 2
GEI4 $179
line 383
;383:		sfx = cgs.media.invulnerabilityImpactSound1;
ADDRLP4 12
ADDRGP4 cgs+956380+2076
INDIRI4
ASGNI4
line 384
;384:	} else if ( r == 2 ) {
ADDRGP4 $180
JUMPV
LABELV $179
ADDRLP4 8
INDIRI4
CNSTI4 2
NEI4 $183
line 385
;385:		sfx = cgs.media.invulnerabilityImpactSound2;
ADDRLP4 12
ADDRGP4 cgs+956380+2080
INDIRI4
ASGNI4
line 386
;386:	} else {
ADDRGP4 $184
JUMPV
LABELV $183
line 387
;387:		sfx = cgs.media.invulnerabilityImpactSound3;
ADDRLP4 12
ADDRGP4 cgs+956380+2084
INDIRI4
ASGNI4
line 388
;388:	}
LABELV $184
LABELV $180
line 389
;389:	trap_S_StartSound (org, ENTITYNUM_NONE, CHAN_BODY, sfx );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 5
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 390
;390:}
LABELV $173
endproc CG_InvulnerabilityImpact 36 16
export CG_InvulnerabilityJuiced
proc CG_InvulnerabilityJuiced 40 16
line 397
;391:
;392:/*
;393:==================
;394:CG_InvulnerabilityJuiced
;395:==================
;396:*/
;397:void CG_InvulnerabilityJuiced( vec3_t org ) {
line 402
;398:	localEntity_t	*le;
;399:	refEntity_t		*re;
;400:	vec3_t			angles;
;401:
;402:	le = CG_AllocLocalEntity();
ADDRLP4 20
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 403
;403:	le->leFlags = 0;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 404
;404:	le->leType = LE_INVULJUICED;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 12
ASGNI4
line 405
;405:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 406
;406:	le->endTime = cg.time + 10000;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 10000
ADDI4
ASGNI4
line 407
;407:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 409
;408:
;409:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
ADDRLP4 32
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
line 411
;410:
;411:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 413
;412:
;413:	re->reType = RT_MODEL;
ADDRLP4 4
INDIRP4
CNSTI4 0
ASGNI4
line 414
;414:	re->shaderTime = cg.time / 1000.0f;
ADDRLP4 4
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 416
;415:
;416:	re->hModel = cgs.media.invulnerabilityJuicedModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+956380+1728
INDIRI4
ASGNI4
line 418
;417:
;418:	VectorCopy( org, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 419
;419:	VectorClear(angles);
ADDRLP4 36
CNSTF4 0
ASGNF4
ADDRLP4 8+8
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 8
ADDRLP4 36
INDIRF4
ASGNF4
line 420
;420:	AnglesToAxis( angles, re->axis );
ADDRLP4 8
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 422
;421:
;422:	trap_S_StartSound (org, ENTITYNUM_NONE, CHAN_BODY, cgs.media.invulnerabilityJuicedSound );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 cgs+956380+2088
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 423
;423:}
LABELV $189
endproc CG_InvulnerabilityJuiced 40 16
bss
align 4
LABELV $200
skip 12
export CG_ScorePlum
code
proc CG_ScorePlum 48 8
line 430
;424:
;425:/*
;426:==================
;427:CG_ScorePlum
;428:==================
;429:*/
;430:void CG_ScorePlum( int client, vec3_t org, int score, int dmgfl) {
line 437
;431:	localEntity_t	*le;
;432:	refEntity_t		*re;
;433:	vec3_t			angles;
;434:	static vec3_t lastPos;
;435:
;436:	// only visualize for the client that scored
;437:	if (client != cg.predictedPlayerState.clientNum) {
ADDRFP4 0
INDIRI4
ADDRGP4 cg+1868928+140
INDIRI4
EQI4 $201
line 438
;438:		return;
ADDRGP4 $199
JUMPV
LABELV $201
line 440
;439:	}
;440:    if (cg_scorePlum.integer == 0) {
ADDRGP4 cg_scorePlum+12
INDIRI4
CNSTI4 0
NEI4 $205
line 441
;441:		return;
ADDRGP4 $199
JUMPV
LABELV $205
line 444
;442:	}
;443:
;444:	le = CG_AllocLocalEntity();
ADDRLP4 20
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 445
;445:	le->leFlags = 0;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 446
;446:	le->leType = LE_SCOREPLUM;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 9
ASGNI4
line 447
;447:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 448
;448:	le->endTime = cg.time + 1000;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 449
;449:	le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 452
;450:
;451:	
;452:	le->color[0] = le->color[1] = le->color[2] = le->color[3] = 1.0;
ADDRLP4 32
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
line 453
;453:	le->radius = score;
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
line 455
;454:	
;455:	VectorCopy( org, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 456
;456:	if (org[2] >= lastPos[2] - 1 && org[2] <= lastPos[2] + 1) {
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
ADDRLP4 40
CNSTF4 1065353216
ASGNF4
ADDRLP4 36
INDIRF4
ADDRGP4 $200+8
INDIRF4
ADDRLP4 40
INDIRF4
SUBF4
LTF4 $210
ADDRLP4 36
INDIRF4
ADDRGP4 $200+8
INDIRF4
ADDRLP4 40
INDIRF4
ADDF4
GTF4 $210
line 457
;457:		le->pos.trBase[2] -= 1;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
CNSTF4 1065353216
SUBF4
ASGNF4
line 458
;458:	}
LABELV $210
line 461
;459:
;460:	//CG_Printf( "Plum origin %i %i %i -- %i\n", (int)org[0], (int)org[1], (int)org[2], (int)Distance(org, lastPos));
;461:	VectorCopy(org, lastPos);
ADDRGP4 $200
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 464
;462:
;463:
;464:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 466
;465:
;466:	re->reType = RT_SPRITE;
ADDRLP4 4
INDIRP4
CNSTI4 2
ASGNI4
line 467
;467:	re->radius = 64;
ADDRLP4 4
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1115684864
ASGNF4
line 468
;468:    re->rotation = 0;
ADDRLP4 4
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 0
ASGNF4
line 470
;469:
;470:	VectorClear(angles);
ADDRLP4 44
CNSTF4 0
ASGNF4
ADDRLP4 8+8
ADDRLP4 44
INDIRF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 44
INDIRF4
ASGNF4
ADDRLP4 8
ADDRLP4 44
INDIRF4
ASGNF4
line 471
;471:	AnglesToAxis( angles, re->axis );
ADDRLP4 8
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 472
;472:}
LABELV $199
endproc CG_ScorePlum 48 8
export CG_MakeExplosion
proc CG_MakeExplosion 60 8
line 482
;473:
;474:
;475:/*
;476:====================
;477:CG_MakeExplosion
;478:====================
;479:*/
;480:localEntity_t *CG_MakeExplosion( vec3_t origin, vec3_t dir, 
;481:								qhandle_t hModel, qhandle_t shader,
;482:								int msec, qboolean isSprite ) {
line 488
;483:	float			ang;
;484:	localEntity_t	*ex;
;485:	int				offset;
;486:	vec3_t			tmpVec, newOrigin;
;487:
;488:	if ( msec <= 0 ) {
ADDRFP4 16
INDIRI4
CNSTI4 0
GTI4 $217
line 489
;489:		CG_Error( "CG_MakeExplosion: msec = %i", msec );
ADDRGP4 $219
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 490
;490:	}
LABELV $217
line 493
;491:
;492:	// skew the time a bit so they aren't all in sync
;493:	offset = rand() & 63;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 36
INDIRI4
CNSTI4 63
BANDI4
ASGNI4
line 495
;494:
;495:	ex = CG_AllocLocalEntity();
ADDRLP4 40
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
line 496
;496:	if ( isSprite ) {
ADDRFP4 20
INDIRI4
CNSTI4 0
EQI4 $220
line 497
;497:		ex->leType = LE_SPRITE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 2
ASGNI4
line 500
;498:
;499:		// randomly rotate sprite orientation
;500:		ex->refEntity.rotation = rand() % 360;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 44
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 501
;501:		VectorScale( dir, 16, tmpVec );
ADDRLP4 48
CNSTF4 1098907648
ASGNF4
ADDRLP4 52
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 48
INDIRF4
ADDRLP4 52
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 48
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 16+8
CNSTF4 1098907648
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 502
;502:		VectorAdd( tmpVec, origin, newOrigin );
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRF4
ADDRLP4 56
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 16+4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 16+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 503
;503:	} else {
ADDRGP4 $221
JUMPV
LABELV $220
line 504
;504:		ex->leType = LE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 1
ASGNI4
line 505
;505:		VectorCopy( origin, newOrigin );
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 508
;506:
;507:		// set axis with random rotate
;508:		if ( !dir ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $228
line 509
;509:			AxisClear( ex->refEntity.axis );
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 510
;510:		} else {
ADDRGP4 $229
JUMPV
LABELV $228
line 511
;511:			ang = rand() % 360;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 44
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 512
;512:			VectorCopy( dir, ex->refEntity.axis[0] );
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 513
;513:			RotateAroundDirection( ex->refEntity.axis, ang );
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 32
INDIRF4
ARGF4
ADDRGP4 RotateAroundDirection
CALLV
pop
line 514
;514:		}
LABELV $229
line 515
;515:	}
LABELV $221
line 517
;516:
;517:	ex->startTime = cg.time - offset;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
ASGNI4
line 518
;518:	ex->endTime = ex->startTime + msec;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRFP4 16
INDIRI4
ADDI4
ASGNI4
line 521
;519:
;520:	// bias the time so all shader effects start correctly
;521:	ex->refEntity.shaderTime = ex->startTime / 1000.0f;
ADDRLP4 0
INDIRP4
CNSTI4 284
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 523
;522:
;523:	ex->refEntity.hModel = hModel;
ADDRLP4 0
INDIRP4
CNSTI4 164
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 524
;524:	ex->refEntity.customShader = shader;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
ADDRFP4 12
INDIRI4
ASGNI4
line 527
;525:
;526:	// set origin
;527:	VectorCopy( newOrigin, ex->refEntity.origin );
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 528
;528:	VectorCopy( newOrigin, ex->refEntity.oldorigin );
ADDRLP4 0
INDIRP4
CNSTI4 240
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 530
;529:
;530:	ex->color[0] = ex->color[1] = ex->color[2] = 1.0;
ADDRLP4 56
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
ADDRLP4 56
INDIRF4
ASGNF4
line 532
;531:
;532:	return ex;
ADDRLP4 0
INDIRP4
RETP4
LABELV $216
endproc CG_MakeExplosion 60 8
export CG_Bleed
proc CG_Bleed 20 0
line 543
;533:}
;534:
;535:
;536:/*
;537:=================
;538:CG_Bleed
;539:
;540:This is the spurt of blood when a character gets hit
;541:=================
;542:*/
;543:void CG_Bleed( vec3_t origin, int entityNum ) {
line 546
;544:	localEntity_t	*ex;
;545:
;546:	if ( !cg_blood.integer ) {
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $232
line 547
;547:		return;
ADDRGP4 $231
JUMPV
LABELV $232
line 550
;548:	}
;549:
;550:	ex = CG_AllocLocalEntity();
ADDRLP4 4
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 551
;551:	ex->leType = LE_EXPLOSION;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 1
ASGNI4
line 553
;552:
;553:	ex->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 554
;554:	ex->endTime = ex->startTime + 500;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 556
;555:	
;556:	VectorCopy ( origin, ex->refEntity.origin);
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 557
;557:	ex->refEntity.reType = RT_SPRITE;
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
CNSTI4 2
ASGNI4
line 558
;558:	ex->refEntity.rotation = rand() % 360;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 292
ADDP4
ADDRLP4 12
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 559
;559:	ex->refEntity.radius = 24;
ADDRLP4 0
INDIRP4
CNSTI4 288
ADDP4
CNSTF4 1103101952
ASGNF4
line 561
;560:
;561:	ex->refEntity.customShader = cgs.media.bloodExplosionShader;
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
ADDRGP4 cgs+956380+1680
INDIRI4
ASGNI4
line 564
;562:
;563:	// don't show player's own blood in view
;564:	if ( entityNum == cg.snap->ps.clientNum ) {
ADDRFP4 4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $238
line 565
;565:		ex->refEntity.renderfx |= RF_THIRD_PERSON;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 160
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 566
;566:	}
LABELV $238
line 567
;567:}
LABELV $231
endproc CG_Bleed 20 0
export CG_SpurtBlood
proc CG_SpurtBlood 48 48
line 576
;568:
;569:
;570:
;571:/*
;572:==================
;573:CG_SpurtBlood (LEILEI)
;574:==================
;575:*/
;576:void CG_SpurtBlood( vec3_t origin, vec3_t velocity, int hard ) {
line 578
;577:	localEntity_t	*blood;
;578:		if ( !cg_blood.integer ) {	return;	}
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $242
ADDRGP4 $241
JUMPV
LABELV $242
line 581
;579:
;580:	
;581:	velocity[0] = velocity[0] * hard * crandom()*460;
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTF4 1139146752
ADDRLP4 8
INDIRP4
INDIRF4
ADDRFP4 8
INDIRI4
CVIF4 4
MULF4
CNSTF4 1073741824
ADDRLP4 4
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 582
;582:	velocity[1] = velocity[1] * hard * crandom()*460;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTF4 1139146752
ADDRLP4 16
INDIRP4
INDIRF4
ADDRFP4 8
INDIRI4
CVIF4 4
MULF4
CNSTF4 1073741824
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 583
;583:	velocity[2] = velocity[2] * hard * crandom()*566 + 65;
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 24
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTF4 1141735424
ADDRLP4 24
INDIRP4
INDIRF4
ADDRFP4 8
INDIRI4
CVIF4 4
MULF4
CNSTF4 1073741824
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
CNSTF4 1115815936
ADDF4
ASGNF4
line 584
;584:		blood = CG_SmokePuff( origin, velocity, 
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
CNSTF4 1101529088
ARGF4
ADDRLP4 28
CNSTF4 1065353216
ASGNF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
CNSTF4 1159274496
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1340
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 36
INDIRP4
ASGNP4
line 593
;585:					21,		// radius
;586:					  1, 1, 1, 1,	// color
;587:					 2450,		// trailTime
;588:					 cg.time,		// startTime
;589:					  0,		// fadeInTime
;590:					  0,		// flags
;591:					  cgs.media.lbldShader1 );
;592:		// use the optimized version
;593:		blood->leType = LE_FALL_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 6
ASGNI4
line 594
;594:		blood->leType = LE_GORE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 14
ASGNI4
line 595
;595:		blood->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 596
;596:		VectorCopy( velocity, blood->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 597
;597:		blood->pos.trDelta[2] = 55;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1113325568
ASGNF4
line 598
;598:		if (crandom() < 0.5){
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44
CNSTF4 1056964608
ASGNF4
CNSTF4 1073741824
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 44
INDIRF4
SUBF4
MULF4
ADDRLP4 44
INDIRF4
GEF4 $248
line 599
;599:		blood->leMarkType = LEMT_BURN;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 1
ASGNI4
line 600
;600:		blood->leBounceSoundType = LEBS_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 1
ASGNI4
line 601
;601:		}
LABELV $248
line 604
;602:	//	VectorCopy( velocity, blood->pos.trDelta );
;603:
;604:}
LABELV $241
endproc CG_SpurtBlood 48 48
export CG_LaunchGib
proc CG_LaunchGib 16 8
line 610
;605:/*
;606:==================
;607:CG_LaunchGib
;608:==================
;609:*/
;610:void CG_LaunchGib( vec3_t origin, vec3_t velocity, qhandle_t hModel ) {
line 614
;611:	localEntity_t	*le;
;612:	refEntity_t		*re;
;613:
;614:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 615
;615:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 617
;616:
;617:	le->leType = LE_FRAGMENT2;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 4
ASGNI4
line 618
;618:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 619
;619:	le->endTime = le->startTime  + cg_gibtime.integer * 1000;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 1000
ADDRGP4 cg_gibtime+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 620
;620:	VectorCopy( origin, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 621
;621:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 622
;622:	re->hModel = hModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 624
;623:
;624:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 625
;625:	VectorCopy( origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 626
;626:	VectorCopy( velocity, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 627
;627:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 629
;628:
;629:	le->bounceFactor = 0.6f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1058642330
ASGNF4
line 631
;630:
;631:	le->leBounceSoundType = LEBS_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 1
ASGNI4
line 632
;632:	le->leMarkType = LEMT_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 2
ASGNI4
line 633
;633:}
LABELV $250
endproc CG_LaunchGib 16 8
export CG_GibPlayer
proc CG_GibPlayer 312 12
line 648
;634:
;635:
;636:
;637:
;638:
;639:/*
;640:===================
;641:CG_GibPlayer
;642:
;643:Generated a bunch of gibs launching out from the bodies location
;644:===================
;645:*/
;646:#define	GIB_VELOCITY	atof(cg_gibvelocity.string)
;647:#define	GIB_JUMP		atof(cg_gibjump.string)
;648:void CG_GibPlayer( vec3_t playerOrigin ) {
line 652
;649:	vec3_t	origin, velocity;
;650:	int	j;
;651:
;652:	if ( !cg_blood.integer ) {
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $255
line 653
;653:		return;
ADDRGP4 $254
JUMPV
LABELV $255
line 656
;654:	}
;655:
;656:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 657
;657:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 32
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 32
INDIRF4
MULF4
ASGNF4
line 658
;658:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 40
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1073741824
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 40
INDIRF4
MULF4
ASGNF4
line 659
;659:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
ADDRGP4 cg_gibjump+16
ARGP4
ADDRLP4 44
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 52
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 44
INDIRF4
CNSTF4 1073741824
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
ASGNF4
line 660
;660:	if ( rand() & 1 ) {
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $264
line 661
;661:		CG_LaunchGib( origin, velocity, cgs.media.gibSkull );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+240
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 662
;662:	} else {
ADDRGP4 $265
JUMPV
LABELV $264
line 663
;663:		CG_LaunchGib( origin, velocity, cgs.media.gibBrain );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+244
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 664
;664:	}
LABELV $265
line 667
;665:
;666:	// allow gibs to be turned off for speed
;667:	if ( !cg_gibs.integer ) {
ADDRGP4 cg_gibs+12
INDIRI4
CNSTI4 0
NEI4 $270
line 668
;668:		return;
ADDRGP4 $254
JUMPV
LABELV $270
line 671
;669:	}
;670:
;671:for(j = 1; j <= cg_gibmodifier.integer; j++){
ADDRLP4 24
CNSTI4 1
ASGNI4
ADDRGP4 $276
JUMPV
LABELV $273
line 672
;672:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 673
;673:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 64
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 64
INDIRF4
MULF4
ASGNF4
line 674
;674:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 72
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1073741824
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 72
INDIRF4
MULF4
ASGNF4
line 675
;675:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
ADDRGP4 cg_gibjump+16
ARGP4
ADDRLP4 76
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 84
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 76
INDIRF4
CNSTF4 1073741824
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 84
INDIRF4
MULF4
ADDF4
ASGNF4
line 676
;676:	CG_LaunchGib( origin, velocity, cgs.media.gibAbdomen );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+208
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 678
;677:
;678:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 679
;679:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 92
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 680
;680:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 100
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1073741824
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 100
INDIRF4
MULF4
ASGNF4
line 681
;681:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
ADDRGP4 cg_gibjump+16
ARGP4
ADDRLP4 104
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 112
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 104
INDIRF4
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
line 682
;682:	CG_LaunchGib( origin, velocity, cgs.media.gibArm );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+212
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 684
;683:
;684:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 685
;685:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 120
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 120
INDIRF4
MULF4
ASGNF4
line 686
;686:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 128
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1073741824
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 128
INDIRF4
MULF4
ASGNF4
line 687
;687:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
ADDRGP4 cg_gibjump+16
ARGP4
ADDRLP4 132
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 140
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132
INDIRF4
CNSTF4 1073741824
ADDRLP4 136
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 140
INDIRF4
MULF4
ADDF4
ASGNF4
line 688
;688:	CG_LaunchGib( origin, velocity, cgs.media.gibChest );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+216
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 690
;689:
;690:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 691
;691:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 144
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 148
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 144
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 148
INDIRF4
MULF4
ASGNF4
line 692
;692:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 152
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 156
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1073741824
ADDRLP4 152
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 156
INDIRF4
MULF4
ASGNF4
line 693
;693:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
ADDRGP4 cg_gibjump+16
ARGP4
ADDRLP4 160
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 164
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 168
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 160
INDIRF4
CNSTF4 1073741824
ADDRLP4 164
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 168
INDIRF4
MULF4
ADDF4
ASGNF4
line 694
;694:	CG_LaunchGib( origin, velocity, cgs.media.gibFist );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+220
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 696
;695:
;696:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 697
;697:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 172
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 176
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 172
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
line 698
;698:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 180
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 184
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1073741824
ADDRLP4 180
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 184
INDIRF4
MULF4
ASGNF4
line 699
;699:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
ADDRGP4 cg_gibjump+16
ARGP4
ADDRLP4 188
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 192
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 196
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 188
INDIRF4
CNSTF4 1073741824
ADDRLP4 192
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 196
INDIRF4
MULF4
ADDF4
ASGNF4
line 700
;700:	CG_LaunchGib( origin, velocity, cgs.media.gibFoot );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+224
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 702
;701:
;702:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 703
;703:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 200
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 204
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 200
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 204
INDIRF4
MULF4
ASGNF4
line 704
;704:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 208
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 212
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1073741824
ADDRLP4 208
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 212
INDIRF4
MULF4
ASGNF4
line 705
;705:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
ADDRGP4 cg_gibjump+16
ARGP4
ADDRLP4 216
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 220
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 224
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 216
INDIRF4
CNSTF4 1073741824
ADDRLP4 220
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 224
INDIRF4
MULF4
ADDF4
ASGNF4
line 706
;706:	CG_LaunchGib( origin, velocity, cgs.media.gibForearm );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+228
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 708
;707:
;708:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 709
;709:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 228
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 232
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 228
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 232
INDIRF4
MULF4
ASGNF4
line 710
;710:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 236
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 240
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1073741824
ADDRLP4 236
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 240
INDIRF4
MULF4
ASGNF4
line 711
;711:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
ADDRGP4 cg_gibjump+16
ARGP4
ADDRLP4 244
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 248
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 252
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 244
INDIRF4
CNSTF4 1073741824
ADDRLP4 248
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 252
INDIRF4
MULF4
ADDF4
ASGNF4
line 712
;712:	CG_LaunchGib( origin, velocity, cgs.media.gibIntestine );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+232
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 714
;713:
;714:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 715
;715:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 256
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 260
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 256
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 260
INDIRF4
MULF4
ASGNF4
line 716
;716:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 264
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 268
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1073741824
ADDRLP4 264
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 268
INDIRF4
MULF4
ASGNF4
line 717
;717:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
ADDRGP4 cg_gibjump+16
ARGP4
ADDRLP4 272
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 276
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 280
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 272
INDIRF4
CNSTF4 1073741824
ADDRLP4 276
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 280
INDIRF4
MULF4
ADDF4
ASGNF4
line 718
;718:	CG_LaunchGib( origin, velocity, cgs.media.gibLeg );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+236
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 720
;719:
;720:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 721
;721:	velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 284
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 288
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 284
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 288
INDIRF4
MULF4
ASGNF4
line 722
;722:	velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 292
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 296
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+4
CNSTF4 1073741824
ADDRLP4 292
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 296
INDIRF4
MULF4
ASGNF4
line 723
;723:	velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
ADDRGP4 cg_gibjump+16
ARGP4
ADDRLP4 300
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 304
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 308
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 300
INDIRF4
CNSTF4 1073741824
ADDRLP4 304
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 308
INDIRF4
MULF4
ADDF4
ASGNF4
line 724
;724:	CG_LaunchGib( origin, velocity, cgs.media.gibLeg );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+236
INDIRI4
ARGI4
ADDRGP4 CG_LaunchGib
CALLV
pop
line 725
;725:}
LABELV $274
line 671
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $276
ADDRLP4 24
INDIRI4
ADDRGP4 cg_gibmodifier+12
INDIRI4
LEI4 $273
line 726
;726:}
LABELV $254
endproc CG_GibPlayer 312 12
export CG_LaunchExplode
proc CG_LaunchExplode 16 8
line 733
;727:
;728:/*
;729:==================
;730:CG_LaunchGib
;731:==================
;732:*/
;733:void CG_LaunchExplode( vec3_t origin, vec3_t velocity, qhandle_t hModel ) {
line 737
;734:	localEntity_t	*le;
;735:	refEntity_t		*re;
;736:
;737:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 738
;738:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 740
;739:
;740:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 741
;741:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 742
;742:	le->endTime = le->startTime + cg_gibtime.integer * 1000;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 1000
ADDRGP4 cg_gibtime+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 744
;743:
;744:	VectorCopy( origin, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 745
;745:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 746
;746:	re->hModel = hModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 748
;747:
;748:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 749
;749:	VectorCopy( origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 750
;750:	VectorCopy( velocity, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 751
;751:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 753
;752:
;753:	le->bounceFactor = 0.1f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1036831949
ASGNF4
line 755
;754:
;755:	le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 756
;756:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 757
;757:}
LABELV $350
endproc CG_LaunchExplode 16 8
export CG_BigExplosion
proc CG_BigExplosion 92 12
line 768
;758:
;759:#define	EXP_VELOCITY	100
;760:#define	EXP_JUMP		150
;761:/*
;762:===================
;763:CG_GibPlayer
;764:
;765:Generated a bunch of gibs launching out from the bodies location
;766:===================
;767:*/
;768:void CG_BigExplosion( vec3_t playerOrigin ) {
line 771
;769:	vec3_t	origin, velocity;
;770:
;771:	if ( !cg_blood.integer ) {
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
NEI4 $355
line 772
;772:		return;
ADDRGP4 $354
JUMPV
LABELV $355
line 775
;773:	}
;774:
;775:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 776
;776:	velocity[0] = crandom()*EXP_VELOCITY;
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 24
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 777
;777:	velocity[1] = crandom()*EXP_VELOCITY;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 778
;778:	velocity[2] = EXP_JUMP + crandom()*EXP_VELOCITY;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 779
;779:	CG_LaunchExplode( origin, velocity, cgs.media.smoke2 );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+420
INDIRI4
ARGI4
ADDRGP4 CG_LaunchExplode
CALLV
pop
line 781
;780:
;781:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 782
;782:	velocity[0] = crandom()*EXP_VELOCITY;
ADDRLP4 36
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 36
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 783
;783:	velocity[1] = crandom()*EXP_VELOCITY;
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 784
;784:	velocity[2] = EXP_JUMP + crandom()*EXP_VELOCITY;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 785
;785:	CG_LaunchExplode( origin, velocity, cgs.media.smoke2 );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+420
INDIRI4
ARGI4
ADDRGP4 CG_LaunchExplode
CALLV
pop
line 787
;786:
;787:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 788
;788:	velocity[0] = crandom()*EXP_VELOCITY*1.5;
ADDRLP4 48
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
CNSTF4 1069547520
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 48
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 789
;789:	velocity[1] = crandom()*EXP_VELOCITY*1.5;
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
CNSTF4 1069547520
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 790
;790:	velocity[2] = EXP_JUMP + crandom()*EXP_VELOCITY;
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 791
;791:	CG_LaunchExplode( origin, velocity, cgs.media.smoke2 );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+420
INDIRI4
ARGI4
ADDRGP4 CG_LaunchExplode
CALLV
pop
line 793
;792:
;793:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 794
;794:	velocity[0] = crandom()*EXP_VELOCITY*2.0;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 64
CNSTF4 1073741824
ASGNF4
ADDRLP4 0
ADDRLP4 64
INDIRF4
CNSTF4 1120403456
ADDRLP4 64
INDIRF4
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 795
;795:	velocity[1] = crandom()*EXP_VELOCITY*2.0;
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 72
CNSTF4 1073741824
ASGNF4
ADDRLP4 0+4
ADDRLP4 72
INDIRF4
CNSTF4 1120403456
ADDRLP4 72
INDIRF4
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 796
;796:	velocity[2] = EXP_JUMP + crandom()*EXP_VELOCITY;
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 797
;797:	CG_LaunchExplode( origin, velocity, cgs.media.smoke2 );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+420
INDIRI4
ARGI4
ADDRGP4 CG_LaunchExplode
CALLV
pop
line 799
;798:
;799:	VectorCopy( playerOrigin, origin );
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 800
;800:	velocity[0] = crandom()*EXP_VELOCITY*2.5;
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
CNSTF4 1075838976
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 801
;801:	velocity[1] = crandom()*EXP_VELOCITY*2.5;
ADDRLP4 84
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
CNSTF4 1075838976
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 84
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 802
;802:	velocity[2] = EXP_JUMP + crandom()*EXP_VELOCITY;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 88
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 803
;803:	CG_LaunchExplode( origin, velocity, cgs.media.smoke2 );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 cgs+956380+420
INDIRI4
ARGI4
ADDRGP4 CG_LaunchExplode
CALLV
pop
line 804
;804:}
LABELV $354
endproc CG_BigExplosion 92 12
export CG_LaunchFragment
proc CG_LaunchFragment 20 8
line 811
;805:
;806:/*
;807:==================
;808:CG_LaunchFragment
;809:==================
;810:*/
;811:void CG_LaunchFragment( vec3_t origin, vec3_t velocity, leTrailType_t trailType, qhandle_t hModel ) {
line 815
;812:	localEntity_t	*le;
;813:	refEntity_t		*re;
;814:
;815:	le = CG_AllocLocalEntity();
ADDRLP4 8
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 816
;816:	re = &le->refEntity;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 818
;817:
;818:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 819
;819:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 820
;820:	le->endTime = le->startTime + 80000 + random() * 3000;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 80000
ADDI4
CVIF4 4
CNSTF4 1161527296
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 822
;821:
;822:	VectorCopy( origin, re->origin );
ADDRLP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 823
;823:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 824
;824:	re->hModel = hModel;
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 12
INDIRI4
ASGNI4
line 826
;825:
;826:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 827
;827:	VectorCopy( origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 828
;828:	VectorCopy( velocity, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 829
;829:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 831
;830:
;831:	le->bounceFactor = 0.6f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1058642330
ASGNF4
line 833
;832:
;833:	if ( trailType == LETT_BLOOD ) {
ADDRFP4 8
INDIRI4
CNSTI4 1
NEI4 $381
line 834
;834:		le->leBounceSoundType = LEBS_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 1
ASGNI4
line 835
;835:		le->leMarkType = LEMT_BLOOD;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 2
ASGNI4
line 836
;836:	} else {
ADDRGP4 $382
JUMPV
LABELV $381
line 837
;837:		le->leBounceSoundType = LEBS_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 838
;838:		le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 839
;839:	}
LABELV $382
line 842
;840:
;841:	
;842:	le->leTrailType = trailType;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 843
;843:}
LABELV $378
endproc CG_LaunchFragment 20 8
export CG_ShowDebris
proc CG_ShowDebris 84 16
line 852
;844:
;845:/*
;846:===================
;847:CG_ShowDebris
;848:
;849:Generated a bunch of debris launching out from an entity's location
;850:===================
;851:*/
;852:void CG_ShowDebris( vec3_t srcOrigin, int count, int evType ) {
line 856
;853:	vec3_t	origin, velocity;
;854:	int i, r;
;855:
;856:	for (i = 0; i < count; i++) {
ADDRLP4 28
CNSTI4 0
ASGNI4
ADDRGP4 $387
JUMPV
LABELV $384
line 857
;857:		VectorCopy( srcOrigin, origin );
ADDRLP4 16
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 858
;858:		velocity[0] = crandom()*GIB_VELOCITY;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 36
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
CNSTF4 1073741824
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
line 859
;859:		velocity[1] = crandom()*GIB_VELOCITY;
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 44
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4+4
CNSTF4 1073741824
ADDRLP4 40
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 44
INDIRF4
MULF4
ASGNF4
line 860
;860:		velocity[2] = GIB_JUMP + crandom()*GIB_VELOCITY;
ADDRGP4 cg_gibjump+16
ARGP4
ADDRLP4 48
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 cg_gibvelocity+16
ARGP4
ADDRLP4 56
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 48
INDIRF4
CNSTF4 1073741824
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRLP4 56
INDIRF4
MULF4
ADDF4
ASGNF4
line 862
;861:		
;862:		if ( evType == EV_EMIT_DEBRIS_LIGHT ) {
ADDRFP4 8
INDIRI4
CNSTI4 84
NEI4 $394
line 863
;863:			r = rand() % 8;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
CNSTI4 8
MODI4
ASGNI4
line 864
;864:			if (r == 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $396
line 865
;865:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrislight1 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+248
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $397
JUMPV
LABELV $396
line 866
;866:			else if (r == 1)
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $400
line 867
;867:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrislight2 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+252
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $401
JUMPV
LABELV $400
line 868
;868:			else if (r == 2)
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $404
line 869
;869:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrislight3 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+256
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $405
JUMPV
LABELV $404
line 870
;870:			else if (r == 3)
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $408
line 871
;871:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrislight4 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+260
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $409
JUMPV
LABELV $408
line 872
;872:			else if (r == 4)
ADDRLP4 0
INDIRI4
CNSTI4 4
NEI4 $412
line 873
;873:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrislight5 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+264
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $413
JUMPV
LABELV $412
line 874
;874:			else if (r == 5)
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $416
line 875
;875:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrislight6 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+268
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $417
JUMPV
LABELV $416
line 876
;876:			else if (r == 6)
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $420
line 877
;877:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrislight7 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+272
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $421
JUMPV
LABELV $420
line 878
;878:			else if (r == 7)
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $424
line 879
;879:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrislight8 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+276
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
LABELV $424
LABELV $421
LABELV $417
LABELV $413
LABELV $409
LABELV $405
LABELV $401
LABELV $397
line 880
;880:		}
LABELV $394
line 882
;881:
;882:		if ( evType == EV_EMIT_DEBRIS_DARK ) {
ADDRFP4 8
INDIRI4
CNSTI4 85
NEI4 $428
line 883
;883:			r = rand() % 8;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
CNSTI4 8
MODI4
ASGNI4
line 884
;884:			if (r == 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $430
line 885
;885:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrisdark1 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+280
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $431
JUMPV
LABELV $430
line 886
;886:			else if (r == 1)
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $434
line 887
;887:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrisdark2 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+284
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $435
JUMPV
LABELV $434
line 888
;888:			else if (r == 2)
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $438
line 889
;889:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrisdark3 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+288
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $439
JUMPV
LABELV $438
line 890
;890:			else if (r == 3)
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $442
line 891
;891:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrisdark4 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+292
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $443
JUMPV
LABELV $442
line 892
;892:			else if (r == 4)
ADDRLP4 0
INDIRI4
CNSTI4 4
NEI4 $446
line 893
;893:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrisdark5 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+296
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $447
JUMPV
LABELV $446
line 894
;894:			else if (r == 5)
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $450
line 895
;895:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrisdark6 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+300
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $451
JUMPV
LABELV $450
line 896
;896:			else if (r == 6)
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $454
line 897
;897:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrisdark7 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+304
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $455
JUMPV
LABELV $454
line 898
;898:			else if (r == 7)
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $458
line 899
;899:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrisdark8 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+308
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
LABELV $458
LABELV $455
LABELV $451
LABELV $447
LABELV $443
LABELV $439
LABELV $435
LABELV $431
line 900
;900:		}
LABELV $428
line 902
;901:
;902:		if ( evType == EV_EMIT_DEBRIS_LIGHT_LARGE ) {
ADDRFP4 8
INDIRI4
CNSTI4 86
NEI4 $462
line 903
;903:			r = rand() % 3;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
CNSTI4 3
MODI4
ASGNI4
line 904
;904:			if (r == 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $464
line 905
;905:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrislightlarge1 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+312
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $465
JUMPV
LABELV $464
line 906
;906:			else if (r == 1)
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $468
line 907
;907:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrislightlarge2 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+316
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $469
JUMPV
LABELV $468
line 908
;908:			else if (r == 2)
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $472
line 909
;909:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrislightlarge3 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+320
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
LABELV $472
LABELV $469
LABELV $465
line 910
;910:		}
LABELV $462
line 912
;911:
;912:		if ( evType == EV_EMIT_DEBRIS_DARK_LARGE ) {
ADDRFP4 8
INDIRI4
CNSTI4 87
NEI4 $476
line 913
;913:			r = rand() % 3;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
CNSTI4 3
MODI4
ASGNI4
line 914
;914:			if (r == 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $478
line 915
;915:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrisdarklarge1 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+324
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $479
JUMPV
LABELV $478
line 916
;916:			else if (r == 1)
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $482
line 917
;917:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrisdarklarge2 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+328
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $483
JUMPV
LABELV $482
line 918
;918:			else if (r == 2)
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $486
line 919
;919:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_CONCRETE, cgs.media.debrisdarklarge3 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 cgs+956380+332
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
LABELV $486
LABELV $483
LABELV $479
line 920
;920:		}
LABELV $476
line 922
;921:
;922:		if ( evType == EV_EMIT_DEBRIS_WOOD ) {
ADDRFP4 8
INDIRI4
CNSTI4 88
NEI4 $490
line 923
;923:			r = rand() % 5;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
CNSTI4 5
MODI4
ASGNI4
line 924
;924:			if (r == 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $492
line 925
;925:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_WOOD, cgs.media.debriswood1 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 cgs+956380+336
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $493
JUMPV
LABELV $492
line 926
;926:			else if (r == 1)
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $496
line 927
;927:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_WOOD, cgs.media.debriswood2 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 cgs+956380+340
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $497
JUMPV
LABELV $496
line 928
;928:			else if (r == 2)
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $500
line 929
;929:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_WOOD, cgs.media.debriswood3 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 cgs+956380+344
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $501
JUMPV
LABELV $500
line 930
;930:			else if (r == 3)
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $504
line 931
;931:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_WOOD, cgs.media.debriswood4 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 cgs+956380+348
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $505
JUMPV
LABELV $504
line 932
;932:			else if (r == 4)
ADDRLP4 0
INDIRI4
CNSTI4 4
NEI4 $508
line 933
;933:				CG_LaunchFragment( origin, velocity, LETT_DEBRIS_WOOD, cgs.media.debriswood5 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 cgs+956380+352
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
LABELV $508
LABELV $505
LABELV $501
LABELV $497
LABELV $493
line 934
;934:		}
LABELV $490
line 936
;935:
;936:		if ( evType == EV_EMIT_DEBRIS_FLESH ) {
ADDRFP4 8
INDIRI4
CNSTI4 89
NEI4 $512
line 937
;937:			r = rand() % 10;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
CNSTI4 10
MODI4
ASGNI4
line 938
;938:			if (r == 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $514
line 939
;939:				CG_LaunchFragment( origin, velocity, LETT_BLOOD, cgs.media.gibSkull );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 cgs+956380+240
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $515
JUMPV
LABELV $514
line 940
;940:			else if (r == 1)
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $518
line 941
;941:				CG_LaunchFragment( origin, velocity, LETT_BLOOD, cgs.media.gibBrain );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 cgs+956380+244
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $519
JUMPV
LABELV $518
line 942
;942:			else if (r == 2)
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $522
line 943
;943:				CG_LaunchFragment( origin, velocity, LETT_BLOOD, cgs.media.gibAbdomen );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 cgs+956380+208
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $523
JUMPV
LABELV $522
line 944
;944:			else if (r == 3)
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $526
line 945
;945:				CG_LaunchFragment( origin, velocity, LETT_BLOOD, cgs.media.gibArm );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 cgs+956380+212
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $527
JUMPV
LABELV $526
line 946
;946:			else if (r == 4)
ADDRLP4 0
INDIRI4
CNSTI4 4
NEI4 $530
line 947
;947:				CG_LaunchFragment( origin, velocity, LETT_BLOOD, cgs.media.gibChest );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 cgs+956380+216
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $531
JUMPV
LABELV $530
line 948
;948:			else if (r == 5)
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $534
line 949
;949:				CG_LaunchFragment( origin, velocity, LETT_BLOOD, cgs.media.gibFist );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 cgs+956380+220
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $535
JUMPV
LABELV $534
line 950
;950:			else if (r == 6)
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $538
line 951
;951:				CG_LaunchFragment( origin, velocity, LETT_BLOOD, cgs.media.gibFoot );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 cgs+956380+224
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $539
JUMPV
LABELV $538
line 952
;952:			else if (r == 7)
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $542
line 953
;953:				CG_LaunchFragment( origin, velocity, LETT_BLOOD, cgs.media.gibForearm );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 cgs+956380+228
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $543
JUMPV
LABELV $542
line 954
;954:			else if (r == 8)
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $546
line 955
;955:				CG_LaunchFragment( origin, velocity, LETT_BLOOD, cgs.media.gibIntestine );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 cgs+956380+232
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $547
JUMPV
LABELV $546
line 956
;956:			else if (r == 9)
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $550
line 957
;957:				CG_LaunchFragment( origin, velocity, LETT_BLOOD, cgs.media.gibLeg );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 cgs+956380+236
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
LABELV $550
LABELV $547
LABELV $543
LABELV $539
LABELV $535
LABELV $531
LABELV $527
LABELV $523
LABELV $519
LABELV $515
line 958
;958:		}
LABELV $512
line 960
;959:
;960:		if ( evType == EV_EMIT_DEBRIS_GLASS ) {
ADDRFP4 8
INDIRI4
CNSTI4 90
NEI4 $554
line 961
;961:			r = rand() % 15;	//we're getting twice the number of small shards as big shards this way
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
CNSTI4 15
MODI4
ASGNI4
line 962
;962:			if (r == 0 || r == 1)
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $558
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $556
LABELV $558
line 963
;963:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisglass1 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+356
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $557
JUMPV
LABELV $556
line 964
;964:			else if (r == 2 || r == 3)
ADDRLP4 0
INDIRI4
CNSTI4 2
EQI4 $563
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $561
LABELV $563
line 965
;965:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisglass2 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+360
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $562
JUMPV
LABELV $561
line 966
;966:			else if (r == 4 || r == 5)
ADDRLP4 0
INDIRI4
CNSTI4 4
EQI4 $568
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $566
LABELV $568
line 967
;967:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisglass3 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+364
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $567
JUMPV
LABELV $566
line 968
;968:			else if (r == 6 || r == 7)
ADDRLP4 0
INDIRI4
CNSTI4 6
EQI4 $573
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $571
LABELV $573
line 969
;969:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisglass4 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+368
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $572
JUMPV
LABELV $571
line 970
;970:			else if (r == 8 || r == 9)
ADDRLP4 0
INDIRI4
CNSTI4 8
EQI4 $578
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $576
LABELV $578
line 971
;971:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisglass5 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+372
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $577
JUMPV
LABELV $576
line 972
;972:			else if (r == 10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $581
line 973
;973:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisglasslarge1 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+376
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $582
JUMPV
LABELV $581
line 974
;974:			else if (r == 11)
ADDRLP4 0
INDIRI4
CNSTI4 11
NEI4 $585
line 975
;975:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisglasslarge2 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+380
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $586
JUMPV
LABELV $585
line 976
;976:			else if (r == 12)
ADDRLP4 0
INDIRI4
CNSTI4 12
NEI4 $589
line 977
;977:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisglasslarge3 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+384
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $590
JUMPV
LABELV $589
line 978
;978:			else if (r == 13)
ADDRLP4 0
INDIRI4
CNSTI4 13
NEI4 $593
line 979
;979:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisglasslarge4 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+388
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $594
JUMPV
LABELV $593
line 980
;980:			else if (r == 14)
ADDRLP4 0
INDIRI4
CNSTI4 14
NEI4 $597
line 981
;981:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisglasslarge5 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+392
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
LABELV $597
LABELV $594
LABELV $590
LABELV $586
LABELV $582
LABELV $577
LABELV $572
LABELV $567
LABELV $562
LABELV $557
line 982
;982:		}
LABELV $554
line 984
;983:
;984:		if ( evType == EV_EMIT_DEBRIS_STONE ) {
ADDRFP4 8
INDIRI4
CNSTI4 91
NEI4 $601
line 985
;985:			r = rand() % 5;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
CNSTI4 5
MODI4
ASGNI4
line 986
;986:			if (r == 0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $603
line 987
;987:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisstone1 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+396
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $604
JUMPV
LABELV $603
line 988
;988:			else if (r == 1)
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $607
line 989
;989:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisstone2 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+400
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $608
JUMPV
LABELV $607
line 990
;990:			else if (r == 2)
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $611
line 991
;991:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisstone3 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+404
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $612
JUMPV
LABELV $611
line 992
;992:			else if (r == 3)
ADDRLP4 0
INDIRI4
CNSTI4 3
NEI4 $615
line 993
;993:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisstone4 );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+408
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
ADDRGP4 $616
JUMPV
LABELV $615
line 994
;994:			else if (r == 4)
ADDRLP4 0
INDIRI4
CNSTI4 4
NEI4 $619
line 995
;995:				CG_LaunchFragment( origin, velocity, LETT_NONE, cgs.media.debrisstone5 );		
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+412
INDIRI4
ARGI4
ADDRGP4 CG_LaunchFragment
CALLV
pop
LABELV $619
LABELV $616
LABELV $612
LABELV $608
LABELV $604
line 996
;996:		}
LABELV $601
line 997
;997:	}
LABELV $385
line 856
ADDRLP4 28
ADDRLP4 28
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $387
ADDRLP4 28
INDIRI4
ADDRFP4 4
INDIRI4
LTI4 $384
line 998
;998:}
LABELV $383
endproc CG_ShowDebris 84 16
data
export flagEarthquake
align 4
LABELV flagEarthquake
byte 4 0
export earthquakeIntensity
align 4
LABELV earthquakeIntensity
byte 4 0
export earthquakeStoptime
align 4
LABELV earthquakeStoptime
byte 4 0
export CG_StartEarthquake
code
proc CG_StartEarthquake 0 0
line 1013
;999:
;1000:
;1001:/*
;1002:===================
;1003:CG_StartEarthquake
;1004:
;1005:Starts an earthquake effect
;1006:===================
;1007:*/
;1008:int flagEarthquake = qfalse;
;1009:int earthquakeIntensity = 0;
;1010:int earthquakeStoptime = 0;
;1011:
;1012:void CG_StartEarthquake(int intensity, int duration)
;1013:{
line 1014
;1014:	flagEarthquake = qtrue;
ADDRGP4 flagEarthquake
CNSTI4 1
ASGNI4
line 1015
;1015:	if ( intensity < earthquakeIntensity )
ADDRFP4 0
INDIRI4
ADDRGP4 earthquakeIntensity
INDIRI4
GEI4 $624
line 1016
;1016:		return;
ADDRGP4 $623
JUMPV
LABELV $624
line 1018
;1017:	
;1018:	earthquakeIntensity = intensity;
ADDRGP4 earthquakeIntensity
ADDRFP4 0
INDIRI4
ASGNI4
line 1019
;1019:	earthquakeStoptime = cg.time + duration;
ADDRGP4 earthquakeStoptime
ADDRGP4 cg+1868892
INDIRI4
ADDRFP4 4
INDIRI4
ADDI4
ASGNI4
line 1020
;1020:}
LABELV $623
endproc CG_StartEarthquake 0 0
bss
align 4
LABELV $628
skip 4
align 4
LABELV $629
skip 4
align 4
LABELV $630
skip 4
data
align 4
LABELV $631
byte 4 0
export CG_Earthquake
code
proc CG_Earthquake 36 8
line 1023
;1021:
;1022:void CG_Earthquake()
;1023:{
line 1028
;1024:	static float terremotoX, terremotoY, terremotoZ;
;1025:	static terremotoTime = 0;
;1026:	float realInt;
;1027:
;1028:	if ( !flagEarthquake )
ADDRGP4 flagEarthquake
INDIRI4
CNSTI4 0
NEI4 $632
line 1029
;1029:		return;
ADDRGP4 $627
JUMPV
LABELV $632
line 1031
;1030:
;1031:	if ( earthquakeStoptime < cg.time )
ADDRGP4 earthquakeStoptime
INDIRI4
ADDRGP4 cg+1868892
INDIRI4
GEI4 $634
line 1032
;1032:	{
line 1033
;1033:		flagEarthquake = qfalse;
ADDRGP4 flagEarthquake
CNSTI4 0
ASGNI4
line 1034
;1034:		earthquakeIntensity = 0;
ADDRGP4 earthquakeIntensity
CNSTI4 0
ASGNI4
line 1035
;1035:		return;
ADDRGP4 $627
JUMPV
LABELV $634
line 1038
;1036:	}
;1037:
;1038:	if ( terremotoTime < cg.time )
ADDRGP4 $631
INDIRI4
ADDRGP4 cg+1868892
INDIRI4
GEI4 $637
line 1039
;1039:	{
line 1040
;1040:		terremotoTime = cg.time += 50;
ADDRLP4 4
ADDRGP4 cg+1868892
ASGNP4
ADDRLP4 8
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 8
INDIRI4
ASGNI4
ADDRGP4 $631
ADDRLP4 8
INDIRI4
ASGNI4
line 1041
;1041:		realInt = ((float)earthquakeIntensity + 1.0) / 2.0;
ADDRLP4 0
ADDRGP4 earthquakeIntensity
INDIRI4
CVIF4 4
CNSTF4 1065353216
ADDF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 1042
;1042:		terremotoX = random() * realInt - realInt / 2;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 $628
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
DIVF4
SUBF4
ASGNF4
line 1043
;1043:		terremotoY = random() * realInt - realInt / 2;
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 $629
ADDRLP4 20
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
DIVF4
SUBF4
ASGNF4
line 1044
;1044:		terremotoZ = random() * realInt - realInt / 2;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRGP4 $630
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 0
INDIRF4
CNSTF4 1073741824
DIVF4
SUBF4
ASGNF4
line 1045
;1045:	}
LABELV $637
line 1046
;1046:	cg.refdefViewAngles[0] += terremotoX;
ADDRLP4 4
ADDRGP4 cg+1870984
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRF4
ADDRGP4 $628
INDIRF4
ADDF4
ASGNF4
line 1047
;1047:	cg.refdefViewAngles[1] += terremotoY;
ADDRLP4 8
ADDRGP4 cg+1870984+4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRGP4 $629
INDIRF4
ADDF4
ASGNF4
line 1048
;1048:	cg.refdefViewAngles[2] += terremotoZ;
ADDRLP4 12
ADDRGP4 cg+1870984+8
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRGP4 $630
INDIRF4
ADDF4
ASGNF4
line 1049
;1049:	AnglesToAxis( cg.refdefViewAngles, cg.refdef.viewaxis );
ADDRGP4 cg+1870984
ARGP4
ADDRGP4 cg+1870616+36
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1050
;1050:}
LABELV $627
endproc CG_Earthquake 36 8
export CG_Particles
proc CG_Particles 84 4
ADDRFP4 24
ADDRFP4 24
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
ADDRFP4 28
ADDRFP4 28
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
ADDRFP4 32
ADDRFP4 32
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 1059
;1051:
;1052:/*
;1053:===================
;1054:CG_ExplosionParticles
;1055:
;1056:Shows particles
;1057:===================
;1058:*/
;1059:void CG_Particles( vec3_t origin, int count, int speed, int lifetime, int radius, int type, byte r, byte g, byte b ) {
line 1067
;1060:	int jump; // amount to nudge the particles trajectory vector up by
;1061:	qhandle_t shader; // shader to use for the particles
;1062:	int index;
;1063:	vec3_t randVec, tempVec;
;1064:	qboolean moveUp;
;1065:
;1066:	//jump = 70;
;1067:	jump = speed;
ADDRLP4 32
ADDRFP4 8
INDIRI4
ASGNI4
line 1068
;1068:	shader = cgs.media.sparkShader;
ADDRLP4 36
ADDRGP4 cgs+956380+416
INDIRI4
ASGNI4
line 1070
;1069:
;1070:	for ( index = 0; index < count; index++ ) {
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRGP4 $655
JUMPV
LABELV $652
line 1074
;1071:		localEntity_t *le;
;1072:		refEntity_t *re;
;1073:
;1074:		le = CG_AllocLocalEntity(); //allocate a local entity
ADDRLP4 48
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 48
INDIRP4
ASGNP4
line 1075
;1075:		re = &le->refEntity;
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 1076
;1076:		le->leFlags = LEF_PUFF_DONT_SCALE; //don't change the particle size
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 1077
;1077:		le->leType = LE_MOVE_SCALE_FADE; // particle should fade over time
ADDRLP4 40
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 5
ASGNI4
line 1078
;1078:		le->startTime = cg.time; // set the start time of the particle to the current time
ADDRLP4 40
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 1079
;1079:		le->endTime = cg.time + lifetime + (random() * (lifetime / 2));	//life time will be anywhere between [lifetime] and [lifetime * 1.5]
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ADDRFP4 12
INDIRI4
ADDI4
CVIF4 4
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRFP4 12
INDIRI4
CNSTI4 2
DIVI4
CVIF4 4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1080
;1080:		le->lifeRate = 1.0 / ( le->endTime - le->startTime );
ADDRLP4 40
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 40
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 40
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 1081
;1081:		re = &le->refEntity;
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 1082
;1082:		re->shaderTime = cg.time / 1000.0f;
ADDRLP4 44
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 1083
;1083:		re->reType = RT_SPRITE;
ADDRLP4 44
INDIRP4
CNSTI4 2
ASGNI4
line 1084
;1084:		re->rotation = 0;
ADDRLP4 44
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 0
ASGNF4
line 1085
;1085:		re->radius = radius;
ADDRLP4 44
INDIRP4
CNSTI4 132
ADDP4
ADDRFP4 16
INDIRI4
CVIF4 4
ASGNF4
line 1086
;1086:		re->customShader = shader;
ADDRLP4 44
INDIRP4
CNSTI4 112
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
line 1087
;1087:		re->shaderRGBA[0] = r;
ADDRLP4 44
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 24
INDIRU1
ASGNU1
line 1088
;1088:		re->shaderRGBA[1] = g;
ADDRLP4 44
INDIRP4
CNSTI4 117
ADDP4
ADDRFP4 28
INDIRU1
ASGNU1
line 1089
;1089:		re->shaderRGBA[2] = b;
ADDRLP4 44
INDIRP4
CNSTI4 118
ADDP4
ADDRFP4 32
INDIRU1
ASGNU1
line 1090
;1090:		re->shaderRGBA[3] = 0xFF;
ADDRLP4 44
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 1091
;1091:		le->color[3] = 1.0;
ADDRLP4 40
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 1092
;1092:		if ( type == PT_GRAVITY )
ADDRFP4 20
INDIRI4
CNSTI4 0
NEI4 $659
line 1093
;1093:			le->pos.trType = TR_GRAVITY; // moves in a gravity affected arc
ADDRLP4 40
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $660
JUMPV
LABELV $659
line 1095
;1094:		else
;1095:			le->pos.trType = TR_LINEAR; // moves in straight line, outward from the origin
ADDRLP4 40
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
LABELV $660
line 1096
;1096:		le->pos.trTime = cg.time;
ADDRLP4 40
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 1097
;1097:		VectorCopy( origin, le->pos.trBase );
ADDRLP4 40
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 1098
;1098:		VectorCopy( origin, re->origin );
ADDRLP4 44
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 1100
;1099:
;1100:		tempVec[0] = crandom(); //between 1 and -1
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ASGNF4
line 1101
;1101:		tempVec[1] = crandom();
ADDRLP4 64
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
CNSTF4 1073741824
ADDRLP4 64
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ASGNF4
line 1102
;1102:		tempVec[2] = crandom();
ADDRLP4 68
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
CNSTF4 1073741824
ADDRLP4 68
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ASGNF4
line 1103
;1103:		VectorNormalize(tempVec);
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1104
;1104:		VectorScale(tempVec, speed, randVec);
ADDRLP4 72
ADDRFP4 8
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 72
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 72
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+8
ADDRLP4 0+8
INDIRF4
ADDRFP4 8
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 1106
;1105:
;1106:		if ( type == PT_GRAVITY || type == PT_LINEAR_UP )
ADDRLP4 76
ADDRFP4 20
INDIRI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $670
ADDRLP4 76
INDIRI4
CNSTI4 1
NEI4 $668
LABELV $670
line 1107
;1107:			moveUp = qtrue;
ADDRLP4 28
CNSTI4 1
ASGNI4
ADDRGP4 $669
JUMPV
LABELV $668
line 1108
;1108:		else if ( type == PT_LINEAR_DOWN )
ADDRFP4 20
INDIRI4
CNSTI4 2
NEI4 $671
line 1109
;1109:			moveUp = qfalse;
ADDRLP4 28
CNSTI4 0
ASGNI4
ADDRGP4 $672
JUMPV
LABELV $671
line 1110
;1110:		else if (crandom() < 0)
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
CNSTF4 1073741824
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
CNSTF4 0
GEF4 $673
line 1111
;1111:			moveUp = qtrue;
ADDRLP4 28
CNSTI4 1
ASGNI4
ADDRGP4 $674
JUMPV
LABELV $673
line 1113
;1112:		else
;1113:			moveUp = qfalse;
ADDRLP4 28
CNSTI4 0
ASGNI4
LABELV $674
LABELV $672
LABELV $669
line 1116
;1114:		
;1115:
;1116:		if (moveUp)
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $675
line 1117
;1117:			randVec[2] += jump; //nudge the particles up a bit
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 32
INDIRI4
CVIF4 4
ADDF4
ASGNF4
ADDRGP4 $676
JUMPV
LABELV $675
line 1119
;1118:		else
;1119:			randVec[2] -= jump; //nudge the particles down a bit
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 32
INDIRI4
CVIF4 4
SUBF4
ASGNF4
LABELV $676
line 1121
;1120:
;1121:		VectorCopy( randVec, le->pos.trDelta );	
ADDRLP4 40
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 12
INDIRB
ASGNB 12
line 1122
;1122:	}
LABELV $653
line 1070
ADDRLP4 24
ADDRLP4 24
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $655
ADDRLP4 24
INDIRI4
ADDRFP4 4
INDIRI4
LTI4 $652
line 1123
;1123:}
LABELV $649
endproc CG_Particles 84 4
export CG_ParticlesFromEntityState
proc CG_ParticlesFromEntityState 16 36
line 1135
;1124:
;1125:/*
;1126:===================
;1127:CG_ParticlesFromEntityState
;1128:
;1129:Takes entitystate and extracts data inside to use for CG_Particles.
;1130:es->constantLight is used for the color of the particles.
;1131:es->eventParm is used for the number of particles.
;1132:es->generic1 is used for the speed of the particles.
;1133:===================
;1134:*/
;1135:void CG_ParticlesFromEntityState( vec3_t origin, int type, entityState_t *es) {
line 1137
;1136:	byte r, g, b;
;1137:	int lifetime = 3000;
ADDRLP4 8
CNSTI4 3000
ASGNI4
line 1138
;1138:	int radius = 3;
ADDRLP4 0
CNSTI4 3
ASGNI4
line 1139
;1139:	int speed = es->generic1;
ADDRLP4 12
ADDRFP4 8
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
line 1141
;1140:	
;1141:	r = es->constantLight & 255;
ADDRLP4 4
ADDRFP4 8
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CNSTI4 255
BANDI4
CVIU4 4
CVUU1 4
ASGNU1
line 1142
;1142:	g = ( es->constantLight >> 8 ) & 255;
ADDRLP4 5
ADDRFP4 8
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CNSTI4 8
RSHI4
CNSTI4 255
BANDI4
CVIU4 4
CVUU1 4
ASGNU1
line 1143
;1143:	b = ( es->constantLight >> 16 ) & 255;
ADDRLP4 6
ADDRFP4 8
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CNSTI4 16
RSHI4
CNSTI4 255
BANDI4
CVIU4 4
CVUU1 4
ASGNU1
line 1144
;1144:	radius = es->generic2;
ADDRLP4 0
ADDRFP4 8
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ASGNI4
line 1146
;1145:
;1146:	CG_Particles( origin, es->eventParm, speed, lifetime, radius, type, r, g, b );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 4
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 5
INDIRU1
CVUI4 1
ARGI4
ADDRLP4 6
INDIRU1
CVUI4 1
ARGI4
ADDRGP4 CG_Particles
CALLV
pop
line 1147
;1147:}
LABELV $679
endproc CG_ParticlesFromEntityState 16 36
import wideAdjustX
import CG_NewParticleArea
import initparticles
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel_MiTech
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound_MiTech
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_System
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_Atmospheric_SetParticles
import CG_AddAtmosphericEffects
import teamcolormodels
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformationRus
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_BigExplode
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_LeiPuff
import CG_LeiSparks2
import CG_LeiSparks
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponBarNew2
import CG_DrawWeaponBarNew
import CG_DrawWeaponBar0
import CG_DrawWeaponSelect
import CG_AddRealWeapon
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_GravitygunTrail
import CG_PhysgunTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainVehicleEvent
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_ReloadPlayers
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_AddToGenericConsole
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModelCopy
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrintRus
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import CG_DrawFade
import CG_Fade
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_InsideBox
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawGiantString
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_DrawRoundedRect
import CG_FillRect2
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_CloadMap_f
import CG_FairCvars
import SnapVectorTowards
import CG_RegisterOverlay
import CG_IsTeamGame
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_PredictWeaponEffects
import cg_teamChatBeep
import cg_chatBeep
import cg_weaponOrder
import cg_weaponBarStyle
import cg_crosshairColorBlue
import cg_crosshairColorGreen
import cg_crosshairColorRed
import cg_ch13size
import cg_ch13
import cg_ch12size
import cg_ch12
import cg_ch11size
import cg_ch11
import cg_ch10size
import cg_ch10
import cg_ch9slze
import cg_ch9size
import cg_ch9
import cg_ch8size
import cg_ch8
import cg_ch7size
import cg_ch7
import cg_ch6size
import cg_ch6
import cg_ch5size
import cg_ch5
import cg_ch4size
import cg_ch4
import cg_ch3size
import cg_ch3
import cg_ch2size
import cg_ch2
import cg_ch1size
import cg_ch1
import cg_differentCrosshairs
import cg_crosshairPulse
import cg_atmosphericLevel
import cg_fragmsgsize
import cg_autovertex
import cg_vote_custom_commands
import cg_cyclegrapple
import cg_voteflags
import cg_voip_teamonly
import cg_hitsound
import cg_alwaysWeaponBar
import cl_timeNudge
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_cmdTimeNudge
import cg_delag
import cg_enableBreath
import cg_enableDust
import cg_obeliskRespawnDelay
import cg_recordSPDemoName
import cg_recordSPDemo
import cg_singlePlayerActive
import cg_singlePlayer
import cg_currentSelectedPlayerName
import cg_currentSelectedPlayer
import cg_blueTeamName
import cg_redTeamName
import cg_music
import cg_trueLightning
import cg_oldPlasma
import cg_cameraEyes_Up
import cg_cameraEyes_Fwd
import cg_cameraEyes
import cg_cameramode
import cg_leiBrassNoise
import cg_leiGoreNoise
import cg_leiEnhancement
import cg_lodScale
import cg_letterBoxSize
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_float
import pmove_msec
import pmove_fixed
import cg_commonConsole
import cg_teamChatLines
import cg_chatLines
import cg_commonConsoleLines
import cg_consoleLines
import cg_teamChatSizeY
import cg_teamChatSizeX
import cg_chatSizeY
import cg_chatSizeX
import cg_consoleSizeY
import cg_consoleSizeX
import cg_fontShadow
import cg_fontScale
import cg_consoleTime
import cg_chatTime
import cg_newConsole
import cg_newFont
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatScaleY
import cg_teamChatScaleX
import cg_chatY
import cg_teamChatY
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawSpeed
import cg_drawAttacker
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_thirdPersonOffset
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_bigheadMode
import cg_disableLevelStartFade
import cg_paintballMode
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairScale
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_drawSyncMessage
import cg_drawsubtitles
import cg_centertime
import cg_gibtime
import cg_itemstyle
import cg_oldscoreboard
import team_legsskin
import legsskin
import ui_backcolors
import cl_screenoffset
import cg_cameraeyes
import cg_leiChibi
import cg_plightradius
import cg_plightblue
import cg_plightgreen
import cg_plightred
import cg_tolightblue
import cg_tolightgreen
import cg_tolightred
import cg_hetex
import cg_totex
import cg_ptex
import cg_helightblue
import cg_helightgreen
import cg_helightred
import con_notifytime
import cl_language
import cg_toolguninfo
import cg_postprocess
import cg_hide255
import sb_texturename
import sb_texture_view
import sb_classnum_view
import toolgun_modelst
import toolgun_toolmode4
import toolgun_toolmode3
import toolgun_toolmode2
import toolgun_toolmode1
import toolgun_tooltip4
import toolgun_tooltip3
import toolgun_tooltip2
import toolgun_tooltip1
import toolgun_tooltext
import toolgun_toolcmd4
import toolgun_toolcmd3
import toolgun_toolcmd2
import toolgun_toolcmd1
import toolgun_tool
import toolgun_mod19
import toolgun_mod18
import toolgun_mod17
import toolgun_mod16
import toolgun_mod15
import toolgun_mod14
import toolgun_mod13
import toolgun_mod12
import toolgun_mod11
import toolgun_mod10
import toolgun_mod9
import toolgun_mod8
import toolgun_mod7
import toolgun_mod6
import toolgun_mod5
import toolgun_mod4
import toolgun_mod3
import toolgun_mod2
import toolgun_mod1
import cg_weaponBarActiveWidth
import cg_weaponselecttime
import cg_itemscaletime
import cg_zoomtime
import cg_gibmodifier
import cg_gibvelocity
import cg_gibjump
import cl_giantcharheight
import cl_giantcharwidth
import cl_bigcharheight
import cl_bigcharwidth
import cl_smallcharheight
import cl_smallcharwidth
import cl_propgapwidth
import cl_propspacewidth
import cl_propheight
import cl_propsmallsizescale
import g_gametype
import mod_skyColorA
import mod_skyColorB
import mod_skyColorG
import mod_skyColorR
import mod_skyShader
import mod_fogColorA
import mod_fogColorB
import mod_fogColorG
import mod_fogColorR
import mod_fogInterval
import mod_fogDistance
import mod_fogShader
import mod_fogModel
import mod_zround
import mod_gravity
import mod_roundmode
import mod_overlay
import mod_slickmove
import mod_accelerate
import mod_invulinf
import mod_kamikazeinf
import mod_portalinf
import mod_teleporterinf
import mod_medkitinf
import mod_medkitlimit
import mod_teamblue_firespeed
import mod_teamred_firespeed
import mod_invulmove
import mod_ammolimit
import mod_noplayerclip
import mod_doublerfirespeed
import mod_guardfirespeed
import mod_scoutfirespeed
import mod_ammoregenfirespeed
import mod_hastefirespeed
import mod_amdelay
import mod_ftdelay
import mod_cgdelay
import mod_pldelay
import mod_ngdelay
import mod_bfgdelay
import mod_rgdelay
import mod_pgdelay
import mod_lgdelay
import mod_rldelay
import mod_gldelay
import mod_sgdelay
import mod_mgdelay
import mod_gdelay
import mod_jumpheight
import mod_sgspread
import mod_sgcount
import mod_lgrange
import mod_cgspread
import mod_mgspread
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_TeamName
import BG_GetVehicleSettings
import BG_VehicleCheckClass
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_DefragmentMemory
import BG_Free
import BG_InitMemory
import BG_Alloc
import BG_CanAlloc
import BG_CanItemBeGrabbed
import BG_FindItemForBackpack
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindSwepAmmo
import BG_FindSwep
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import COM_LoadLevelScores
import COM_CalculatePlayerScore
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import vectoyaw
import AngleDifference
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import Q_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import Lerp
import VelocityToAxis
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import Q_snprintf
import Q_vsnprintf
import strtol
import _atoi
import atoi
import strtod
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import ifstrlenru
import strlenru
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $219
byte 1 67
byte 1 71
byte 1 95
byte 1 77
byte 1 97
byte 1 107
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 109
byte 1 115
byte 1 101
byte 1 99
byte 1 32
byte 1 61
byte 1 32
byte 1 37
byte 1 105
byte 1 0
