lit
align 4
LABELV validOrders
address $82
byte 4 1
address $83
byte 4 1
address $84
byte 4 2
address $85
byte 4 2
address $86
byte 4 3
address $87
byte 4 7
address $88
byte 4 4
address $89
byte 4 5
address $90
byte 4 6
align 4
LABELV numValidOrders
byte 4 9
code
proc CG_ValidOrder 8 8
file "../../../code/cgame/cg_servercmds.c"
line 50
;1:/*
;2:===========================================================================
;3:Copyright (C) 1999-2005 Id Software, Inc.
;4:
;5:This file is part of Quake III Arena source code.
;6:
;7:Quake III Arena source code is free software; you can redistribute it
;8:and/or modify it under the terms of the GNU General Public License as
;9:published by the Free Software Foundation; either version 2 of the License,
;10:or (at your option) any later version.
;11:
;12:Quake III Arena source code is distributed in the hope that it will be
;13:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;14:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;15:GNU General Public License for more details.
;16:
;17:You should have received a copy of the GNU General Public License
;18:along with Quake III Arena source code; if not, write to the Free Software
;19:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;20:===========================================================================
;21:*/
;22://
;23:// cg_servercmds.c -- reliably sequenced text commands sent by the server
;24:// these are processed at snapshot transition time, so there will definately
;25:// be a valid snapshot this frame
;26:
;27:#include "cg_local.h"
;28:#include "../../ui/menudef.h" // bk001205 - for Q3_ui as well
;29:
;30:typedef struct {
;31:	const char *order;
;32:	int taskNum;
;33:} orderTask_t;
;34:
;35:static const orderTask_t validOrders[] = {
;36:	{ VOICECHAT_GETFLAG,						TEAMTASK_OFFENSE },
;37:	{ VOICECHAT_OFFENSE,						TEAMTASK_OFFENSE },
;38:	{ VOICECHAT_DEFEND,							TEAMTASK_DEFENSE },
;39:	{ VOICECHAT_DEFENDFLAG,					TEAMTASK_DEFENSE },
;40:	{ VOICECHAT_PATROL,							TEAMTASK_PATROL },
;41:	{ VOICECHAT_CAMP,								TEAMTASK_CAMP },
;42:	{ VOICECHAT_FOLLOWME,						TEAMTASK_FOLLOW },
;43:	{ VOICECHAT_RETURNFLAG,					TEAMTASK_RETRIEVE },
;44:	{ VOICECHAT_FOLLOWFLAGCARRIER,	TEAMTASK_ESCORT }
;45:};
;46:
;47:static const int numValidOrders = sizeof(validOrders) / sizeof(orderTask_t);
;48:
;49:#ifdef MISSIONPACK // bk001204
;50:static int CG_ValidOrder(const char *p) {
line 52
;51:	int i;
;52:	for (i = 0; i < numValidOrders; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $95
JUMPV
LABELV $92
line 53
;53:		if (Q_stricmp(p, validOrders[i].order) == 0) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 3
LSHI4
ADDRGP4 validOrders
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $96
line 54
;54:			return validOrders[i].taskNum;
ADDRLP4 0
INDIRI4
CNSTI4 3
LSHI4
ADDRGP4 validOrders+4
ADDP4
INDIRI4
RETI4
ADDRGP4 $91
JUMPV
LABELV $96
line 56
;55:		}
;56:	}
LABELV $93
line 52
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $95
ADDRLP4 0
INDIRI4
ADDRGP4 numValidOrders
INDIRI4
LTI4 $92
line 57
;57:	return -1;
CNSTI4 -1
RETI4
LABELV $91
endproc CG_ValidOrder 8 8
proc CG_ParseScores 240 12
line 67
;58:}
;59:#endif
;60:
;61:/*
;62:=================
;63:CG_ParseScores
;64:
;65:=================
;66:*/
;67:static void CG_ParseScores( void ) {
line 70
;68:	int		i, powerups;
;69:
;70:	cg.numScores = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+1872036
ADDRLP4 12
INDIRI4
ASGNI4
line 71
;71:	if ( cg.numScores > MAX_CLIENTS ) {
ADDRGP4 cg+1872036
INDIRI4
CNSTI4 256
LEI4 $101
line 72
;72:		cg.numScores = MAX_CLIENTS;
ADDRGP4 cg+1872036
CNSTI4 256
ASGNI4
line 73
;73:	}
LABELV $101
line 75
;74:
;75:	cg.teamScores[0] = atoi( CG_Argv( 2 ) );
CNSTI4 2
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+1872044
ADDRLP4 20
INDIRI4
ASGNI4
line 76
;76:	cg.teamScores[1] = atoi( CG_Argv( 3 ) );
CNSTI4 3
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+1872044+4
ADDRLP4 28
INDIRI4
ASGNI4
line 78
;77:
;78:	cgs.roundStartTime = atoi( CG_Argv( 4 ) );
CNSTI4 4
ARGI4
ADDRLP4 32
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342396
ADDRLP4 36
INDIRI4
ASGNI4
line 81
;79:
;80:	//Update thing in lower-right corner
;81:	if(cgs.gametype == GT_ELIMINATION || cgs.gametype == GT_CTF_ELIMINATION)
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 9
EQI4 $113
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 10
NEI4 $109
LABELV $113
line 82
;82:	{
line 83
;83:		cgs.scores1 = cg.teamScores[0];
ADDRGP4 cgs+342616
ADDRGP4 cg+1872044
INDIRI4
ASGNI4
line 84
;84:		cgs.scores2 = cg.teamScores[1];
ADDRGP4 cgs+342620
ADDRGP4 cg+1872044+4
INDIRI4
ASGNI4
line 85
;85:	}
LABELV $109
line 87
;86:
;87:	memset( cg.scores, 0, sizeof( cg.scores ) );
ADDRGP4 cg+1872052
ARGP4
CNSTI4 0
ARGI4
CNSTI4 16384
ARGI4
ADDRGP4 memset
CALLP4
pop
line 92
;88:
;89:#define NUM_DATA 15
;90:#define FIRST_DATA 4
;91:
;92:	for ( i = 0 ; i < cg.numScores ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $124
JUMPV
LABELV $121
line 94
;93:		//
;94:		cg.scores[i].client = atoi( CG_Argv( i * NUM_DATA + FIRST_DATA + 1 ) );
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 1
ADDI4
ARGI4
ADDRLP4 44
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 44
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 95
;95:		cg.scores[i].score = atoi( CG_Argv( i * NUM_DATA + FIRST_DATA + 2 ) );
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 2
ADDI4
ARGI4
ADDRLP4 56
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+4
ADDP4
ADDRLP4 60
INDIRI4
ASGNI4
line 96
;96:		cg.scores[i].ping = atoi( CG_Argv( i * NUM_DATA + FIRST_DATA + 3 ) );
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 3
ADDI4
ARGI4
ADDRLP4 68
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+8
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 97
;97:		cg.scores[i].time = atoi( CG_Argv( i * NUM_DATA + FIRST_DATA + 4 ) );
ADDRLP4 80
CNSTI4 4
ASGNI4
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 80
INDIRI4
ADDI4
ADDRLP4 80
INDIRI4
ADDI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+12
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
line 98
;98:		cg.scores[i].scoreFlags = atoi( CG_Argv( i * NUM_DATA + FIRST_DATA + 5 ) );
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 96
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 100
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+16
ADDP4
ADDRLP4 100
INDIRI4
ASGNI4
line 99
;99:		powerups = atoi( CG_Argv( i * NUM_DATA + FIRST_DATA + 6 ) );
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 6
ADDI4
ARGI4
ADDRLP4 104
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 108
INDIRI4
ASGNI4
line 100
;100:		cg.scores[i].accuracy = atoi(CG_Argv(i * NUM_DATA + FIRST_DATA + 7));
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 116
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 116
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+24
ADDP4
ADDRLP4 120
INDIRI4
ASGNI4
line 101
;101:		cg.scores[i].impressiveCount = atoi(CG_Argv(i * NUM_DATA + FIRST_DATA + 8));
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 8
ADDI4
ARGI4
ADDRLP4 128
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+28
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 102
;102:		cg.scores[i].excellentCount = atoi(CG_Argv(i * NUM_DATA + FIRST_DATA + 9));
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 9
ADDI4
ARGI4
ADDRLP4 140
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 144
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+32
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 103
;103:		cg.scores[i].guantletCount = atoi(CG_Argv(i * NUM_DATA + FIRST_DATA + 10));
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 10
ADDI4
ARGI4
ADDRLP4 152
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 152
INDIRP4
ARGP4
ADDRLP4 156
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+36
ADDP4
ADDRLP4 156
INDIRI4
ASGNI4
line 104
;104:		cg.scores[i].defendCount = atoi(CG_Argv(i * NUM_DATA + FIRST_DATA + 11));
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 11
ADDI4
ARGI4
ADDRLP4 164
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 168
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+40
ADDP4
ADDRLP4 168
INDIRI4
ASGNI4
line 105
;105:		cg.scores[i].assistCount = atoi(CG_Argv(i * NUM_DATA + FIRST_DATA + 12));
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 12
ADDI4
ARGI4
ADDRLP4 176
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRLP4 180
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+44
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
line 106
;106:		cg.scores[i].perfect = atoi(CG_Argv(i * NUM_DATA + FIRST_DATA + 13));
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 13
ADDI4
ARGI4
ADDRLP4 188
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
ADDRLP4 192
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+52
ADDP4
ADDRLP4 192
INDIRI4
ASGNI4
line 107
;107:		cg.scores[i].captures = atoi(CG_Argv(i * NUM_DATA + FIRST_DATA + 14));
CNSTI4 15
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
CNSTI4 14
ADDI4
ARGI4
ADDRLP4 200
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 204
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+48
ADDP4
ADDRLP4 204
INDIRI4
ASGNI4
line 108
;108:		cg.scores[i].isDead = atoi(CG_Argv(i * NUM_DATA + FIRST_DATA + 15));
ADDRLP4 208
CNSTI4 15
ASGNI4
ADDRLP4 208
INDIRI4
ADDRLP4 0
INDIRI4
MULI4
CNSTI4 4
ADDI4
ADDRLP4 208
INDIRI4
ADDI4
ARGI4
ADDRLP4 216
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 216
INDIRP4
ARGP4
ADDRLP4 220
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052+60
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 111
;109:		//cgs.roundStartTime =
;110:
;111:		if ( cg.scores[i].client < 0 || cg.scores[i].client >= MAX_CLIENTS ) {
ADDRLP4 224
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ASGNI4
ADDRLP4 224
INDIRI4
ADDRGP4 cg+1872052
ADDP4
INDIRI4
CNSTI4 0
LTI4 $157
ADDRLP4 224
INDIRI4
ADDRGP4 cg+1872052
ADDP4
INDIRI4
CNSTI4 256
LTI4 $153
LABELV $157
line 112
;112:			cg.scores[i].client = 0;
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052
ADDP4
CNSTI4 0
ASGNI4
line 113
;113:		}
LABELV $153
line 114
;114:		cgs.clientinfo[ cg.scores[i].client ].score = cg.scores[i].score;
ADDRLP4 228
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ASGNI4
CNSTI4 1944
ADDRLP4 228
INDIRI4
ADDRGP4 cg+1872052
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+440948+168
ADDP4
ADDRLP4 228
INDIRI4
ADDRGP4 cg+1872052+4
ADDP4
INDIRI4
ASGNI4
line 115
;115:		cgs.clientinfo[ cg.scores[i].client ].powerups = powerups;
CNSTI4 1944
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ADDRGP4 cg+1872052
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+440948+208
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 116
;116:		cgs.clientinfo[ cg.scores[i].client ].isDead = cg.scores[i].isDead;
ADDRLP4 232
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ASGNI4
CNSTI4 1944
ADDRLP4 232
INDIRI4
ADDRGP4 cg+1872052
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+440948+1924
ADDP4
ADDRLP4 232
INDIRI4
ADDRGP4 cg+1872052+60
ADDP4
INDIRI4
ASGNI4
line 118
;117:
;118:		cg.scores[i].team = cgs.clientinfo[cg.scores[i].client].team;
ADDRLP4 236
ADDRLP4 0
INDIRI4
CNSTI4 6
LSHI4
ASGNI4
ADDRLP4 236
INDIRI4
ADDRGP4 cg+1872052+56
ADDP4
CNSTI4 1944
ADDRLP4 236
INDIRI4
ADDRGP4 cg+1872052
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+440948+68
ADDP4
INDIRI4
ASGNI4
line 119
;119:	}
LABELV $122
line 92
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $124
ADDRLP4 0
INDIRI4
ADDRGP4 cg+1872036
INDIRI4
LTI4 $121
line 121
;120:#ifdef MISSIONPACK
;121:	CG_SetScoreSelection(NULL);
CNSTP4 0
ARGP4
ADDRGP4 CG_SetScoreSelection
CALLV
pop
line 124
;122:#endif
;123:
;124:}
LABELV $99
endproc CG_ParseScores 240 12
proc CG_ParseAccuracy 32 4
line 126
;125:
;126:static void CG_ParseAccuracy( void ) {
line 129
;127:	int		i;
;128:
;129:	for ( i = WP_MACHINEGUN ; i < WP_NUM_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 2
ASGNI4
LABELV $178
line 130
;130:		cg.accuracys[i-WP_MACHINEGUN][0] = atoi( CG_Argv( (i-WP_MACHINEGUN)*2 + 1 ) );
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
LSHI4
CNSTI4 4
SUBI4
ADDRLP4 8
INDIRI4
ADDI4
ARGI4
ADDRLP4 12
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LSHI4
ADDRGP4 cg+1888448-16
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 131
;131:		cg.accuracys[i-WP_MACHINEGUN][1] = atoi( CG_Argv( (i-WP_MACHINEGUN)*2 + 2 ) );
ADDRLP4 0
INDIRI4
CNSTI4 1
LSHI4
CNSTI4 4
SUBI4
CNSTI4 2
ADDI4
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LSHI4
ADDRGP4 cg+1888448-16+4
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 135
;132:                #if DEBUG
;133:		CG_Printf("W: %i   shots: %i   Hits: %i\n", i,cg.accuracys[i][0], cg.accuracys[i][1]);
;134:                #endif
;135:	}
LABELV $179
line 129
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $178
line 137
;136:
;137:}
LABELV $177
endproc CG_ParseAccuracy 32 4
proc CG_ParseElimination 16 4
line 146
;138:
;139:
;140:/*
;141:=================
;142:CG_ParseElimination
;143:
;144:=================
;145:*/
;146:static void CG_ParseElimination( void ) {
line 147
;147:	if(cgs.gametype == GT_ELIMINATION || cgs.gametype == GT_CTF_ELIMINATION)
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 9
EQI4 $192
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 10
NEI4 $188
LABELV $192
line 148
;148:	{
line 149
;149:		cgs.scores1 = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 0
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342616
ADDRLP4 4
INDIRI4
ASGNI4
line 150
;150:		cgs.scores2 = atoi( CG_Argv( 2 ) );
CNSTI4 2
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342620
ADDRLP4 12
INDIRI4
ASGNI4
line 151
;151:	}
LABELV $188
line 152
;152:	cgs.roundStartTime = atoi( CG_Argv( 3 ) );
CNSTI4 3
ARGI4
ADDRLP4 0
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342396
ADDRLP4 4
INDIRI4
ASGNI4
line 153
;153:}
LABELV $187
endproc CG_ParseElimination 16 4
proc CG_ParseMappage 1060 12
line 162
;154:
;155:/*
;156:=================
;157:CG_ParseMappage
;158:Sago: This parses values from the server rather directly. Some checks are performed, but beware if you change it or new
;159:security holes are found
;160:=================
;161:*/
;162:static void CG_ParseMappage( void ) {
line 168
;163:    char command[1024];
;164:    const char *temp;
;165:    const char*	c;
;166:    int i;
;167:
;168:    temp = CG_Argv( 1 );
CNSTI4 1
ARGI4
ADDRLP4 1036
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 1036
INDIRP4
ASGNP4
line 169
;169:    for( c = temp; *c; ++c) {
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
ADDRGP4 $200
JUMPV
LABELV $197
line 170
;170:		switch(*c) {
ADDRLP4 1040
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 1048
CNSTI4 10
ASGNI4
ADDRLP4 1040
INDIRI4
ADDRLP4 1048
INDIRI4
EQI4 $196
ADDRLP4 1040
INDIRI4
CNSTI4 13
EQI4 $196
ADDRLP4 1040
INDIRI4
ADDRLP4 1048
INDIRI4
LTI4 $201
LABELV $205
ADDRLP4 1040
INDIRI4
CNSTI4 59
EQI4 $196
ADDRGP4 $201
JUMPV
line 175
;171:			case '\n':
;172:			case '\r':
;173:			case ';':
;174:				//The server tried something bad!
;175:				return;
line 176
;176:			break;
LABELV $201
line 178
;177:		}
;178:        }
LABELV $198
line 169
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
LABELV $200
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $197
line 179
;179:    Q_strncpyz(command,va("ui_mappage %s",temp),1024);
ADDRGP4 $206
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 1040
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ARGP4
ADDRLP4 1040
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 180
;180:    for(i=2;i<12;i++) {
ADDRLP4 8
CNSTI4 2
ASGNI4
LABELV $207
line 181
;181:        temp = CG_Argv( i );
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 1044
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 1044
INDIRP4
ASGNP4
line 182
;182:        for( c = temp; *c; ++c) {
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
ADDRGP4 $214
JUMPV
LABELV $211
line 183
;183:                    switch(*c) {
ADDRLP4 1048
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 1056
CNSTI4 10
ASGNI4
ADDRLP4 1048
INDIRI4
ADDRLP4 1056
INDIRI4
EQI4 $196
ADDRLP4 1048
INDIRI4
CNSTI4 13
EQI4 $196
ADDRLP4 1048
INDIRI4
ADDRLP4 1056
INDIRI4
LTI4 $215
LABELV $219
ADDRLP4 1048
INDIRI4
CNSTI4 59
EQI4 $196
ADDRGP4 $215
JUMPV
line 188
;184:                            case '\n':
;185:                            case '\r':
;186:                            case ';':
;187:                                    //The server tried something bad!
;188:                                    return;
line 189
;189:                            break;
LABELV $215
line 191
;190:                    }
;191:            }
LABELV $212
line 182
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
LABELV $214
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $211
line 192
;192:        if(strlen(temp)<1)
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 1048
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 1048
INDIRI4
CNSTI4 1
GEI4 $220
line 193
;193:            temp = "---";
ADDRLP4 4
ADDRGP4 $222
ASGNP4
LABELV $220
line 194
;194:        Q_strcat(command,1024,va(" %s ",temp));
ADDRGP4 $223
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 1052
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 1052
INDIRP4
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 195
;195:    }
LABELV $208
line 180
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 12
LTI4 $207
line 196
;196:    trap_SendConsoleCommand(command);
ADDRLP4 12
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 198
;197:
;198:}
LABELV $196
endproc CG_ParseMappage 1060 12
proc CG_ParseDDtimetaken 8 4
line 206
;199:
;200:/*
;201:=================
;202:CG_ParseDDtimetaken
;203:
;204:=================
;205:*/
;206:static void CG_ParseDDtimetaken( void ) {
line 207
;207:	cgs.timetaken = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 0
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342416
ADDRLP4 4
INDIRI4
ASGNI4
line 208
;208:}
LABELV $224
endproc CG_ParseDDtimetaken 8 4
proc CG_ParseDomPointNames 24 12
line 216
;209:
;210:/*
;211:=================
;212:CG_ParseDomPointNames
;213:=================
;214:*/
;215:
;216:static void CG_ParseDomPointNames( void ) {
line 218
;217:	int i,j;
;218:	cgs.domination_points_count = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342420
ADDRLP4 12
INDIRI4
ASGNI4
line 219
;219:	if(cgs.domination_points_count>=MAX_DOMINATION_POINTS)
ADDRGP4 cgs+342420
INDIRI4
CNSTI4 8
LTI4 $228
line 220
;220:		cgs.domination_points_count = MAX_DOMINATION_POINTS;
ADDRGP4 cgs+342420
CNSTI4 8
ASGNI4
LABELV $228
line 221
;221:	for(i = 0;i<cgs.domination_points_count;i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $235
JUMPV
LABELV $232
line 222
;222:		Q_strncpyz(cgs.domination_points_names[i],CG_Argv(2)+i*MAX_DOMINATION_POINTS_NAMES,MAX_DOMINATION_POINTS_NAMES-1);
CNSTI4 2
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
CNSTI4 20
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+342424
ADDP4
ARGP4
CNSTI4 20
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 16
INDIRP4
ADDP4
ARGP4
CNSTI4 19
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 223
;223:		for(j=MAX_DOMINATION_POINTS_NAMES-1; cgs.domination_points_names[i][j] < '0' && j>0; j--) {
ADDRLP4 0
CNSTI4 19
ASGNI4
ADDRGP4 $241
JUMPV
LABELV $238
line 224
;224:			cgs.domination_points_names[i][j] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 20
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+342424
ADDP4
ADDP4
CNSTI1 0
ASGNI1
line 225
;225:		}
LABELV $239
line 223
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $241
ADDRLP4 0
INDIRI4
CNSTI4 20
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cgs+342424
ADDP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
GEI4 $244
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $238
LABELV $244
line 226
;226:	}
LABELV $233
line 221
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $235
ADDRLP4 4
INDIRI4
ADDRGP4 cgs+342420
INDIRI4
LTI4 $232
line 227
;227:}
LABELV $226
endproc CG_ParseDomPointNames 24 12
proc CG_ParseDomStatus 28 4
line 235
;228:
;229:/*
;230:=================
;231:CG_ParseDomScores
;232:=================
;233:*/
;234:
;235:static void CG_ParseDomStatus( void ) {
line 237
;236:	int i;
;237:	if( cgs.domination_points_count!=atoi( CG_Argv(1) ) ) {
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342420
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $246
line 238
;238:		cgs.domination_points_count = 0;
ADDRGP4 cgs+342420
CNSTI4 0
ASGNI4
line 239
;239:		return;
ADDRGP4 $245
JUMPV
LABELV $246
line 241
;240:	}
;241:	for(i = 0;i<cgs.domination_points_count;i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $253
JUMPV
LABELV $250
line 242
;242:		cgs.domination_points_status[i] = atoi( CG_Argv(2+i) );
ADDRLP4 16
CNSTI4 2
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
ADDI4
ARGI4
ADDRLP4 20
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
LSHI4
ADDRGP4 cgs+342584
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 243
;243:	}
LABELV $251
line 241
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $253
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+342420
INDIRI4
LTI4 $250
line 244
;244:}
LABELV $245
endproc CG_ParseDomStatus 28 4
proc CG_ParseObeliskHealth 16 4
line 246
;245:
;246:static void CG_ParseObeliskHealth( void ) {
line 247
;247:    cg.redObeliskHealth = atoi( CG_Argv(1) );
CNSTI4 1
ARGI4
ADDRLP4 0
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+1987832
ADDRLP4 4
INDIRI4
ASGNI4
line 248
;248:    cg.blueObeliskHealth = atoi( CG_Argv(2) );
CNSTI4 2
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+1987836
ADDRLP4 12
INDIRI4
ASGNI4
line 249
;249:}
LABELV $256
endproc CG_ParseObeliskHealth 16 4
proc CG_ParseRespawnTime 8 4
line 254
;250:
;251:/**
;252: * Sets the respawn counter for the client.
;253: */
;254:static void CG_ParseRespawnTime( void ) {
line 255
;255:    cg.respawnTime = atoi( CG_Argv(1) );
CNSTI4 1
ARGI4
ADDRLP4 0
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+1987476
ADDRLP4 4
INDIRI4
ASGNI4
line 256
;256:}
LABELV $259
endproc CG_ParseRespawnTime 8 4
proc CG_ParseTeam 4 8
line 264
;257:
;258:/*
;259:=================
;260:CG_ParseTeam
;261:=================
;262:*/
;263:
;264:static void CG_ParseTeam( void ) {
line 266
;265:    //TODO: Add code here
;266:    if(cg_voip_teamonly.integer)
ADDRGP4 cg_voip_teamonly+12
INDIRI4
CNSTI4 0
EQI4 $262
line 267
;267:	trap_Cvar_Set("cl_voipSendTarget",CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 0
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $265
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
LABELV $262
line 268
;268:}
LABELV $261
endproc CG_ParseTeam 4 8
proc CG_ParseAttackingTeam 12 4
line 276
;269:
;270:/*
;271:=================
;272:CG_ParseAttackingTeam
;273:
;274:=================
;275:*/
;276:static void CG_ParseAttackingTeam( void ) {
line 278
;277:	int temp;
;278:	temp = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 279
;279:	if(temp==TEAM_RED)
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $267
line 280
;280:		cgs.attackingTeam = TEAM_RED;
ADDRGP4 cgs+342404
CNSTI4 1
ASGNI4
ADDRGP4 $268
JUMPV
LABELV $267
line 281
;281:	else if (temp==TEAM_BLUE)
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $270
line 282
;282:		cgs.attackingTeam = TEAM_BLUE;
ADDRGP4 cgs+342404
CNSTI4 2
ASGNI4
ADDRGP4 $271
JUMPV
LABELV $270
line 284
;283:	else
;284:		cgs.attackingTeam = TEAM_NONE; //Should never happen.
ADDRGP4 cgs+342404
CNSTI4 3
ASGNI4
LABELV $271
LABELV $268
line 285
;285:}
LABELV $266
endproc CG_ParseAttackingTeam 12 4
proc CG_ParseTeamInfo 76 8
line 293
;286:
;287:/*
;288:=================
;289:CG_ParseTeamInfo
;290:
;291:=================
;292:*/
;293:static void CG_ParseTeamInfo( void ) {
line 297
;294:	int		i;
;295:	int		client;
;296:
;297:	numSortedTeamPlayers = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 numSortedTeamPlayers
ADDRLP4 12
INDIRI4
ASGNI4
line 298
;298:        if( numSortedTeamPlayers < 0 || numSortedTeamPlayers > TEAM_MAXOVERLAY )
ADDRLP4 16
ADDRGP4 numSortedTeamPlayers
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
LTI4 $277
ADDRLP4 16
INDIRI4
CNSTI4 32
LEI4 $275
LABELV $277
line 299
;299:	{
line 300
;300:		CG_Error( "CG_ParseTeamInfo: numSortedTeamPlayers out of range (%d)",
ADDRGP4 $278
ARGP4
ADDRGP4 numSortedTeamPlayers
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 302
;301:				numSortedTeamPlayers );
;302:		return;
ADDRGP4 $274
JUMPV
LABELV $275
line 305
;303:	}
;304:
;305:	for ( i = 0 ; i < numSortedTeamPlayers ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $282
JUMPV
LABELV $279
line 306
;306:		client = atoi( CG_Argv( i * 6 + 2 ) );
CNSTI4 6
ADDRLP4 4
INDIRI4
MULI4
CNSTI4 2
ADDI4
ARGI4
ADDRLP4 20
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
ASGNI4
line 307
;307:                if( client < 0 || client >= MAX_CLIENTS )
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $285
ADDRLP4 0
INDIRI4
CNSTI4 256
LTI4 $283
LABELV $285
line 308
;308:		{
line 309
;309:		  CG_Error( "CG_ParseTeamInfo: bad client number: %d", client );
ADDRGP4 $286
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 310
;310:		  return;
ADDRGP4 $274
JUMPV
LABELV $283
line 314
;311:		}
;312:
;313:
;314:		sortedTeamPlayers[i] = client;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 sortedTeamPlayers
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 316
;315:
;316:		cgs.clientinfo[ client ].location = atoi( CG_Argv( i * 6 + 3 ) );
CNSTI4 6
ADDRLP4 4
INDIRI4
MULI4
CNSTI4 3
ADDI4
ARGI4
ADDRLP4 32
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1944
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cgs+440948+172
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
line 317
;317:		cgs.clientinfo[ client ].health = atoi( CG_Argv( i * 6 + 4 ) );
CNSTI4 6
ADDRLP4 4
INDIRI4
MULI4
CNSTI4 4
ADDI4
ARGI4
ADDRLP4 40
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1944
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cgs+440948+176
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 318
;318:		cgs.clientinfo[ client ].armor = atoi( CG_Argv( i * 6 + 5 ) );
CNSTI4 6
ADDRLP4 4
INDIRI4
MULI4
CNSTI4 5
ADDI4
ARGI4
ADDRLP4 48
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1944
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cgs+440948+180
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
line 319
;319:		cgs.clientinfo[ client ].curWeapon = atoi( CG_Argv( i * 6 + 6 ) );
ADDRLP4 56
CNSTI4 6
ASGNI4
ADDRLP4 56
INDIRI4
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 56
INDIRI4
ADDI4
ARGI4
ADDRLP4 60
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1944
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cgs+440948+184
ADDP4
ADDRLP4 64
INDIRI4
ASGNI4
line 320
;320:		cgs.clientinfo[ client ].powerups = atoi( CG_Argv( i * 6 + 7 ) );
CNSTI4 6
ADDRLP4 4
INDIRI4
MULI4
CNSTI4 7
ADDI4
ARGI4
ADDRLP4 68
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 atoi
CALLI4
ASGNI4
CNSTI4 1944
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cgs+440948+208
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 321
;321:	}
LABELV $280
line 305
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $282
ADDRLP4 4
INDIRI4
ADDRGP4 numSortedTeamPlayers
INDIRI4
LTI4 $279
line 322
;322:}
LABELV $274
endproc CG_ParseTeamInfo 76 8
proc CG_ParseWeaponProperties 440 4
line 324
;323:
;324:static void CG_ParseWeaponProperties(void) {
line 325
;325:	mod_sgspread     = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 0
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_sgspread
ADDRLP4 4
INDIRI4
ASGNI4
line 326
;326:	mod_sgcount     = atoi(CG_Argv(2));
CNSTI4 2
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_sgcount
ADDRLP4 12
INDIRI4
ASGNI4
line 327
;327:	mod_lgrange     = atoi(CG_Argv(3));
CNSTI4 3
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_lgrange
ADDRLP4 20
INDIRI4
ASGNI4
line 328
;328:	mod_mgspread     = atoi(CG_Argv(4));
CNSTI4 4
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_mgspread
ADDRLP4 28
INDIRI4
ASGNI4
line 329
;329:	mod_cgspread     = atoi(CG_Argv(5));
CNSTI4 5
ARGI4
ADDRLP4 32
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_cgspread
ADDRLP4 36
INDIRI4
ASGNI4
line 330
;330:	mod_jumpheight     = atoi(CG_Argv(6));
CNSTI4 6
ARGI4
ADDRLP4 40
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_jumpheight
ADDRLP4 44
INDIRI4
ASGNI4
line 331
;331:	mod_gdelay     = atoi(CG_Argv(7));
CNSTI4 7
ARGI4
ADDRLP4 48
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_gdelay
ADDRLP4 52
INDIRI4
ASGNI4
line 332
;332:	mod_mgdelay     = atoi(CG_Argv(8));
CNSTI4 8
ARGI4
ADDRLP4 56
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_mgdelay
ADDRLP4 60
INDIRI4
ASGNI4
line 333
;333:	mod_sgdelay     = atoi(CG_Argv(9));
CNSTI4 9
ARGI4
ADDRLP4 64
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_sgdelay
ADDRLP4 68
INDIRI4
ASGNI4
line 334
;334:	mod_gldelay     = atoi(CG_Argv(10));
CNSTI4 10
ARGI4
ADDRLP4 72
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_gldelay
ADDRLP4 76
INDIRI4
ASGNI4
line 335
;335:	mod_rldelay     = atoi(CG_Argv(11));
CNSTI4 11
ARGI4
ADDRLP4 80
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRLP4 84
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_rldelay
ADDRLP4 84
INDIRI4
ASGNI4
line 336
;336:	mod_lgdelay		 = atoi(CG_Argv(12));
CNSTI4 12
ARGI4
ADDRLP4 88
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 92
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_lgdelay
ADDRLP4 92
INDIRI4
ASGNI4
line 337
;337:	mod_pgdelay     = atoi(CG_Argv(13));
CNSTI4 13
ARGI4
ADDRLP4 96
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 100
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_pgdelay
ADDRLP4 100
INDIRI4
ASGNI4
line 338
;338:	mod_rgdelay     = atoi(CG_Argv(14));
CNSTI4 14
ARGI4
ADDRLP4 104
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_rgdelay
ADDRLP4 108
INDIRI4
ASGNI4
line 339
;339:	mod_bfgdelay     = atoi(CG_Argv(15));
CNSTI4 15
ARGI4
ADDRLP4 112
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRLP4 116
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_bfgdelay
ADDRLP4 116
INDIRI4
ASGNI4
line 340
;340:	mod_ngdelay     = atoi(CG_Argv(16));
CNSTI4 16
ARGI4
ADDRLP4 120
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 124
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_ngdelay
ADDRLP4 124
INDIRI4
ASGNI4
line 341
;341:	mod_pldelay     = atoi(CG_Argv(17));
CNSTI4 17
ARGI4
ADDRLP4 128
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_pldelay
ADDRLP4 132
INDIRI4
ASGNI4
line 342
;342:	mod_cgdelay     = atoi(CG_Argv(18));
CNSTI4 18
ARGI4
ADDRLP4 136
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 136
INDIRP4
ARGP4
ADDRLP4 140
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_cgdelay
ADDRLP4 140
INDIRI4
ASGNI4
line 343
;343:	mod_ftdelay     = atoi(CG_Argv(19));
CNSTI4 19
ARGI4
ADDRLP4 144
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 144
INDIRP4
ARGP4
ADDRLP4 148
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_ftdelay
ADDRLP4 148
INDIRI4
ASGNI4
line 344
;344:	mod_scoutfirespeed     = atof(CG_Argv(20));
CNSTI4 20
ARGI4
ADDRLP4 152
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 152
INDIRP4
ARGP4
ADDRLP4 156
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 mod_scoutfirespeed
ADDRLP4 156
INDIRF4
ASGNF4
line 345
;345:	mod_ammoregenfirespeed     = atof(CG_Argv(21));
CNSTI4 21
ARGI4
ADDRLP4 160
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 160
INDIRP4
ARGP4
ADDRLP4 164
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 mod_ammoregenfirespeed
ADDRLP4 164
INDIRF4
ASGNF4
line 346
;346:	mod_doublerfirespeed     = atof(CG_Argv(22));
CNSTI4 22
ARGI4
ADDRLP4 168
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
ADDRLP4 172
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 mod_doublerfirespeed
ADDRLP4 172
INDIRF4
ASGNF4
line 347
;347:	mod_guardfirespeed     = atof(CG_Argv(23));
CNSTI4 23
ARGI4
ADDRLP4 176
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRLP4 180
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 mod_guardfirespeed
ADDRLP4 180
INDIRF4
ASGNF4
line 348
;348:	mod_hastefirespeed     = atof(CG_Argv(24));
CNSTI4 24
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 184
INDIRP4
ARGP4
ADDRLP4 188
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 mod_hastefirespeed
ADDRLP4 188
INDIRF4
ASGNF4
line 349
;349:	mod_noplayerclip     = atoi(CG_Argv(25));
CNSTI4 25
ARGI4
ADDRLP4 192
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 192
INDIRP4
ARGP4
ADDRLP4 196
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_noplayerclip
ADDRLP4 196
INDIRI4
ASGNI4
line 350
;350:	mod_ammolimit     = atoi(CG_Argv(26));
CNSTI4 26
ARGI4
ADDRLP4 200
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 204
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_ammolimit
ADDRLP4 204
INDIRI4
ASGNI4
line 351
;351:	mod_invulmove     = atoi(CG_Argv(27));
CNSTI4 27
ARGI4
ADDRLP4 208
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 208
INDIRP4
ARGP4
ADDRLP4 212
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_invulmove
ADDRLP4 212
INDIRI4
ASGNI4
line 352
;352:	mod_amdelay     = atoi(CG_Argv(28));
CNSTI4 28
ARGI4
ADDRLP4 216
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 216
INDIRP4
ARGP4
ADDRLP4 220
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_amdelay
ADDRLP4 220
INDIRI4
ASGNI4
line 353
;353:	mod_teamred_firespeed     = atof(CG_Argv(29));
CNSTI4 29
ARGI4
ADDRLP4 224
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 224
INDIRP4
ARGP4
ADDRLP4 228
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 mod_teamred_firespeed
ADDRLP4 228
INDIRF4
ASGNF4
line 354
;354:	mod_teamblue_firespeed     = atof(CG_Argv(30));
CNSTI4 30
ARGI4
ADDRLP4 232
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 232
INDIRP4
ARGP4
ADDRLP4 236
ADDRGP4 atof
CALLF4
ASGNF4
ADDRGP4 mod_teamblue_firespeed
ADDRLP4 236
INDIRF4
ASGNF4
line 355
;355:	mod_medkitlimit     = atoi(CG_Argv(31));
CNSTI4 31
ARGI4
ADDRLP4 240
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 240
INDIRP4
ARGP4
ADDRLP4 244
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_medkitlimit
ADDRLP4 244
INDIRI4
ASGNI4
line 356
;356:	mod_medkitinf     = atoi(CG_Argv(32));
CNSTI4 32
ARGI4
ADDRLP4 248
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 248
INDIRP4
ARGP4
ADDRLP4 252
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_medkitinf
ADDRLP4 252
INDIRI4
ASGNI4
line 357
;357:	mod_teleporterinf     = atoi(CG_Argv(33));
CNSTI4 33
ARGI4
ADDRLP4 256
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 256
INDIRP4
ARGP4
ADDRLP4 260
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_teleporterinf
ADDRLP4 260
INDIRI4
ASGNI4
line 358
;358:	mod_portalinf     = atoi(CG_Argv(34));
CNSTI4 34
ARGI4
ADDRLP4 264
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 264
INDIRP4
ARGP4
ADDRLP4 268
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_portalinf
ADDRLP4 268
INDIRI4
ASGNI4
line 359
;359:	mod_kamikazeinf     = atoi(CG_Argv(35));
CNSTI4 35
ARGI4
ADDRLP4 272
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 272
INDIRP4
ARGP4
ADDRLP4 276
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_kamikazeinf
ADDRLP4 276
INDIRI4
ASGNI4
line 360
;360:	mod_invulinf     = atoi(CG_Argv(36));
CNSTI4 36
ARGI4
ADDRLP4 280
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRLP4 284
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_invulinf
ADDRLP4 284
INDIRI4
ASGNI4
line 361
;361:	mod_accelerate     = atoi(CG_Argv(37));
CNSTI4 37
ARGI4
ADDRLP4 288
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 288
INDIRP4
ARGP4
ADDRLP4 292
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_accelerate
ADDRLP4 292
INDIRI4
ASGNI4
line 362
;362:	mod_slickmove     = atoi(CG_Argv(38));
CNSTI4 38
ARGI4
ADDRLP4 296
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 296
INDIRP4
ARGP4
ADDRLP4 300
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_slickmove
ADDRLP4 300
INDIRI4
ASGNI4
line 363
;363:	mod_overlay     = atoi(CG_Argv(39));
CNSTI4 39
ARGI4
ADDRLP4 304
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 304
INDIRP4
ARGP4
ADDRLP4 308
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_overlay
ADDRLP4 308
INDIRI4
ASGNI4
line 364
;364:	mod_roundmode     = atoi(CG_Argv(40));
CNSTI4 40
ARGI4
ADDRLP4 312
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 312
INDIRP4
ARGP4
ADDRLP4 316
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_roundmode
ADDRLP4 316
INDIRI4
ASGNI4
line 365
;365:	mod_zround     = atoi(CG_Argv(41));
CNSTI4 41
ARGI4
ADDRLP4 320
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 320
INDIRP4
ARGP4
ADDRLP4 324
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_zround
ADDRLP4 324
INDIRI4
ASGNI4
line 366
;366:	mod_gravity     = atoi(CG_Argv(42));
CNSTI4 42
ARGI4
ADDRLP4 328
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 328
INDIRP4
ARGP4
ADDRLP4 332
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_gravity
ADDRLP4 332
INDIRI4
ASGNI4
line 367
;367:	mod_fogModel     = atoi(CG_Argv(43));
CNSTI4 43
ARGI4
ADDRLP4 336
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 336
INDIRP4
ARGP4
ADDRLP4 340
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_fogModel
ADDRLP4 340
INDIRI4
ASGNI4
line 368
;368:	mod_fogShader     = atoi(CG_Argv(44));
CNSTI4 44
ARGI4
ADDRLP4 344
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 344
INDIRP4
ARGP4
ADDRLP4 348
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_fogShader
ADDRLP4 348
INDIRI4
ASGNI4
line 369
;369:	mod_fogDistance     = atoi(CG_Argv(45));
CNSTI4 45
ARGI4
ADDRLP4 352
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 352
INDIRP4
ARGP4
ADDRLP4 356
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_fogDistance
ADDRLP4 356
INDIRI4
ASGNI4
line 370
;370:	mod_fogInterval     = atoi(CG_Argv(46));
CNSTI4 46
ARGI4
ADDRLP4 360
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 360
INDIRP4
ARGP4
ADDRLP4 364
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_fogInterval
ADDRLP4 364
INDIRI4
ASGNI4
line 371
;371:	mod_fogColorR     = atoi(CG_Argv(47));
CNSTI4 47
ARGI4
ADDRLP4 368
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 368
INDIRP4
ARGP4
ADDRLP4 372
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_fogColorR
ADDRLP4 372
INDIRI4
ASGNI4
line 372
;372:	mod_fogColorG     = atoi(CG_Argv(48));
CNSTI4 48
ARGI4
ADDRLP4 376
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 376
INDIRP4
ARGP4
ADDRLP4 380
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_fogColorG
ADDRLP4 380
INDIRI4
ASGNI4
line 373
;373:	mod_fogColorB     = atoi(CG_Argv(49));
CNSTI4 49
ARGI4
ADDRLP4 384
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 384
INDIRP4
ARGP4
ADDRLP4 388
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_fogColorB
ADDRLP4 388
INDIRI4
ASGNI4
line 374
;374:	mod_fogColorA     = atoi(CG_Argv(50));
CNSTI4 50
ARGI4
ADDRLP4 392
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 392
INDIRP4
ARGP4
ADDRLP4 396
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_fogColorA
ADDRLP4 396
INDIRI4
ASGNI4
line 375
;375:	mod_skyShader     = atoi(CG_Argv(51));
CNSTI4 51
ARGI4
ADDRLP4 400
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 400
INDIRP4
ARGP4
ADDRLP4 404
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_skyShader
ADDRLP4 404
INDIRI4
ASGNI4
line 376
;376:	mod_skyColorR     = atoi(CG_Argv(52));
CNSTI4 52
ARGI4
ADDRLP4 408
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 408
INDIRP4
ARGP4
ADDRLP4 412
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_skyColorR
ADDRLP4 412
INDIRI4
ASGNI4
line 377
;377:	mod_skyColorG     = atoi(CG_Argv(53));
CNSTI4 53
ARGI4
ADDRLP4 416
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 416
INDIRP4
ARGP4
ADDRLP4 420
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_skyColorG
ADDRLP4 420
INDIRI4
ASGNI4
line 378
;378:	mod_skyColorB     = atoi(CG_Argv(54));
CNSTI4 54
ARGI4
ADDRLP4 424
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 424
INDIRP4
ARGP4
ADDRLP4 428
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_skyColorB
ADDRLP4 428
INDIRI4
ASGNI4
line 379
;379:	mod_skyColorA     = atoi(CG_Argv(55));
CNSTI4 55
ARGI4
ADDRLP4 432
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 432
INDIRP4
ARGP4
ADDRLP4 436
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 mod_skyColorA
ADDRLP4 436
INDIRI4
ASGNI4
line 380
;380:}
LABELV $297
endproc CG_ParseWeaponProperties 440 4
proc CG_ParseSweps 32 4
line 382
;381:
;382:static void CG_ParseSweps(void) {
line 386
;383:    int i;
;384:    int j;
;385:    int weaponIndex;
;386:    int numArgs = trap_Argc();
ADDRLP4 16
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 16
INDIRI4
ASGNI4
line 388
;387:	
;388:	for(j = 1 ; j < WEAPONS_NUM ; j++){
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $299
line 389
;389:		if(cg.swep_listcl[j] != 2){
ADDRLP4 20
CNSTI4 2
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
LSHI4
ADDRGP4 cg+1870444
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
EQI4 $303
line 390
;390:		cg.swep_listcl[j] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+1870444
ADDP4
CNSTI4 0
ASGNI4
line 391
;391:		}
LABELV $303
line 392
;392:	}
LABELV $300
line 388
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 19
LTI4 $299
line 394
;393:
;394:    for (i = 1; i < numArgs; i++) {
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRGP4 $310
JUMPV
LABELV $307
line 395
;395:        weaponIndex = atoi(CG_Argv(i));
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 24
INDIRI4
ASGNI4
line 397
;396:
;397:        if (weaponIndex >= 0 && weaponIndex < WEAPONS_NUM) {
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $311
ADDRLP4 4
INDIRI4
CNSTI4 19
GEI4 $311
line 398
;398:            cg.swep_listcl[weaponIndex] = 1;
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+1870444
ADDP4
CNSTI4 1
ASGNI4
line 399
;399:        }
LABELV $311
line 400
;400:    }
LABELV $308
line 394
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $310
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $307
line 401
;401:}
LABELV $298
endproc CG_ParseSweps 32 4
export CG_ParseServerinfo
proc CG_ParseServerinfo 156 16
line 412
;402:
;403:
;404:/*
;405:================
;406:CG_ParseServerinfo
;407:
;408:This is called explicitly when the gamestate is first received,
;409:and whenever the server updates any serverinfo flagged cvars
;410:================
;411:*/
;412:void CG_ParseServerinfo( void ) {
line 416
;413:	const char	*info;
;414:	char	*mapname;
;415:
;416:	info = CG_ConfigString( CS_SERVERINFO );
CNSTI4 0
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 417
;417:	cgs.gametype = atoi( Info_ValueForKey( info, "g_gametype" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $316
ARGP4
ADDRLP4 12
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+339040
ADDRLP4 16
INDIRI4
ASGNI4
line 419
;418:	//By default do as normal:
;419:	cgs.ffa_gt = 0;
ADDRGP4 cgs+342392
CNSTI4 0
ASGNI4
line 421
;420:	//See if ffa gametype
;421:	if(cgs.gametype == GT_LMS)
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 11
NEI4 $318
line 422
;422:		cgs.ffa_gt = 1;
ADDRGP4 cgs+342392
CNSTI4 1
ASGNI4
LABELV $318
line 423
;423:	trap_Cvar_Set("g_gametype", va("%i", cgs.gametype));
ADDRGP4 $322
ARGP4
ADDRGP4 cgs+339040
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $316
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 424
;424:	cgs.dmflags = atoi( Info_ValueForKey( info, "dmflags" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $325
ARGP4
ADDRLP4 24
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+339044
ADDRLP4 28
INDIRI4
ASGNI4
line 425
;425:        cgs.videoflags = atoi( Info_ValueForKey( info, "videoflags" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $327
ARGP4
ADDRLP4 32
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+339048
ADDRLP4 36
INDIRI4
ASGNI4
line 426
;426:        cgs.elimflags = atoi( Info_ValueForKey( info, "elimflags" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $329
ARGP4
ADDRLP4 40
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+339052
ADDRLP4 44
INDIRI4
ASGNI4
line 427
;427:	cgs.teamflags = atoi( Info_ValueForKey( info, "teamflags" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $331
ARGP4
ADDRLP4 48
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+339056
ADDRLP4 52
INDIRI4
ASGNI4
line 428
;428:	cgs.fraglimit = atoi( Info_ValueForKey( info, "fraglimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $333
ARGP4
ADDRLP4 56
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+339060
ADDRLP4 60
INDIRI4
ASGNI4
line 429
;429:	cgs.capturelimit = atoi( Info_ValueForKey( info, "capturelimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $335
ARGP4
ADDRLP4 64
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 68
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+339064
ADDRLP4 68
INDIRI4
ASGNI4
line 430
;430:	cgs.timelimit = atoi( Info_ValueForKey( info, "timelimit" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $337
ARGP4
ADDRLP4 72
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+339068
ADDRLP4 76
INDIRI4
ASGNI4
line 431
;431:	cgs.maxclients = atoi( Info_ValueForKey( info, "sv_maxclients" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $339
ARGP4
ADDRLP4 80
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRLP4 84
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+339072
ADDRLP4 84
INDIRI4
ASGNI4
line 432
;432:	cgs.roundtime = atoi( Info_ValueForKey( info, "elimination_roundtime" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $341
ARGP4
ADDRLP4 88
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 92
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342400
ADDRLP4 92
INDIRI4
ASGNI4
line 433
;433:	cgs.nopickup = atoi( Info_ValueForKey( info, "g_rockets" ) ) + atoi( Info_ValueForKey( info, "g_instantgib" ) ) + atoi( Info_ValueForKey( info, "g_elimination" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $343
ARGP4
ADDRLP4 96
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 100
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $344
ARGP4
ADDRLP4 104
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $345
ARGP4
ADDRLP4 112
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRLP4 116
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342412
ADDRLP4 100
INDIRI4
ADDRLP4 108
INDIRI4
ADDI4
ADDRLP4 116
INDIRI4
ADDI4
ASGNI4
line 434
;434:	cgs.lms_mode = atoi( Info_ValueForKey( info, "g_lms_mode" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $347
ARGP4
ADDRLP4 120
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 124
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342408
ADDRLP4 124
INDIRI4
ASGNI4
line 435
;435:	cgs.altExcellent = atoi( Info_ValueForKey( info, "g_altExcellent" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $349
ARGP4
ADDRLP4 128
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+958936
ADDRLP4 132
INDIRI4
ASGNI4
line 436
;436:	mapname = Info_ValueForKey( info, "mapname" );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $350
ARGP4
ADDRLP4 136
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 136
INDIRP4
ASGNP4
line 437
;437:	Com_sprintf( cgs.mapname, sizeof( cgs.mapname ), "maps/%s.bsp", mapname );
ADDRGP4 cgs+339076
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $353
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 441
;438:
;439://unlagged - server options
;440:	// we'll need this for deciding whether or not to predict weapon effects
;441:	cgs.delagHitscan = atoi( Info_ValueForKey( info, "g_delagHitscan" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $355
ARGP4
ADDRLP4 140
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 144
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+958932
ADDRLP4 144
INDIRI4
ASGNI4
line 442
;442:	trap_Cvar_Set("g_delagHitscan", va("%i", cgs.delagHitscan));
ADDRGP4 $322
ARGP4
ADDRGP4 cgs+958932
INDIRI4
ARGI4
ADDRLP4 148
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $355
ARGP4
ADDRLP4 148
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 446
;443://unlagged - server options
;444:
;445:        //Copy allowed votes directly to the client:
;446:        trap_Cvar_Set("cg_voteflags",Info_ValueForKey( info, "voteflags" ) );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $358
ARGP4
ADDRLP4 152
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRGP4 $357
ARGP4
ADDRLP4 152
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 447
;447:}
LABELV $314
endproc CG_ParseServerinfo 156 16
proc CG_ParseWarmup 24 8
line 454
;448:
;449:/*
;450:==================
;451:CG_ParseWarmup
;452:==================
;453:*/
;454:static void CG_ParseWarmup( void ) {
line 458
;455:	const char	*info;
;456:	int			warmup;
;457:
;458:	info = CG_ConfigString( CS_WARMUP );
CNSTI4 5
ARGI4
ADDRLP4 8
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 8
INDIRP4
ASGNP4
line 460
;459:
;460:	warmup = atoi( info );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 461
;461:	cg.warmupCount = -1;
ADDRGP4 cg+1952948
CNSTI4 -1
ASGNI4
line 463
;462:
;463:	if ( warmup == 0 && cg.warmup ) {
ADDRLP4 16
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
NEI4 $361
ADDRGP4 cg+1952944
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $361
line 465
;464:
;465:	} else if ( warmup > 0 && cg.warmup <= 0 ) {
ADDRGP4 $362
JUMPV
LABELV $361
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
LEI4 $364
ADDRGP4 cg+1952944
INDIRI4
ADDRLP4 20
INDIRI4
GTI4 $364
line 467
;466:#ifdef MISSIONPACK
;467:		if (cgs.gametype >= GT_CTF && cgs.gametype < GT_MAX_GAME_TYPE && !cgs.ffa_gt) {
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 5
LTI4 $367
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 14
GEI4 $367
ADDRGP4 cgs+342392
INDIRI4
CNSTI4 0
NEI4 $367
line 468
;468:			trap_S_StartLocalSound( cgs.media.countPrepareTeamSound, CHAN_ANNOUNCER );
ADDRGP4 cgs+956380+2484
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 469
;469:		} else
ADDRGP4 $368
JUMPV
LABELV $367
line 471
;470:#endif
;471:		{
line 472
;472:			trap_S_StartLocalSound( cgs.media.countPrepareSound, CHAN_ANNOUNCER );
ADDRGP4 cgs+956380+2432
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 473
;473:		}
LABELV $368
line 474
;474:	}
LABELV $364
LABELV $362
line 476
;475:
;476:	cg.warmup = warmup;
ADDRGP4 cg+1952944
ADDRLP4 0
INDIRI4
ASGNI4
line 477
;477:}
LABELV $359
endproc CG_ParseWarmup 24 8
export CG_SetConfigValues
proc CG_SetConfigValues 36 4
line 486
;478:
;479:/*
;480:================
;481:CG_SetConfigValues
;482:
;483:Called on load to set the initial values from configure strings
;484:================
;485:*/
;486:void CG_SetConfigValues( void ) {
line 489
;487:	const char *s;
;488:
;489:	cgs.scores1 = atoi( CG_ConfigString( CS_SCORES1 ) );
CNSTI4 6
ARGI4
ADDRLP4 4
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342616
ADDRLP4 8
INDIRI4
ASGNI4
line 490
;490:	cgs.scores2 = atoi( CG_ConfigString( CS_SCORES2 ) );
CNSTI4 7
ARGI4
ADDRLP4 12
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342620
ADDRLP4 16
INDIRI4
ASGNI4
line 491
;491:	cgs.levelStartTime = atoi( CG_ConfigString( CS_LEVEL_START_TIME ) );
CNSTI4 21
ARGI4
ADDRLP4 20
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342388
ADDRLP4 24
INDIRI4
ASGNI4
line 492
;492:	if( cgs.gametype == GT_CTF || cgs.gametype == GT_CTF_ELIMINATION || cgs.gametype == GT_DOUBLE_D) {
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 5
EQI4 $387
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 10
EQI4 $387
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 12
NEI4 $381
LABELV $387
line 493
;493:		s = CG_ConfigString( CS_FLAGSTATUS );
CNSTI4 23
ARGI4
ADDRLP4 28
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 494
;494:		cgs.redflag = s[0] - '0';
ADDRGP4 cgs+342624
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 495
;495:		cgs.blueflag = s[1] - '0';
ADDRGP4 cgs+342628
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 496
;496:	}
ADDRGP4 $382
JUMPV
LABELV $381
line 498
;497:
;498:	else if( cgs.gametype == GT_1FCTF ) {
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 6
NEI4 $390
line 499
;499:		s = CG_ConfigString( CS_FLAGSTATUS );
CNSTI4 23
ARGI4
ADDRLP4 28
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 500
;500:		cgs.flagStatus = s[0] - '0';
ADDRGP4 cgs+342632
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 501
;501:	}
LABELV $390
LABELV $382
line 503
;502:
;503:	cg.warmup = atoi( CG_ConfigString( CS_WARMUP ) );
CNSTI4 5
ARGI4
ADDRLP4 28
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+1952944
ADDRLP4 32
INDIRI4
ASGNI4
line 504
;504:}
LABELV $377
endproc CG_SetConfigValues 36 4
export CG_ShaderStateChanged
proc CG_ShaderStateChanged 188 12
line 511
;505:
;506:/*
;507:=====================
;508:CG_ShaderStateChanged
;509:=====================
;510:*/
;511:void CG_ShaderStateChanged(void) {
line 518
;512:	char originalShader[MAX_QPATH];
;513:	char newShader[MAX_QPATH];
;514:	char timeOffset[16];
;515:	const char *o;
;516:	char *n,*t;
;517:
;518:	o = CG_ConfigString( CS_SHADERSTATE );
CNSTI4 24
ARGI4
ADDRLP4 156
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 156
INDIRP4
ASGNP4
ADDRGP4 $397
JUMPV
LABELV $396
line 519
;519:	while (o && *o) {
line 520
;520:		n = strstr(o, "=");
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $399
ARGP4
ADDRLP4 160
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 160
INDIRP4
ASGNP4
line 521
;521:		if (n && *n) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $398
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $398
line 522
;522:			strncpy(originalShader, o, n-o);
ADDRLP4 12
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 523
;523:			originalShader[n-o] = 0;
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 0
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 12
ADDP4
CNSTI1 0
ASGNI1
line 524
;524:			n++;
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 525
;525:			t = strstr(n, ":");
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 $402
ARGP4
ADDRLP4 172
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 172
INDIRP4
ASGNP4
line 526
;526:			if (t && *t) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $398
ADDRLP4 8
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
EQI4 $398
line 527
;527:				strncpy(newShader, n, t-n);
ADDRLP4 76
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 528
;528:				newShader[t-n] = 0;
ADDRLP4 8
INDIRP4
CVPU4 4
ADDRLP4 4
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 76
ADDP4
CNSTI1 0
ASGNI1
line 529
;529:			} else {
line 530
;530:				break;
LABELV $404
line 532
;531:			}
;532:			t++;
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 533
;533:			o = strstr(t, "@");
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 $405
ARGP4
ADDRLP4 180
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 180
INDIRP4
ASGNP4
line 534
;534:			if (o) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $401
line 535
;535:				strncpy(timeOffset, t, o-t);
ADDRLP4 140
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ARGI4
ADDRGP4 strncpy
CALLP4
pop
line 536
;536:				timeOffset[o-t] = 0;
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
ADDRLP4 140
ADDP4
CNSTI1 0
ASGNI1
line 537
;537:				o++;
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 538
;538:				trap_R_RemapShader( originalShader, newShader, timeOffset );
ADDRLP4 12
ARGP4
ADDRLP4 76
ARGP4
ADDRLP4 140
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 539
;539:			}
line 540
;540:		} else {
line 541
;541:			break;
LABELV $401
line 543
;542:		}
;543:	}
LABELV $397
line 519
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $408
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $396
LABELV $408
LABELV $398
line 544
;544:}
LABELV $395
endproc CG_ShaderStateChanged 188 12
proc CG_ConfigStringModified 48 12
line 552
;545:
;546:/*
;547:================
;548:CG_ConfigStringModified
;549:
;550:================
;551:*/
;552:static void CG_ConfigStringModified( void ) {
line 556
;553:	const char	*str;
;554:	int		num;
;555:
;556:	num = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 8
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 560
;557:
;558:	// get the gamestate from the client system, which will have the
;559:	// new configstring already integrated
;560:	trap_GetGameState( &cgs.gameState );
ADDRGP4 cgs
ARGP4
ADDRGP4 trap_GetGameState
CALLV
pop
line 563
;561:
;562:	// look up the individual string that was modified
;563:	str = CG_ConfigString( num );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
line 566
;564:
;565:	// do something with it if necessary
;566:	if ( num == CS_MUSIC ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
NEI4 $410
line 567
;567:		CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 568
;568:	} else if ( num == CS_SERVERINFO ) {
ADDRGP4 $411
JUMPV
LABELV $410
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $412
line 569
;569:		CG_ParseServerinfo();
ADDRGP4 CG_ParseServerinfo
CALLV
pop
line 570
;570:	} else if ( num == CS_WARMUP ) {
ADDRGP4 $413
JUMPV
LABELV $412
ADDRLP4 0
INDIRI4
CNSTI4 5
NEI4 $414
line 571
;571:		CG_ParseWarmup();
ADDRGP4 CG_ParseWarmup
CALLV
pop
line 572
;572:	} else if ( num == CS_SCORES1 ) {
ADDRGP4 $415
JUMPV
LABELV $414
ADDRLP4 0
INDIRI4
CNSTI4 6
NEI4 $416
line 573
;573:		cgs.scores1 = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342616
ADDRLP4 20
INDIRI4
ASGNI4
line 574
;574:	} else if ( num == CS_SCORES2 ) {
ADDRGP4 $417
JUMPV
LABELV $416
ADDRLP4 0
INDIRI4
CNSTI4 7
NEI4 $419
line 575
;575:		cgs.scores2 = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342620
ADDRLP4 20
INDIRI4
ASGNI4
line 576
;576:	} else if ( num == CS_LEVEL_START_TIME ) {
ADDRGP4 $420
JUMPV
LABELV $419
ADDRLP4 0
INDIRI4
CNSTI4 21
NEI4 $422
line 577
;577:		cgs.levelStartTime = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+342388
ADDRLP4 20
INDIRI4
ASGNI4
line 578
;578:	} else if ( num == CS_VOTE_TIME ) {
ADDRGP4 $423
JUMPV
LABELV $422
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $425
line 579
;579:		cgs.voteTime = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+339268
ADDRLP4 20
INDIRI4
ASGNI4
line 580
;580:		cgs.voteModified = qtrue;
ADDRGP4 cgs+339280
CNSTI4 1
ASGNI4
line 581
;581:	} else if ( num == CS_VOTE_YES ) {
ADDRGP4 $426
JUMPV
LABELV $425
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $429
line 582
;582:		cgs.voteYes = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+339272
ADDRLP4 20
INDIRI4
ASGNI4
line 583
;583:		cgs.voteModified = qtrue;
ADDRGP4 cgs+339280
CNSTI4 1
ASGNI4
line 584
;584:	} else if ( num == CS_VOTE_NO ) {
ADDRGP4 $430
JUMPV
LABELV $429
ADDRLP4 0
INDIRI4
CNSTI4 11
NEI4 $433
line 585
;585:		cgs.voteNo = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cgs+339276
ADDRLP4 20
INDIRI4
ASGNI4
line 586
;586:		cgs.voteModified = qtrue;
ADDRGP4 cgs+339280
CNSTI4 1
ASGNI4
line 587
;587:	} else if ( num == CS_VOTE_STRING ) {
ADDRGP4 $434
JUMPV
LABELV $433
ADDRLP4 0
INDIRI4
CNSTI4 9
NEI4 $437
line 588
;588:		Q_strncpyz( cgs.voteString, str, sizeof( cgs.voteString ) );
ADDRGP4 cgs+339284
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 590
;589:#ifdef MISSIONPACK
;590:		trap_S_StartLocalSound( cgs.media.voteNow, CHAN_ANNOUNCER );
ADDRGP4 cgs+956380+2292
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 592
;591:#endif //MISSIONPACK
;592:	} else if ( num >= CS_TEAMVOTE_TIME && num <= CS_TEAMVOTE_TIME + 1) {
ADDRGP4 $438
JUMPV
LABELV $437
ADDRLP4 0
INDIRI4
CNSTI4 12
LTI4 $443
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $443
line 593
;593:		cgs.teamVoteTime[num-CS_TEAMVOTE_TIME] = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+340308-48
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 594
;594:		cgs.teamVoteModified[num-CS_TEAMVOTE_TIME] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+340332-48
ADDP4
CNSTI4 1
ASGNI4
line 595
;595:	} else if ( num >= CS_TEAMVOTE_YES && num <= CS_TEAMVOTE_YES + 1) {
ADDRGP4 $444
JUMPV
LABELV $443
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $449
ADDRLP4 0
INDIRI4
CNSTI4 17
GTI4 $449
line 596
;596:		cgs.teamVoteYes[num-CS_TEAMVOTE_YES] = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+340316-64
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 597
;597:		cgs.teamVoteModified[num-CS_TEAMVOTE_YES] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+340332-64
ADDP4
CNSTI4 1
ASGNI4
line 598
;598:	} else if ( num >= CS_TEAMVOTE_NO && num <= CS_TEAMVOTE_NO + 1) {
ADDRGP4 $450
JUMPV
LABELV $449
ADDRLP4 0
INDIRI4
CNSTI4 18
LTI4 $455
ADDRLP4 0
INDIRI4
CNSTI4 19
GTI4 $455
line 599
;599:		cgs.teamVoteNo[num-CS_TEAMVOTE_NO] = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+340324-72
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 600
;600:		cgs.teamVoteModified[num-CS_TEAMVOTE_NO] = qtrue;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+340332-72
ADDP4
CNSTI4 1
ASGNI4
line 601
;601:	} else if ( num >= CS_TEAMVOTE_STRING && num <= CS_TEAMVOTE_STRING + 1) {
ADDRGP4 $456
JUMPV
LABELV $455
ADDRLP4 0
INDIRI4
CNSTI4 14
LTI4 $461
ADDRLP4 0
INDIRI4
CNSTI4 15
GTI4 $461
line 602
;602:		Q_strncpyz( cgs.teamVoteString[num-CS_TEAMVOTE_STRING], str, sizeof( cgs.teamVoteString ) );
ADDRLP4 0
INDIRI4
CNSTI4 10
LSHI4
ADDRGP4 cgs+340340-14336
ADDP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 2048
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 604
;603:#ifdef MISSIONPACK
;604:		trap_S_StartLocalSound( cgs.media.voteNow, CHAN_ANNOUNCER );
ADDRGP4 cgs+956380+2292
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 606
;605:#endif
;606:	} else if ( num == CS_INTERMISSION ) {
ADDRGP4 $462
JUMPV
LABELV $461
ADDRLP4 0
INDIRI4
CNSTI4 22
NEI4 $468
line 607
;607:		cg.intermissionStarted = atoi( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRGP4 cg+24
ADDRLP4 36
INDIRI4
ASGNI4
line 608
;608:	} else if ( num >= CS_MODELS && num < CS_MODELS+MAX_MODELS ) {
ADDRGP4 $469
JUMPV
LABELV $468
ADDRLP4 0
INDIRI4
CNSTI4 32
LTI4 $471
ADDRLP4 0
INDIRI4
CNSTI4 4128
GEI4 $471
line 609
;609:		cgs.gameModels[ num-CS_MODELS ] = trap_R_RegisterModel_MiTech( str );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+342640-128
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 610
;610:	} else if ( num >= CS_SOUNDS && num < CS_SOUNDS+MAX_SOUNDS ) {
ADDRGP4 $472
JUMPV
LABELV $471
ADDRLP4 0
INDIRI4
CNSTI4 4128
LTI4 $475
ADDRLP4 0
INDIRI4
CNSTI4 8224
GEI4 $475
line 611
;611:		if ( str[0] != '*' ) {	// player specific sounds don't register here
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 42
EQI4 $476
line 612
;612:			cgs.gameSounds[ num-CS_SOUNDS] = trap_S_RegisterSound_MiTech( str, qfalse );
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 44
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+359024-16512
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 613
;613:		}
line 614
;614:	} else if ( num >= CS_PLAYERS && num < CS_PLAYERS+MAX_CLIENTS ) {
ADDRGP4 $476
JUMPV
LABELV $475
ADDRLP4 0
INDIRI4
CNSTI4 8224
LTI4 $481
ADDRLP4 0
INDIRI4
CNSTI4 8480
GEI4 $481
line 615
;615:		CG_NewClientInfo( num - CS_PLAYERS );
ADDRLP4 0
INDIRI4
CNSTI4 8224
SUBI4
ARGI4
ADDRGP4 CG_NewClientInfo
CALLV
pop
line 616
;616:		CG_BuildSpectatorString();
ADDRGP4 CG_BuildSpectatorString
CALLV
pop
line 617
;617:	} else if ( num == CS_FLAGSTATUS ) {
ADDRGP4 $482
JUMPV
LABELV $481
ADDRLP4 0
INDIRI4
CNSTI4 23
NEI4 $483
line 618
;618:		if( cgs.gametype == GT_CTF || cgs.gametype == GT_CTF_ELIMINATION || cgs.gametype == GT_DOUBLE_D) {
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 5
EQI4 $491
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 10
EQI4 $491
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 12
NEI4 $485
LABELV $491
line 620
;619:			// format is rb where its red/blue, 0 is at base, 1 is taken, 2 is dropped
;620:			cgs.redflag = str[0] - '0';
ADDRGP4 cgs+342624
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 621
;621:			cgs.blueflag = str[1] - '0';
ADDRGP4 cgs+342628
ADDRLP4 4
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 622
;622:    } else if( cgs.gametype == GT_1FCTF ) {
ADDRGP4 $484
JUMPV
LABELV $485
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 6
NEI4 $484
line 623
;623:			cgs.flagStatus = str[0] - '0';
ADDRGP4 cgs+342632
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 48
SUBI4
ASGNI4
line 624
;624:		}
line 626
;625:
;626:	}
ADDRGP4 $484
JUMPV
LABELV $483
line 627
;627:	else if ( num == CS_SHADERSTATE ) {
ADDRLP4 0
INDIRI4
CNSTI4 24
NEI4 $498
line 628
;628:		CG_ShaderStateChanged();
ADDRGP4 CG_ShaderStateChanged
CALLV
pop
line 629
;629:	}
LABELV $498
LABELV $484
LABELV $482
LABELV $476
LABELV $472
LABELV $469
LABELV $462
LABELV $456
LABELV $450
LABELV $444
LABELV $438
LABELV $434
LABELV $430
LABELV $426
LABELV $423
LABELV $420
LABELV $417
LABELV $415
LABELV $413
LABELV $411
line 631
;630:
;631:}
LABELV $409
endproc CG_ConfigStringModified 48 12
proc CG_AddToTeamChat 56 0
line 640
;632:
;633:
;634:/*
;635:=======================
;636:CG_AddToTeamChat
;637:
;638:=======================
;639:*/
;640:static void CG_AddToTeamChat( const char *str ) {
line 646
;641:	int len;
;642:	char *p, *ls;
;643:	int lastcolor;
;644:	int chatHeight;
;645:
;646:	if (cg_teamChatHeight.integer < TEAMCHAT_HEIGHT) {
ADDRGP4 cg_teamChatHeight+12
INDIRI4
CNSTI4 8
GEI4 $501
line 647
;647:		chatHeight = cg_teamChatHeight.integer;
ADDRLP4 12
ADDRGP4 cg_teamChatHeight+12
INDIRI4
ASGNI4
line 648
;648:	} else {
ADDRGP4 $502
JUMPV
LABELV $501
line 649
;649:		chatHeight = TEAMCHAT_HEIGHT;
ADDRLP4 12
CNSTI4 8
ASGNI4
line 650
;650:	}
LABELV $502
line 652
;651:
;652:	if (chatHeight <= 0 || cg_teamChatTime.integer <= 0) {
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 12
INDIRI4
ADDRLP4 20
INDIRI4
LEI4 $508
ADDRGP4 cg_teamChatTime+12
INDIRI4
ADDRLP4 20
INDIRI4
GTI4 $505
LABELV $508
line 654
;653:		// team chat disabled, dump into normal chat
;654:		cgs.teamChatPos = cgs.teamLastChatPos = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRGP4 cgs+956288
ADDRLP4 24
INDIRI4
ASGNI4
ADDRGP4 cgs+956284
ADDRLP4 24
INDIRI4
ASGNI4
line 655
;655:		return;
ADDRGP4 $500
JUMPV
LABELV $505
line 658
;656:	}
;657:
;658:	len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 660
;659:
;660:	p = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
CNSTI4 241
ADDRGP4 cgs+956284
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
MULI4
ADDRGP4 cgs+954324
ADDP4
ASGNP4
line 661
;661:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 663
;662:
;663:	lastcolor = '7';
ADDRLP4 16
CNSTI4 55
ASGNI4
line 665
;664:
;665:	ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
ADDRGP4 $514
JUMPV
LABELV $513
line 666
;666:	while (*str) {
line 667
;667:		if (len > TEAMCHAT_WIDTH - 1) {
ADDRLP4 4
INDIRI4
CNSTI4 79
LEI4 $516
line 668
;668:			if (ls) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $518
line 669
;669:				str -= (p - ls);
ADDRFP4 0
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 670
;670:				str++;
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
line 671
;671:				p -= (p - ls);
ADDRLP4 0
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
SUBU4
CVUI4 4
SUBP4
ASGNP4
line 672
;672:			}
LABELV $518
line 673
;673:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 675
;674:
;675:			cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+956284
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+956252
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 677
;676:
;677:			cgs.teamChatPos++;
ADDRLP4 24
ADDRGP4 cgs+956284
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 678
;678:			p = cgs.teamChatMsgs[cgs.teamChatPos % chatHeight];
ADDRLP4 0
CNSTI4 241
ADDRGP4 cgs+956284
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
MULI4
ADDRGP4 cgs+954324
ADDP4
ASGNP4
line 679
;679:			*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 680
;680:			*p++ = Q_COLOR_ESCAPE;
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI1 94
ASGNI1
line 681
;681:			*p++ = lastcolor;
ADDRLP4 32
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
CNSTI4 1
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 16
INDIRI4
CVII1 4
ASGNI1
line 682
;682:			len = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 683
;683:			ls = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 684
;684:		}
LABELV $516
line 686
;685:
;686:		if ( Q_IsColorString( str ) ) {
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $526
ADDRLP4 24
INDIRP4
INDIRI1
CVII4 1
CNSTI4 94
NEI4 $526
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 1
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $526
ADDRLP4 28
INDIRI4
CNSTI4 48
LTI4 $526
ADDRLP4 28
INDIRI4
CNSTI4 57
GTI4 $526
line 687
;687:			*p++ = *str++;
ADDRLP4 32
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 40
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 32
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ASGNP4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 36
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI1
ASGNI1
line 688
;688:			lastcolor = *str;
ADDRLP4 16
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 689
;689:			*p++ = *str++;
ADDRLP4 44
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 52
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 44
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
ASGNP4
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 48
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI1
ASGNI1
line 690
;690:			continue;
ADDRGP4 $514
JUMPV
LABELV $526
line 692
;691:		}
;692:		if (*str == ' ') {
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 32
NEI4 $528
line 693
;693:			ls = p;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
line 694
;694:		}
LABELV $528
line 695
;695:		*p++ = *str++;
ADDRLP4 32
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 40
CNSTI4 1
ASGNI4
ADDRLP4 0
ADDRLP4 32
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ASGNP4
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRFP4 0
ADDRLP4 36
INDIRP4
ADDRLP4 40
INDIRI4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI1
ASGNI1
line 696
;696:		len++;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 697
;697:	}
LABELV $514
line 666
ADDRFP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $513
line 698
;698:	*p = 0;
ADDRLP4 0
INDIRP4
CNSTI1 0
ASGNI1
line 700
;699:
;700:	cgs.teamChatMsgTimes[cgs.teamChatPos % chatHeight] = cg.time;
ADDRGP4 cgs+956284
INDIRI4
ADDRLP4 12
INDIRI4
MODI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+956252
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 701
;701:	cgs.teamChatPos++;
ADDRLP4 24
ADDRGP4 cgs+956284
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 703
;702:
;703:	if (cgs.teamChatPos - cgs.teamLastChatPos > chatHeight)
ADDRGP4 cgs+956284
INDIRI4
ADDRGP4 cgs+956288
INDIRI4
SUBI4
ADDRLP4 12
INDIRI4
LEI4 $534
line 704
;704:		cgs.teamLastChatPos = cgs.teamChatPos - chatHeight;
ADDRGP4 cgs+956288
ADDRGP4 cgs+956284
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ASGNI4
LABELV $534
line 705
;705:}
LABELV $500
endproc CG_AddToTeamChat 56 0
proc CG_MapRestart 12 12
line 718
;706:
;707:/*
;708:===============
;709:CG_MapRestart
;710:
;711:The server has issued a map_restart, so the next snapshot
;712:is completely new and should not be interpolated to.
;713:
;714:A tournement restart will clear everything, but doesn't
;715:require a reload of all the media
;716:===============
;717:*/
;718:static void CG_MapRestart( void ) {
line 719
;719:	if ( cg_showmiss.integer ) {
ADDRGP4 cg_showmiss+12
INDIRI4
CNSTI4 0
EQI4 $541
line 720
;720:		CG_Printf( "CG_MapRestart\n" );
ADDRGP4 $544
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 721
;721:	}
LABELV $541
line 723
;722:
;723:	CG_InitLocalEntities();
ADDRGP4 CG_InitLocalEntities
CALLV
pop
line 724
;724:	CG_InitMarkPolys();
ADDRGP4 CG_InitMarkPolys
CALLV
pop
line 725
;725:	CG_ClearParticles ();
ADDRGP4 CG_ClearParticles
CALLV
pop
line 728
;726:
;727:	// make sure the "3 frags left" warnings play again
;728:	cg.fraglimitWarnings = 0;
ADDRGP4 cg+1868908
CNSTI4 0
ASGNI4
line 730
;729:
;730:	cg.timelimitWarnings = 0;
ADDRGP4 cg+1868904
CNSTI4 0
ASGNI4
line 732
;731:
;732:	cg.intermissionStarted = qfalse;
ADDRGP4 cg+24
CNSTI4 0
ASGNI4
line 734
;733:
;734:	cgs.voteTime = 0;
ADDRGP4 cgs+339268
CNSTI4 0
ASGNI4
line 736
;735:
;736:	cg.mapRestart = qtrue;
ADDRGP4 cg+1868912
CNSTI4 1
ASGNI4
line 738
;737:
;738:	CG_StartMusic();
ADDRGP4 CG_StartMusic
CALLV
pop
line 740
;739:
;740:	trap_S_ClearLoopingSounds(qtrue);
CNSTI4 1
ARGI4
ADDRGP4 trap_S_ClearLoopingSounds
CALLV
pop
line 745
;741:
;742:	// we really should clear more parts of cg here and stop sounds
;743:
;744:	// play the "fight" sound if this is a restart without warmup
;745:	if ( cg.warmup == 0 /* && cgs.gametype == GT_TOURNAMENT */) {
ADDRGP4 cg+1952944
INDIRI4
CNSTI4 0
NEI4 $550
line 746
;746:		trap_S_StartLocalSound( cgs.media.countFightSound, CHAN_ANNOUNCER );
ADDRGP4 cgs+956380+2428
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 747
;747:		CG_CenterPrint( "FIGHT!", 120, GIANTCHAR_WIDTH*2 );
ADDRGP4 $555
ARGP4
CNSTI4 120
ARGI4
ADDRGP4 cl_giantcharwidth+12
INDIRI4
CNSTI4 1
LSHI4
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 748
;748:	}
LABELV $550
line 750
;749:#ifdef MISSIONPACK
;750:	if (cg_singlePlayerActive.integer) {
ADDRGP4 cg_singlePlayerActive+12
INDIRI4
CNSTI4 0
EQI4 $557
line 751
;751:		trap_Cvar_Set("ui_matchStartTime", va("%i", cg.time));
ADDRGP4 $322
ARGP4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $560
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 752
;752:		if (cg_recordSPDemo.integer && cg_recordSPDemoName.string && *cg_recordSPDemoName.string) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 cg_recordSPDemo+12
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $562
ADDRGP4 cg_recordSPDemoName+16
CVPU4 4
CNSTU4 0
EQU4 $562
ADDRGP4 cg_recordSPDemoName+16
INDIRI1
CVII4 1
ADDRLP4 4
INDIRI4
EQI4 $562
line 753
;753:			trap_SendConsoleCommand(va("set g_synchronousclients 1 ; record %s \n", cg_recordSPDemoName.string));
ADDRGP4 $567
ARGP4
ADDRGP4 cg_recordSPDemoName+16
ARGP4
ADDRLP4 8
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 754
;754:		}
LABELV $562
line 755
;755:	}
LABELV $557
line 757
;756:#endif
;757:}
LABELV $540
endproc CG_MapRestart 12 12
export CG_ParseVoiceChats
proc CG_ParseVoiceChats 16508 16
line 796
;758:
;759:#define MAX_VOICEFILESIZE	16384
;760:#define MAX_VOICEFILES		64
;761:#define MAX_VOICECHATS		64
;762:#define MAX_VOICESOUNDS		64
;763:#define MAX_CHATSIZE		64
;764:#define MAX_HEADMODELS		64
;765:
;766:typedef struct voiceChat_s
;767:{
;768:	char id[64];
;769:	int numSounds;
;770:	sfxHandle_t sounds[MAX_VOICESOUNDS];
;771:	char chats[MAX_VOICESOUNDS][MAX_CHATSIZE];
;772:} voiceChat_t;
;773:
;774:typedef struct voiceChatList_s
;775:{
;776:	char name[64];
;777:	int gender;
;778:	int numVoiceChats;
;779:	voiceChat_t voiceChats[MAX_VOICECHATS];
;780:} voiceChatList_t;
;781:
;782:typedef struct headModelVoiceChat_s
;783:{
;784:	char headmodel[64];
;785:	int voiceChatNum;
;786:} headModelVoiceChat_t;
;787:
;788:voiceChatList_t voiceChatLists[MAX_VOICEFILES];
;789:headModelVoiceChat_t headModelVoiceChat[MAX_HEADMODELS];
;790:
;791:/*
;792:=================
;793:CG_ParseVoiceChats
;794:=================
;795:*/
;796:int CG_ParseVoiceChats( const char *filename, voiceChatList_t *voiceChatList, int maxVoiceChats ) {
line 806
;797:	int	len, i;
;798:	fileHandle_t f;
;799:	char buf[MAX_VOICEFILESIZE];
;800:	char **p, *ptr;
;801:	char *token;
;802:	voiceChat_t *voiceChats;
;803:	qboolean compress;
;804:	sfxHandle_t sound;
;805:
;806:	compress = qtrue;
ADDRLP4 16
CNSTI4 1
ASGNI4
line 807
;807:	if (cg_buildScript.integer) {
ADDRGP4 cg_buildScript+12
INDIRI4
CNSTI4 0
EQI4 $570
line 808
;808:		compress = qfalse;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 809
;809:	}
LABELV $570
line 811
;810:
;811:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16420
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 16420
INDIRI4
ASGNI4
line 812
;812:	if ( !f ) {
ADDRLP4 28
INDIRI4
CNSTI4 0
NEI4 $573
line 813
;813:		trap_Print( va( S_COLOR_RED "voice chat file not found: %s\n", filename ) );
ADDRGP4 $575
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16424
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16424
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 814
;814:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $569
JUMPV
LABELV $573
line 816
;815:	}
;816:	if ( len >= MAX_VOICEFILESIZE ) {
ADDRLP4 24
INDIRI4
CNSTI4 16384
LTI4 $576
line 817
;817:		trap_Print( va( S_COLOR_RED "voice chat file too large: %s is %i, max allowed is %i\n", filename, len, MAX_VOICEFILESIZE ) );
ADDRGP4 $578
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
CNSTI4 16384
ARGI4
ADDRLP4 16424
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16424
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 818
;818:		trap_FS_FCloseFile( f );
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 819
;819:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $569
JUMPV
LABELV $576
line 822
;820:	}
;821:
;822:	trap_FS_Read( buf, len, f );
ADDRLP4 32
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 823
;823:	buf[len] = 0;
ADDRLP4 24
INDIRI4
ADDRLP4 32
ADDP4
CNSTI1 0
ASGNI1
line 824
;824:	trap_FS_FCloseFile( f );
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 826
;825:
;826:	ptr = buf;
ADDRLP4 16416
ADDRLP4 32
ASGNP4
line 827
;827:	p = &ptr;
ADDRLP4 12
ADDRLP4 16416
ASGNP4
line 829
;828:
;829:	Com_sprintf(voiceChatList->name, sizeof(voiceChatList->name), "%s", filename);
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $579
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 830
;830:	voiceChats = voiceChatList->voiceChats;
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
line 831
;831:	for ( i = 0; i < maxVoiceChats; i++ ) {
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 $583
JUMPV
LABELV $580
line 832
;832:		voiceChats[i].id[0] = 0;
CNSTI4 4420
ADDRLP4 20
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 833
;833:	}
LABELV $581
line 831
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $583
ADDRLP4 20
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $580
line 834
;834:	token = COM_ParseExt(p, qtrue);
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16424
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16424
INDIRP4
ASGNP4
line 835
;835:	if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $586
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $584
LABELV $586
line 836
;836:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $569
JUMPV
LABELV $584
line 838
;837:	}
;838:	if (!Q_stricmp(token, "female")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $589
ARGP4
ADDRLP4 16432
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16432
INDIRI4
CNSTI4 0
NEI4 $587
line 839
;839:		voiceChatList->gender = GENDER_FEMALE;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 1
ASGNI4
line 840
;840:	}
ADDRGP4 $588
JUMPV
LABELV $587
line 841
;841:	else if (!Q_stricmp(token, "male")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $592
ARGP4
ADDRLP4 16436
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16436
INDIRI4
CNSTI4 0
NEI4 $590
line 842
;842:		voiceChatList->gender = GENDER_MALE;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
line 843
;843:	}
ADDRGP4 $591
JUMPV
LABELV $590
line 844
;844:	else if (!Q_stricmp(token, "neuter")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $595
ARGP4
ADDRLP4 16440
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16440
INDIRI4
CNSTI4 0
NEI4 $593
line 845
;845:		voiceChatList->gender = GENDER_NEUTER;
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
CNSTI4 2
ASGNI4
line 846
;846:	}
ADDRGP4 $594
JUMPV
LABELV $593
line 847
;847:	else {
line 848
;848:		trap_Print( va( S_COLOR_RED "expected gender not found in voice chat file: %s\n", filename ) );
ADDRGP4 $596
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16444
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16444
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 849
;849:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $569
JUMPV
LABELV $594
LABELV $591
LABELV $588
line 852
;850:	}
;851:
;852:	voiceChatList->numVoiceChats = 0;
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $598
JUMPV
LABELV $597
line 853
;853:	while ( 1 ) {
line 854
;854:		token = COM_ParseExt(p, qtrue);
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16444
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16444
INDIRP4
ASGNP4
line 855
;855:		if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $602
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $600
LABELV $602
line 856
;856:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $569
JUMPV
LABELV $600
line 858
;857:		}
;858:		Com_sprintf(voiceChats[voiceChatList->numVoiceChats].id, sizeof( voiceChats[voiceChatList->numVoiceChats].id ), "%s", token);
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $579
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 859
;859:		token = COM_ParseExt(p, qtrue);
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16452
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16452
INDIRP4
ASGNP4
line 860
;860:		if (Q_stricmp(token, "{")) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $605
ARGP4
ADDRLP4 16456
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16456
INDIRI4
CNSTI4 0
EQI4 $603
line 861
;861:			trap_Print( va( S_COLOR_RED "expected { found %s in voice chat file: %s\n", token, filename ) );
ADDRGP4 $606
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 16460
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16460
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 862
;862:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $569
JUMPV
LABELV $603
line 864
;863:		}
;864:		voiceChats[voiceChatList->numVoiceChats].numSounds = 0;
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
CNSTI4 64
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $608
JUMPV
LABELV $607
line 865
;865:		while(1) {
line 866
;866:			token = COM_ParseExt(p, qtrue);
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16460
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16460
INDIRP4
ASGNP4
line 867
;867:			if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $612
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $610
LABELV $612
line 868
;868:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $569
JUMPV
LABELV $610
line 870
;869:			}
;870:			if (!Q_stricmp(token, "}"))
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $615
ARGP4
ADDRLP4 16468
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16468
INDIRI4
CNSTI4 0
NEI4 $613
line 871
;871:				break;
ADDRGP4 $609
JUMPV
LABELV $613
line 872
;872:			sound = trap_S_RegisterSound_MiTech( token, compress );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 16472
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 16472
INDIRI4
ASGNI4
line 873
;873:			voiceChats[voiceChatList->numVoiceChats].sounds[voiceChats[voiceChatList->numVoiceChats].numSounds] = sound;
ADDRLP4 16476
CNSTI4 68
ASGNI4
ADDRLP4 16480
CNSTI4 4420
ADDRFP4 4
INDIRP4
ADDRLP4 16476
INDIRI4
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
ADDRLP4 16480
INDIRP4
CNSTI4 64
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16480
INDIRP4
ADDRLP4 16476
INDIRI4
ADDP4
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 874
;874:			token = COM_ParseExt(p, qtrue);
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16484
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16484
INDIRP4
ASGNP4
line 875
;875:			if (!token || token[0] == 0) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $618
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $616
LABELV $618
line 876
;876:				return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $569
JUMPV
LABELV $616
line 878
;877:			}
;878:			Com_sprintf(voiceChats[voiceChatList->numVoiceChats].chats[
ADDRLP4 16492
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
ADDRLP4 16496
CNSTI4 64
ASGNI4
ADDRLP4 16492
INDIRP4
ADDRLP4 16496
INDIRI4
ADDP4
INDIRI4
CNSTI4 6
LSHI4
ADDRLP4 16492
INDIRP4
CNSTI4 324
ADDP4
ADDP4
ARGP4
ADDRLP4 16496
INDIRI4
ARGI4
ADDRGP4 $579
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 880
;879:							voiceChats[voiceChatList->numVoiceChats].numSounds], MAX_CHATSIZE, "%s", token);
;880:			if (sound)
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $619
line 881
;881:				voiceChats[voiceChatList->numVoiceChats].numSounds++;
ADDRLP4 16500
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
CNSTI4 64
ADDP4
ASGNP4
ADDRLP4 16500
INDIRP4
ADDRLP4 16500
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $619
line 882
;882:			if (voiceChats[voiceChatList->numVoiceChats].numSounds >= MAX_VOICESOUNDS)
ADDRLP4 16504
CNSTI4 64
ASGNI4
CNSTI4 4420
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ADDRLP4 16504
INDIRI4
ADDP4
INDIRI4
ADDRLP4 16504
INDIRI4
LTI4 $621
line 883
;883:				break;
ADDRGP4 $609
JUMPV
LABELV $621
line 884
;884:		}
LABELV $608
line 865
ADDRGP4 $607
JUMPV
LABELV $609
line 885
;885:		voiceChatList->numVoiceChats++;
ADDRLP4 16460
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 16460
INDIRP4
ADDRLP4 16460
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 886
;886:		if (voiceChatList->numVoiceChats >= maxVoiceChats)
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
ADDRFP4 8
INDIRI4
LTI4 $623
line 887
;887:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $569
JUMPV
LABELV $623
line 888
;888:	}
LABELV $598
line 853
ADDRGP4 $597
JUMPV
line 889
;889:	return qtrue;
CNSTI4 1
RETI4
LABELV $569
endproc CG_ParseVoiceChats 16508 16
export CG_LoadVoiceChats
proc CG_LoadVoiceChats 16 12
line 897
;890:}
;891:
;892:/*
;893:=================
;894:CG_LoadVoiceChats
;895:=================
;896:*/
;897:void CG_LoadVoiceChats( void ) {
line 900
;898:	int size;
;899:
;900:	size = trap_MemoryRemaining();
ADDRLP4 4
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 901
;901:	CG_ParseVoiceChats( "scripts/female1.voice", &voiceChatLists[0], MAX_VOICECHATS );
ADDRGP4 $626
ARGP4
ADDRGP4 voiceChatLists
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 902
;902:	CG_ParseVoiceChats( "scripts/female2.voice", &voiceChatLists[1], MAX_VOICECHATS );
ADDRGP4 $627
ARGP4
ADDRGP4 voiceChatLists+282952
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 903
;903:	CG_ParseVoiceChats( "scripts/female3.voice", &voiceChatLists[2], MAX_VOICECHATS );
ADDRGP4 $629
ARGP4
ADDRGP4 voiceChatLists+565904
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 904
;904:	CG_ParseVoiceChats( "scripts/male1.voice", &voiceChatLists[3], MAX_VOICECHATS );
ADDRGP4 $631
ARGP4
ADDRGP4 voiceChatLists+848856
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 905
;905:	CG_ParseVoiceChats( "scripts/male2.voice", &voiceChatLists[4], MAX_VOICECHATS );
ADDRGP4 $633
ARGP4
ADDRGP4 voiceChatLists+1131808
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 906
;906:	CG_ParseVoiceChats( "scripts/male3.voice", &voiceChatLists[5], MAX_VOICECHATS );
ADDRGP4 $635
ARGP4
ADDRGP4 voiceChatLists+1414760
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 907
;907:	CG_ParseVoiceChats( "scripts/male4.voice", &voiceChatLists[6], MAX_VOICECHATS );
ADDRGP4 $637
ARGP4
ADDRGP4 voiceChatLists+1697712
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 908
;908:	CG_ParseVoiceChats( "scripts/male5.voice", &voiceChatLists[7], MAX_VOICECHATS );
ADDRGP4 $639
ARGP4
ADDRGP4 voiceChatLists+1980664
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 909
;909:	CG_ParseVoiceChats( "scripts/female1rus.voice", &voiceChatLists[8], MAX_VOICECHATS );
ADDRGP4 $641
ARGP4
ADDRGP4 voiceChatLists+2263616
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 910
;910:	CG_ParseVoiceChats( "scripts/female2rus.voice", &voiceChatLists[9], MAX_VOICECHATS );
ADDRGP4 $643
ARGP4
ADDRGP4 voiceChatLists+2546568
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 911
;911:	CG_ParseVoiceChats( "scripts/female3rus.voice", &voiceChatLists[10], MAX_VOICECHATS );
ADDRGP4 $645
ARGP4
ADDRGP4 voiceChatLists+2829520
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 912
;912:	CG_ParseVoiceChats( "scripts/male1rus.voice", &voiceChatLists[11], MAX_VOICECHATS );
ADDRGP4 $647
ARGP4
ADDRGP4 voiceChatLists+3112472
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 913
;913:	CG_ParseVoiceChats( "scripts/male2rus.voice", &voiceChatLists[12], MAX_VOICECHATS );
ADDRGP4 $649
ARGP4
ADDRGP4 voiceChatLists+3395424
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 914
;914:	CG_ParseVoiceChats( "scripts/male3rus.voice", &voiceChatLists[13], MAX_VOICECHATS );
ADDRGP4 $651
ARGP4
ADDRGP4 voiceChatLists+3678376
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 915
;915:	CG_ParseVoiceChats( "scripts/male4rus.voice", &voiceChatLists[14], MAX_VOICECHATS );
ADDRGP4 $653
ARGP4
ADDRGP4 voiceChatLists+3961328
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 916
;916:	CG_ParseVoiceChats( "scripts/male5rus.voice", &voiceChatLists[15], MAX_VOICECHATS );
ADDRGP4 $655
ARGP4
ADDRGP4 voiceChatLists+4244280
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 917
;917:	CG_ParseVoiceChats( "scripts/bandit.voice", &voiceChatLists[16], MAX_VOICECHATS );
ADDRGP4 $657
ARGP4
ADDRGP4 voiceChatLists+4527232
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 CG_ParseVoiceChats
CALLI4
pop
line 918
;918:	CG_Printf("voice chat memory size = %d\n", size - trap_MemoryRemaining());
ADDRLP4 8
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRGP4 $659
ARGP4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 919
;919:	CG_Printf("voice chat rus memory size = %d\n", size - trap_MemoryRemaining());
ADDRLP4 12
ADDRGP4 trap_MemoryRemaining
CALLI4
ASGNI4
ADDRGP4 $660
ARGP4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ARGI4
ADDRGP4 CG_Printf
CALLV
pop
line 920
;920:}
LABELV $625
endproc CG_LoadVoiceChats 16 12
export CG_HeadModelVoiceChats
proc CG_HeadModelVoiceChats 16424 16
line 927
;921:
;922:/*
;923:=================
;924:CG_HeadModelVoiceChats
;925:=================
;926:*/
;927:int CG_HeadModelVoiceChats( char *filename ) {
line 934
;928:	int	len, i;
;929:	fileHandle_t f;
;930:	char buf[MAX_VOICEFILESIZE];
;931:	char **p, *ptr;
;932:	char *token;
;933:
;934:	len = trap_FS_FOpenFile( filename, &f, FS_READ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 16408
ADDRGP4 trap_FS_FOpenFile
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 16408
INDIRI4
ASGNI4
line 935
;935:	if ( !f ) {
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $662
line 937
;936:		//trap_Print( va( "voice chat file not found: %s\n", filename ) );
;937:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $661
JUMPV
LABELV $662
line 939
;938:	}
;939:	if ( len >= MAX_VOICEFILESIZE ) {
ADDRLP4 8
INDIRI4
CNSTI4 16384
LTI4 $664
line 940
;940:		trap_Print( va( S_COLOR_RED "voice chat file too large: %s is %i, max allowed is %i\n", filename, len, MAX_VOICEFILESIZE ) );
ADDRGP4 $578
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
CNSTI4 16384
ARGI4
ADDRLP4 16412
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16412
INDIRP4
ARGP4
ADDRGP4 trap_Print
CALLV
pop
line 941
;941:		trap_FS_FCloseFile( f );
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 942
;942:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $661
JUMPV
LABELV $664
line 945
;943:	}
;944:
;945:	trap_FS_Read( buf, len, f );
ADDRLP4 16
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_FS_Read
CALLV
pop
line 946
;946:	buf[len] = 0;
ADDRLP4 8
INDIRI4
ADDRLP4 16
ADDP4
CNSTI1 0
ASGNI1
line 947
;947:	trap_FS_FCloseFile( f );
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 trap_FS_FCloseFile
CALLV
pop
line 949
;948:
;949:	ptr = buf;
ADDRLP4 16404
ADDRLP4 16
ASGNP4
line 950
;950:	p = &ptr;
ADDRLP4 16400
ADDRLP4 16404
ASGNP4
line 952
;951:
;952:	token = COM_ParseExt(p, qtrue);
ADDRLP4 16400
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 16412
ADDRGP4 COM_ParseExt
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16412
INDIRP4
ASGNP4
line 953
;953:	if (!token || token[0] == 0) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $668
ADDRLP4 4
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $666
LABELV $668
line 954
;954:		return -1;
CNSTI4 -1
RETI4
ADDRGP4 $661
JUMPV
LABELV $666
line 957
;955:	}
;956:
;957:	for ( i = 0; i < MAX_VOICEFILES; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $669
line 958
;958:		if ( !Q_stricmp(token, voiceChatLists[i].name) ) {
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
ARGP4
ADDRLP4 16420
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 16420
INDIRI4
CNSTI4 0
NEI4 $673
line 959
;959:			return i;
ADDRLP4 0
INDIRI4
RETI4
ADDRGP4 $661
JUMPV
LABELV $673
line 961
;960:		}
;961:	}
LABELV $670
line 957
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 64
LTI4 $669
line 965
;962:
;963:	//FIXME: maybe try to load the .voice file which name is stored in token?
;964:
;965:	return -1;
CNSTI4 -1
RETI4
LABELV $661
endproc CG_HeadModelVoiceChats 16424 16
export CG_GetVoiceChat
proc CG_GetVoiceChat 16 8
line 974
;966:}
;967:
;968:
;969:/*
;970:=================
;971:CG_GetVoiceChat
;972:=================
;973:*/
;974:int CG_GetVoiceChat( voiceChatList_t *voiceChatList, const char *id, sfxHandle_t *snd, char **chat) {
line 977
;975:	int i, rnd;
;976:
;977:	for ( i = 0; i < voiceChatList->numVoiceChats; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $679
JUMPV
LABELV $676
line 978
;978:		if ( !Q_stricmp( id, voiceChatList->voiceChats[i].id ) ) {
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
ARGP4
ADDRLP4 8
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $680
line 979
;979:			rnd = random() * voiceChatList->voiceChats[i].numSounds;
ADDRLP4 12
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 64
ADDP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 980
;980:			*snd = voiceChatList->voiceChats[i].sounds[rnd];
ADDRFP4 8
INDIRP4
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 68
ADDP4
ADDP4
INDIRI4
ASGNI4
line 981
;981:			*chat = voiceChatList->voiceChats[i].chats[rnd];
ADDRFP4 12
INDIRP4
ADDRLP4 4
INDIRI4
CNSTI4 6
LSHI4
CNSTI4 4420
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDP4
CNSTI4 324
ADDP4
ADDP4
ASGNP4
line 982
;982:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $675
JUMPV
LABELV $680
line 984
;983:		}
;984:	}
LABELV $677
line 977
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $679
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
LTI4 $676
line 985
;985:	return qfalse;
CNSTI4 0
RETI4
LABELV $675
endproc CG_GetVoiceChat 16 8
export CG_VoiceChatListForClient
proc CG_VoiceChatListForClient 164 20
line 993
;986:}
;987:
;988:/*
;989:=================
;990:CG_VoiceChatListForClient
;991:=================
;992:*/
;993:voiceChatList_t *CG_VoiceChatListForClient( int clientNum ) {
line 998
;994:	clientInfo_t *ci;
;995:	int voiceChatNum, i, j, k, gender;
;996:	char filename[MAX_QPATH], headModelName[MAX_QPATH];
;997:
;998:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
ADDRLP4 152
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 152
INDIRI4
CNSTI4 0
LTI4 $685
ADDRLP4 152
INDIRI4
CNSTI4 256
LTI4 $683
LABELV $685
line 999
;999:		clientNum = 0;
ADDRFP4 0
CNSTI4 0
ASGNI4
line 1000
;1000:	}
LABELV $683
line 1001
;1001:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 148
CNSTI4 1944
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cgs+440948
ADDP4
ASGNP4
line 1003
;1002:
;1003:	for ( k = 0; k < 2; k++ ) {
ADDRLP4 144
CNSTI4 0
ASGNI4
LABELV $687
line 1004
;1004:		if ( k == 0 ) {
ADDRLP4 144
INDIRI4
CNSTI4 0
NEI4 $691
line 1005
;1005:			if (ci->headModelName[0] == '*') {
ADDRLP4 148
INDIRP4
CNSTI4 356
ADDP4
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $693
line 1006
;1006:				Com_sprintf( headModelName, sizeof(headModelName), "%s/%s", ci->headModelName+1, ci->headSkinName );
ADDRLP4 8
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $695
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 357
ADDP4
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 420
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1007
;1007:			}
ADDRGP4 $692
JUMPV
LABELV $693
line 1008
;1008:			else {
line 1009
;1009:				Com_sprintf( headModelName, sizeof(headModelName), "%s/%s", ci->headModelName, ci->headSkinName );
ADDRLP4 8
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $695
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 356
ADDP4
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 420
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1010
;1010:			}
line 1011
;1011:		}
ADDRGP4 $692
JUMPV
LABELV $691
line 1012
;1012:		else {
line 1013
;1013:			if (ci->headModelName[0] == '*') {
ADDRLP4 148
INDIRP4
CNSTI4 356
ADDP4
INDIRI1
CVII4 1
CNSTI4 42
NEI4 $696
line 1014
;1014:				Com_sprintf( headModelName, sizeof(headModelName), "%s", ci->headModelName+1 );
ADDRLP4 8
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $579
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 357
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1015
;1015:			}
ADDRGP4 $697
JUMPV
LABELV $696
line 1016
;1016:			else {
line 1017
;1017:				Com_sprintf( headModelName, sizeof(headModelName), "%s", ci->headModelName );
ADDRLP4 8
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $579
ARGP4
ADDRLP4 148
INDIRP4
CNSTI4 356
ADDP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1018
;1018:			}
LABELV $697
line 1019
;1019:		}
LABELV $692
line 1021
;1020:		// find the voice file for the head model the client uses
;1021:		for ( i = 0; i < MAX_HEADMODELS; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $698
line 1022
;1022:			if (!Q_stricmp(headModelVoiceChat[i].headmodel, headModelName)) {
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 156
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $702
line 1023
;1023:				break;
ADDRGP4 $700
JUMPV
LABELV $702
line 1025
;1024:			}
;1025:		}
LABELV $699
line 1021
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 64
LTI4 $698
LABELV $700
line 1026
;1026:		if (i < MAX_HEADMODELS) {
ADDRLP4 0
INDIRI4
CNSTI4 64
GEI4 $704
line 1027
;1027:			return &voiceChatLists[headModelVoiceChat[i].voiceChatNum];
CNSTI4 282952
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
RETP4
ADDRGP4 $682
JUMPV
LABELV $704
line 1030
;1028:		}
;1029:		// find a <headmodelname>.vc file
;1030:		for ( i = 0; i < MAX_HEADMODELS; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $707
line 1031
;1031:			if (!strlen(headModelVoiceChat[i].headmodel)) {
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
ADDRLP4 156
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $711
line 1032
;1032:				Com_sprintf(filename, sizeof(filename), "scripts/%s.vc", headModelName);
ADDRLP4 76
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $713
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1033
;1033:				voiceChatNum = CG_HeadModelVoiceChats(filename);
ADDRLP4 76
ARGP4
ADDRLP4 160
ADDRGP4 CG_HeadModelVoiceChats
CALLI4
ASGNI4
ADDRLP4 72
ADDRLP4 160
INDIRI4
ASGNI4
line 1034
;1034:				if (voiceChatNum == -1)
ADDRLP4 72
INDIRI4
CNSTI4 -1
NEI4 $714
line 1035
;1035:					break;
ADDRGP4 $709
JUMPV
LABELV $714
line 1036
;1036:				Com_sprintf(headModelVoiceChat[i].headmodel, sizeof ( headModelVoiceChat[i].headmodel ),
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $579
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1038
;1037:							"%s", headModelName);
;1038:				headModelVoiceChat[i].voiceChatNum = voiceChatNum;
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
ADDRLP4 72
INDIRI4
ASGNI4
line 1039
;1039:				return &voiceChatLists[headModelVoiceChat[i].voiceChatNum];
CNSTI4 282952
CNSTI4 68
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
RETP4
ADDRGP4 $682
JUMPV
LABELV $711
line 1041
;1040:			}
;1041:		}
LABELV $708
line 1030
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 64
LTI4 $707
LABELV $709
line 1042
;1042:	}
LABELV $688
line 1003
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 2
LTI4 $687
line 1043
;1043:	gender = ci->gender;
ADDRLP4 140
ADDRLP4 148
INDIRP4
CNSTI4 708
ADDP4
INDIRI4
ASGNI4
line 1044
;1044:	for (k = 0; k < 2; k++) {
ADDRLP4 144
CNSTI4 0
ASGNI4
LABELV $718
line 1046
;1045:		// just pick the first with the right gender
;1046:		for ( i = 0; i < MAX_VOICEFILES; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $722
line 1047
;1047:			if (strlen(voiceChatLists[i].name)) {
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
ARGP4
ADDRLP4 156
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
EQI4 $726
line 1048
;1048:				if (voiceChatLists[i].gender == gender) {
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists+64
ADDP4
INDIRI4
ADDRLP4 140
INDIRI4
NEI4 $728
line 1050
;1049:					// store this head model with voice chat for future reference
;1050:					for ( j = 0; j < MAX_HEADMODELS; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $731
line 1051
;1051:						if (!strlen(headModelVoiceChat[j].headmodel)) {
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
ADDRLP4 160
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 160
INDIRI4
CNSTI4 0
NEI4 $735
line 1052
;1052:							Com_sprintf(headModelVoiceChat[j].headmodel, sizeof ( headModelVoiceChat[j].headmodel ),
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $579
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1054
;1053:									"%s", headModelName);
;1054:							headModelVoiceChat[j].voiceChatNum = i;
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1055
;1055:							break;
ADDRGP4 $733
JUMPV
LABELV $735
line 1057
;1056:						}
;1057:					}
LABELV $732
line 1050
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 64
LTI4 $731
LABELV $733
line 1058
;1058:					return &voiceChatLists[i];
CNSTI4 282952
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 voiceChatLists
ADDP4
RETP4
ADDRGP4 $682
JUMPV
LABELV $728
line 1060
;1059:				}
;1060:			}
LABELV $726
line 1061
;1061:		}
LABELV $723
line 1046
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 64
LTI4 $722
line 1063
;1062:		// fall back to male gender because we don't have neuter in the mission pack
;1063:		if (gender == GENDER_MALE)
ADDRLP4 140
INDIRI4
CNSTI4 0
NEI4 $738
line 1064
;1064:			break;
ADDRGP4 $720
JUMPV
LABELV $738
line 1065
;1065:		gender = GENDER_MALE;
ADDRLP4 140
CNSTI4 0
ASGNI4
line 1066
;1066:	}
LABELV $719
line 1044
ADDRLP4 144
ADDRLP4 144
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 2
LTI4 $718
LABELV $720
line 1068
;1067:	// store this head model with voice chat for future reference
;1068:	for ( j = 0; j < MAX_HEADMODELS; j++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $740
line 1069
;1069:		if (!strlen(headModelVoiceChat[j].headmodel)) {
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
ADDRLP4 156
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 156
INDIRI4
CNSTI4 0
NEI4 $744
line 1070
;1070:			Com_sprintf(headModelVoiceChat[j].headmodel, sizeof ( headModelVoiceChat[j].headmodel ),
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat
ADDP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 $579
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1072
;1071:					"%s", headModelName);
;1072:			headModelVoiceChat[j].voiceChatNum = 0;
CNSTI4 68
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 headModelVoiceChat+64
ADDP4
CNSTI4 0
ASGNI4
line 1073
;1073:			break;
ADDRGP4 $742
JUMPV
LABELV $744
line 1075
;1074:		}
;1075:	}
LABELV $741
line 1068
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 64
LTI4 $740
LABELV $742
line 1077
;1076:	// just return the first voice chat list
;1077:	return &voiceChatLists[0];
ADDRGP4 voiceChatLists
RETP4
LABELV $682
endproc CG_VoiceChatListForClient 164 20
export CG_PlayVoiceChat
proc CG_PlayVoiceChat 8 12
line 1098
;1078:}
;1079:
;1080:#define MAX_VOICECHATBUFFER		32
;1081:
;1082:typedef struct bufferedVoiceChat_s
;1083:{
;1084:	int clientNum;
;1085:	sfxHandle_t snd;
;1086:	int voiceOnly;
;1087:	char cmd[MAX_SAY_TEXT];
;1088:	char message[MAX_SAY_TEXT];
;1089:} bufferedVoiceChat_t;
;1090:
;1091:bufferedVoiceChat_t voiceChatBuffer[MAX_VOICECHATBUFFER];
;1092:
;1093:/*
;1094:=================
;1095:CG_PlayVoiceChat
;1096:=================
;1097:*/
;1098:void CG_PlayVoiceChat( bufferedVoiceChat_t *vchat ) {
line 1101
;1099:#ifdef MISSIONPACK
;1100:	// if we are going into the intermission, don't start any voices
;1101:	if ( cg.intermissionStarted ) {
ADDRGP4 cg+24
INDIRI4
CNSTI4 0
EQI4 $748
line 1102
;1102:		return;
ADDRGP4 $747
JUMPV
LABELV $748
line 1105
;1103:	}
;1104:
;1105:	if ( !cg_noVoiceChats.integer ) {
ADDRGP4 cg_noVoiceChats+12
INDIRI4
CNSTI4 0
NEI4 $751
line 1106
;1106:		trap_S_StartLocalSound( vchat->snd, CHAN_VOICE);
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1107
;1107:		if (vchat->clientNum != cg.snap->ps.clientNum) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
EQI4 $754
line 1108
;1108:			int orderTask = CG_ValidOrder(vchat->cmd);
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 4
ADDRGP4 CG_ValidOrder
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 1109
;1109:			if (orderTask > 0) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $757
line 1110
;1110:				cgs.acceptOrderTime = cg.time + 5000;
ADDRGP4 cgs+956336
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 1111
;1111:				Q_strncpyz(cgs.acceptVoice, vchat->cmd, sizeof(cgs.acceptVoice));
ADDRGP4 cgs+956348
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
CNSTI4 32
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1112
;1112:				cgs.acceptTask = orderTask;
ADDRGP4 cgs+956340
ADDRLP4 0
INDIRI4
ASGNI4
line 1113
;1113:				cgs.acceptLeader = vchat->clientNum;
ADDRGP4 cgs+956344
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1114
;1114:			}
LABELV $757
line 1116
;1115:			// see if this was an order
;1116:			CG_ShowResponseHead();
ADDRGP4 CG_ShowResponseHead
CALLV
pop
line 1117
;1117:		}
LABELV $754
line 1118
;1118:	}
LABELV $751
line 1119
;1119:	if (!vchat->voiceOnly && !cg_noVoiceText.integer) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $765
ADDRGP4 cg_noVoiceText+12
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $765
line 1120
;1120:		CG_AddToTeamChat( vchat->message );
ADDRFP4 0
INDIRP4
CNSTI4 162
ADDP4
ARGP4
ADDRGP4 CG_AddToTeamChat
CALLV
pop
line 1121
;1121:		CG_Printf( "%s\n", vchat->message );
ADDRGP4 $768
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 162
ADDP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1122
;1122:	}
LABELV $765
line 1123
;1123:	voiceChatBuffer[cg.voiceChatBufferOut].snd = 0;
CNSTI4 312
ADDRGP4 cg+1952940
INDIRI4
MULI4
ADDRGP4 voiceChatBuffer+4
ADDP4
CNSTI4 0
ASGNI4
line 1125
;1124:#endif
;1125:}
LABELV $747
endproc CG_PlayVoiceChat 8 12
export CG_PlayBufferedVoiceChats
proc CG_PlayBufferedVoiceChats 0 4
line 1132
;1126:
;1127:/*
;1128:=====================
;1129:CG_PlayBufferedVoieChats
;1130:=====================
;1131:*/
;1132:void CG_PlayBufferedVoiceChats( void ) {
line 1134
;1133:#ifdef MISSIONPACK
;1134:	if ( cg.voiceChatTime < cg.time ) {
ADDRGP4 cg+1952932
INDIRI4
ADDRGP4 cg+1868892
INDIRI4
GEI4 $772
line 1135
;1135:		if (cg.voiceChatBufferOut != cg.voiceChatBufferIn && voiceChatBuffer[cg.voiceChatBufferOut].snd) {
ADDRGP4 cg+1952940
INDIRI4
ADDRGP4 cg+1952936
INDIRI4
EQI4 $776
CNSTI4 312
ADDRGP4 cg+1952940
INDIRI4
MULI4
ADDRGP4 voiceChatBuffer+4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $776
line 1137
;1136:			//
;1137:			CG_PlayVoiceChat(&voiceChatBuffer[cg.voiceChatBufferOut]);
CNSTI4 312
ADDRGP4 cg+1952940
INDIRI4
MULI4
ADDRGP4 voiceChatBuffer
ADDP4
ARGP4
ADDRGP4 CG_PlayVoiceChat
CALLV
pop
line 1139
;1138:			//
;1139:			cg.voiceChatBufferOut = (cg.voiceChatBufferOut + 1) % MAX_VOICECHATBUFFER;
ADDRGP4 cg+1952940
ADDRGP4 cg+1952940
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 32
MODI4
ASGNI4
line 1140
;1140:			cg.voiceChatTime = cg.time + 1000;
ADDRGP4 cg+1952932
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 1141
;1141:		}
LABELV $776
line 1142
;1142:	}
LABELV $772
line 1144
;1143:#endif
;1144:}
LABELV $771
endproc CG_PlayBufferedVoiceChats 0 4
export CG_AddBufferedVoiceChat
proc CG_AddBufferedVoiceChat 8 12
line 1151
;1145:
;1146:/*
;1147:=====================
;1148:CG_AddBufferedVoiceChat
;1149:=====================
;1150:*/
;1151:void CG_AddBufferedVoiceChat( bufferedVoiceChat_t *vchat ) {
line 1154
;1152:#ifdef MISSIONPACK
;1153:	// if we are going into the intermission, don't start any voices
;1154:	if ( cg.intermissionStarted ) {
ADDRGP4 cg+24
INDIRI4
CNSTI4 0
EQI4 $788
line 1155
;1155:		return;
ADDRGP4 $787
JUMPV
LABELV $788
line 1158
;1156:	}
;1157:
;1158:	memcpy(&voiceChatBuffer[cg.voiceChatBufferIn], vchat, sizeof(bufferedVoiceChat_t));
ADDRLP4 0
CNSTI4 312
ASGNI4
ADDRLP4 0
INDIRI4
ADDRGP4 cg+1952936
INDIRI4
MULI4
ADDRGP4 voiceChatBuffer
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 1159
;1159:	cg.voiceChatBufferIn = (cg.voiceChatBufferIn + 1) % MAX_VOICECHATBUFFER;
ADDRGP4 cg+1952936
ADDRGP4 cg+1952936
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 32
MODI4
ASGNI4
line 1160
;1160:	if (cg.voiceChatBufferIn == cg.voiceChatBufferOut) {
ADDRGP4 cg+1952936
INDIRI4
ADDRGP4 cg+1952940
INDIRI4
NEI4 $794
line 1161
;1161:		CG_PlayVoiceChat( &voiceChatBuffer[cg.voiceChatBufferOut] );
CNSTI4 312
ADDRGP4 cg+1952940
INDIRI4
MULI4
ADDRGP4 voiceChatBuffer
ADDP4
ARGP4
ADDRGP4 CG_PlayVoiceChat
CALLV
pop
line 1162
;1162:		cg.voiceChatBufferOut++;
ADDRLP4 4
ADDRGP4 cg+1952940
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1163
;1163:	}
LABELV $794
line 1165
;1164:#endif
;1165:}
LABELV $787
endproc CG_AddBufferedVoiceChat 8 12
export CG_VoiceChatLocal
proc CG_VoiceChatLocal 340 28
line 1172
;1166:
;1167:/*
;1168:=================
;1169:CG_VoiceChatLocal
;1170:=================
;1171:*/
;1172:void CG_VoiceChatLocal( int mode, qboolean voiceOnly, int clientNum, int color, const char *cmd ) {
line 1181
;1173:#ifdef MISSIONPACK
;1174:	char *chat;
;1175:	voiceChatList_t *voiceChatList;
;1176:	clientInfo_t *ci;
;1177:	sfxHandle_t snd;
;1178:	bufferedVoiceChat_t vchat;
;1179:
;1180:	// if we are going into the intermission, don't start any voices
;1181:	if ( cg.intermissionStarted ) {
ADDRGP4 cg+24
INDIRI4
CNSTI4 0
EQI4 $801
line 1182
;1182:		return;
ADDRGP4 $800
JUMPV
LABELV $801
line 1185
;1183:	}
;1184:
;1185:	if ( clientNum < 0 || clientNum >= MAX_CLIENTS ) {
ADDRLP4 328
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 328
INDIRI4
CNSTI4 0
LTI4 $806
ADDRLP4 328
INDIRI4
CNSTI4 256
LTI4 $804
LABELV $806
line 1186
;1186:		clientNum = 0;
ADDRFP4 8
CNSTI4 0
ASGNI4
line 1187
;1187:	}
LABELV $804
line 1188
;1188:	ci = &cgs.clientinfo[ clientNum ];
ADDRLP4 320
CNSTI4 1944
ADDRFP4 8
INDIRI4
MULI4
ADDRGP4 cgs+440948
ADDP4
ASGNP4
line 1190
;1189:
;1190:	cgs.currentVoiceClient = clientNum;
ADDRGP4 cgs+956332
ADDRFP4 8
INDIRI4
ASGNI4
line 1192
;1191:
;1192:	voiceChatList = CG_VoiceChatListForClient( clientNum );
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 332
ADDRGP4 CG_VoiceChatListForClient
CALLP4
ASGNP4
ADDRLP4 312
ADDRLP4 332
INDIRP4
ASGNP4
line 1194
;1193:
;1194:	if ( CG_GetVoiceChat( voiceChatList, cmd, &snd, &chat ) ) {
ADDRLP4 312
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 324
ARGP4
ADDRLP4 316
ARGP4
ADDRLP4 336
ADDRGP4 CG_GetVoiceChat
CALLI4
ASGNI4
ADDRLP4 336
INDIRI4
CNSTI4 0
EQI4 $809
line 1196
;1195:		//
;1196:		if ( mode == SAY_TEAM || !cg_teamChatsOnly.integer ) {
ADDRFP4 0
INDIRI4
CNSTI4 1
EQI4 $814
ADDRGP4 cg_teamChatsOnly+12
INDIRI4
CNSTI4 0
NEI4 $811
LABELV $814
line 1197
;1197:			vchat.clientNum = clientNum;
ADDRLP4 0
ADDRFP4 8
INDIRI4
ASGNI4
line 1198
;1198:			vchat.snd = snd;
ADDRLP4 0+4
ADDRLP4 324
INDIRI4
ASGNI4
line 1199
;1199:			vchat.voiceOnly = voiceOnly;
ADDRLP4 0+8
ADDRFP4 4
INDIRI4
ASGNI4
line 1200
;1200:			Q_strncpyz(vchat.cmd, cmd, sizeof(vchat.cmd));
ADDRLP4 0+12
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1201
;1201:			if ( mode == SAY_TELL ) {
ADDRFP4 0
INDIRI4
CNSTI4 2
NEI4 $819
line 1202
;1202:				Com_sprintf(vchat.message, sizeof(vchat.message), "[%s]: %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
ADDRLP4 0+162
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 $823
ARGP4
ADDRLP4 320
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 94
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 316
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1203
;1203:				CG_PrintfChat( qfalse, "%s\n", vchat.message );
CNSTI4 0
ARGI4
ADDRGP4 $768
ARGP4
ADDRLP4 0+162
ARGP4
ADDRGP4 CG_PrintfChat
CALLI4
pop
line 1204
;1204:			}
ADDRGP4 $820
JUMPV
LABELV $819
line 1205
;1205:			else if ( mode == SAY_TEAM ) {
ADDRFP4 0
INDIRI4
CNSTI4 1
NEI4 $825
line 1206
;1206:				Com_sprintf(vchat.message, sizeof(vchat.message), "(%s): %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
ADDRLP4 0+162
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 $829
ARGP4
ADDRLP4 320
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 94
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 316
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1207
;1207:				CG_PrintfChat( qtrue, "%s\n", vchat.message );
CNSTI4 1
ARGI4
ADDRGP4 $768
ARGP4
ADDRLP4 0+162
ARGP4
ADDRGP4 CG_PrintfChat
CALLI4
pop
line 1208
;1208:			}
ADDRGP4 $826
JUMPV
LABELV $825
line 1209
;1209:			else {
line 1210
;1210:				Com_sprintf(vchat.message, sizeof(vchat.message), "%s: %c%c%s", ci->name, Q_COLOR_ESCAPE, color, chat);
ADDRLP4 0+162
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 $833
ARGP4
ADDRLP4 320
INDIRP4
CNSTI4 4
ADDP4
ARGP4
CNSTI4 94
ARGI4
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 316
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1211
;1211:				CG_PrintfChat( qfalse, "%s\n", vchat.message );
CNSTI4 0
ARGI4
ADDRGP4 $768
ARGP4
ADDRLP4 0+162
ARGP4
ADDRGP4 CG_PrintfChat
CALLI4
pop
line 1212
;1212:			}
LABELV $826
LABELV $820
line 1213
;1213:			CG_AddBufferedVoiceChat(&vchat);
ADDRLP4 0
ARGP4
ADDRGP4 CG_AddBufferedVoiceChat
CALLV
pop
line 1214
;1214:		}
LABELV $811
line 1215
;1215:	}
LABELV $809
line 1217
;1216:#endif
;1217:}
LABELV $800
endproc CG_VoiceChatLocal 340 28
export CG_VoiceChat
proc CG_VoiceChat 64 20
line 1224
;1218:
;1219:/*
;1220:=================
;1221:CG_VoiceChat
;1222:=================
;1223:*/
;1224:void CG_VoiceChat( int mode ) {
line 1230
;1225:#ifdef MISSIONPACK
;1226:	const char *cmd;
;1227:	int clientNum, color;
;1228:	qboolean voiceOnly;
;1229:
;1230:	voiceOnly = atoi(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 16
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 20
INDIRI4
ASGNI4
line 1231
;1231:	clientNum = atoi(CG_Argv(2));
CNSTI4 2
ARGI4
ADDRLP4 24
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 28
INDIRI4
ASGNI4
line 1232
;1232:	color = atoi(CG_Argv(3));
CNSTI4 3
ARGI4
ADDRLP4 32
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 36
INDIRI4
ASGNI4
line 1233
;1233:	cmd = CG_Argv(4);
CNSTI4 4
ARGI4
ADDRLP4 40
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
line 1235
;1234:
;1235:	if (cg_noTaunt.integer != 0) {
ADDRGP4 cg_noTaunt+12
INDIRI4
CNSTI4 0
EQI4 $836
line 1236
;1236:		if (!strcmp(cmd, VOICECHAT_KILLINSULT)  || !strcmp(cmd, VOICECHAT_TAUNT) || \
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $841
ARGP4
ADDRLP4 44
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $849
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $842
ARGP4
ADDRLP4 48
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $849
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $843
ARGP4
ADDRLP4 52
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
EQI4 $849
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $844
ARGP4
ADDRLP4 56
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $849
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $845
ARGP4
ADDRLP4 60
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $839
LABELV $849
line 1239
;1237:			!strcmp(cmd, VOICECHAT_DEATHINSULT) || !strcmp(cmd, VOICECHAT_KILLGAUNTLET) || \
;1238:			!strcmp(cmd, VOICECHAT_PRAISE)) {
;1239:			return;
ADDRGP4 $835
JUMPV
LABELV $839
line 1241
;1240:		}
;1241:	}
LABELV $836
line 1243
;1242:
;1243:	CG_VoiceChatLocal( mode, voiceOnly, clientNum, color, cmd );
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_VoiceChatLocal
CALLV
pop
line 1245
;1244:#endif
;1245:}
LABELV $835
endproc CG_VoiceChat 64 20
proc CG_RemoveChatEscapeChar 16 0
line 1252
;1246:
;1247:/*
;1248:=================
;1249:CG_RemoveChatEscapeChar
;1250:=================
;1251:*/
;1252:static void CG_RemoveChatEscapeChar( char *text ) {
line 1255
;1253:	int i, l;
;1254:
;1255:	l = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1256
;1256:	for ( i = 0; text[i]; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $854
JUMPV
LABELV $851
line 1257
;1257:		if (text[i] == '\x19')
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 25
NEI4 $855
line 1258
;1258:			continue;
ADDRGP4 $852
JUMPV
LABELV $855
line 1259
;1259:		text[l++] = text[i];
ADDRLP4 8
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRP4
ADDP4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRP4
ADDP4
INDIRI1
ASGNI1
line 1260
;1260:	}
LABELV $852
line 1256
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $854
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $851
line 1261
;1261:	text[l] = '\0';
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
CNSTI1 0
ASGNI1
line 1262
;1262:}
LABELV $850
endproc CG_RemoveChatEscapeChar 16 0
proc CG_ServerCommand 1376 12
line 1272
;1263:
;1264:/*
;1265:=================
;1266:CG_ServerCommand
;1267:
;1268:The string has been tokenized and can be retrieved with
;1269:Cmd_Argc() / Cmd_Argv()
;1270:=================
;1271:*/
;1272:static void CG_ServerCommand( void ) {
line 1279
;1273:	const char	*cmd;
;1274:	char		text[MAX_SAY_TEXT];
;1275:	int			offset;
;1276:	const char  *arg;
;1277:	int			i;
;1278:
;1279:	cmd = CG_Argv(0);
CNSTI4 0
ARGI4
ADDRLP4 168
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 168
INDIRP4
ASGNP4
line 1281
;1280:
;1281:	if ( !cmd[0] ) {
ADDRLP4 0
INDIRP4
INDIRI1
CVII4 1
CNSTI4 0
NEI4 $858
line 1283
;1282:		// server claimed the command
;1283:		return;
ADDRGP4 $857
JUMPV
LABELV $858
line 1286
;1284:	}
;1285:
;1286:	if ( !strcmp( cmd, "cp" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $862
ARGP4
ADDRLP4 172
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 172
INDIRI4
CNSTI4 0
NEI4 $860
line 1287
;1287:		CG_CenterPrint( CG_Argv(1), SCREEN_HEIGHT * 0.30, BIGCHAR_WIDTH );
CNSTI4 1
ARGI4
ADDRLP4 176
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
CNSTI4 144
ARGI4
ADDRGP4 cl_bigcharwidth+12
INDIRI4
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 1288
;1288:		return;
ADDRGP4 $857
JUMPV
LABELV $860
line 1290
;1289:	}
;1290:	if ( !strcmp( cmd, "ruscp" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $866
ARGP4
ADDRLP4 176
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 176
INDIRI4
CNSTI4 0
NEI4 $864
line 1291
;1291:		CG_CenterPrintRus( CG_Argv(1), SCREEN_HEIGHT * 0.30, BIGCHAR_WIDTH );
CNSTI4 1
ARGI4
ADDRLP4 180
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 180
INDIRP4
ARGP4
CNSTI4 144
ARGI4
ADDRGP4 cl_bigcharwidth+12
INDIRI4
ARGI4
ADDRGP4 CG_CenterPrintRus
CALLV
pop
line 1292
;1292:		return;
ADDRGP4 $857
JUMPV
LABELV $864
line 1295
;1293:	}
;1294:	
;1295:	if ( !strcmp( cmd, "clp" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $870
ARGP4
ADDRLP4 180
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 180
INDIRI4
CNSTI4 0
NEI4 $868
line 1296
;1296:		CG_CenterPrint( CG_Argv(1), SCREEN_HEIGHT * 0.75, SMALLCHAR_WIDTH );
CNSTI4 1
ARGI4
ADDRLP4 184
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 184
INDIRP4
ARGP4
CNSTI4 360
ARGI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 1297
;1297:		return;
ADDRGP4 $857
JUMPV
LABELV $868
line 1299
;1298:	}
;1299:	if ( !strcmp( cmd, "rusclp" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $874
ARGP4
ADDRLP4 184
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 0
NEI4 $872
line 1300
;1300:		CG_CenterPrintRus( CG_Argv(1), SCREEN_HEIGHT * 0.75, SMALLCHAR_WIDTH );
CNSTI4 1
ARGI4
ADDRLP4 188
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 188
INDIRP4
ARGP4
CNSTI4 360
ARGI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ARGI4
ADDRGP4 CG_CenterPrintRus
CALLV
pop
line 1301
;1301:		return;
ADDRGP4 $857
JUMPV
LABELV $872
line 1304
;1302:	}
;1303:	
;1304:	if ( !strcmp( cmd, "clcmd" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $878
ARGP4
ADDRLP4 188
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 0
NEI4 $876
line 1305
;1305:		trap_SendConsoleCommand( va("%s\n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 192
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $768
ARGP4
ADDRLP4 192
INDIRP4
ARGP4
ADDRLP4 196
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 196
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1306
;1306:		return;
ADDRGP4 $857
JUMPV
LABELV $876
line 1309
;1307:	}
;1308:	
;1309:	if ( !strcmp( cmd, "lp" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $881
ARGP4
ADDRLP4 192
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 0
NEI4 $879
line 1310
;1310:		CG_CenterPrint( CG_Argv(1), SCREEN_HEIGHT * 0.75, SMALLCHAR_WIDTH*1.5 );
CNSTI4 1
ARGI4
ADDRLP4 196
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 196
INDIRP4
ARGP4
CNSTI4 360
ARGI4
CNSTF4 1069547520
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ARGI4
ADDRGP4 CG_CenterPrint
CALLV
pop
line 1311
;1311:		return;
ADDRGP4 $857
JUMPV
LABELV $879
line 1314
;1312:	}
;1313:
;1314:	if ( !strcmp( cmd, "cmusic" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $885
ARGP4
ADDRLP4 196
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 0
NEI4 $883
line 1315
;1315:		trap_SendConsoleCommand(va( "music %s \n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 200
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $886
ARGP4
ADDRLP4 200
INDIRP4
ARGP4
ADDRLP4 204
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 204
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1316
;1316:		return;
ADDRGP4 $857
JUMPV
LABELV $883
line 1319
;1317:	}
;1318:
;1319:	if ( !strcmp( cmd, "csound" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $889
ARGP4
ADDRLP4 200
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 0
NEI4 $887
line 1320
;1320:		trap_SendConsoleCommand(va( "play %s \n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 204
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $890
ARGP4
ADDRLP4 204
INDIRP4
ARGP4
ADDRLP4 208
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 208
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1321
;1321:		return;
ADDRGP4 $857
JUMPV
LABELV $887
line 1324
;1322:	}
;1323:
;1324:	if ( !strcmp( cmd, "cmodel" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $893
ARGP4
ADDRLP4 204
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 0
NEI4 $891
line 1325
;1325:		trap_SendConsoleCommand(va( "set model %s \n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 208
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $894
ARGP4
ADDRLP4 208
INDIRP4
ARGP4
ADDRLP4 212
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 212
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1326
;1326:		trap_SendConsoleCommand(va( "set headmodel %s \n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 216
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $895
ARGP4
ADDRLP4 216
INDIRP4
ARGP4
ADDRLP4 220
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 220
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1327
;1327:		trap_SendConsoleCommand(va( "set team_model %s \n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 224
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $896
ARGP4
ADDRLP4 224
INDIRP4
ARGP4
ADDRLP4 228
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 228
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1328
;1328:		trap_SendConsoleCommand(va( "set team_headmodel %s \n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 232
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $897
ARGP4
ADDRLP4 232
INDIRP4
ARGP4
ADDRLP4 236
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 236
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1329
;1329:		return;
ADDRGP4 $857
JUMPV
LABELV $891
line 1332
;1330:	}
;1331:
;1332:	if ( !strcmp( cmd, "ctorso" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $900
ARGP4
ADDRLP4 208
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 0
NEI4 $898
line 1333
;1333:		trap_SendConsoleCommand(va( "play %s \n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 212
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $890
ARGP4
ADDRLP4 212
INDIRP4
ARGP4
ADDRLP4 216
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 216
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1334
;1334:		trap_SendConsoleCommand(va( "set ui_msmodel %s \n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 220
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $901
ARGP4
ADDRLP4 220
INDIRP4
ARGP4
ADDRLP4 224
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 224
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1335
;1335:		return;
ADDRGP4 $857
JUMPV
LABELV $898
line 1338
;1336:	}
;1337:
;1338:	if ( !strcmp( cmd, "ctorsoskin" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $904
ARGP4
ADDRLP4 212
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 212
INDIRI4
CNSTI4 0
NEI4 $902
line 1339
;1339:		trap_SendConsoleCommand(va( "set ui_msskin %s \n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 216
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $905
ARGP4
ADDRLP4 216
INDIRP4
ARGP4
ADDRLP4 220
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 220
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1340
;1340:		return;
ADDRGP4 $857
JUMPV
LABELV $902
line 1343
;1341:	}
;1342:
;1343:	if ( !strcmp( cmd, "chead" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $908
ARGP4
ADDRLP4 216
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 216
INDIRI4
CNSTI4 0
NEI4 $906
line 1344
;1344:		trap_SendConsoleCommand(va( "set headmodel %s \n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 220
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $895
ARGP4
ADDRLP4 220
INDIRP4
ARGP4
ADDRLP4 224
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 224
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1345
;1345:		return;
ADDRGP4 $857
JUMPV
LABELV $906
line 1348
;1346:	}
;1347:
;1348:	if ( !strcmp( cmd, "cheadskin" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $911
ARGP4
ADDRLP4 220
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 220
INDIRI4
CNSTI4 0
NEI4 $909
line 1349
;1349:		trap_SendConsoleCommand(va( "set headmodel %s \n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 224
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $895
ARGP4
ADDRLP4 224
INDIRP4
ARGP4
ADDRLP4 228
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 228
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1350
;1350:		return;
ADDRGP4 $857
JUMPV
LABELV $909
line 1353
;1351:	}
;1352:
;1353:	if ( !strcmp( cmd, "clegs" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $914
ARGP4
ADDRLP4 224
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 224
INDIRI4
CNSTI4 0
NEI4 $912
line 1354
;1354:		trap_SendConsoleCommand(va( "set legsskin %s \n", CG_Argv(1)) );
CNSTI4 1
ARGI4
ADDRLP4 228
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $915
ARGP4
ADDRLP4 228
INDIRP4
ARGP4
ADDRLP4 232
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 232
INDIRP4
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 1355
;1355:		return;
ADDRGP4 $857
JUMPV
LABELV $912
line 1358
;1356:	}
;1357:
;1358:	if ( !strcmp( cmd, "cs" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $918
ARGP4
ADDRLP4 228
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 228
INDIRI4
CNSTI4 0
NEI4 $916
line 1359
;1359:		CG_ConfigStringModified();
ADDRGP4 CG_ConfigStringModified
CALLV
pop
line 1360
;1360:		return;
ADDRGP4 $857
JUMPV
LABELV $916
line 1363
;1361:	}
;1362:
;1363:	if ( !strcmp( cmd, "fade" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $921
ARGP4
ADDRLP4 232
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 232
INDIRI4
CNSTI4 0
NEI4 $919
line 1367
;1364:		vec4_t color0, color1;
;1365:		float duration;
;1366:
;1367:		duration = atof(CG_Argv(1));
CNSTI4 1
ARGI4
ADDRLP4 272
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 272
INDIRP4
ARGP4
ADDRLP4 276
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 268
ADDRLP4 276
INDIRF4
ASGNF4
line 1369
;1368:		
;1369:		color0[0] = atof( CG_Argv(2) );
CNSTI4 2
ARGI4
ADDRLP4 280
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRLP4 284
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 236
ADDRLP4 284
INDIRF4
ASGNF4
line 1370
;1370:		color0[1] = atof( CG_Argv(3) );
CNSTI4 3
ARGI4
ADDRLP4 288
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 288
INDIRP4
ARGP4
ADDRLP4 292
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 236+4
ADDRLP4 292
INDIRF4
ASGNF4
line 1371
;1371:		color0[2] = atof( CG_Argv(4) );
CNSTI4 4
ARGI4
ADDRLP4 296
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 296
INDIRP4
ARGP4
ADDRLP4 300
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 236+8
ADDRLP4 300
INDIRF4
ASGNF4
line 1372
;1372:		color0[3] = atof( CG_Argv(5) );
CNSTI4 5
ARGI4
ADDRLP4 304
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 304
INDIRP4
ARGP4
ADDRLP4 308
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 236+12
ADDRLP4 308
INDIRF4
ASGNF4
line 1373
;1373:		color1[0] = atof( CG_Argv(6) );
CNSTI4 6
ARGI4
ADDRLP4 312
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 312
INDIRP4
ARGP4
ADDRLP4 316
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 252
ADDRLP4 316
INDIRF4
ASGNF4
line 1374
;1374:		color1[1] = atof( CG_Argv(7) );
CNSTI4 7
ARGI4
ADDRLP4 320
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 320
INDIRP4
ARGP4
ADDRLP4 324
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 252+4
ADDRLP4 324
INDIRF4
ASGNF4
line 1375
;1375:		color1[2] = atof( CG_Argv(8) );
CNSTI4 8
ARGI4
ADDRLP4 328
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 328
INDIRP4
ARGP4
ADDRLP4 332
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 252+8
ADDRLP4 332
INDIRF4
ASGNF4
line 1376
;1376:		color1[3] = atof( CG_Argv(9) );
CNSTI4 9
ARGI4
ADDRLP4 336
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 336
INDIRP4
ARGP4
ADDRLP4 340
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 252+12
ADDRLP4 340
INDIRF4
ASGNF4
line 1377
;1377:		CG_Fade( duration, color0, color1 );
ADDRLP4 268
INDIRF4
ARGF4
ADDRLP4 236
ARGP4
ADDRLP4 252
ARGP4
ADDRGP4 CG_Fade
CALLV
pop
line 1379
;1378:		//Com_Printf("%f %f %f\n%f %f %f\n%f %f %f", duration, r0, g0, b0, a0, r1, g1, b1, a1);
;1379:		return;
ADDRGP4 $857
JUMPV
LABELV $919
line 1382
;1380:	}
;1381:
;1382:	if ( !strcmp( cmd, "ou" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $930
ARGP4
ADDRLP4 236
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 236
INDIRI4
CNSTI4 0
NEI4 $928
line 1384
;1383:		//objectives are updated
;1384:		cg.objectivesSoundPlayed = qfalse;
ADDRGP4 cg+1987488
CNSTI4 0
ASGNI4
line 1385
;1385:		if ( cg.time < cg.levelStartTime + BLACKOUT_TIME + FADEIN_TIME ) //if we're in fade-in, delay notification until fade-in is done. 
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
ADDRGP4 cg+1987512
INDIRI4
CVIF4 4
CNSTF4 1120403456
ADDF4
CNSTF4 1140457472
ADDF4
GEF4 $932
line 1386
;1386:			cg.objectivesTime = cg.levelStartTime + BLACKOUT_TIME + FADEIN_TIME;
ADDRGP4 cg+1987484
ADDRGP4 cg+1987512
INDIRI4
CVIF4 4
CNSTF4 1120403456
ADDF4
CNSTF4 1140457472
ADDF4
CVFI4 4
ASGNI4
ADDRGP4 $857
JUMPV
LABELV $932
line 1388
;1387:		else
;1388:			cg.objectivesTime = cg.time;
ADDRGP4 cg+1987484
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 1389
;1389:		return;
ADDRGP4 $857
JUMPV
LABELV $928
line 1392
;1390:	}
;1391:
;1392:	if ( !strcmp( cmd, "print" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $942
ARGP4
ADDRLP4 240
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 240
INDIRI4
CNSTI4 0
NEI4 $940
line 1394
;1393:		//if the message to print is about a client being dropped after a silent drop, suppress the drop message
;1394:		arg = CG_Argv(1);
CNSTI4 1
ARGI4
ADDRLP4 244
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 156
ADDRLP4 244
INDIRP4
ASGNP4
line 1395
;1395:		offset = strlen(arg) - strlen("DR_SILENT_DROP") - 1 ;
ADDRLP4 156
INDIRP4
ARGP4
ADDRLP4 248
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRGP4 $943
ARGP4
ADDRLP4 252
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 160
ADDRLP4 248
INDIRI4
ADDRLP4 252
INDIRI4
SUBI4
CNSTI4 1
SUBI4
ASGNI4
line 1396
;1396:		if ( !strcmp(&arg[offset], "DR_SILENT_DROP\n") )
ADDRLP4 160
INDIRI4
ADDRLP4 156
INDIRP4
ADDP4
ARGP4
ADDRGP4 $946
ARGP4
ADDRLP4 256
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 256
INDIRI4
CNSTI4 0
NEI4 $944
line 1397
;1397:			return;
ADDRGP4 $857
JUMPV
LABELV $944
line 1399
;1398:		
;1399:		CG_Printf( "%s", CG_Argv(1) );
CNSTI4 1
ARGI4
ADDRLP4 260
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRGP4 $579
ARGP4
ADDRLP4 260
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1401
;1400:#ifdef MISSIONPACK
;1401:		cmd = CG_Argv(1);			// yes, this is obviously a hack, but so is the way we hear about
CNSTI4 1
ARGI4
ADDRLP4 264
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 264
INDIRP4
ASGNP4
line 1404
;1402:									// votes passing or failing
;1403:		//if the message to print is about a client being dropped after a silent drop, suppress the drop message
;1404:		if ( !Q_stricmpn( cmd, "vote failed", 11 ) || !Q_stricmpn( cmd, "team vote failed", 16 )) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $949
ARGP4
CNSTI4 11
ARGI4
ADDRLP4 268
ADDRGP4 Q_stricmpn
CALLI4
ASGNI4
ADDRLP4 268
INDIRI4
CNSTI4 0
EQI4 $951
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $950
ARGP4
CNSTI4 16
ARGI4
ADDRLP4 272
ADDRGP4 Q_stricmpn
CALLI4
ASGNI4
ADDRLP4 272
INDIRI4
CNSTI4 0
NEI4 $947
LABELV $951
line 1405
;1405:			trap_S_StartLocalSound( cgs.media.voteFailed, CHAN_ANNOUNCER );
ADDRGP4 cgs+956380+2300
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1406
;1406:		} else if ( !Q_stricmpn( cmd, "vote passed", 11 ) || !Q_stricmpn( cmd, "team vote passed", 16 ) ) {
ADDRGP4 $857
JUMPV
LABELV $947
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $956
ARGP4
CNSTI4 11
ARGI4
ADDRLP4 276
ADDRGP4 Q_stricmpn
CALLI4
ASGNI4
ADDRLP4 276
INDIRI4
CNSTI4 0
EQI4 $958
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $957
ARGP4
CNSTI4 16
ARGI4
ADDRLP4 280
ADDRGP4 Q_stricmpn
CALLI4
ASGNI4
ADDRLP4 280
INDIRI4
CNSTI4 0
NEI4 $857
LABELV $958
line 1407
;1407:			trap_S_StartLocalSound( cgs.media.votePassed, CHAN_ANNOUNCER );
ADDRGP4 cgs+956380+2296
INDIRI4
ARGI4
CNSTI4 7
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
line 1408
;1408:		}
line 1410
;1409:#endif
;1410:		return;
ADDRGP4 $857
JUMPV
LABELV $940
line 1413
;1411:	}
;1412:
;1413:	if ( !strcmp( cmd, "printChat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $963
ARGP4
ADDRLP4 244
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 244
INDIRI4
CNSTI4 0
NEI4 $961
line 1414
;1414:		CG_PrintfChat(qfalse, "%s", CG_Argv(1) );
CNSTI4 1
ARGI4
ADDRLP4 248
ADDRGP4 CG_Argv
CALLP4
ASGNP4
CNSTI4 0
ARGI4
ADDRGP4 $579
ARGP4
ADDRLP4 248
INDIRP4
ARGP4
ADDRGP4 CG_PrintfChat
CALLI4
pop
line 1415
;1415:		return;
ADDRGP4 $857
JUMPV
LABELV $961
line 1418
;1416:	}
;1417:
;1418:	if ( !strcmp( cmd, "chat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $966
ARGP4
ADDRLP4 248
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 248
INDIRI4
CNSTI4 0
NEI4 $964
line 1419
;1419:		if ( !cg_teamChatsOnly.integer ) {
ADDRGP4 cg_teamChatsOnly+12
INDIRI4
CNSTI4 0
NEI4 $857
line 1420
;1420:                        if( cg_chatBeep.integer && cgs.gametype != GT_SINGLE )
ADDRGP4 cg_chatBeep+12
INDIRI4
CNSTI4 0
EQI4 $970
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 2
EQI4 $970
line 1421
;1421:                                trap_S_StartLocalSound( cgs.media.talkSound, CHAN_LOCAL_SOUND );
ADDRGP4 cgs+956380+2152
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
LABELV $970
line 1422
;1422:			Q_strncpyz( text, CG_Argv(1), MAX_SAY_TEXT );
CNSTI4 1
ARGI4
ADDRLP4 252
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 252
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1423
;1423:			CG_RemoveChatEscapeChar( text );
ADDRLP4 4
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 1424
;1424:			CG_PrintfChat( qfalse, "%s\n", text );
CNSTI4 0
ARGI4
ADDRGP4 $768
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_PrintfChat
CALLI4
pop
line 1425
;1425:		}
line 1426
;1426:		return;
ADDRGP4 $857
JUMPV
LABELV $964
line 1429
;1427:	}
;1428:
;1429:	if ( !strcmp( cmd, "tchat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $978
ARGP4
ADDRLP4 252
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 252
INDIRI4
CNSTI4 0
NEI4 $976
line 1430
;1430:                if( cg_teamChatBeep.integer && cgs.gametype != GT_SINGLE )
ADDRGP4 cg_teamChatBeep+12
INDIRI4
CNSTI4 0
EQI4 $979
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 2
EQI4 $979
line 1431
;1431:                        trap_S_StartLocalSound( cgs.media.talkSound, CHAN_LOCAL_SOUND );
ADDRGP4 cgs+956380+2152
INDIRI4
ARGI4
CNSTI4 6
ARGI4
ADDRGP4 trap_S_StartLocalSound
CALLV
pop
LABELV $979
line 1432
;1432:		Q_strncpyz( text, CG_Argv(1), MAX_SAY_TEXT );
CNSTI4 1
ARGI4
ADDRLP4 256
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
ARGP4
ADDRLP4 256
INDIRP4
ARGP4
CNSTI4 150
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1433
;1433:		CG_RemoveChatEscapeChar( text );
ADDRLP4 4
ARGP4
ADDRGP4 CG_RemoveChatEscapeChar
CALLV
pop
line 1434
;1434:		CG_AddToTeamChat( text );
ADDRLP4 4
ARGP4
ADDRGP4 CG_AddToTeamChat
CALLV
pop
line 1435
;1435:		CG_PrintfChat( qtrue, "%s\n", text );
CNSTI4 1
ARGI4
ADDRGP4 $768
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 CG_PrintfChat
CALLI4
pop
line 1436
;1436:		return;
ADDRGP4 $857
JUMPV
LABELV $976
line 1438
;1437:	}
;1438:	if ( !strcmp( cmd, "vchat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $987
ARGP4
ADDRLP4 256
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 256
INDIRI4
CNSTI4 0
NEI4 $985
line 1439
;1439:		CG_VoiceChat( SAY_ALL );
CNSTI4 0
ARGI4
ADDRGP4 CG_VoiceChat
CALLV
pop
line 1440
;1440:		return;
ADDRGP4 $857
JUMPV
LABELV $985
line 1443
;1441:	}
;1442:
;1443:	if ( !strcmp( cmd, "vtchat" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $990
ARGP4
ADDRLP4 260
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 260
INDIRI4
CNSTI4 0
NEI4 $988
line 1444
;1444:		CG_VoiceChat( SAY_TEAM );
CNSTI4 1
ARGI4
ADDRGP4 CG_VoiceChat
CALLV
pop
line 1445
;1445:		return;
ADDRGP4 $857
JUMPV
LABELV $988
line 1448
;1446:	}
;1447:
;1448:	if ( !strcmp( cmd, "vtell" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $993
ARGP4
ADDRLP4 264
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 264
INDIRI4
CNSTI4 0
NEI4 $991
line 1449
;1449:		CG_VoiceChat( SAY_TELL );
CNSTI4 2
ARGI4
ADDRGP4 CG_VoiceChat
CALLV
pop
line 1450
;1450:		return;
ADDRGP4 $857
JUMPV
LABELV $991
line 1453
;1451:	}
;1452:
;1453:	if ( !strcmp( cmd, "scores" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $996
ARGP4
ADDRLP4 268
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 268
INDIRI4
CNSTI4 0
NEI4 $994
line 1454
;1454:		CG_ParseScores();
ADDRGP4 CG_ParseScores
CALLV
pop
line 1455
;1455:		return;
ADDRGP4 $857
JUMPV
LABELV $994
line 1459
;1456:	}
;1457:
;1458:
;1459:        if ( !strcmp( cmd, "accs" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $999
ARGP4
ADDRLP4 272
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 272
INDIRI4
CNSTI4 0
NEI4 $997
line 1460
;1460:                CG_ParseAccuracy();
ADDRGP4 CG_ParseAccuracy
CALLV
pop
line 1461
;1461:                return;
ADDRGP4 $857
JUMPV
LABELV $997
line 1465
;1462:        }
;1463:
;1464:
;1465:	if ( !strcmp( cmd, "ddtaken" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1002
ARGP4
ADDRLP4 276
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 276
INDIRI4
CNSTI4 0
NEI4 $1000
line 1466
;1466:		CG_ParseDDtimetaken();
ADDRGP4 CG_ParseDDtimetaken
CALLV
pop
line 1467
;1467:		return;
ADDRGP4 $857
JUMPV
LABELV $1000
line 1470
;1468:	}
;1469:
;1470:	if ( !strcmp( cmd, "dompointnames" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1005
ARGP4
ADDRLP4 280
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 280
INDIRI4
CNSTI4 0
NEI4 $1003
line 1471
;1471:		CG_ParseDomPointNames();
ADDRGP4 CG_ParseDomPointNames
CALLV
pop
line 1472
;1472:		return;
ADDRGP4 $857
JUMPV
LABELV $1003
line 1475
;1473:	}
;1474:
;1475:	if ( !strcmp( cmd, "domStatus" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1008
ARGP4
ADDRLP4 284
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 284
INDIRI4
CNSTI4 0
NEI4 $1006
line 1476
;1476:		CG_ParseDomStatus();
ADDRGP4 CG_ParseDomStatus
CALLV
pop
line 1477
;1477:		return;
ADDRGP4 $857
JUMPV
LABELV $1006
line 1480
;1478:	}
;1479:
;1480:	if ( !strcmp( cmd, "elimination" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1011
ARGP4
ADDRLP4 288
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 288
INDIRI4
CNSTI4 0
NEI4 $1009
line 1481
;1481:		CG_ParseElimination();
ADDRGP4 CG_ParseElimination
CALLV
pop
line 1482
;1482:		return;
ADDRGP4 $857
JUMPV
LABELV $1009
line 1485
;1483:	}
;1484:
;1485:	if ( !strcmp( cmd, "mappage" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1014
ARGP4
ADDRLP4 292
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 292
INDIRI4
CNSTI4 0
NEI4 $1012
line 1486
;1486:		CG_ParseMappage();
ADDRGP4 CG_ParseMappage
CALLV
pop
line 1487
;1487:		return;
ADDRGP4 $857
JUMPV
LABELV $1012
line 1490
;1488:	}
;1489:
;1490:	if ( !strcmp( cmd, "attackingteam" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1017
ARGP4
ADDRLP4 296
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 296
INDIRI4
CNSTI4 0
NEI4 $1015
line 1491
;1491:		CG_ParseAttackingTeam();
ADDRGP4 CG_ParseAttackingTeam
CALLV
pop
line 1492
;1492:		return;
ADDRGP4 $857
JUMPV
LABELV $1015
line 1495
;1493:	}
;1494:
;1495:	if ( !strcmp( cmd, "tinfo" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1020
ARGP4
ADDRLP4 300
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 300
INDIRI4
CNSTI4 0
NEI4 $1018
line 1496
;1496:		CG_ParseTeamInfo();
ADDRGP4 CG_ParseTeamInfo
CALLV
pop
line 1497
;1497:		return;
ADDRGP4 $857
JUMPV
LABELV $1018
line 1500
;1498:	}
;1499:
;1500:	if ( !strcmp( cmd, "map_restart" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1023
ARGP4
ADDRLP4 304
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 304
INDIRI4
CNSTI4 0
NEI4 $1021
line 1501
;1501:		CG_MapRestart();
ADDRGP4 CG_MapRestart
CALLV
pop
line 1502
;1502:		return;
ADDRGP4 $857
JUMPV
LABELV $1021
line 1505
;1503:	}
;1504:
;1505:	if ( Q_stricmp (cmd, "remapShader") == 0 )
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1026
ARGP4
ADDRLP4 308
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 308
INDIRI4
CNSTI4 0
NEI4 $1024
line 1506
;1506:	{
line 1507
;1507:		if (trap_Argc() == 4)
ADDRLP4 312
ADDRGP4 trap_Argc
CALLI4
ASGNI4
ADDRLP4 312
INDIRI4
CNSTI4 4
NEI4 $857
line 1508
;1508:		{
line 1513
;1509:			char shader1[MAX_QPATH];
;1510:			char shader2[MAX_QPATH];
;1511:			char shader3[MAX_QPATH];
;1512:
;1513:			Q_strncpyz(shader1, CG_Argv(1), sizeof(shader1));
CNSTI4 1
ARGI4
ADDRLP4 508
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 316
ARGP4
ADDRLP4 508
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1514
;1514:			Q_strncpyz(shader2, CG_Argv(2), sizeof(shader2));
CNSTI4 2
ARGI4
ADDRLP4 512
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 380
ARGP4
ADDRLP4 512
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1515
;1515:			Q_strncpyz(shader3, CG_Argv(3), sizeof(shader3));
CNSTI4 3
ARGI4
ADDRLP4 516
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 444
ARGP4
ADDRLP4 516
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 1517
;1516:
;1517:			trap_R_RemapShader(shader1, shader2, shader3);
ADDRLP4 316
ARGP4
ADDRLP4 380
ARGP4
ADDRLP4 444
ARGP4
ADDRGP4 trap_R_RemapShader
CALLV
pop
line 1518
;1518:		}
line 1520
;1519:
;1520:		return;
ADDRGP4 $857
JUMPV
LABELV $1024
line 1524
;1521:	}
;1522:
;1523:	// loaddeferred can be both a servercmd and a consolecmd
;1524:	if ( !strcmp( cmd, "loaddefered" ) ) {	// FIXME: spelled wrong, but not changing for demo
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1031
ARGP4
ADDRLP4 312
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 312
INDIRI4
CNSTI4 0
NEI4 $1029
line 1525
;1525:		CG_LoadDeferredPlayers();
ADDRGP4 CG_LoadDeferredPlayers
CALLV
pop
line 1526
;1526:		return;
ADDRGP4 $857
JUMPV
LABELV $1029
line 1531
;1527:	}
;1528:
;1529:	// clientLevelShot is sent before taking a special screenshot for
;1530:	// the menu system during development
;1531:	if ( !strcmp( cmd, "clientLevelShot" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1034
ARGP4
ADDRLP4 316
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 316
INDIRI4
CNSTI4 0
NEI4 $1032
line 1532
;1532:		cg.levelShot = qtrue;
ADDRGP4 cg+12
CNSTI4 1
ASGNI4
line 1533
;1533:		return;
ADDRGP4 $857
JUMPV
LABELV $1032
line 1536
;1534:	}
;1535:
;1536:    if ( !strcmp (cmd, "oh") ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1038
ARGP4
ADDRLP4 320
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 320
INDIRI4
CNSTI4 0
NEI4 $1036
line 1537
;1537:        CG_ParseObeliskHealth();
ADDRGP4 CG_ParseObeliskHealth
CALLV
pop
line 1538
;1538:        return;
ADDRGP4 $857
JUMPV
LABELV $1036
line 1541
;1539:    }
;1540:
;1541:    if ( !strcmp( cmd, "respawn" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1041
ARGP4
ADDRLP4 324
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 324
INDIRI4
CNSTI4 0
NEI4 $1039
line 1542
;1542:		CG_ParseRespawnTime();
ADDRGP4 CG_ParseRespawnTime
CALLV
pop
line 1543
;1543:		return;
ADDRGP4 $857
JUMPV
LABELV $1039
line 1546
;1544:	}
;1545:
;1546:    if ( !strcmp( cmd, "team" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1044
ARGP4
ADDRLP4 328
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 328
INDIRI4
CNSTI4 0
NEI4 $1042
line 1547
;1547:		CG_ParseTeam();
ADDRGP4 CG_ParseTeam
CALLV
pop
line 1548
;1548:		return;
ADDRGP4 $857
JUMPV
LABELV $1042
line 1551
;1549:	}
;1550:
;1551:	if ( !strcmp( cmd, "weaponProperties" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1047
ARGP4
ADDRLP4 332
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 332
INDIRI4
CNSTI4 0
NEI4 $1045
line 1552
;1552:        CG_ParseWeaponProperties();
ADDRGP4 CG_ParseWeaponProperties
CALLV
pop
line 1553
;1553:        return;
ADDRGP4 $857
JUMPV
LABELV $1045
line 1556
;1554:    }
;1555:	
;1556:	if ( !strcmp( cmd, "sweps" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1050
ARGP4
ADDRLP4 336
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 336
INDIRI4
CNSTI4 0
NEI4 $1048
line 1557
;1557:        CG_ParseSweps();
ADDRGP4 CG_ParseSweps
CALLV
pop
line 1558
;1558:        return;
ADDRGP4 $857
JUMPV
LABELV $1048
line 1561
;1559:    }
;1560:
;1561:        if ( !strcmp( cmd, "customvotes" ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 $1053
ARGP4
ADDRLP4 340
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 340
INDIRI4
CNSTI4 0
NEI4 $1051
line 1565
;1562:            char infoString[1024];
;1563:            int i;
;1564:            //TODO: Create a ParseCustomvotes function
;1565:            memset(&infoString,0,sizeof(infoString));
ADDRLP4 344
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1024
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1566
;1566:            for(i=1;i<=12;i++) {
ADDRLP4 1368
CNSTI4 1
ASGNI4
LABELV $1054
line 1567
;1567:                Q_strcat(infoString,sizeof(infoString),CG_Argv( i ));
ADDRLP4 1368
INDIRI4
ARGI4
ADDRLP4 1372
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 344
ARGP4
CNSTI4 1024
ARGI4
ADDRLP4 1372
INDIRP4
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 1568
;1568:                Q_strcat(infoString,sizeof(infoString)," ");
ADDRLP4 344
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 $1058
ARGP4
ADDRGP4 Q_strcat
CALLV
pop
line 1569
;1569:            }
LABELV $1055
line 1566
ADDRLP4 1368
ADDRLP4 1368
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 1368
INDIRI4
CNSTI4 12
LEI4 $1054
line 1570
;1570:            trap_Cvar_Set("cg_vote_custom_commands",infoString);
ADDRGP4 $1059
ARGP4
ADDRLP4 344
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 1571
;1571:		return;
ADDRGP4 $857
JUMPV
LABELV $1051
line 1574
;1572:	}
;1573:
;1574:	CG_Printf( "Unknown client game command: %s\n", cmd );
ADDRGP4 $1060
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Printf
CALLV
pop
line 1575
;1575:}
LABELV $857
endproc CG_ServerCommand 1376 12
export CG_ExecuteNewServerCommands
proc CG_ExecuteNewServerCommands 12 4
line 1586
;1576:
;1577:
;1578:/*
;1579:====================
;1580:CG_ExecuteNewServerCommands
;1581:
;1582:Execute all of the server commands that were received along
;1583:with this this snapshot.
;1584:====================
;1585:*/
;1586:void CG_ExecuteNewServerCommands( int latestSequence ) {
ADDRGP4 $1063
JUMPV
LABELV $1062
line 1587
;1587:	while ( cgs.serverCommandSequence < latestSequence ) {
line 1588
;1588:		if ( trap_GetServerCommand( ++cgs.serverCommandSequence ) ) {
ADDRLP4 0
ADDRGP4 cgs+339028
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 trap_GetServerCommand
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $1066
line 1589
;1589:			CG_ServerCommand();
ADDRGP4 CG_ServerCommand
CALLV
pop
line 1590
;1590:		}
LABELV $1066
line 1591
;1591:	}
LABELV $1063
line 1587
ADDRGP4 cgs+339028
INDIRI4
ADDRFP4 0
INDIRI4
LTI4 $1062
line 1592
;1592:}
LABELV $1061
endproc CG_ExecuteNewServerCommands 12 4
import CG_PrintfChat
bss
export voiceChatBuffer
align 4
LABELV voiceChatBuffer
skip 9984
export headModelVoiceChat
align 4
LABELV headModelVoiceChat
skip 4352
export voiceChatLists
align 4
LABELV voiceChatLists
skip 18108928
import wideAdjustX
import CG_NewParticleArea
import initparticles
import CG_LaunchFragment
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel_MiTech
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound_MiTech
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_System
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_Atmospheric_SetParticles
import CG_AddAtmosphericEffects
import teamcolormodels
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformationRus
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_SpurtBlood
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_LeiPuff
import CG_LeiSparks2
import CG_LeiSparks
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponBarNew2
import CG_DrawWeaponBarNew
import CG_DrawWeaponBar0
import CG_DrawWeaponSelect
import CG_AddRealWeapon
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_GravitygunTrail
import CG_PhysgunTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainVehicleEvent
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_ReloadPlayers
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_AddToGenericConsole
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModelCopy
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrintRus
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import CG_DrawFade
import CG_Fade
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_InsideBox
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawGiantString
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_DrawRoundedRect
import CG_FillRect2
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_CloadMap_f
import CG_FairCvars
import SnapVectorTowards
import CG_RegisterOverlay
import CG_IsTeamGame
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_PredictWeaponEffects
import cg_teamChatBeep
import cg_chatBeep
import cg_weaponOrder
import cg_weaponBarStyle
import cg_crosshairColorBlue
import cg_crosshairColorGreen
import cg_crosshairColorRed
import cg_ch13size
import cg_ch13
import cg_ch12size
import cg_ch12
import cg_ch11size
import cg_ch11
import cg_ch10size
import cg_ch10
import cg_ch9slze
import cg_ch9size
import cg_ch9
import cg_ch8size
import cg_ch8
import cg_ch7size
import cg_ch7
import cg_ch6size
import cg_ch6
import cg_ch5size
import cg_ch5
import cg_ch4size
import cg_ch4
import cg_ch3size
import cg_ch3
import cg_ch2size
import cg_ch2
import cg_ch1size
import cg_ch1
import cg_differentCrosshairs
import cg_crosshairPulse
import cg_atmosphericLevel
import cg_fragmsgsize
import cg_autovertex
import cg_vote_custom_commands
import cg_cyclegrapple
import cg_voteflags
import cg_voip_teamonly
import cg_hitsound
import cg_alwaysWeaponBar
import cl_timeNudge
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_cmdTimeNudge
import cg_delag
import cg_enableBreath
import cg_enableDust
import cg_obeliskRespawnDelay
import cg_recordSPDemoName
import cg_recordSPDemo
import cg_singlePlayerActive
import cg_singlePlayer
import cg_currentSelectedPlayerName
import cg_currentSelectedPlayer
import cg_blueTeamName
import cg_redTeamName
import cg_music
import cg_trueLightning
import cg_oldPlasma
import cg_cameraEyes_Up
import cg_cameraEyes_Fwd
import cg_cameraEyes
import cg_cameramode
import cg_leiBrassNoise
import cg_leiGoreNoise
import cg_leiEnhancement
import cg_lodScale
import cg_letterBoxSize
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_float
import pmove_msec
import pmove_fixed
import cg_commonConsole
import cg_teamChatLines
import cg_chatLines
import cg_commonConsoleLines
import cg_consoleLines
import cg_teamChatSizeY
import cg_teamChatSizeX
import cg_chatSizeY
import cg_chatSizeX
import cg_consoleSizeY
import cg_consoleSizeX
import cg_fontShadow
import cg_fontScale
import cg_consoleTime
import cg_chatTime
import cg_newConsole
import cg_newFont
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatScaleY
import cg_teamChatScaleX
import cg_chatY
import cg_teamChatY
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawSpeed
import cg_drawAttacker
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_thirdPersonOffset
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_bigheadMode
import cg_disableLevelStartFade
import cg_paintballMode
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairScale
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_drawSyncMessage
import cg_drawsubtitles
import cg_centertime
import cg_gibtime
import cg_itemstyle
import cg_oldscoreboard
import team_legsskin
import legsskin
import ui_backcolors
import cl_screenoffset
import cg_cameraeyes
import cg_leiChibi
import cg_plightradius
import cg_plightblue
import cg_plightgreen
import cg_plightred
import cg_tolightblue
import cg_tolightgreen
import cg_tolightred
import cg_hetex
import cg_totex
import cg_ptex
import cg_helightblue
import cg_helightgreen
import cg_helightred
import con_notifytime
import cl_language
import cg_toolguninfo
import cg_postprocess
import cg_hide255
import sb_texturename
import sb_texture_view
import sb_classnum_view
import toolgun_modelst
import toolgun_toolmode4
import toolgun_toolmode3
import toolgun_toolmode2
import toolgun_toolmode1
import toolgun_tooltip4
import toolgun_tooltip3
import toolgun_tooltip2
import toolgun_tooltip1
import toolgun_tooltext
import toolgun_toolcmd4
import toolgun_toolcmd3
import toolgun_toolcmd2
import toolgun_toolcmd1
import toolgun_tool
import toolgun_mod19
import toolgun_mod18
import toolgun_mod17
import toolgun_mod16
import toolgun_mod15
import toolgun_mod14
import toolgun_mod13
import toolgun_mod12
import toolgun_mod11
import toolgun_mod10
import toolgun_mod9
import toolgun_mod8
import toolgun_mod7
import toolgun_mod6
import toolgun_mod5
import toolgun_mod4
import toolgun_mod3
import toolgun_mod2
import toolgun_mod1
import cg_weaponBarActiveWidth
import cg_weaponselecttime
import cg_itemscaletime
import cg_zoomtime
import cg_gibmodifier
import cg_gibvelocity
import cg_gibjump
import cl_giantcharheight
import cl_giantcharwidth
import cl_bigcharheight
import cl_bigcharwidth
import cl_smallcharheight
import cl_smallcharwidth
import cl_propgapwidth
import cl_propspacewidth
import cl_propheight
import cl_propsmallsizescale
import g_gametype
import mod_skyColorA
import mod_skyColorB
import mod_skyColorG
import mod_skyColorR
import mod_skyShader
import mod_fogColorA
import mod_fogColorB
import mod_fogColorG
import mod_fogColorR
import mod_fogInterval
import mod_fogDistance
import mod_fogShader
import mod_fogModel
import mod_zround
import mod_gravity
import mod_roundmode
import mod_overlay
import mod_slickmove
import mod_accelerate
import mod_invulinf
import mod_kamikazeinf
import mod_portalinf
import mod_teleporterinf
import mod_medkitinf
import mod_medkitlimit
import mod_teamblue_firespeed
import mod_teamred_firespeed
import mod_invulmove
import mod_ammolimit
import mod_noplayerclip
import mod_doublerfirespeed
import mod_guardfirespeed
import mod_scoutfirespeed
import mod_ammoregenfirespeed
import mod_hastefirespeed
import mod_amdelay
import mod_ftdelay
import mod_cgdelay
import mod_pldelay
import mod_ngdelay
import mod_bfgdelay
import mod_rgdelay
import mod_pgdelay
import mod_lgdelay
import mod_rldelay
import mod_gldelay
import mod_sgdelay
import mod_mgdelay
import mod_gdelay
import mod_jumpheight
import mod_sgspread
import mod_sgcount
import mod_lgrange
import mod_cgspread
import mod_mgspread
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_TeamName
import BG_GetVehicleSettings
import BG_VehicleCheckClass
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_DefragmentMemory
import BG_Free
import BG_InitMemory
import BG_Alloc
import BG_CanAlloc
import BG_CanItemBeGrabbed
import BG_FindItemForBackpack
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindSwepAmmo
import BG_FindSwep
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import COM_LoadLevelScores
import COM_CalculatePlayerScore
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import vectoyaw
import AngleDifference
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import Q_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import Lerp
import VelocityToAxis
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import Q_snprintf
import Q_vsnprintf
import strtol
import _atoi
import atoi
import strtod
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import ifstrlenru
import strlenru
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1060
byte 1 85
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 32
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $1059
byte 1 99
byte 1 103
byte 1 95
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 95
byte 1 99
byte 1 117
byte 1 115
byte 1 116
byte 1 111
byte 1 109
byte 1 95
byte 1 99
byte 1 111
byte 1 109
byte 1 109
byte 1 97
byte 1 110
byte 1 100
byte 1 115
byte 1 0
align 1
LABELV $1058
byte 1 32
byte 1 0
align 1
LABELV $1053
byte 1 99
byte 1 117
byte 1 115
byte 1 116
byte 1 111
byte 1 109
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $1050
byte 1 115
byte 1 119
byte 1 101
byte 1 112
byte 1 115
byte 1 0
align 1
LABELV $1047
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 80
byte 1 114
byte 1 111
byte 1 112
byte 1 101
byte 1 114
byte 1 116
byte 1 105
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $1044
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $1041
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 0
align 1
LABELV $1038
byte 1 111
byte 1 104
byte 1 0
align 1
LABELV $1034
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 76
byte 1 101
byte 1 118
byte 1 101
byte 1 108
byte 1 83
byte 1 104
byte 1 111
byte 1 116
byte 1 0
align 1
LABELV $1031
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 114
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $1026
byte 1 114
byte 1 101
byte 1 109
byte 1 97
byte 1 112
byte 1 83
byte 1 104
byte 1 97
byte 1 100
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $1023
byte 1 109
byte 1 97
byte 1 112
byte 1 95
byte 1 114
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 0
align 1
LABELV $1020
byte 1 116
byte 1 105
byte 1 110
byte 1 102
byte 1 111
byte 1 0
align 1
LABELV $1017
byte 1 97
byte 1 116
byte 1 116
byte 1 97
byte 1 99
byte 1 107
byte 1 105
byte 1 110
byte 1 103
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 0
align 1
LABELV $1014
byte 1 109
byte 1 97
byte 1 112
byte 1 112
byte 1 97
byte 1 103
byte 1 101
byte 1 0
align 1
LABELV $1011
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $1008
byte 1 100
byte 1 111
byte 1 109
byte 1 83
byte 1 116
byte 1 97
byte 1 116
byte 1 117
byte 1 115
byte 1 0
align 1
LABELV $1005
byte 1 100
byte 1 111
byte 1 109
byte 1 112
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $1002
byte 1 100
byte 1 100
byte 1 116
byte 1 97
byte 1 107
byte 1 101
byte 1 110
byte 1 0
align 1
LABELV $999
byte 1 97
byte 1 99
byte 1 99
byte 1 115
byte 1 0
align 1
LABELV $996
byte 1 115
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 115
byte 1 0
align 1
LABELV $993
byte 1 118
byte 1 116
byte 1 101
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $990
byte 1 118
byte 1 116
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $987
byte 1 118
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $978
byte 1 116
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $966
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $963
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 67
byte 1 104
byte 1 97
byte 1 116
byte 1 0
align 1
LABELV $957
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 112
byte 1 97
byte 1 115
byte 1 115
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $956
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 112
byte 1 97
byte 1 115
byte 1 115
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $950
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $949
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 32
byte 1 102
byte 1 97
byte 1 105
byte 1 108
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $946
byte 1 68
byte 1 82
byte 1 95
byte 1 83
byte 1 73
byte 1 76
byte 1 69
byte 1 78
byte 1 84
byte 1 95
byte 1 68
byte 1 82
byte 1 79
byte 1 80
byte 1 10
byte 1 0
align 1
LABELV $943
byte 1 68
byte 1 82
byte 1 95
byte 1 83
byte 1 73
byte 1 76
byte 1 69
byte 1 78
byte 1 84
byte 1 95
byte 1 68
byte 1 82
byte 1 79
byte 1 80
byte 1 0
align 1
LABELV $942
byte 1 112
byte 1 114
byte 1 105
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $930
byte 1 111
byte 1 117
byte 1 0
align 1
LABELV $921
byte 1 102
byte 1 97
byte 1 100
byte 1 101
byte 1 0
align 1
LABELV $918
byte 1 99
byte 1 115
byte 1 0
align 1
LABELV $915
byte 1 115
byte 1 101
byte 1 116
byte 1 32
byte 1 108
byte 1 101
byte 1 103
byte 1 115
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 10
byte 1 0
align 1
LABELV $914
byte 1 99
byte 1 108
byte 1 101
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $911
byte 1 99
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $908
byte 1 99
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 0
align 1
LABELV $905
byte 1 115
byte 1 101
byte 1 116
byte 1 32
byte 1 117
byte 1 105
byte 1 95
byte 1 109
byte 1 115
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 10
byte 1 0
align 1
LABELV $904
byte 1 99
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $901
byte 1 115
byte 1 101
byte 1 116
byte 1 32
byte 1 117
byte 1 105
byte 1 95
byte 1 109
byte 1 115
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 10
byte 1 0
align 1
LABELV $900
byte 1 99
byte 1 116
byte 1 111
byte 1 114
byte 1 115
byte 1 111
byte 1 0
align 1
LABELV $897
byte 1 115
byte 1 101
byte 1 116
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 10
byte 1 0
align 1
LABELV $896
byte 1 115
byte 1 101
byte 1 116
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 10
byte 1 0
align 1
LABELV $895
byte 1 115
byte 1 101
byte 1 116
byte 1 32
byte 1 104
byte 1 101
byte 1 97
byte 1 100
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 10
byte 1 0
align 1
LABELV $894
byte 1 115
byte 1 101
byte 1 116
byte 1 32
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 10
byte 1 0
align 1
LABELV $893
byte 1 99
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $890
byte 1 112
byte 1 108
byte 1 97
byte 1 121
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 10
byte 1 0
align 1
LABELV $889
byte 1 99
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $886
byte 1 109
byte 1 117
byte 1 115
byte 1 105
byte 1 99
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 10
byte 1 0
align 1
LABELV $885
byte 1 99
byte 1 109
byte 1 117
byte 1 115
byte 1 105
byte 1 99
byte 1 0
align 1
LABELV $881
byte 1 108
byte 1 112
byte 1 0
align 1
LABELV $878
byte 1 99
byte 1 108
byte 1 99
byte 1 109
byte 1 100
byte 1 0
align 1
LABELV $874
byte 1 114
byte 1 117
byte 1 115
byte 1 99
byte 1 108
byte 1 112
byte 1 0
align 1
LABELV $870
byte 1 99
byte 1 108
byte 1 112
byte 1 0
align 1
LABELV $866
byte 1 114
byte 1 117
byte 1 115
byte 1 99
byte 1 112
byte 1 0
align 1
LABELV $862
byte 1 99
byte 1 112
byte 1 0
align 1
LABELV $845
byte 1 112
byte 1 114
byte 1 97
byte 1 105
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $844
byte 1 107
byte 1 105
byte 1 108
byte 1 108
byte 1 95
byte 1 103
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 108
byte 1 101
byte 1 116
byte 1 0
align 1
LABELV $843
byte 1 100
byte 1 101
byte 1 97
byte 1 116
byte 1 104
byte 1 95
byte 1 105
byte 1 110
byte 1 115
byte 1 117
byte 1 108
byte 1 116
byte 1 0
align 1
LABELV $842
byte 1 116
byte 1 97
byte 1 117
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $841
byte 1 107
byte 1 105
byte 1 108
byte 1 108
byte 1 95
byte 1 105
byte 1 110
byte 1 115
byte 1 117
byte 1 108
byte 1 116
byte 1 0
align 1
LABELV $833
byte 1 37
byte 1 115
byte 1 58
byte 1 32
byte 1 37
byte 1 99
byte 1 37
byte 1 99
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $829
byte 1 40
byte 1 37
byte 1 115
byte 1 41
byte 1 58
byte 1 32
byte 1 37
byte 1 99
byte 1 37
byte 1 99
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $823
byte 1 91
byte 1 37
byte 1 115
byte 1 93
byte 1 58
byte 1 32
byte 1 37
byte 1 99
byte 1 37
byte 1 99
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $768
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $713
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 46
byte 1 118
byte 1 99
byte 1 0
align 1
LABELV $695
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $660
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 114
byte 1 117
byte 1 115
byte 1 32
byte 1 109
byte 1 101
byte 1 109
byte 1 111
byte 1 114
byte 1 121
byte 1 32
byte 1 115
byte 1 105
byte 1 122
byte 1 101
byte 1 32
byte 1 61
byte 1 32
byte 1 37
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $659
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 109
byte 1 101
byte 1 109
byte 1 111
byte 1 114
byte 1 121
byte 1 32
byte 1 115
byte 1 105
byte 1 122
byte 1 101
byte 1 32
byte 1 61
byte 1 32
byte 1 37
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $657
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 98
byte 1 97
byte 1 110
byte 1 100
byte 1 105
byte 1 116
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $655
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 53
byte 1 114
byte 1 117
byte 1 115
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $653
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 52
byte 1 114
byte 1 117
byte 1 115
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $651
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 51
byte 1 114
byte 1 117
byte 1 115
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $649
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 50
byte 1 114
byte 1 117
byte 1 115
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $647
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 49
byte 1 114
byte 1 117
byte 1 115
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $645
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 102
byte 1 101
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 51
byte 1 114
byte 1 117
byte 1 115
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $643
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 102
byte 1 101
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 50
byte 1 114
byte 1 117
byte 1 115
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $641
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 102
byte 1 101
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 49
byte 1 114
byte 1 117
byte 1 115
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $639
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 53
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $637
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 52
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $635
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 51
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $633
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 50
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $631
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 49
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $629
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 102
byte 1 101
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 51
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $627
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 102
byte 1 101
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 50
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $626
byte 1 115
byte 1 99
byte 1 114
byte 1 105
byte 1 112
byte 1 116
byte 1 115
byte 1 47
byte 1 102
byte 1 101
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 49
byte 1 46
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 0
align 1
LABELV $615
byte 1 125
byte 1 0
align 1
LABELV $606
byte 1 94
byte 1 49
byte 1 101
byte 1 120
byte 1 112
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 123
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $605
byte 1 123
byte 1 0
align 1
LABELV $596
byte 1 94
byte 1 49
byte 1 101
byte 1 120
byte 1 112
byte 1 101
byte 1 99
byte 1 116
byte 1 101
byte 1 100
byte 1 32
byte 1 103
byte 1 101
byte 1 110
byte 1 100
byte 1 101
byte 1 114
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $595
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $592
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $589
byte 1 102
byte 1 101
byte 1 109
byte 1 97
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $579
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $578
byte 1 94
byte 1 49
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 32
byte 1 108
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 44
byte 1 32
byte 1 109
byte 1 97
byte 1 120
byte 1 32
byte 1 97
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 101
byte 1 100
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $575
byte 1 94
byte 1 49
byte 1 118
byte 1 111
byte 1 105
byte 1 99
byte 1 101
byte 1 32
byte 1 99
byte 1 104
byte 1 97
byte 1 116
byte 1 32
byte 1 102
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $567
byte 1 115
byte 1 101
byte 1 116
byte 1 32
byte 1 103
byte 1 95
byte 1 115
byte 1 121
byte 1 110
byte 1 99
byte 1 104
byte 1 114
byte 1 111
byte 1 110
byte 1 111
byte 1 117
byte 1 115
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 32
byte 1 49
byte 1 32
byte 1 59
byte 1 32
byte 1 114
byte 1 101
byte 1 99
byte 1 111
byte 1 114
byte 1 100
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 10
byte 1 0
align 1
LABELV $560
byte 1 117
byte 1 105
byte 1 95
byte 1 109
byte 1 97
byte 1 116
byte 1 99
byte 1 104
byte 1 83
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 84
byte 1 105
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $555
byte 1 70
byte 1 73
byte 1 71
byte 1 72
byte 1 84
byte 1 33
byte 1 0
align 1
LABELV $544
byte 1 67
byte 1 71
byte 1 95
byte 1 77
byte 1 97
byte 1 112
byte 1 82
byte 1 101
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $405
byte 1 64
byte 1 0
align 1
LABELV $402
byte 1 58
byte 1 0
align 1
LABELV $399
byte 1 61
byte 1 0
align 1
LABELV $358
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $357
byte 1 99
byte 1 103
byte 1 95
byte 1 118
byte 1 111
byte 1 116
byte 1 101
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $355
byte 1 103
byte 1 95
byte 1 100
byte 1 101
byte 1 108
byte 1 97
byte 1 103
byte 1 72
byte 1 105
byte 1 116
byte 1 115
byte 1 99
byte 1 97
byte 1 110
byte 1 0
align 1
LABELV $353
byte 1 109
byte 1 97
byte 1 112
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 46
byte 1 98
byte 1 115
byte 1 112
byte 1 0
align 1
LABELV $350
byte 1 109
byte 1 97
byte 1 112
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $349
byte 1 103
byte 1 95
byte 1 97
byte 1 108
byte 1 116
byte 1 69
byte 1 120
byte 1 99
byte 1 101
byte 1 108
byte 1 108
byte 1 101
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $347
byte 1 103
byte 1 95
byte 1 108
byte 1 109
byte 1 115
byte 1 95
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 0
align 1
LABELV $345
byte 1 103
byte 1 95
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $344
byte 1 103
byte 1 95
byte 1 105
byte 1 110
byte 1 115
byte 1 116
byte 1 97
byte 1 110
byte 1 116
byte 1 103
byte 1 105
byte 1 98
byte 1 0
align 1
LABELV $343
byte 1 103
byte 1 95
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $341
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 95
byte 1 114
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $339
byte 1 115
byte 1 118
byte 1 95
byte 1 109
byte 1 97
byte 1 120
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $337
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $335
byte 1 99
byte 1 97
byte 1 112
byte 1 116
byte 1 117
byte 1 114
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $333
byte 1 102
byte 1 114
byte 1 97
byte 1 103
byte 1 108
byte 1 105
byte 1 109
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $331
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $329
byte 1 101
byte 1 108
byte 1 105
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $327
byte 1 118
byte 1 105
byte 1 100
byte 1 101
byte 1 111
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $325
byte 1 100
byte 1 109
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 115
byte 1 0
align 1
LABELV $322
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $316
byte 1 103
byte 1 95
byte 1 103
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $286
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 115
byte 1 101
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 73
byte 1 110
byte 1 102
byte 1 111
byte 1 58
byte 1 32
byte 1 98
byte 1 97
byte 1 100
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 98
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 37
byte 1 100
byte 1 0
align 1
LABELV $278
byte 1 67
byte 1 71
byte 1 95
byte 1 80
byte 1 97
byte 1 114
byte 1 115
byte 1 101
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 73
byte 1 110
byte 1 102
byte 1 111
byte 1 58
byte 1 32
byte 1 110
byte 1 117
byte 1 109
byte 1 83
byte 1 111
byte 1 114
byte 1 116
byte 1 101
byte 1 100
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 80
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 115
byte 1 32
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 114
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 32
byte 1 40
byte 1 37
byte 1 100
byte 1 41
byte 1 0
align 1
LABELV $265
byte 1 99
byte 1 108
byte 1 95
byte 1 118
byte 1 111
byte 1 105
byte 1 112
byte 1 83
byte 1 101
byte 1 110
byte 1 100
byte 1 84
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 0
align 1
LABELV $223
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 0
align 1
LABELV $222
byte 1 45
byte 1 45
byte 1 45
byte 1 0
align 1
LABELV $206
byte 1 117
byte 1 105
byte 1 95
byte 1 109
byte 1 97
byte 1 112
byte 1 112
byte 1 97
byte 1 103
byte 1 101
byte 1 32
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $90
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 99
byte 1 97
byte 1 114
byte 1 114
byte 1 105
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $89
byte 1 114
byte 1 101
byte 1 116
byte 1 117
byte 1 114
byte 1 110
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $88
byte 1 102
byte 1 111
byte 1 108
byte 1 108
byte 1 111
byte 1 119
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $87
byte 1 99
byte 1 97
byte 1 109
byte 1 112
byte 1 0
align 1
LABELV $86
byte 1 112
byte 1 97
byte 1 116
byte 1 114
byte 1 111
byte 1 108
byte 1 0
align 1
LABELV $85
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 110
byte 1 100
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $84
byte 1 100
byte 1 101
byte 1 102
byte 1 101
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $83
byte 1 111
byte 1 102
byte 1 102
byte 1 101
byte 1 110
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $82
byte 1 103
byte 1 101
byte 1 116
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
