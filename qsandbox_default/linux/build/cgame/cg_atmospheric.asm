export CG_EffectMark
code
proc CG_EffectMark 236 12
file "../../../code/cgame/cg_atmospheric.c"
line 87
;1:/*
;2:===========================================================================
;3:Copyright (C) 1999-2005 Id Software, Inc.
;4:Copyright (C) 2002-2021 Q3Rally Team (Per Thormann - q3rally@gmail.com)
;5:
;6:This file is part of q3rally source code.
;7:
;8:q3rally source code is free software; you can redistribute it
;9:and/or modify it under the terms of the GNU General Public License as
;10:published by the Free Software Foundation; either version 2 of the License,
;11:or (at your option) any later version.
;12:
;13:q3rally source code is distributed in the hope that it will be
;14:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;15:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;16:GNU General Public License for more details.
;17:
;18:You should have received a copy of the GNU General Public License
;19:along with q3rally; if not, write to the Free Software
;20:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;21:===========================================================================
;22:*/
;23:
;24:#include "cg_local.h"
;25:
;26:// Q3Rally Code Start
;27:#define MAX_ATMOSPHERIC_PARTICLES		2048  	// maximum # of particles
;28:#define MAX_ATMOSPHERIC_DISTANCE		3000  	// maximum distance from refdef origin that particles are visible
;29:
;30:#define MAX_ATMOSPHERIC_HEIGHT			524288  	// maximum world height (FIXME: since 1.27 this should be 65536)
;31:#define MIN_ATMOSPHERIC_HEIGHT			-524288  	// minimum world height (FIXME: since 1.27 this should be -65536)
;32:
;33:#define START_RAIN_HEIGHT				4096
;34:#define START_SNOW_HEIGHT				256
;35:// END
;36:
;37:#define MAX_ATMOSPHERIC_EFFECTSHADERS	6  	  	// maximum different effectshaders for an atmospheric effect
;38:
;39:
;40:#define ATMOSPHERIC_DROPDELAY			1000
;41:#define ATMOSPHERIC_CUTHEIGHT			800
;42:
;43:
;44:#define ATMOSPHERIC_RAIN_SPEED			1.1f * mod_gravity
;45:#define ATMOSPHERIC_RAIN_HEIGHT			150
;46:
;47:#define ATMOSPHERIC_SNOW_SPEED			0.1f * mod_gravity
;48:#define ATMOSPHERIC_SNOW_HEIGHT			10
;49:
;50:#define NUM_ATMOSPHERIC_TYPES			2
;51:
;52:typedef struct cg_atmosphericParticle_s {
;53:	vec3_t pos, delta, deltaNormalized, colour, surfacenormal;
;54:	float height, minz, weight;
;55:	qboolean active;
;56:	int contents, surface, nextDropTime;
;57:	qhandle_t *effectshader;
;58:} cg_atmosphericParticle_t;
;59:
;60:typedef struct cg_atmosphericEffect_s {
;61:	cg_atmosphericParticle_t particles[MAX_ATMOSPHERIC_PARTICLES];
;62:	qhandle_t effectshaders[MAX_ATMOSPHERIC_EFFECTSHADERS];
;63:	qhandle_t effectwatershader, effectlandshader;
;64:	int lastRainTime, numDrops;
;65:	int gustStartTime, gustEndTime;
;66:	int baseStartTime, baseEndTime;
;67:	int gustMinTime, gustMaxTime;
;68:	int changeMinTime, changeMaxTime;
;69:	int baseMinTime, baseMaxTime;
;70:	float baseWeight, gustWeight;
;71:	int baseDrops, gustDrops;
;72:	int numEffectShaders;
;73:	qboolean waterSplash, landSplash;
;74:	vec3_t baseVec, gustVec;
;75:
;76:	qboolean (*ParticleCheckVisible)( int type, cg_atmosphericParticle_t *particle );
;77:	qboolean (*ParticleGenerate)( int type, cg_atmosphericParticle_t *particle, vec3_t currvec, float currweight );
;78:	void (*ParticleRender)( int type, cg_atmosphericParticle_t *particle );
;79:} cg_atmosphericEffect_t;
;80:
;81:static cg_atmosphericEffect_t cg_atmFxList[NUM_ATMOSPHERIC_TYPES];
;82:
;83:/*
;84:**  Render utility functions
;85:*/
;86:
;87:void CG_EffectMark(  	qhandle_t markShader, const vec3_t origin, const vec3_t dir, float alpha, float radius ) {
line 98
;88:	// 'quick' version of the CG_ImpactMark function
;89:
;90:	vec3_t			axis[3];
;91:	float			texCoordScale;
;92:	vec3_t			originalPoints[4];
;93:	byte			colors[4];
;94:	int				i;
;95:	polyVert_t		*v;
;96:	polyVert_t		verts[4];
;97:
;98:	if ( !cg_addMarks.integer ) {
ADDRGP4 cg_addMarks+12
INDIRI4
CNSTI4 0
NEI4 $82
line 99
;99:		return;
ADDRGP4 $81
JUMPV
LABELV $82
line 102
;100:	}
;101:
;102:	if ( radius <= 0 ) {
ADDRFP4 16
INDIRF4
CNSTF4 0
GTF4 $85
line 103
;103:		CG_Error( "CG_EffectMark called with <= 0 radius" );
ADDRGP4 $87
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 104
;104:	}
LABELV $85
line 107
;105:
;106:	// create the texture axis
;107:	VectorNormalize2( dir, axis[0] );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 108
;108:	PerpendicularVector( axis[1], axis[0] );
ADDRLP4 4+12
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 109
;109:	VectorSet( axis[2], 1, 0, 0 );  	  	  	// This is _wrong_, but the function is for water anyway (i.e. usually flat)
ADDRLP4 4+24
CNSTF4 1065353216
ASGNF4
ADDRLP4 4+24+4
CNSTF4 0
ASGNF4
ADDRLP4 4+24+8
CNSTF4 0
ASGNF4
line 110
;110:	CrossProduct( axis[0], axis[2], axis[1] );
ADDRLP4 4
ARGP4
ADDRLP4 4+24
ARGP4
ADDRLP4 4+12
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 112
;111:
;112:	texCoordScale = 0.5 * 1.0 / radius;
ADDRLP4 92
CNSTF4 1056964608
ADDRFP4 16
INDIRF4
DIVF4
ASGNF4
line 115
;113:
;114:	// create the full polygon
;115:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $96
line 116
;116:		originalPoints[0][i] = origin[i] - radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 196
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 200
ADDRFP4 16
INDIRF4
ASGNF4
ADDRLP4 196
INDIRI4
ADDRLP4 44
ADDP4
ADDRLP4 196
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 200
INDIRF4
ADDRLP4 196
INDIRI4
ADDRLP4 4+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 200
INDIRF4
ADDRLP4 196
INDIRI4
ADDRLP4 4+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 117
;117:		originalPoints[1][i] = origin[i] + radius * axis[1][i] - radius * axis[2][i];
ADDRLP4 204
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 208
ADDRFP4 16
INDIRF4
ASGNF4
ADDRLP4 204
INDIRI4
ADDRLP4 44+12
ADDP4
ADDRLP4 204
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 204
INDIRI4
ADDRLP4 4+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 208
INDIRF4
ADDRLP4 204
INDIRI4
ADDRLP4 4+24
ADDP4
INDIRF4
MULF4
SUBF4
ASGNF4
line 118
;118:		originalPoints[2][i] = origin[i] + radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 212
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 216
ADDRFP4 16
INDIRF4
ASGNF4
ADDRLP4 212
INDIRI4
ADDRLP4 44+24
ADDP4
ADDRLP4 212
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 216
INDIRF4
ADDRLP4 212
INDIRI4
ADDRLP4 4+12
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 216
INDIRF4
ADDRLP4 212
INDIRI4
ADDRLP4 4+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 119
;119:		originalPoints[3][i] = origin[i] - radius * axis[1][i] + radius * axis[2][i];
ADDRLP4 220
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 224
ADDRFP4 16
INDIRF4
ASGNF4
ADDRLP4 220
INDIRI4
ADDRLP4 44+36
ADDP4
ADDRLP4 220
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 224
INDIRF4
ADDRLP4 220
INDIRI4
ADDRLP4 4+12
ADDP4
INDIRF4
MULF4
SUBF4
ADDRLP4 224
INDIRF4
ADDRLP4 220
INDIRI4
ADDRLP4 4+24
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 120
;120:	}
LABELV $97
line 115
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $96
line 122
;121:
;122:	colors[0] = 127;
ADDRLP4 96
CNSTU1 127
ASGNU1
line 123
;123:	colors[1] = 127;
ADDRLP4 96+1
CNSTU1 127
ASGNU1
line 124
;124:	colors[2] = 127;
ADDRLP4 96+2
CNSTU1 127
ASGNU1
line 125
;125:	colors[3] = alpha * 255;
ADDRLP4 200
CNSTF4 1132396544
ADDRFP4 12
INDIRF4
MULF4
ASGNF4
ADDRLP4 204
CNSTF4 1325400064
ASGNF4
ADDRLP4 200
INDIRF4
ADDRLP4 204
INDIRF4
LTF4 $115
ADDRLP4 196
ADDRLP4 200
INDIRF4
ADDRLP4 204
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $116
JUMPV
LABELV $115
ADDRLP4 196
ADDRLP4 200
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $116
ADDRLP4 96+3
ADDRLP4 196
INDIRU4
CVUU1 4
ASGNU1
line 127
;126:
;127:	for ( i = 0, v = verts ; i < 4 ; i++, v++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRLP4 40
ADDRLP4 100
ASGNP4
ADDRGP4 $120
JUMPV
LABELV $117
line 130
;128:		vec3_t  	  	delta;
;129:
;130:		VectorCopy( originalPoints[i], v->xyz );
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRLP4 44
ADDP4
INDIRB
ASGNB 12
line 132
;131:
;132:		VectorSubtract( v->xyz, origin, delta );
ADDRLP4 224
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 208
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 224
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 228
CNSTI4 4
ASGNI4
ADDRLP4 208+4
ADDRLP4 40
INDIRP4
ADDRLP4 228
INDIRI4
ADDP4
INDIRF4
ADDRLP4 224
INDIRP4
ADDRLP4 228
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 232
CNSTI4 8
ASGNI4
ADDRLP4 208+8
ADDRLP4 40
INDIRP4
ADDRLP4 232
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 232
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 133
;133:		v->st[0] = 0.5 + DotProduct( delta, axis[1] ) * texCoordScale;
ADDRLP4 40
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 208
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 92
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 134
;134:		v->st[1] = 0.5 + DotProduct( delta, axis[2] ) * texCoordScale;
ADDRLP4 40
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 208
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDRLP4 208+4
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 208+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ADDRLP4 92
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 135
;135:		*(int *)v->modulate = *(int *)colors;
ADDRLP4 40
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 96
INDIRI4
ASGNI4
line 136
;136:	}
LABELV $118
line 127
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 40
ADDRLP4 40
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
LABELV $120
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $117
line 138
;137:
;138:	trap_R_AddPolyToScene( markShader, 4, verts );
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 100
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 139
;139:}
LABELV $81
endproc CG_EffectMark 236 12
proc CG_RainParticleCheckVisible 148 12
line 146
;140:
;141:/*
;142:**  	Raindrop management functions
;143:*/
;144:
;145:static qboolean CG_RainParticleCheckVisible( int type, cg_atmosphericParticle_t *particle )
;146:{
line 158
;147:	// Check the raindrop is visible and still going, wrapping if necessary.
;148:
;149:	float		moved;
;150:	vec3_t		distance;
;151:// Q3Rally Code Start
;152:	float			angle, dist, viewyaw, yaw, r;
;153:	entityState_t	*s1;
;154:	vec3_t			mins, maxs;
;155:	int				i;
;156:	cg_atmosphericEffect_t	*cg_atmFx;
;157:
;158:	cg_atmFx = &cg_atmFxList[type];
ADDRLP4 56
CNSTI4 188560
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_atmFxList
ADDP4
ASGNP4
line 161
;159:// END
;160:
;161:	if( !particle || !particle->active )
ADDRLP4 72
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $140
ADDRLP4 72
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 0
NEI4 $138
LABELV $140
line 162
;162:		return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $137
JUMPV
LABELV $138
line 164
;163:
;164:	moved = (cg.time - cg_atmFx->lastRainTime) * 0.001;  	// Units moved since last frame
ADDRLP4 44
CNSTF4 981668463
ADDRGP4 cg+1868892
INDIRI4
ADDRLP4 56
INDIRP4
CNSTI4 188448
ADDP4
INDIRI4
SUBI4
CVIF4 4
MULF4
ASGNF4
line 165
;165:	VectorMA( particle->pos, moved, particle->delta, particle->pos );
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 44
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 80
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 84
ADDRLP4 80
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 44
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 88
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 92
ADDRLP4 88
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 44
INDIRF4
MULF4
ADDF4
ASGNF4
line 166
;166:	if( particle->pos[2] + ATMOSPHERIC_CUTHEIGHT < particle->minz )
ADDRLP4 96
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1145569280
ADDF4
ADDRLP4 96
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
GEF4 $142
line 167
;167:		return( particle->active = qfalse );
ADDRLP4 100
CNSTI4 0
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 100
INDIRI4
ASGNI4
ADDRLP4 100
INDIRI4
RETI4
ADDRGP4 $137
JUMPV
LABELV $142
line 173
;168:
;169:// Q3Rally Code Start - if the particle has left our view then move it back into our view
;170://	VectorSubtract( cg.refdef.vieworg, particle->pos, distance );
;171://	if( sqrt( distance[0] * distance[0] + distance[1] * distance[1] ) > MAX_ATMOSPHERIC_DISTANCE )
;172://		return( particle->active = qfalse );
;173:	VectorSubtract( particle->pos, cg.refdef.vieworg, distance );
ADDRLP4 104
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 104
INDIRP4
INDIRF4
ADDRGP4 cg+1870616+24
INDIRF4
SUBF4
ASGNF4
ADDRLP4 32+4
ADDRLP4 104
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 cg+1870616+24+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 32+8
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 cg+1870616+24+8
INDIRF4
SUBF4
ASGNF4
line 175
;174:
;175:	viewyaw = cg.refdefViewAngles[YAW];
ADDRLP4 48
ADDRGP4 cg+1870984+4
INDIRF4
ASGNF4
line 178
;176://	if (viewyaw < 0)
;177://		viewyaw += 360.0f;
;178:	yaw = vectoyaw(distance);
ADDRLP4 32
ARGP4
ADDRLP4 108
ADDRGP4 vectoyaw
CALLF4
ASGNF4
ADDRLP4 52
ADDRLP4 108
INDIRF4
ASGNF4
line 180
;179:
;180:	if( sqrt( distance[0] * distance[0] + distance[1] * distance[1] ) > MAX_ATMOSPHERIC_DISTANCE
ADDRLP4 112
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 112
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDRLP4 32+4
INDIRF4
ADDRLP4 32+4
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 116
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 116
INDIRF4
CNSTF4 1161527296
GTF4 $162
ADDRLP4 48
INDIRF4
ARGF4
ADDRLP4 52
INDIRF4
ARGF4
ADDRLP4 120
ADDRGP4 AngleDifference
CALLF4
ASGNF4
ADDRLP4 120
INDIRF4
ARGF4
ADDRLP4 124
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 124
INDIRF4
ADDRGP4 cg+1870616+16
INDIRF4
CNSTF4 1073741824
DIVF4
CNSTF4 1084227584
ADDF4
LEF4 $156
LABELV $162
line 182
;181:		|| fabs(AngleDifference(viewyaw, yaw)) > (cg.refdef.fov_x / 2.0f + 5)
;182:	){
line 184
;183:
;184:		angle = (viewyaw + crandom() * cg.refdef.fov_x / 2.0f) * M_PI / 180.0f;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 60
CNSTF4 1078530011
ADDRLP4 48
INDIRF4
CNSTF4 1073741824
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRGP4 cg+1870616+16
INDIRF4
MULF4
CNSTF4 1073741824
DIVF4
ADDF4
MULF4
CNSTF4 1127481344
DIVF4
ASGNF4
line 185
;185:		r = random();
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 68
ADDRLP4 132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ASGNF4
line 186
;186:		dist = 20 + (MAX_ATMOSPHERIC_DISTANCE-20) * (r * r); // ^2: more dense closer
ADDRLP4 136
ADDRLP4 68
INDIRF4
ASGNF4
ADDRLP4 64
CNSTF4 1161445376
ADDRLP4 136
INDIRF4
ADDRLP4 136
INDIRF4
MULF4
MULF4
CNSTF4 1101004800
ADDF4
ASGNF4
line 190
;187:
;188://		Com_Printf("viewyaw %f, old yaw %f, diff %f, new yaw %f\n", viewyaw, yaw, AngleDifference(viewyaw, yaw), angle / M_PI * 180.0f);
;189:
;190:		particle->pos[0] = cg.refdef.vieworg[0] + cos(angle) * dist;
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 140
ADDRGP4 cos
CALLF4
ASGNF4
ADDRFP4 4
INDIRP4
ADDRGP4 cg+1870616+24
INDIRF4
ADDRLP4 140
INDIRF4
ADDRLP4 64
INDIRF4
MULF4
ADDF4
ASGNF4
line 191
;191:		particle->pos[1] = cg.refdef.vieworg[1] + sin(angle) * dist;
ADDRLP4 60
INDIRF4
ARGF4
ADDRLP4 144
ADDRGP4 sin
CALLF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRGP4 cg+1870616+24+4
INDIRF4
ADDRLP4 144
INDIRF4
ADDRLP4 64
INDIRF4
MULF4
ADDF4
ASGNF4
line 192
;192:	}
LABELV $156
line 194
;193:
;194:	if ( CG_PointContents( particle->pos, ENTITYNUM_NONE ) == CONTENTS_SOLID ){
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 4095
ARGI4
ADDRLP4 128
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 128
INDIRI4
CNSTI4 1
NEI4 $170
line 195
;195:		return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $137
JUMPV
LABELV $170
line 198
;196:	}
;197:
;198:	for (i = 0; i < MAX_GENTITIES; i++){
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $172
line 199
;199:		s1 = &cg_entities[i].currentState;
ADDRLP4 0
CNSTI4 928
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 201
;200:
;201:		if ( s1->eType != ET_WEATHER ) continue; // entity is not a weather entity
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 14
EQI4 $176
ADDRGP4 $173
JUMPV
LABELV $176
line 202
;202:		if ( s1->weapon != type ) continue; // entity is not the right type of weather entity
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
EQI4 $178
ADDRGP4 $173
JUMPV
LABELV $178
line 204
;203:
;204:		if ( s1->solid == SOLID_BMODEL )
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 16777215
NEI4 $180
line 205
;205:			trap_R_ModelBounds(cgs.inlineDrawModel[s1->modelindex], mins, maxs);
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+375412
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
ADDRGP4 $181
JUMPV
LABELV $180
line 207
;206:		else
;207:			trap_R_ModelBounds(cgs.gameModels[s1->modelindex], mins, maxs);
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+342640
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
LABELV $181
line 209
;208:
;209:		if ( CG_InsideBox( mins, maxs, particle->pos ) )
ADDRLP4 8
ARGP4
ADDRLP4 20
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 CG_InsideBox
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 0
EQI4 $184
line 210
;210:			return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $137
JUMPV
LABELV $184
line 211
;211:	}
LABELV $173
line 198
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 4096
LTI4 $172
line 214
;212:
;213://	return( qtrue );
;214:	return( qfalse );
CNSTI4 0
RETI4
LABELV $137
endproc CG_RainParticleCheckVisible 148 12
proc CG_RainParticleGenerate 220 28
line 219
;215:// END
;216:}
;217:
;218:static qboolean CG_RainParticleGenerate( int type, cg_atmosphericParticle_t *particle, vec3_t currvec, float currweight )
;219:{
line 234
;220:  	// Attempt to 'spot' a raindrop somewhere below a sky texture.
;221:
;222:	float		angle, distance, origz;
;223:	vec3_t		testpoint, testend;
;224:	trace_t		tr;
;225:
;226:// Q3Rally Code Start
;227:	float			r;
;228:	entityState_t	*s1;
;229:	vec3_t			mins, maxs;
;230:	int				i;
;231:	cg_atmosphericEffect_t	*cg_atmFx;
;232:	qboolean		visible;
;233:
;234:	cg_atmFx = &cg_atmFxList[type];
ADDRLP4 132
CNSTI4 188560
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_atmFxList
ADDP4
ASGNP4
line 239
;235:
;236://	angle = random() * 2*M_PI;
;237://	distance = 20 + MAX_ATMOSPHERIC_DISTANCE * random();
;238:
;239:	angle = (cg.refdefViewAngles[YAW] + crandom() * cg.refdef.fov_x / 2.0f) * M_PI / 180.0f;
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 120
CNSTF4 1078530011
ADDRGP4 cg+1870984+4
INDIRF4
CNSTF4 1073741824
ADDRLP4 136
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRGP4 cg+1870616+16
INDIRF4
MULF4
CNSTF4 1073741824
DIVF4
ADDF4
MULF4
CNSTF4 1127481344
DIVF4
ASGNF4
line 240
;240:	r = random();
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 124
ADDRLP4 140
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ASGNF4
line 241
;241:	distance = 20 + MAX_ATMOSPHERIC_DISTANCE * (r * r); // ^2: more dense closer
ADDRLP4 112
CNSTF4 1161527296
ADDRLP4 124
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
MULF4
CNSTF4 1101004800
ADDF4
ASGNF4
line 247
;242:// END
;243:
;244:// Q3Rally Code Start
;245://	testpoint[0] = testend[0] = cg.refdef.vieworg[0] + sin(angle) * distance;
;246://	testpoint[1] = testend[1] = cg.refdef.vieworg[1] + cos(angle) * distance;
;247:	testpoint[0] = testend[0] = cg.refdef.vieworg[0] + cos(angle) * distance;
ADDRLP4 120
INDIRF4
ARGF4
ADDRLP4 148
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 152
ADDRGP4 cg+1870616+24
INDIRF4
ADDRLP4 148
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 72
ADDRLP4 152
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 152
INDIRF4
ASGNF4
line 248
;248:	testpoint[1] = testend[1] = cg.refdef.vieworg[1] + sin(angle) * distance;
ADDRLP4 120
INDIRF4
ARGF4
ADDRLP4 156
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 160
ADDRGP4 cg+1870616+24+4
INDIRF4
ADDRLP4 156
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 72+4
ADDRLP4 160
INDIRF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 160
INDIRF4
ASGNF4
line 250
;249:// END
;250:  	testpoint[2] = origz = cg.refdef.vieworg[2];
ADDRLP4 164
ADDRGP4 cg+1870616+24+8
INDIRF4
ASGNF4
ADDRLP4 128
ADDRLP4 164
INDIRF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 164
INDIRF4
ASGNF4
line 251
;251:	testend[2] = testpoint[2] + MAX_ATMOSPHERIC_HEIGHT;
ADDRLP4 72+8
ADDRLP4 4+8
INDIRF4
CNSTF4 1224736768
ADDF4
ASGNF4
line 254
;252:
;253:// Q3Rally Code Start
;254:	visible = qfalse;
ADDRLP4 116
CNSTI4 0
ASGNI4
line 255
;255:	for (i = 0; i < MAX_GENTITIES; i++){
ADDRLP4 84
CNSTI4 0
ASGNI4
LABELV $204
line 256
;256:		s1 = &cg_entities[i].currentState;
ADDRLP4 0
CNSTI4 928
ADDRLP4 84
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 258
;257:
;258:		if ( s1->eType != ET_WEATHER ) continue; // entity is not a weather entity
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 14
EQI4 $208
ADDRGP4 $205
JUMPV
LABELV $208
line 259
;259:		if ( s1->weapon != type ) continue; // entity is not the right type of weather entity
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
EQI4 $210
ADDRGP4 $205
JUMPV
LABELV $210
line 261
;260:
;261:		if ( s1->solid == SOLID_BMODEL )
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 16777215
NEI4 $212
line 262
;262:			trap_R_ModelBounds(cgs.inlineDrawModel[s1->modelindex], mins, maxs);
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+375412
ADDP4
INDIRI4
ARGI4
ADDRLP4 88
ARGP4
ADDRLP4 100
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
ADDRGP4 $213
JUMPV
LABELV $212
line 264
;263:		else
;264:			trap_R_ModelBounds(cgs.gameModels[s1->modelindex], mins, maxs);
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+342640
ADDP4
INDIRI4
ARGI4
ADDRLP4 88
ARGP4
ADDRLP4 100
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
LABELV $213
line 266
;265:
;266:		if ( CG_InsideBox( mins, maxs, testpoint ) )
ADDRLP4 88
ARGP4
ADDRLP4 100
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 168
ADDRGP4 CG_InsideBox
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 0
EQI4 $216
line 267
;267:			visible = qtrue;
ADDRLP4 116
CNSTI4 1
ASGNI4
LABELV $216
line 268
;268:	}
LABELV $205
line 255
ADDRLP4 84
ADDRLP4 84
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 4096
LTI4 $204
line 270
;269:
;270:	if (!visible)
ADDRLP4 116
INDIRI4
CNSTI4 0
NEI4 $221
line 271
;271:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $186
JUMPV
LABELV $220
line 275
;272:// END
;273:
;274:	while( 1 )
;275:	{
line 276
;276:		if( testpoint[2] >= MAX_ATMOSPHERIC_HEIGHT )
ADDRLP4 4+8
INDIRF4
CNSTF4 1224736768
LTF4 $223
line 277
;277:			return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $186
JUMPV
LABELV $223
line 278
;278:		if( testend[2] >= MAX_ATMOSPHERIC_HEIGHT )
ADDRLP4 72+8
INDIRF4
CNSTF4 1224736768
LTF4 $226
line 279
;279:			testend[2] = MAX_ATMOSPHERIC_HEIGHT - 1;
ADDRLP4 72+8
CNSTF4 1224736736
ASGNF4
LABELV $226
line 280
;280:		CG_Trace( &tr, testpoint, NULL, NULL, testend, ENTITYNUM_NONE, MASK_SOLID|MASK_WATER );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 168
CNSTP4 0
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
ADDRLP4 168
INDIRP4
ARGP4
ADDRLP4 72
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 57
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 281
;281:		if( tr.startsolid )  	  	  	// Stuck in something, skip over it.
ADDRLP4 16+4
INDIRI4
CNSTI4 0
EQI4 $230
line 282
;282:		{
line 283
;283:			testpoint[2] += 64;
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
CNSTF4 1115684864
ADDF4
ASGNF4
line 284
;284:			testend[2] = testpoint[2] + MAX_ATMOSPHERIC_HEIGHT;
ADDRLP4 72+8
ADDRLP4 4+8
INDIRF4
CNSTF4 1224736768
ADDF4
ASGNF4
line 285
;285:		}
ADDRGP4 $231
JUMPV
LABELV $230
line 286
;286:		else if( tr.fraction == 1 )  	  	// Didn't hit anything, we're (probably) outside the world
ADDRLP4 16+8
INDIRF4
CNSTF4 1065353216
NEF4 $236
line 287
;287:			return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $186
JUMPV
LABELV $236
line 288
;288:		else if( tr.surfaceFlags & SURF_SKY )  	// Hit sky, this is where we start.
ADDRLP4 16+44
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $239
line 289
;289:			break;
ADDRGP4 $222
JUMPV
LABELV $239
line 290
;290:		else return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $186
JUMPV
LABELV $231
line 291
;291:	}
LABELV $221
line 274
ADDRGP4 $220
JUMPV
LABELV $222
line 295
;292:
;293:// Q3Rally Code Start
;294://	if drawing snow start drawing it a little lower because it falls too slowly
;295:	VectorCopy(tr.endpos, testpoint);
ADDRLP4 4
ADDRLP4 16+12
INDIRB
ASGNB 12
line 296
;296:	testpoint[2] -= 10;
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
CNSTF4 1092616192
SUBF4
ASGNF4
line 297
;297:	testend[2] = origz + (tr.fraction * MAX_ATMOSPHERIC_HEIGHT * (random() * 0.8f + 0.2f)) - 10;
ADDRLP4 168
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 72+8
ADDRLP4 128
INDIRF4
CNSTF4 1224736768
ADDRLP4 16+8
INDIRF4
MULF4
CNSTF4 1061997773
ADDRLP4 168
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1045220557
ADDF4
MULF4
ADDF4
CNSTF4 1092616192
SUBF4
ASGNF4
line 299
;298:
;299:	CG_Trace( &tr, testpoint, NULL, NULL, testend, ENTITYNUM_NONE, MASK_SOLID|MASK_WATER );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 172
CNSTP4 0
ASGNP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 72
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 57
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 300
;300:	if ( tr.fraction != 1 ){
ADDRLP4 16+8
INDIRF4
CNSTF4 1065353216
EQF4 $246
line 301
;301:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $186
JUMPV
LABELV $246
line 305
;302:	}
;303:// END
;304:
;305:	particle->active = qtrue;
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
CNSTI4 1
ASGNI4
line 306
;306:	particle->colour[0] = 0.6 + 0.2 * random();
ADDRLP4 176
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1045220557
ADDRLP4 176
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 307
;307:	particle->colour[1] = 0.6 + 0.2 * random();
ADDRLP4 180
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1045220557
ADDRLP4 180
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 308
;308:  	particle->colour[2] = 0.6 + 0.2 * random();
ADDRLP4 184
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1045220557
ADDRLP4 184
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 309
;309:	VectorCopy( tr.endpos, particle->pos );
ADDRFP4 4
INDIRP4
ADDRLP4 16+12
INDIRB
ASGNB 12
line 310
;310:	VectorCopy( currvec, particle->delta );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 311
;311:	particle->delta[2] += crandom() * 100;
ADDRLP4 188
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 192
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 192
INDIRP4
ADDRLP4 192
INDIRP4
INDIRF4
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 188
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ADDF4
ASGNF4
line 312
;312:	VectorNormalize2( particle->delta, particle->deltaNormalized );
ADDRLP4 196
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 196
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 196
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 313
;313:	particle->height = ATMOSPHERIC_RAIN_HEIGHT + crandom() * 100;
ADDRLP4 200
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 1120403456
CNSTF4 1073741824
ADDRLP4 200
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1125515264
ADDF4
ASGNF4
line 314
;314:	particle->weight = currweight;
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 12
INDIRF4
ASGNF4
line 315
;315:	particle->effectshader = &cg_atmFx->effectshaders[0];
ADDRFP4 4
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRP4
CNSTI4 188416
ADDP4
ASGNP4
line 317
;316:
;317:	distance =  	((float)(tr.endpos[2] - MIN_ATMOSPHERIC_HEIGHT)) / -particle->delta[2];
ADDRLP4 112
ADDRLP4 16+12+8
INDIRF4
CNSTF4 3372220416
SUBF4
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
NEGF4
DIVF4
ASGNF4
line 318
;318:	VectorMA( tr.endpos, distance, particle->delta, testend );
ADDRLP4 204
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 72
ADDRLP4 16+12
INDIRF4
ADDRLP4 204
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 72+4
ADDRLP4 16+12+4
INDIRF4
ADDRLP4 204
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 72+8
ADDRLP4 16+12+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
line 320
;319:
;320:	CG_Trace( &tr, particle->pos, NULL, NULL, testend, ENTITYNUM_NONE, MASK_SOLID|MASK_WATER );
ADDRLP4 16
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 212
CNSTP4 0
ASGNP4
ADDRLP4 212
INDIRP4
ARGP4
ADDRLP4 212
INDIRP4
ARGP4
ADDRLP4 72
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 57
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 321
;321:	particle->minz = tr.endpos[2];
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 16+12+8
INDIRF4
ASGNF4
line 322
;322:	tr.endpos[2]--;
ADDRLP4 16+12+8
ADDRLP4 16+12+8
INDIRF4
CNSTF4 1065353216
SUBF4
ASGNF4
line 323
;323:	VectorCopy( tr.plane.normal, particle->surfacenormal );
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 16+24
INDIRB
ASGNB 12
line 324
;324:	particle->surface = tr.surfaceFlags;
ADDRFP4 4
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 16+44
INDIRI4
ASGNI4
line 325
;325:	particle->contents = CG_PointContents( tr.endpos, ENTITYNUM_NONE );
ADDRLP4 16+12
ARGP4
CNSTI4 4095
ARGI4
ADDRLP4 216
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 216
INDIRI4
ASGNI4
line 327
;326:
;327:	return( qtrue );
CNSTI4 1
RETI4
LABELV $186
endproc CG_RainParticleGenerate 220 28
proc CG_RainParticleRender 208 44
line 331
;328:}
;329:
;330:static void CG_RainParticleRender( int type, cg_atmosphericParticle_t *particle )
;331:{
line 341
;332:	// Draw a raindrop
;333:
;334:	vec3_t			forward, right;
;335:	polyVert_t		verts[4];
;336:	vec2_t			line;
;337:	float			len, frac;
;338:	vec3_t			start, finish;
;339:	cg_atmosphericEffect_t	*cg_atmFx;
;340:
;341:	cg_atmFx = &cg_atmFxList[type];
ADDRLP4 156
CNSTI4 188560
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_atmFxList
ADDP4
ASGNP4
line 343
;342:
;343:	if( !particle->active )
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 0
NEI4 $267
line 344
;344:		return;
ADDRGP4 $266
JUMPV
LABELV $267
line 346
;345:
;346:	VectorCopy( particle->pos, start );
ADDRLP4 108
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 347
;347:	len = particle->height;
ADDRLP4 152
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ASGNF4
line 348
;348:	if( start[2] <= particle->minz )
ADDRLP4 108+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
GTF4 $269
line 349
;349:	{
line 351
;350:		// Stop rain going through surfaces.
;351:		len = particle->height - particle->minz + start[2];
ADDRLP4 164
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 152
ADDRLP4 164
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ADDRLP4 164
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
SUBF4
ADDRLP4 108+8
INDIRF4
ADDF4
ASGNF4
line 352
;352:		VectorMA( start, len - particle->height, particle->deltaNormalized, start );
ADDRLP4 168
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 176
ADDRLP4 168
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 108
ADDRLP4 108
INDIRF4
ADDRLP4 168
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 176
INDIRP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
ADDRLP4 108+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 168
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 176
INDIRP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
ADDRLP4 180
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 108+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 180
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 180
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 354
;353:
;354:		if( cg_atmosphericLevel.integer == 2 ){
ADDRGP4 cg_atmosphericLevel+12
INDIRI4
CNSTI4 2
NEI4 $277
line 355
;355:			frac = (ATMOSPHERIC_CUTHEIGHT - particle->minz + start[2]) / (float) ATMOSPHERIC_CUTHEIGHT;
ADDRLP4 184
CNSTF4 1145569280
ASGNF4
ADDRLP4 160
ADDRLP4 184
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
SUBF4
ADDRLP4 108+8
INDIRF4
ADDF4
ADDRLP4 184
INDIRF4
DIVF4
ASGNF4
line 357
;356:			// Splash effects on different surfaces
;357:			if( particle->contents & (CONTENTS_WATER|CONTENTS_SLIME) )
ADDRFP4 4
INDIRP4
CNSTI4 76
ADDP4
INDIRI4
CNSTI4 48
BANDI4
CNSTI4 0
EQI4 $281
line 358
;358:			{
line 360
;359:				// Water splash
;360:				if( cg_atmFx->effectwatershader && frac > 0 && frac < 1 )
ADDRLP4 156
INDIRP4
CNSTI4 188440
ADDP4
INDIRI4
CNSTI4 0
EQI4 $282
ADDRLP4 188
ADDRLP4 160
INDIRF4
ASGNF4
ADDRLP4 188
INDIRF4
CNSTF4 0
LEF4 $282
ADDRLP4 188
INDIRF4
CNSTF4 1065353216
GEF4 $282
line 361
;361:					CG_EffectMark( cg_atmFx->effectwatershader, start, particle->surfacenormal, frac * 0.5, 8 - frac * 8 );
ADDRLP4 156
INDIRP4
CNSTI4 188440
ADDP4
INDIRI4
ARGI4
ADDRLP4 108
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRLP4 192
ADDRLP4 160
INDIRF4
ASGNF4
CNSTF4 1056964608
ADDRLP4 192
INDIRF4
MULF4
ARGF4
ADDRLP4 196
CNSTF4 1090519040
ASGNF4
ADDRLP4 196
INDIRF4
ADDRLP4 196
INDIRF4
ADDRLP4 192
INDIRF4
MULF4
SUBF4
ARGF4
ADDRGP4 CG_EffectMark
CALLV
pop
line 362
;362:			}
ADDRGP4 $282
JUMPV
LABELV $281
line 363
;363:			else if( !(particle->contents & CONTENTS_LAVA) && !(particle->surface & (SURF_NODAMAGE|SURF_NOIMPACT|SURF_NOMARKS|SURF_SKY)) )
ADDRLP4 188
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 192
CNSTI4 0
ASGNI4
ADDRLP4 188
INDIRP4
CNSTI4 76
ADDP4
INDIRI4
CNSTI4 8
BANDI4
ADDRLP4 192
INDIRI4
NEI4 $285
ADDRLP4 188
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 53
BANDI4
ADDRLP4 192
INDIRI4
NEI4 $285
line 364
;364:			{
line 366
;365:				// Solid splash
;366:				if( cg_atmFx->effectlandshader && frac > 0 && frac < 1  )
ADDRLP4 156
INDIRP4
CNSTI4 188444
ADDP4
INDIRI4
CNSTI4 0
EQI4 $287
ADDRLP4 196
ADDRLP4 160
INDIRF4
ASGNF4
ADDRLP4 196
INDIRF4
CNSTF4 0
LEF4 $287
ADDRLP4 196
INDIRF4
CNSTF4 1065353216
GEF4 $287
line 367
;367:					CG_ImpactMark( cg_atmFx->effectlandshader, start, particle->surfacenormal, 0, 1, 1, 1, frac * 0.5, qfalse, 3 - frac * 2, qtrue );
ADDRLP4 156
INDIRP4
CNSTI4 188444
ADDP4
INDIRI4
ARGI4
ADDRLP4 108
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
ARGP4
CNSTF4 0
ARGF4
ADDRLP4 200
CNSTF4 1065353216
ASGNF4
ADDRLP4 200
INDIRF4
ARGF4
ADDRLP4 200
INDIRF4
ARGF4
ADDRLP4 200
INDIRF4
ARGF4
ADDRLP4 204
ADDRLP4 160
INDIRF4
ASGNF4
CNSTF4 1056964608
ADDRLP4 204
INDIRF4
MULF4
ARGF4
CNSTI4 0
ARGI4
CNSTF4 1077936128
CNSTF4 1073741824
ADDRLP4 204
INDIRF4
MULF4
SUBF4
ARGF4
CNSTI4 1
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
LABELV $287
line 368
;368:			}
LABELV $285
LABELV $282
line 369
;369:		}
LABELV $277
line 370
;370:	}
LABELV $269
line 371
;371:	if( len <= 0 )
ADDRLP4 152
INDIRF4
CNSTF4 0
GTF4 $289
line 372
;372:		return;
ADDRGP4 $266
JUMPV
LABELV $289
line 374
;373:
;374:	VectorCopy( particle->deltaNormalized, forward );
ADDRLP4 120
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 375
;375:	VectorMA( start, -len, forward, finish );
ADDRLP4 164
ADDRLP4 152
INDIRF4
NEGF4
ASGNF4
ADDRLP4 132
ADDRLP4 108
INDIRF4
ADDRLP4 120
INDIRF4
ADDRLP4 164
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 120+4
INDIRF4
ADDRLP4 164
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 120+8
INDIRF4
ADDRLP4 152
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 377
;376:
;377:	line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 144
ADDRLP4 120
INDIRF4
ADDRGP4 cg+1870616+36+12
INDIRF4
MULF4
ADDRLP4 120+4
INDIRF4
ADDRGP4 cg+1870616+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 120+8
INDIRF4
ADDRGP4 cg+1870616+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 378
;378:	line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 144+4
ADDRLP4 120
INDIRF4
ADDRGP4 cg+1870616+36+24
INDIRF4
MULF4
ADDRLP4 120+4
INDIRF4
ADDRGP4 cg+1870616+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 120+8
INDIRF4
ADDRGP4 cg+1870616+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 380
;379:
;380:	VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+1870616+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+1870616+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+1870616+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 381
;381:	VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 168
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+1870616+36+24
INDIRF4
ADDRLP4 168
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+1870616+36+24+4
INDIRF4
ADDRLP4 168
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+1870616+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 382
;382:	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 384
;383:
;384:	VectorMA( finish, particle->weight, right, verts[0].xyz );
ADDRLP4 172
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 172
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRLP4 172
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 385
;385:	verts[0].st[0] = 1;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 386
;386:	verts[0].st[1] = 0;
ADDRLP4 0+12+4
CNSTF4 0
ASGNF4
line 387
;387:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 388
;388:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 389
;389:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 390
;390:	verts[0].modulate[3] = 0;
ADDRLP4 0+20+3
CNSTU1 0
ASGNU1
line 392
;391:
;392:	VectorMA( finish, -particle->weight, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 393
;393:	verts[1].st[0] = 0;
ADDRLP4 0+24+12
CNSTF4 0
ASGNF4
line 394
;394:	verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 395
;395:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 396
;396:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 397
;397:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 398
;398:	verts[1].modulate[3] = 0;
ADDRLP4 0+24+20+3
CNSTU1 0
ASGNU1
line 400
;399:
;400:	VectorMA( start, -particle->weight, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 108
INDIRF4
ADDRLP4 96
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 401
;401:	verts[2].st[0] = 0;
ADDRLP4 0+48+12
CNSTF4 0
ASGNF4
line 402
;402:	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 403
;403:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 404
;404:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 405
;405:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 406
;406:	verts[2].modulate[3] = 127;
ADDRLP4 0+48+20+3
CNSTU1 127
ASGNU1
line 408
;407:
;408:	VectorMA( start, particle->weight, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 108
INDIRF4
ADDRLP4 96
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 409
;409:	verts[3].st[0] = 1;
ADDRLP4 0+72+12
CNSTF4 1065353216
ASGNF4
line 410
;410:	verts[3].st[1] = 1;
ADDRLP4 0+72+12+4
CNSTF4 1065353216
ASGNF4
line 411
;411:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 412
;412:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 413
;413:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 414
;414:	verts[3].modulate[3] = 127;
ADDRLP4 0+72+20+3
CNSTU1 127
ASGNU1
line 416
;415:
;416:	trap_R_AddPolyToScene( *particle->effectshader, 4, verts );
ADDRFP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 417
;417:}
LABELV $266
endproc CG_RainParticleRender 208 44
proc CG_SnowParticleGenerate 224 28
line 424
;418:
;419:/*
;420:**  	Snow management functions
;421:*/
;422:
;423:static qboolean CG_SnowParticleGenerate( int type, cg_atmosphericParticle_t *particle, vec3_t currvec, float currweight )
;424:{
line 439
;425:	// Attempt to 'spot' a raindrop somewhere below a sky texture.
;426:
;427:	float		angle, distance, origz;
;428:	vec3_t		testpoint, testend;
;429:	trace_t		tr;
;430:
;431:// Q3Rally Code Start
;432:	float			r;
;433:	entityState_t	*s1;
;434:	vec3_t			mins, maxs;
;435:	int				i;
;436:	cg_atmosphericEffect_t	*cg_atmFx;
;437:	qboolean		visible;
;438:
;439:	cg_atmFx = &cg_atmFxList[type];
ADDRLP4 128
CNSTI4 188560
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_atmFxList
ADDP4
ASGNP4
line 444
;440:
;441://	angle = random() * 2*M_PI;
;442://	distance = 20 + MAX_ATMOSPHERIC_DISTANCE * random();
;443:
;444:	angle = (cg.refdefViewAngles[YAW] + crandom() * cg.refdef.fov_x / 2.0f) * M_PI / 180.0f;
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 120
CNSTF4 1078530011
ADDRGP4 cg+1870984+4
INDIRF4
CNSTF4 1073741824
ADDRLP4 136
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRGP4 cg+1870616+16
INDIRF4
MULF4
CNSTF4 1073741824
DIVF4
ADDF4
MULF4
CNSTF4 1127481344
DIVF4
ASGNF4
line 445
;445:	r = random();
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 124
ADDRLP4 140
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ASGNF4
line 446
;446:	distance = 20 + MAX_ATMOSPHERIC_DISTANCE * (r * r); // ^2: more dense closer
ADDRLP4 112
CNSTF4 1161527296
ADDRLP4 124
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
MULF4
CNSTF4 1101004800
ADDF4
ASGNF4
line 453
;447:// END
;448:	
;449:
;450:// Q3Rally Code Start - cos is x, not y
;451://	testpoint[0] = testend[0] = cg.refdef.vieworg[0] + sin(angle) * distance;
;452://	testpoint[1] = testend[1] = cg.refdef.vieworg[1] + cos(angle) * distance;
;453:	testpoint[0] = testend[0] = cg.refdef.vieworg[0] + cos(angle) * distance;
ADDRLP4 120
INDIRF4
ARGF4
ADDRLP4 148
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 152
ADDRGP4 cg+1870616+24
INDIRF4
ADDRLP4 148
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 72
ADDRLP4 152
INDIRF4
ASGNF4
ADDRLP4 4
ADDRLP4 152
INDIRF4
ASGNF4
line 454
;454:	testpoint[1] = testend[1] = cg.refdef.vieworg[1] + sin(angle) * distance;
ADDRLP4 120
INDIRF4
ARGF4
ADDRLP4 156
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 160
ADDRGP4 cg+1870616+24+4
INDIRF4
ADDRLP4 156
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 72+4
ADDRLP4 160
INDIRF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 160
INDIRF4
ASGNF4
line 456
;455:// END
;456:	testpoint[2] = origz = cg.refdef.vieworg[2];
ADDRLP4 164
ADDRGP4 cg+1870616+24+8
INDIRF4
ASGNF4
ADDRLP4 132
ADDRLP4 164
INDIRF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 164
INDIRF4
ASGNF4
line 457
;457:	testend[2] = testpoint[2] + MAX_ATMOSPHERIC_HEIGHT;
ADDRLP4 72+8
ADDRLP4 4+8
INDIRF4
CNSTF4 1224736768
ADDF4
ASGNF4
line 460
;458:
;459:// Q3Rally Code Start
;460:	visible = qfalse;
ADDRLP4 116
CNSTI4 0
ASGNI4
line 461
;461:	for (i = 0; i < MAX_GENTITIES; i++){
ADDRLP4 84
CNSTI4 0
ASGNI4
LABELV $464
line 462
;462:		s1 = &cg_entities[i].currentState;
ADDRLP4 0
CNSTI4 928
ADDRLP4 84
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 464
;463:
;464:		if ( s1->eType != ET_WEATHER ) continue; // entity is not a weather entity
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 14
EQI4 $468
ADDRGP4 $465
JUMPV
LABELV $468
line 465
;465:		if ( s1->weapon != type ) continue; // entity is not the right type of weather entity
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
EQI4 $470
ADDRGP4 $465
JUMPV
LABELV $470
line 467
;466:
;467:		if ( s1->solid == SOLID_BMODEL )
ADDRLP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 16777215
NEI4 $472
line 468
;468:			trap_R_ModelBounds(cgs.inlineDrawModel[s1->modelindex], mins, maxs);
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+375412
ADDP4
INDIRI4
ARGI4
ADDRLP4 88
ARGP4
ADDRLP4 100
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
ADDRGP4 $473
JUMPV
LABELV $472
line 470
;469:		else
;470:			trap_R_ModelBounds(cgs.gameModels[s1->modelindex], mins, maxs);
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+342640
ADDP4
INDIRI4
ARGI4
ADDRLP4 88
ARGP4
ADDRLP4 100
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
LABELV $473
line 472
;471:
;472:		if ( CG_InsideBox( mins, maxs, testpoint ) )
ADDRLP4 88
ARGP4
ADDRLP4 100
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 168
ADDRGP4 CG_InsideBox
CALLI4
ASGNI4
ADDRLP4 168
INDIRI4
CNSTI4 0
EQI4 $476
line 473
;473:			visible = qtrue;
ADDRLP4 116
CNSTI4 1
ASGNI4
LABELV $476
line 474
;474:	}
LABELV $465
line 461
ADDRLP4 84
ADDRLP4 84
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 4096
LTI4 $464
line 476
;475:
;476:	if (!visible)
ADDRLP4 116
INDIRI4
CNSTI4 0
NEI4 $481
line 477
;477:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $446
JUMPV
LABELV $480
line 481
;478:// END
;479:
;480:	while( 1 )
;481:	{
line 482
;482:		if( testpoint[2] >= MAX_ATMOSPHERIC_HEIGHT )
ADDRLP4 4+8
INDIRF4
CNSTF4 1224736768
LTF4 $483
line 483
;483:			return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $446
JUMPV
LABELV $483
line 484
;484:		if( testend[2] >= MAX_ATMOSPHERIC_HEIGHT )
ADDRLP4 72+8
INDIRF4
CNSTF4 1224736768
LTF4 $486
line 485
;485:			testend[2] = MAX_ATMOSPHERIC_HEIGHT - 1;
ADDRLP4 72+8
CNSTF4 1224736736
ASGNF4
LABELV $486
line 487
;486:
;487:		CG_Trace( &tr, testpoint, NULL, NULL, testend, ENTITYNUM_NONE, MASK_SOLID|MASK_WATER );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 168
CNSTP4 0
ASGNP4
ADDRLP4 168
INDIRP4
ARGP4
ADDRLP4 168
INDIRP4
ARGP4
ADDRLP4 72
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 57
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 488
;488:		if( tr.startsolid )  	  	  	// Stuck in something, skip over it.
ADDRLP4 16+4
INDIRI4
CNSTI4 0
EQI4 $490
line 489
;489:		{
line 490
;490:			testpoint[2] += 64;
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
CNSTF4 1115684864
ADDF4
ASGNF4
line 491
;491:			testend[2] = testpoint[2] + MAX_ATMOSPHERIC_HEIGHT;
ADDRLP4 72+8
ADDRLP4 4+8
INDIRF4
CNSTF4 1224736768
ADDF4
ASGNF4
line 492
;492:		}
ADDRGP4 $491
JUMPV
LABELV $490
line 493
;493:		else if( tr.fraction == 1 )  	  	// Didn't hit anything, we're (probably) outside the world
ADDRLP4 16+8
INDIRF4
CNSTF4 1065353216
NEF4 $496
line 494
;494:			return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $446
JUMPV
LABELV $496
line 495
;495:		else if( tr.surfaceFlags & SURF_SKY )  	// Hit sky, this is where we start.
ADDRLP4 16+44
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $499
line 496
;496:			break;
ADDRGP4 $482
JUMPV
LABELV $499
line 497
;497:		else return( qfalse );
CNSTI4 0
RETI4
ADDRGP4 $446
JUMPV
LABELV $491
line 498
;498:	}
LABELV $481
line 480
ADDRGP4 $480
JUMPV
LABELV $482
line 502
;499:
;500:// Q3Rally Code Start
;501://	if drawing snow start drawing it a little lower because it falls too slowly
;502:	if (tr.endpos[2] - origz > START_SNOW_HEIGHT){
ADDRLP4 16+12+8
INDIRF4
ADDRLP4 132
INDIRF4
SUBF4
CNSTF4 1132462080
LEF4 $502
line 503
;503:		VectorCopy(tr.endpos, testpoint);
ADDRLP4 4
ADDRLP4 16+12
INDIRB
ASGNB 12
line 504
;504:		testpoint[2] -= 10;
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
CNSTF4 1092616192
SUBF4
ASGNF4
line 505
;505:		testend[2] = origz + (START_SNOW_HEIGHT * (random() * 0.8f + 0.2f));
ADDRLP4 168
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 72+8
ADDRLP4 132
INDIRF4
CNSTF4 1132462080
CNSTF4 1061997773
ADDRLP4 168
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1045220557
ADDF4
MULF4
ADDF4
ASGNF4
line 507
;506:
;507:		CG_Trace( &tr, testpoint, NULL, NULL, testend, ENTITYNUM_NONE, MASK_SOLID|MASK_WATER );
ADDRLP4 16
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 172
CNSTP4 0
ASGNP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 72
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 57
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 508
;508:		if ( tr.fraction != 1 ){
ADDRLP4 16+8
INDIRF4
CNSTF4 1065353216
EQF4 $509
line 509
;509:			return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $446
JUMPV
LABELV $509
line 511
;510:		}
;511:	}
LABELV $502
line 514
;512:// END
;513:
;514:	particle->active = qtrue;
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
CNSTI4 1
ASGNI4
line 515
;515:	particle->colour[0] = 0.6 + 0.2 * random();
ADDRLP4 168
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1045220557
ADDRLP4 168
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 516
;516:	particle->colour[1] = 0.6 + 0.2 * random();
ADDRLP4 172
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1045220557
ADDRLP4 172
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 517
;517:	particle->colour[2] = 0.6 + 0.2 * random();
ADDRLP4 176
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1045220557
ADDRLP4 176
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1058642330
ADDF4
ASGNF4
line 518
;518:	VectorCopy( tr.endpos, particle->pos );
ADDRFP4 4
INDIRP4
ADDRLP4 16+12
INDIRB
ASGNB 12
line 519
;519:	VectorCopy( currvec, particle->delta );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 520
;520:	particle->delta[2] += crandom() * 25;
ADDRLP4 180
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 184
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 184
INDIRP4
ADDRLP4 184
INDIRP4
INDIRF4
CNSTF4 1103626240
CNSTF4 1073741824
ADDRLP4 180
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ADDF4
ASGNF4
line 521
;521:	VectorNormalize2( particle->delta, particle->deltaNormalized );
ADDRLP4 188
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 188
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 188
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 522
;522:	particle->height = ATMOSPHERIC_SNOW_HEIGHT + crandom() * 8;
ADDRLP4 192
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 1090519040
CNSTF4 1073741824
ADDRLP4 192
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1092616192
ADDF4
ASGNF4
line 523
;523:	particle->weight = particle->height * 0.5f;
ADDRLP4 196
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 196
INDIRP4
CNSTI4 68
ADDP4
CNSTF4 1056964608
ADDRLP4 196
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
MULF4
ASGNF4
line 524
;524:	particle->effectshader = &cg_atmFx->effectshaders[ (int) (random() * ( cg_atmFx->numEffectShaders - 1 )) ];
ADDRLP4 200
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 200
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 128
INDIRP4
CNSTI4 188512
ADDP4
INDIRI4
CNSTI4 1
SUBI4
CVIF4 4
MULF4
CVFI4 4
CNSTI4 2
LSHI4
ADDRLP4 128
INDIRP4
CNSTI4 188416
ADDP4
ADDP4
ASGNP4
line 526
;525:
;526:	distance =  	((float)(tr.endpos[2] - MIN_ATMOSPHERIC_HEIGHT)) / -particle->delta[2];
ADDRLP4 112
ADDRLP4 16+12+8
INDIRF4
CNSTF4 3372220416
SUBF4
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
NEGF4
DIVF4
ASGNF4
line 527
;527:	VectorMA( tr.endpos, distance, particle->delta, testend );
ADDRLP4 208
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 72
ADDRLP4 16+12
INDIRF4
ADDRLP4 208
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 72+4
ADDRLP4 16+12+4
INDIRF4
ADDRLP4 208
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 72+8
ADDRLP4 16+12+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 112
INDIRF4
MULF4
ADDF4
ASGNF4
line 528
;528:	CG_Trace( &tr, particle->pos, NULL, NULL, testend, ENTITYNUM_NONE, MASK_SOLID|MASK_WATER );
ADDRLP4 16
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 216
CNSTP4 0
ASGNP4
ADDRLP4 216
INDIRP4
ARGP4
ADDRLP4 216
INDIRP4
ARGP4
ADDRLP4 72
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 57
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 529
;529:	particle->minz = tr.endpos[2];
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 16+12+8
INDIRF4
ASGNF4
line 530
;530:	tr.endpos[2]--;
ADDRLP4 16+12+8
ADDRLP4 16+12+8
INDIRF4
CNSTF4 1065353216
SUBF4
ASGNF4
line 531
;531:	VectorCopy( tr.plane.normal, particle->surfacenormal );
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 16+24
INDIRB
ASGNB 12
line 532
;532:	particle->surface = tr.surfaceFlags;
ADDRFP4 4
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 16+44
INDIRI4
ASGNI4
line 533
;533:	particle->contents = CG_PointContents( tr.endpos, ENTITYNUM_NONE );
ADDRLP4 16+12
ARGP4
CNSTI4 4095
ARGI4
ADDRLP4 220
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 535
;534:
;535:	return( qtrue );
CNSTI4 1
RETI4
LABELV $446
endproc CG_SnowParticleGenerate 224 28
proc CG_SnowParticleRender 200 12
line 539
;536:}
;537:
;538:static void CG_SnowParticleRender( int type, cg_atmosphericParticle_t *particle )
;539:{
line 548
;540:	// Draw a snowflake
;541:
;542:	vec3_t			forward, right;
;543:	polyVert_t		verts[4];
;544:	vec2_t			line;
;545:	float			len, sinTumbling, cosTumbling, particleWidth;
;546:	vec3_t			start, finish;
;547:
;548:	if( !particle->active )
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 0
NEI4 $530
line 549
;549:		return;
ADDRGP4 $529
JUMPV
LABELV $530
line 551
;550:
;551:	VectorCopy( particle->pos, start );
ADDRLP4 108
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 553
;552:
;553:	sinTumbling = sin( particle->pos[2] * 0.03125f );
CNSTF4 1023410176
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ARGF4
ADDRLP4 168
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 160
ADDRLP4 168
INDIRF4
ASGNF4
line 554
;554:	cosTumbling = cos( ( particle->pos[2] + particle->pos[1] )  * 0.03125f );
ADDRLP4 172
ADDRFP4 4
INDIRP4
ASGNP4
CNSTF4 1023410176
ADDRLP4 172
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 172
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
MULF4
ARGF4
ADDRLP4 176
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 164
ADDRLP4 176
INDIRF4
ASGNF4
line 556
;555:
;556:	start[0] += 24 * ( 1 - particle->deltaNormalized[2] ) * sinTumbling;
ADDRLP4 108
ADDRLP4 108
INDIRF4
CNSTF4 1103101952
CNSTF4 1065353216
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
MULF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
line 557
;557:	start[1] += 24 * ( 1 - particle->deltaNormalized[2] ) * cosTumbling;
ADDRLP4 108+4
ADDRLP4 108+4
INDIRF4
CNSTF4 1103101952
CNSTF4 1065353216
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
MULF4
ADDRLP4 164
INDIRF4
MULF4
ADDF4
ASGNF4
line 559
;558:
;559:	len = particle->height;
ADDRLP4 156
ADDRFP4 4
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ASGNF4
line 560
;560:	if( start[2] <= particle->minz )
ADDRLP4 108+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
GTF4 $533
line 561
;561:	{
line 563
;562:		// Stop snow going through surfaces.
;563:		len = particle->height - particle->minz + start[2];
ADDRLP4 180
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 156
ADDRLP4 180
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ADDRLP4 180
INDIRP4
CNSTI4 64
ADDP4
INDIRF4
SUBF4
ADDRLP4 108+8
INDIRF4
ADDF4
ASGNF4
line 564
;564:		VectorMA( start, len - particle->height, particle->deltaNormalized, start );
ADDRLP4 184
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 192
ADDRLP4 184
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 108
ADDRLP4 108
INDIRF4
ADDRLP4 184
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 156
INDIRF4
ADDRLP4 192
INDIRP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
ADDRLP4 108+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 184
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 156
INDIRF4
ADDRLP4 192
INDIRP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
ADDRLP4 196
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 108+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 196
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 156
INDIRF4
ADDRLP4 196
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 565
;565:	}
LABELV $533
line 566
;566:	if( len <= 0 )
ADDRLP4 156
INDIRF4
CNSTF4 0
GTF4 $541
line 567
;567:		return;
ADDRGP4 $529
JUMPV
LABELV $541
line 569
;568:
;569:	VectorCopy( particle->deltaNormalized, forward );
ADDRLP4 124
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 570
;570:	VectorMA( start, -( len * sinTumbling ), forward, finish );
ADDRLP4 180
ADDRLP4 156
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
NEGF4
ASGNF4
ADDRLP4 136
ADDRLP4 108
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 136+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 124+4
INDIRF4
ADDRLP4 180
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 136+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 124+8
INDIRF4
ADDRLP4 156
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
NEGF4
MULF4
ADDF4
ASGNF4
line 572
;571:
;572:	line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 148
ADDRLP4 124
INDIRF4
ADDRGP4 cg+1870616+36+12
INDIRF4
MULF4
ADDRLP4 124+4
INDIRF4
ADDRGP4 cg+1870616+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 124+8
INDIRF4
ADDRGP4 cg+1870616+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 573
;573:	line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 148+4
ADDRLP4 124
INDIRF4
ADDRGP4 cg+1870616+36+24
INDIRF4
MULF4
ADDRLP4 124+4
INDIRF4
ADDRGP4 cg+1870616+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 124+8
INDIRF4
ADDRGP4 cg+1870616+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 575
;574:
;575:	VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+1870616+36+12
INDIRF4
ADDRLP4 148+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+1870616+36+12+4
INDIRF4
ADDRLP4 148+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+1870616+36+12+8
INDIRF4
ADDRLP4 148+4
INDIRF4
MULF4
ASGNF4
line 576
;576:	VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 184
ADDRLP4 148
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+1870616+36+24
INDIRF4
ADDRLP4 184
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+1870616+36+24+4
INDIRF4
ADDRLP4 184
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+1870616+36+24+8
INDIRF4
ADDRLP4 148
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 577
;577:	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 579
;578:
;579:	particleWidth = cosTumbling * particle->weight;
ADDRLP4 120
ADDRLP4 164
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 68
ADDP4
INDIRF4
MULF4
ASGNF4
line 581
;580:
;581:	VectorMA( finish, particleWidth, right, verts[0].xyz );
ADDRLP4 0
ADDRLP4 136
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 120
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 136+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRLP4 120
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 136+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRLP4 120
INDIRF4
MULF4
ADDF4
ASGNF4
line 582
;582:	verts[0].st[0] = 1;
ADDRLP4 0+12
CNSTF4 1065353216
ASGNF4
line 583
;583:	verts[0].st[1] = 0;
ADDRLP4 0+12+4
CNSTF4 0
ASGNF4
line 584
;584:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 585
;585:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 586
;586:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 587
;587:	verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 589
;588:
;589:	VectorMA( finish, -particleWidth, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 136
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 120
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 136+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRLP4 120
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 136+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRLP4 120
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 590
;590:	verts[1].st[0] = 0;
ADDRLP4 0+24+12
CNSTF4 0
ASGNF4
line 591
;591:	verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 592
;592:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 593
;593:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 594
;594:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 595
;595:	verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 597
;596:
;597:	VectorMA( start, -particleWidth, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 108
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 120
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRLP4 120
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRLP4 120
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 598
;598:	verts[2].st[0] = 0;
ADDRLP4 0+48+12
CNSTF4 0
ASGNF4
line 599
;599:	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 600
;600:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 601
;601:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 602
;602:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 603
;603:	verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 605
;604:
;605:	VectorMA( start, particleWidth, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 108
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 120
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 108+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRLP4 120
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 108+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRLP4 120
INDIRF4
MULF4
ADDF4
ASGNF4
line 606
;606:	verts[3].st[0] = 1;
ADDRLP4 0+72+12
CNSTF4 1065353216
ASGNF4
line 607
;607:	verts[3].st[1] = 1;
ADDRLP4 0+72+12+4
CNSTF4 1065353216
ASGNF4
line 608
;608:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 609
;609:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 610
;610:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 611
;611:	verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 613
;612:
;613:	trap_R_AddPolyToScene( *particle->effectshader, 4, verts );
ADDRFP4 4
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 614
;614:}
LABELV $529
endproc CG_SnowParticleRender 200 12
proc CG_EffectGust 64 0
line 621
;615:
;616:/*
;617:**  	Set up gust parameters.
;618:*/
;619:
;620:static void CG_EffectGust( cg_atmosphericEffect_t *cg_atmFx )
;621:{
line 626
;622:	// Generate random values for the next gust
;623:
;624:	int diff;
;625:
;626:	cg_atmFx->baseEndTime		= cg.time					+ cg_atmFx->baseMinTime		+ (rand() % (cg_atmFx->baseMaxTime - cg_atmFx->baseMinTime));
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 188468
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 188488
ADDP4
INDIRI4
ADDI4
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 188492
ADDP4
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 188488
ADDP4
INDIRI4
SUBI4
MODI4
ADDI4
ASGNI4
line 627
;627:	diff						= cg_atmFx->changeMaxTime	- cg_atmFx->changeMinTime;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 188484
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 188480
ADDP4
INDIRI4
SUBI4
ASGNI4
line 628
;628:	cg_atmFx->gustStartTime		= cg_atmFx->baseEndTime		+ cg_atmFx->changeMinTime	+ (diff ? (rand() % diff) : 0);
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $701
ADDRLP4 24
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 24
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
ADDRGP4 $702
JUMPV
LABELV $701
ADDRLP4 20
CNSTI4 0
ASGNI4
LABELV $702
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 188456
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 188468
ADDP4
INDIRI4
ADDRLP4 28
INDIRP4
CNSTI4 188480
ADDP4
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
line 629
;629:	diff						= cg_atmFx->gustMaxTime		- cg_atmFx->gustMinTime;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 32
INDIRP4
CNSTI4 188476
ADDP4
INDIRI4
ADDRLP4 32
INDIRP4
CNSTI4 188472
ADDP4
INDIRI4
SUBI4
ASGNI4
line 630
;630:	cg_atmFx->gustEndTime		= cg_atmFx->gustStartTime	+ cg_atmFx->gustMinTime		+ (diff ? (rand() % diff) : 0);
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $704
ADDRLP4 40
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 40
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
ADDRGP4 $705
JUMPV
LABELV $704
ADDRLP4 36
CNSTI4 0
ASGNI4
LABELV $705
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 188460
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 188456
ADDP4
INDIRI4
ADDRLP4 44
INDIRP4
CNSTI4 188472
ADDP4
INDIRI4
ADDI4
ADDRLP4 36
INDIRI4
ADDI4
ASGNI4
line 631
;631:	diff						= cg_atmFx->changeMaxTime	- cg_atmFx->changeMinTime;
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 48
INDIRP4
CNSTI4 188484
ADDP4
INDIRI4
ADDRLP4 48
INDIRP4
CNSTI4 188480
ADDP4
INDIRI4
SUBI4
ASGNI4
line 632
;632:	cg_atmFx->baseStartTime		= cg_atmFx->gustEndTime		+ cg_atmFx->changeMinTime	+ (diff ? (rand() % diff) : 0);
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $707
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 52
ADDRLP4 56
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
ADDRGP4 $708
JUMPV
LABELV $707
ADDRLP4 52
CNSTI4 0
ASGNI4
LABELV $708
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 188464
ADDP4
ADDRLP4 60
INDIRP4
CNSTI4 188460
ADDP4
INDIRI4
ADDRLP4 60
INDIRP4
CNSTI4 188480
ADDP4
INDIRI4
ADDI4
ADDRLP4 52
INDIRI4
ADDI4
ASGNI4
line 633
;633:}
LABELV $698
endproc CG_EffectGust 64 0
proc CG_EffectGustCurrent 48 0
line 636
;634:
;635:static qboolean CG_EffectGustCurrent( cg_atmosphericEffect_t *cg_atmFx, vec3_t curr, float *weight, int *num )
;636:{
line 642
;637:	// Calculate direction for new drops.
;638:
;639:	vec3_t		temp;
;640:	float		frac;
;641:
;642:	if( cg.time < cg_atmFx->baseEndTime )
ADDRGP4 cg+1868892
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 188468
ADDP4
INDIRI4
GEI4 $710
line 643
;643:	{
line 644
;644:		VectorCopy( cg_atmFx->baseVec, curr );
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 188524
ADDP4
INDIRB
ASGNB 12
line 645
;645:		*weight = cg_atmFx->baseWeight;
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 188496
ADDP4
INDIRF4
ASGNF4
line 646
;646:		*num = cg_atmFx->baseDrops;
ADDRFP4 12
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 188504
ADDP4
INDIRI4
ASGNI4
line 647
;647:	}
ADDRGP4 $711
JUMPV
LABELV $710
line 648
;648:	else {
line 649
;649:		VectorSubtract( cg_atmFx->gustVec, cg_atmFx->baseVec, temp );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 188536
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 188524
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
CNSTI4 188540
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
CNSTI4 188528
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 20
INDIRP4
CNSTI4 188544
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 188532
ADDP4
INDIRF4
SUBF4
ASGNF4
line 650
;650:		if( cg.time < cg_atmFx->gustStartTime )
ADDRGP4 cg+1868892
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 188456
ADDP4
INDIRI4
GEI4 $715
line 651
;651:		{
line 652
;652:			frac = ((float)(cg.time - cg_atmFx->baseEndTime))/((float)(cg_atmFx->gustStartTime - cg_atmFx->baseEndTime));
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 188468
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
ADDRGP4 cg+1868892
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 24
INDIRP4
CNSTI4 188456
ADDP4
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 653
;653:			VectorMA( cg_atmFx->baseVec, frac, temp, curr );
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 188524
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 188528
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 188532
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 654
;654:			*weight = cg_atmFx->baseWeight + (cg_atmFx->gustWeight - cg_atmFx->baseWeight) * frac;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 32
INDIRP4
CNSTI4 188496
ADDP4
INDIRF4
ASGNF4
ADDRFP4 8
INDIRP4
ADDRLP4 36
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 188500
ADDP4
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 655
;655:			*num = cg_atmFx->baseDrops + ((float)(cg_atmFx->gustDrops - cg_atmFx->baseDrops)) * frac;
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 188504
ADDP4
INDIRI4
ASGNI4
ADDRFP4 12
INDIRP4
ADDRLP4 44
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRP4
CNSTI4 188508
ADDP4
INDIRI4
ADDRLP4 44
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 656
;656:		}
ADDRGP4 $716
JUMPV
LABELV $715
line 657
;657:		else if( cg.time < cg_atmFx->gustEndTime )
ADDRGP4 cg+1868892
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 188460
ADDP4
INDIRI4
GEI4 $721
line 658
;658:		{
line 659
;659:			VectorCopy( cg_atmFx->gustVec, curr );
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 188536
ADDP4
INDIRB
ASGNB 12
line 660
;660:			*weight = cg_atmFx->gustWeight;
ADDRFP4 8
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 188500
ADDP4
INDIRF4
ASGNF4
line 661
;661:			*num = cg_atmFx->gustDrops;
ADDRFP4 12
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 188508
ADDP4
INDIRI4
ASGNI4
line 662
;662:		}
ADDRGP4 $722
JUMPV
LABELV $721
line 664
;663:		else
;664:		{
line 665
;665:			frac = 1.0 - ((float)(cg.time - cg_atmFx->gustEndTime))/((float)(cg_atmFx->baseStartTime - cg_atmFx->gustEndTime));
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 188460
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
CNSTF4 1065353216
ADDRGP4 cg+1868892
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 24
INDIRP4
CNSTI4 188464
ADDP4
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
CVIF4 4
DIVF4
SUBF4
ASGNF4
line 666
;666:			VectorMA( cg_atmFx->baseVec, frac, temp, curr );
ADDRFP4 4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 188524
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 188528
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 188532
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 667
;667:			*weight = cg_atmFx->baseWeight + (cg_atmFx->gustWeight - cg_atmFx->baseWeight) * frac;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 32
INDIRP4
CNSTI4 188496
ADDP4
INDIRF4
ASGNF4
ADDRFP4 8
INDIRP4
ADDRLP4 36
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 188500
ADDP4
INDIRF4
ADDRLP4 36
INDIRF4
SUBF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 668
;668:			*num = cg_atmFx->baseDrops + ((float)(cg_atmFx->gustDrops - cg_atmFx->baseDrops)) * frac;
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 188504
ADDP4
INDIRI4
ASGNI4
ADDRFP4 12
INDIRP4
ADDRLP4 44
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRP4
CNSTI4 188508
ADDP4
INDIRI4
ADDRLP4 44
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 669
;669:			if( cg.time >= cg_atmFx->baseStartTime )
ADDRGP4 cg+1868892
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 188464
ADDP4
INDIRI4
LTI4 $727
line 670
;670:				return( qtrue );
CNSTI4 1
RETI4
ADDRGP4 $709
JUMPV
LABELV $727
line 671
;671:		}
LABELV $722
LABELV $716
line 672
;672:	}
LABELV $711
line 673
;673:	return( qfalse );
CNSTI4 0
RETI4
LABELV $709
endproc CG_EffectGustCurrent 48 0
export CG_Atmospheric_SetParticles
proc CG_Atmospheric_SetParticles 60 8
line 851
;674:}
;675:
;676:// Q3Rally Code Start
;677:/*
;678:static void CG_EP_ParseFloats( char *floatstr, float *f1, float *f2 )
;679:{
;680:	// Parse the float or floats
;681:
;682:	char	*middleptr;
;683:	char	buff[64];
;684:
;685:	Q_strncpyz( buff, floatstr, sizeof(buff) );
;686:	for( middleptr = buff; *middleptr && *middleptr != ' '; middleptr++ );
;687:	if( *middleptr )
;688:	{
;689:		*middleptr++ = 0;
;690:		*f1 = atof( floatstr );
;691:		*f2 = atof( middleptr );
;692:	}
;693:	else {
;694:		*f1 = *f2 = atof( floatstr );
;695:	}
;696:}
;697:void CG_EffectParse( const char *effectstr )
;698:{
;699:	// Split the string into it's component parts.
;700:
;701:	float	bmin, bmax, cmin, cmax, gmin, gmax, bdrop, gdrop, wsplash, lsplash;
;702:	int		count;
;703:	char	*startptr, *eqptr, *endptr, *type;
;704:	char	workbuff[128];
;705:
;706:// Q3Rally Code Start
;707://	if( CG_AtmosphericKludge() )
;708://		return;
;709:// END
;710:
;711:	// Set up some default values
;712:	cg_atmFx->baseVec[0] = cg_atmFx->baseVec[1] = 0;
;713:	cg_atmFx->gustVec[0] = cg_atmFx->gustVec[1] = 100;
;714:	bmin = 5;
;715:	bmax = 10;
;716:	cmin = 1;
;717:	cmax = 1;
;718:	gmin = 0;
;719:	gmax = 2;
;720:	bdrop = gdrop = 300;
;721:	cg_atmFx->baseWeight = 0.7f;
;722:	cg_atmFx->gustWeight = 1.5f;
;723:	wsplash = 1;
;724:	lsplash = 1;
;725:	type = NULL;
;726:
;727:	// Parse the parameter string
;728:	Q_strncpyz( workbuff, effectstr, sizeof(workbuff) );
;729:	for( startptr = workbuff; *startptr; )
;730:	{
;731:		for( eqptr = startptr; *eqptr && *eqptr != '=' && *eqptr != ','; eqptr++ );
;732:		if( !*eqptr )
;733:			break;  	  	  	// No more string
;734:		if( *eqptr == ',' )
;735:		{
;736:			startptr = eqptr + 1;  	// Bad argument, continue
;737:			continue;
;738:		}
;739:		*eqptr++ = 0;
;740:		for( endptr = eqptr; *endptr && *endptr != ','; endptr++ );
;741:		if( *endptr )
;742:			*endptr++ = 0;
;743:
;744:		if( !type )
;745:		{
;746:			if( Q_stricmp( startptr, "T" ) ) {
;747:				cg_atmFx->numDrops = 0;
;748:				CG_Printf( "Atmospheric effect must start with a type.\n" );
;749:				return;
;750:			}
;751:			if( !Q_stricmp( eqptr, "RAIN" ) ) {
;752:				type = "rain";
;753:				cg_atmFx->ParticleCheckVisible = &CG_RainParticleCheckVisible;
;754:				cg_atmFx->ParticleGenerate = &CG_RainParticleGenerate;
;755:				cg_atmFx->ParticleRender = &CG_RainParticleRender;
;756:
;757:				cg_atmFx->baseVec[2] = cg_atmFx->gustVec[2] = - ATMOSPHERIC_RAIN_SPEED;
;758:			} else if( !Q_stricmp( eqptr, "SNOW" ) ) {
;759:				type = "snow";
;760:				cg_atmFx->ParticleCheckVisible = &CG_RainParticleCheckVisible;
;761:				cg_atmFx->ParticleGenerate = &CG_SnowParticleGenerate;
;762:				cg_atmFx->ParticleRender = &CG_SnowParticleRender;
;763:
;764:				cg_atmFx->baseVec[2] = cg_atmFx->gustVec[2] = - ATMOSPHERIC_SNOW_SPEED;
;765:			} else {
;766:				cg_atmFx->numDrops = 0;
;767:				CG_Printf( "Only effect type 'rain' and 'snow' are supported.\n" );
;768:				return;
;769:			}
;770:		}
;771:		else {
;772:			if( !Q_stricmp( startptr, "B" ) )
;773:				CG_EP_ParseFloats( eqptr, &bmin, &bmax );
;774:			else if( !Q_stricmp( startptr, "C" ) )
;775:				CG_EP_ParseFloats( eqptr, &cmin, &cmax );
;776:			else if( !Q_stricmp( startptr, "G" ) )
;777:				CG_EP_ParseFloats( eqptr, &gmin, &gmax );
;778:			else if( !Q_stricmp( startptr, "BV" ) )
;779:				CG_EP_ParseFloats( eqptr, &cg_atmFx->baseVec[0], &cg_atmFx->baseVec[1] );
;780:			else if( !Q_stricmp( startptr, "GV" ) )
;781:				CG_EP_ParseFloats( eqptr, &cg_atmFx->gustVec[0], &cg_atmFx->gustVec[1] );
;782:			else if( !Q_stricmp( startptr, "W" ) )
;783:				CG_EP_ParseFloats( eqptr, &cg_atmFx->baseWeight, &cg_atmFx->gustWeight );
;784:			else if( !Q_stricmp( startptr, "S" ) )
;785:				CG_EP_ParseFloats( eqptr, &wsplash, &lsplash );
;786:			else if( !Q_stricmp( startptr, "D" ) )
;787:				CG_EP_ParseFloats( eqptr, &bdrop, &gdrop );
;788:			else CG_Printf( "Unknown effect key '%s'.\n", startptr );
;789:		}
;790:		startptr = endptr;
;791:	}
;792:
;793:	if( !type )
;794:	{
;795:		// No effects
;796:
;797:		cg_atmFx->numDrops = -1;
;798:		return;
;799:	}
;800:  		
;801:	cg_atmFx->baseMinTime = 1000 * bmin;
;802:	cg_atmFx->baseMaxTime = 1000 * bmax;
;803:	cg_atmFx->changeMinTime = 1000 * cmin;
;804:	cg_atmFx->changeMaxTime = 1000 * cmax;
;805:	cg_atmFx->gustMinTime = 1000 * gmin;
;806:	cg_atmFx->gustMaxTime = 1000 * gmax;
;807:	cg_atmFx->baseDrops = bdrop;
;808:	cg_atmFx->gustDrops = gdrop;
;809:	cg_atmFx->waterSplash = wsplash;
;810:	cg_atmFx->landSplash = lsplash;
;811:
;812:	cg_atmFx->numDrops = (cg_atmFx->baseDrops > cg_atmFx->gustDrops) ? cg_atmFx->baseDrops : cg_atmFx->gustDrops;
;813:	if( cg_atmFx->numDrops > MAX_ATMOSPHERIC_PARTICLES )
;814:		cg_atmFx->numDrops = MAX_ATMOSPHERIC_PARTICLES;
;815:
;816:	// Load graphics
;817:
;818:	// Rain
;819:	if( type == "rain" ) {
;820:		cg_atmFx->numEffectShaders = 1;
;821:		if( !(cg_atmFx->effectshaders[0] = trap_R_RegisterShader( "gfx/atmosphere/raindrop" )) )
;822:			cg_atmFx->effectshaders[0] = -1;
;823:		if( cg_atmFx->waterSplash )
;824:			cg_atmFx->effectwatershader = trap_R_RegisterShader( "gfx/atmosphere/raindropwater" );
;825:		if( cg_atmFx->landSplash )
;826:			cg_atmFx->effectlandshader = trap_R_RegisterShader( "gfx/atmosphere/raindropsolid" );
;827:
;828:	// Snow
;829:	} else if( type == "snow" ) {
;830:		for( cg_atmFx->numEffectShaders = 0; cg_atmFx->numEffectShaders < 6; cg_atmFx->numEffectShaders++ ) {
;831:			if( !( cg_atmFx->effectshaders[cg_atmFx->numEffectShaders] = trap_R_RegisterShader( va("gfx/atmosphere/snowflake0%i", cg_atmFx->numEffectShaders ) ) ) )
;832:				cg_atmFx->effectshaders[cg_atmFx->numEffectShaders] = -1;  	// we had some kind of a problem
;833:		}
;834:		cg_atmFx->waterSplash = 0;
;835:		cg_atmFx->landSplash = 0;
;836:
;837:	// This really should never happen
;838:	} else
;839:		cg_atmFx->numEffectShaders = 0;
;840:
;841:	// Initialise atmospheric effect to prevent all particles falling at the start
;842:	for( count = 0; count < cg_atmFx->numDrops; count++ )
;843:		cg_atmFx->particles[count].nextDropTime = ATMOSPHERIC_DROPDELAY + (rand() % ATMOSPHERIC_DROPDELAY);
;844:
;845:	CG_EffectGust();
;846:}
;847:*/
;848:// END
;849:
;850:// Q3Rally Code Start
;851:void CG_Atmospheric_SetParticles( int type, int numParticles, qboolean diableSplashes ){
line 855
;852:	int		count;
;853:	cg_atmosphericEffect_t	*cg_atmFx;
;854:
;855:	cg_atmFx = &cg_atmFxList[type];
ADDRLP4 0
CNSTI4 188560
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_atmFxList
ADDP4
ASGNP4
line 857
;856:
;857:	if ( cg_atmFx->numDrops ) return;
ADDRLP4 0
INDIRP4
CNSTI4 188452
ADDP4
INDIRI4
CNSTI4 0
EQI4 $731
ADDRGP4 $730
JUMPV
LABELV $731
line 860
;858:
;859:	// Set up some default values
;860:	cg_atmFx->baseVec[0] = cg_atmFx->baseVec[1] = 0;
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 188528
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 188524
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
line 861
;861:	cg_atmFx->gustVec[0] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 188536
ADDP4
CNSTF4 0
ASGNF4
line 862
;862:	cg_atmFx->gustVec[1] = 100;
ADDRLP4 0
INDIRP4
CNSTI4 188540
ADDP4
CNSTF4 1120403456
ASGNF4
line 863
;863:	cg_atmFx->baseMinTime = 5000;
ADDRLP4 0
INDIRP4
CNSTI4 188488
ADDP4
CNSTI4 5000
ASGNI4
line 864
;864:	cg_atmFx->baseMaxTime = 10000;
ADDRLP4 0
INDIRP4
CNSTI4 188492
ADDP4
CNSTI4 10000
ASGNI4
line 865
;865:	cg_atmFx->changeMinTime = 500;
ADDRLP4 0
INDIRP4
CNSTI4 188480
ADDP4
CNSTI4 500
ASGNI4
line 866
;866:	cg_atmFx->changeMaxTime = 500;
ADDRLP4 0
INDIRP4
CNSTI4 188484
ADDP4
CNSTI4 500
ASGNI4
line 867
;867:	cg_atmFx->gustMinTime = 500;
ADDRLP4 0
INDIRP4
CNSTI4 188472
ADDP4
CNSTI4 500
ASGNI4
line 868
;868:	cg_atmFx->gustMaxTime = 2000;
ADDRLP4 0
INDIRP4
CNSTI4 188476
ADDP4
CNSTI4 2000
ASGNI4
line 869
;869:	cg_atmFx->baseDrops = numParticles;
ADDRLP4 0
INDIRP4
CNSTI4 188504
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 870
;870:	cg_atmFx->gustDrops = numParticles;
ADDRLP4 0
INDIRP4
CNSTI4 188508
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 871
;871:	cg_atmFx->baseWeight = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 188496
ADDP4
CNSTF4 1065353216
ASGNF4
line 872
;872:	cg_atmFx->gustWeight = 2.0f;
ADDRLP4 0
INDIRP4
CNSTI4 188500
ADDP4
CNSTF4 1073741824
ASGNF4
line 873
;873:	cg_atmFx->waterSplash = !diableSplashes;
ADDRFP4 8
INDIRI4
CNSTI4 0
NEI4 $734
ADDRLP4 16
CNSTI4 1
ASGNI4
ADDRGP4 $735
JUMPV
LABELV $734
ADDRLP4 16
CNSTI4 0
ASGNI4
LABELV $735
ADDRLP4 0
INDIRP4
CNSTI4 188516
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 874
;874:	cg_atmFx->landSplash = !diableSplashes;
ADDRFP4 8
INDIRI4
CNSTI4 0
NEI4 $737
ADDRLP4 20
CNSTI4 1
ASGNI4
ADDRGP4 $738
JUMPV
LABELV $737
ADDRLP4 20
CNSTI4 0
ASGNI4
LABELV $738
ADDRLP4 0
INDIRP4
CNSTI4 188520
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 876
;875:
;876:	cg_atmFx->numDrops = (cg_atmFx->baseDrops > cg_atmFx->gustDrops) ? cg_atmFx->baseDrops : cg_atmFx->gustDrops;
ADDRLP4 0
INDIRP4
CNSTI4 188504
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 188508
ADDP4
INDIRI4
LEI4 $740
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 188504
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $741
JUMPV
LABELV $740
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 188508
ADDP4
INDIRI4
ASGNI4
LABELV $741
ADDRLP4 0
INDIRP4
CNSTI4 188452
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 877
;877:	if( cg_atmFx->numDrops > MAX_ATMOSPHERIC_PARTICLES )
ADDRLP4 0
INDIRP4
CNSTI4 188452
ADDP4
INDIRI4
CNSTI4 2048
LEI4 $742
line 878
;878:		cg_atmFx->numDrops = MAX_ATMOSPHERIC_PARTICLES;
ADDRLP4 0
INDIRP4
CNSTI4 188452
ADDP4
CNSTI4 2048
ASGNI4
LABELV $742
line 881
;879:
;880:	// Rain
;881:	if( type == 0 ) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $744
line 882
;882:		cg_atmFx->ParticleCheckVisible = &CG_RainParticleCheckVisible;
ADDRLP4 0
INDIRP4
CNSTI4 188548
ADDP4
ADDRGP4 CG_RainParticleCheckVisible
ASGNP4
line 883
;883:		cg_atmFx->ParticleGenerate = &CG_RainParticleGenerate;
ADDRLP4 0
INDIRP4
CNSTI4 188552
ADDP4
ADDRGP4 CG_RainParticleGenerate
ASGNP4
line 884
;884:		cg_atmFx->ParticleRender = &CG_RainParticleRender;
ADDRLP4 0
INDIRP4
CNSTI4 188556
ADDP4
ADDRGP4 CG_RainParticleRender
ASGNP4
line 885
;885:		cg_atmFx->baseVec[2] = cg_atmFx->gustVec[2] = - ATMOSPHERIC_RAIN_SPEED;
ADDRLP4 36
CNSTF4 3213675725
ADDRGP4 mod_gravity
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 188544
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 188532
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
line 887
;886:
;887:		cg_atmFx->numEffectShaders = 1;
ADDRLP4 0
INDIRP4
CNSTI4 188512
ADDP4
CNSTI4 1
ASGNI4
line 888
;888:		if( !(cg_atmFx->effectshaders[0] = trap_R_RegisterShader( "gfx/atmosphere/raindrop" )) )
ADDRGP4 $748
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188416
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $746
line 889
;889:			cg_atmFx->effectshaders[0] = -1;
ADDRLP4 0
INDIRP4
CNSTI4 188416
ADDP4
CNSTI4 -1
ASGNI4
LABELV $746
line 890
;890:		if( cg_atmFx->waterSplash )
ADDRLP4 0
INDIRP4
CNSTI4 188516
ADDP4
INDIRI4
CNSTI4 0
EQI4 $749
line 891
;891:			cg_atmFx->effectwatershader = trap_R_RegisterShader( "gfx/atmosphere/raindropwater" );
ADDRGP4 $751
ARGP4
ADDRLP4 44
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188440
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
LABELV $749
line 892
;892:		if( cg_atmFx->landSplash )
ADDRLP4 0
INDIRP4
CNSTI4 188520
ADDP4
INDIRI4
CNSTI4 0
EQI4 $745
line 893
;893:			cg_atmFx->effectlandshader = trap_R_RegisterShader( "gfx/atmosphere/raindropsolid" );
ADDRGP4 $754
ARGP4
ADDRLP4 48
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 188444
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 894
;894:	}
ADDRGP4 $745
JUMPV
LABELV $744
line 896
;895:	// Snow
;896:	else {
line 897
;897:		cg_atmFx->ParticleCheckVisible = &CG_RainParticleCheckVisible;
ADDRLP4 0
INDIRP4
CNSTI4 188548
ADDP4
ADDRGP4 CG_RainParticleCheckVisible
ASGNP4
line 898
;898:		cg_atmFx->ParticleGenerate = &CG_SnowParticleGenerate;
ADDRLP4 0
INDIRP4
CNSTI4 188552
ADDP4
ADDRGP4 CG_SnowParticleGenerate
ASGNP4
line 899
;899:		cg_atmFx->ParticleRender = &CG_SnowParticleRender;
ADDRLP4 0
INDIRP4
CNSTI4 188556
ADDP4
ADDRGP4 CG_SnowParticleRender
ASGNP4
line 900
;900:		cg_atmFx->baseVec[2] = cg_atmFx->gustVec[2] = - ATMOSPHERIC_SNOW_SPEED;
ADDRLP4 36
CNSTF4 3184315597
ADDRGP4 mod_gravity
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 188544
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 188532
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
line 902
;901:
;902:		for( cg_atmFx->numEffectShaders = 0; cg_atmFx->numEffectShaders < 6; cg_atmFx->numEffectShaders++ ) {
ADDRLP4 0
INDIRP4
CNSTI4 188512
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $758
JUMPV
LABELV $755
line 903
;903:			if( !( cg_atmFx->effectshaders[cg_atmFx->numEffectShaders] = trap_R_RegisterShader( va("gfx/atmosphere/snowflake0%i", cg_atmFx->numEffectShaders ) ) ) )
ADDRGP4 $761
ARGP4
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 188512
ADDP4
INDIRI4
ASGNI4
ADDRLP4 44
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 188416
ADDP4
ADDP4
ADDRLP4 52
INDIRI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $759
line 904
;904:				cg_atmFx->effectshaders[cg_atmFx->numEffectShaders] = -1;  	// we had some kind of a problem
ADDRLP4 0
INDIRP4
CNSTI4 188512
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 0
INDIRP4
CNSTI4 188416
ADDP4
ADDP4
CNSTI4 -1
ASGNI4
LABELV $759
line 905
;905:		}
LABELV $756
line 902
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 188512
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $758
ADDRLP4 0
INDIRP4
CNSTI4 188512
ADDP4
INDIRI4
CNSTI4 6
LTI4 $755
line 906
;906:		cg_atmFx->waterSplash = 0;
ADDRLP4 0
INDIRP4
CNSTI4 188516
ADDP4
CNSTI4 0
ASGNI4
line 907
;907:		cg_atmFx->landSplash = 0;
ADDRLP4 0
INDIRP4
CNSTI4 188520
ADDP4
CNSTI4 0
ASGNI4
line 908
;908:	}
LABELV $745
line 910
;909:
;910:	for( count = 0; count < cg_atmFx->numDrops; count++ ){
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $765
JUMPV
LABELV $762
line 911
;911:		if (cg_atmFx->particles[count].active) continue;
CNSTI4 92
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
ADDP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 0
EQI4 $766
ADDRGP4 $763
JUMPV
LABELV $766
line 912
;912:		cg_atmFx->particles[count].nextDropTime = ATMOSPHERIC_DROPDELAY + (rand() % ATMOSPHERIC_DROPDELAY);
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 36
CNSTI4 1000
ASGNI4
CNSTI4 92
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 0
INDIRP4
ADDP4
CNSTI4 84
ADDP4
ADDRLP4 32
INDIRI4
ADDRLP4 36
INDIRI4
MODI4
ADDRLP4 36
INDIRI4
ADDI4
ASGNI4
line 913
;913:	}
LABELV $763
line 910
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $765
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 188452
ADDP4
INDIRI4
LTI4 $762
line 915
;914:
;915:	CG_EffectGust( cg_atmFx );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_EffectGust
CALLV
pop
line 916
;916:}
LABELV $730
endproc CG_Atmospheric_SetParticles 60 8
export CG_AddAtmosphericEffects
proc CG_AddAtmosphericEffects 64 16
line 924
;917:// END
;918:
;919:/*
;920:** Main render loop
;921:*/
;922:
;923:void CG_AddAtmosphericEffects()
;924:{
line 935
;925:	// Add atmospheric effects (e.g. rain, snow etc.) to view
;926:
;927:	int curr, max, currnum;
;928:	cg_atmosphericParticle_t *particle;
;929:	vec3_t currvec;
;930:	float currweight;
;931:	cg_atmosphericEffect_t	*cg_atmFx;
;932:	int		i;
;933:
;934:// Q3Rally Code Start
;935:	if ( !cg_atmosphericLevel.integer )
ADDRGP4 cg_atmosphericLevel+12
INDIRI4
CNSTI4 0
NEI4 $769
line 936
;936:		return;
ADDRGP4 $768
JUMPV
LABELV $769
line 939
;937:// END
;938:
;939:	for (i = 0; i < NUM_ATMOSPHERIC_TYPES; i++){
ADDRLP4 12
CNSTI4 0
ASGNI4
LABELV $772
line 940
;940:		cg_atmFx = &cg_atmFxList[i];
ADDRLP4 4
CNSTI4 188560
ADDRLP4 12
INDIRI4
MULI4
ADDRGP4 cg_atmFxList
ADDP4
ASGNP4
line 941
;941:		if( cg_atmFx->numDrops <= 0 || cg_atmFx->numEffectShaders == 0 ) continue;
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 188452
ADDP4
INDIRI4
ADDRLP4 44
INDIRI4
LEI4 $778
ADDRLP4 4
INDIRP4
CNSTI4 188512
ADDP4
INDIRI4
ADDRLP4 44
INDIRI4
NEI4 $776
LABELV $778
ADDRGP4 $773
JUMPV
LABELV $776
line 945
;942:
;943:// Q3Rally Code Start - changed to one cvar
;944://		max = cg_lowEffects.integer ? (cg_atmFx->numDrops >> 1) : cg_atmFx->numDrops;
;945:		max = (cg_atmosphericLevel.integer == 1) ? (cg_atmFx->numDrops >> 1) : cg_atmFx->numDrops;
ADDRGP4 cg_atmosphericLevel+12
INDIRI4
CNSTI4 1
NEI4 $781
ADDRLP4 48
ADDRLP4 4
INDIRP4
CNSTI4 188452
ADDP4
INDIRI4
CNSTI4 1
RSHI4
ASGNI4
ADDRGP4 $782
JUMPV
LABELV $781
ADDRLP4 48
ADDRLP4 4
INDIRP4
CNSTI4 188452
ADDP4
INDIRI4
ASGNI4
LABELV $782
ADDRLP4 16
ADDRLP4 48
INDIRI4
ASGNI4
line 947
;946:// END
;947:		if( CG_EffectGustCurrent( cg_atmFx, currvec, &currweight, &currnum ) )
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 52
ADDRGP4 CG_EffectGustCurrent
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
EQI4 $783
line 948
;948:			CG_EffectGust( cg_atmFx );  	  	  	// Recalculate gust parameters
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 CG_EffectGust
CALLV
pop
LABELV $783
line 949
;949:		for( curr = 0; curr < max; curr++ )
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 $788
JUMPV
LABELV $785
line 950
;950:		{
line 951
;951:			particle = &cg_atmFx->particles[curr];
ADDRLP4 0
CNSTI4 92
ADDRLP4 8
INDIRI4
MULI4
ADDRLP4 4
INDIRP4
ADDP4
ASGNP4
line 952
;952:			if( !cg_atmFx->ParticleCheckVisible( i, particle ) )
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 56
ADDRLP4 4
INDIRP4
CNSTI4 188548
ADDP4
INDIRP4
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $789
line 953
;953:			{
line 956
;954:				// Effect has terminated / fallen from screen view
;955:
;956:				if( !particle->nextDropTime )
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 0
NEI4 $791
line 957
;957:				{
line 959
;958:					// Stop rain being synchronized 
;959:					particle->nextDropTime = rand() % ATMOSPHERIC_DROPDELAY;
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 60
INDIRI4
CNSTI4 1000
MODI4
ASGNI4
line 960
;960:				}
ADDRGP4 $792
JUMPV
LABELV $791
line 961
;961:				else if( currnum < curr || particle->nextDropTime > cg.time )
ADDRLP4 36
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $796
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ADDRGP4 cg+1868892
INDIRI4
LEI4 $793
LABELV $796
line 962
;962:					continue;
ADDRGP4 $786
JUMPV
LABELV $793
LABELV $792
line 963
;963:				if( !cg_atmFx->ParticleGenerate( i, particle, currvec, currweight ) )
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRLP4 32
INDIRF4
ARGF4
ADDRLP4 60
ADDRLP4 4
INDIRP4
CNSTI4 188552
ADDP4
INDIRP4
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $797
line 964
;964:				{
line 967
;965:					// Ensure it doesn't attempt to generate every frame, to prevent
;966:					// 'clumping' when there's only a small sky area available.
;967:					particle->nextDropTime = cg.time + ATMOSPHERIC_DROPDELAY;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 968
;968:					continue;
ADDRGP4 $786
JUMPV
LABELV $797
line 970
;969:				}
;970:			}
LABELV $789
line 972
;971:
;972:			cg_atmFx->ParticleRender( i, particle );
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 188556
ADDP4
INDIRP4
CALLV
pop
line 973
;973:		}
LABELV $786
line 949
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $788
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
LTI4 $785
line 975
;974:
;975:		cg_atmFx->lastRainTime = cg.time;
ADDRLP4 4
INDIRP4
CNSTI4 188448
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 976
;976:	}
LABELV $773
line 939
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 2
LTI4 $772
line 977
;977:}
LABELV $768
endproc CG_AddAtmosphericEffects 64 16
bss
align 4
LABELV cg_atmFxList
skip 377120
import wideAdjustX
import CG_NewParticleArea
import initparticles
import CG_LaunchFragment
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel_MiTech
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound_MiTech
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_System
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import teamcolormodels
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformationRus
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_SpurtBlood
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_LeiPuff
import CG_LeiSparks2
import CG_LeiSparks
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponBarNew2
import CG_DrawWeaponBarNew
import CG_DrawWeaponBar0
import CG_DrawWeaponSelect
import CG_AddRealWeapon
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_GravitygunTrail
import CG_PhysgunTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainVehicleEvent
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_ReloadPlayers
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_AddToGenericConsole
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModelCopy
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrintRus
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import CG_DrawFade
import CG_Fade
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_InsideBox
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawGiantString
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_DrawRoundedRect
import CG_FillRect2
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_CloadMap_f
import CG_FairCvars
import SnapVectorTowards
import CG_RegisterOverlay
import CG_IsTeamGame
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_PredictWeaponEffects
import cg_teamChatBeep
import cg_chatBeep
import cg_weaponOrder
import cg_weaponBarStyle
import cg_crosshairColorBlue
import cg_crosshairColorGreen
import cg_crosshairColorRed
import cg_ch13size
import cg_ch13
import cg_ch12size
import cg_ch12
import cg_ch11size
import cg_ch11
import cg_ch10size
import cg_ch10
import cg_ch9slze
import cg_ch9size
import cg_ch9
import cg_ch8size
import cg_ch8
import cg_ch7size
import cg_ch7
import cg_ch6size
import cg_ch6
import cg_ch5size
import cg_ch5
import cg_ch4size
import cg_ch4
import cg_ch3size
import cg_ch3
import cg_ch2size
import cg_ch2
import cg_ch1size
import cg_ch1
import cg_differentCrosshairs
import cg_crosshairPulse
import cg_atmosphericLevel
import cg_fragmsgsize
import cg_autovertex
import cg_vote_custom_commands
import cg_cyclegrapple
import cg_voteflags
import cg_voip_teamonly
import cg_hitsound
import cg_alwaysWeaponBar
import cl_timeNudge
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_cmdTimeNudge
import cg_delag
import cg_enableBreath
import cg_enableDust
import cg_obeliskRespawnDelay
import cg_recordSPDemoName
import cg_recordSPDemo
import cg_singlePlayerActive
import cg_singlePlayer
import cg_currentSelectedPlayerName
import cg_currentSelectedPlayer
import cg_blueTeamName
import cg_redTeamName
import cg_music
import cg_trueLightning
import cg_oldPlasma
import cg_cameraEyes_Up
import cg_cameraEyes_Fwd
import cg_cameraEyes
import cg_cameramode
import cg_leiBrassNoise
import cg_leiGoreNoise
import cg_leiEnhancement
import cg_lodScale
import cg_letterBoxSize
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_float
import pmove_msec
import pmove_fixed
import cg_commonConsole
import cg_teamChatLines
import cg_chatLines
import cg_commonConsoleLines
import cg_consoleLines
import cg_teamChatSizeY
import cg_teamChatSizeX
import cg_chatSizeY
import cg_chatSizeX
import cg_consoleSizeY
import cg_consoleSizeX
import cg_fontShadow
import cg_fontScale
import cg_consoleTime
import cg_chatTime
import cg_newConsole
import cg_newFont
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatScaleY
import cg_teamChatScaleX
import cg_chatY
import cg_teamChatY
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawSpeed
import cg_drawAttacker
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_thirdPersonOffset
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_bigheadMode
import cg_disableLevelStartFade
import cg_paintballMode
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairScale
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_drawSyncMessage
import cg_drawsubtitles
import cg_centertime
import cg_gibtime
import cg_itemstyle
import cg_oldscoreboard
import team_legsskin
import legsskin
import ui_backcolors
import cl_screenoffset
import cg_cameraeyes
import cg_leiChibi
import cg_plightradius
import cg_plightblue
import cg_plightgreen
import cg_plightred
import cg_tolightblue
import cg_tolightgreen
import cg_tolightred
import cg_hetex
import cg_totex
import cg_ptex
import cg_helightblue
import cg_helightgreen
import cg_helightred
import con_notifytime
import cl_language
import cg_toolguninfo
import cg_postprocess
import cg_hide255
import sb_texturename
import sb_texture_view
import sb_classnum_view
import toolgun_modelst
import toolgun_toolmode4
import toolgun_toolmode3
import toolgun_toolmode2
import toolgun_toolmode1
import toolgun_tooltip4
import toolgun_tooltip3
import toolgun_tooltip2
import toolgun_tooltip1
import toolgun_tooltext
import toolgun_toolcmd4
import toolgun_toolcmd3
import toolgun_toolcmd2
import toolgun_toolcmd1
import toolgun_tool
import toolgun_mod19
import toolgun_mod18
import toolgun_mod17
import toolgun_mod16
import toolgun_mod15
import toolgun_mod14
import toolgun_mod13
import toolgun_mod12
import toolgun_mod11
import toolgun_mod10
import toolgun_mod9
import toolgun_mod8
import toolgun_mod7
import toolgun_mod6
import toolgun_mod5
import toolgun_mod4
import toolgun_mod3
import toolgun_mod2
import toolgun_mod1
import cg_weaponBarActiveWidth
import cg_weaponselecttime
import cg_itemscaletime
import cg_zoomtime
import cg_gibmodifier
import cg_gibvelocity
import cg_gibjump
import cl_giantcharheight
import cl_giantcharwidth
import cl_bigcharheight
import cl_bigcharwidth
import cl_smallcharheight
import cl_smallcharwidth
import cl_propgapwidth
import cl_propspacewidth
import cl_propheight
import cl_propsmallsizescale
import g_gametype
import mod_skyColorA
import mod_skyColorB
import mod_skyColorG
import mod_skyColorR
import mod_skyShader
import mod_fogColorA
import mod_fogColorB
import mod_fogColorG
import mod_fogColorR
import mod_fogInterval
import mod_fogDistance
import mod_fogShader
import mod_fogModel
import mod_zround
import mod_gravity
import mod_roundmode
import mod_overlay
import mod_slickmove
import mod_accelerate
import mod_invulinf
import mod_kamikazeinf
import mod_portalinf
import mod_teleporterinf
import mod_medkitinf
import mod_medkitlimit
import mod_teamblue_firespeed
import mod_teamred_firespeed
import mod_invulmove
import mod_ammolimit
import mod_noplayerclip
import mod_doublerfirespeed
import mod_guardfirespeed
import mod_scoutfirespeed
import mod_ammoregenfirespeed
import mod_hastefirespeed
import mod_amdelay
import mod_ftdelay
import mod_cgdelay
import mod_pldelay
import mod_ngdelay
import mod_bfgdelay
import mod_rgdelay
import mod_pgdelay
import mod_lgdelay
import mod_rldelay
import mod_gldelay
import mod_sgdelay
import mod_mgdelay
import mod_gdelay
import mod_jumpheight
import mod_sgspread
import mod_sgcount
import mod_lgrange
import mod_cgspread
import mod_mgspread
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_TeamName
import BG_GetVehicleSettings
import BG_VehicleCheckClass
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_DefragmentMemory
import BG_Free
import BG_InitMemory
import BG_Alloc
import BG_CanAlloc
import BG_CanItemBeGrabbed
import BG_FindItemForBackpack
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindSwepAmmo
import BG_FindSwep
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import COM_LoadLevelScores
import COM_CalculatePlayerScore
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import vectoyaw
import AngleDifference
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import Q_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import Lerp
import VelocityToAxis
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import Q_snprintf
import Q_vsnprintf
import strtol
import _atoi
import atoi
import strtod
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import ifstrlenru
import strlenru
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $761
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 97
byte 1 116
byte 1 109
byte 1 111
byte 1 115
byte 1 112
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 47
byte 1 115
byte 1 110
byte 1 111
byte 1 119
byte 1 102
byte 1 108
byte 1 97
byte 1 107
byte 1 101
byte 1 48
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $754
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 97
byte 1 116
byte 1 109
byte 1 111
byte 1 115
byte 1 112
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 100
byte 1 114
byte 1 111
byte 1 112
byte 1 115
byte 1 111
byte 1 108
byte 1 105
byte 1 100
byte 1 0
align 1
LABELV $751
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 97
byte 1 116
byte 1 109
byte 1 111
byte 1 115
byte 1 112
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 100
byte 1 114
byte 1 111
byte 1 112
byte 1 119
byte 1 97
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $748
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 97
byte 1 116
byte 1 109
byte 1 111
byte 1 115
byte 1 112
byte 1 104
byte 1 101
byte 1 114
byte 1 101
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 100
byte 1 114
byte 1 111
byte 1 112
byte 1 0
align 1
LABELV $87
byte 1 67
byte 1 71
byte 1 95
byte 1 69
byte 1 102
byte 1 102
byte 1 101
byte 1 99
byte 1 116
byte 1 77
byte 1 97
byte 1 114
byte 1 107
byte 1 32
byte 1 99
byte 1 97
byte 1 108
byte 1 108
byte 1 101
byte 1 100
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 60
byte 1 61
byte 1 32
byte 1 48
byte 1 32
byte 1 114
byte 1 97
byte 1 100
byte 1 105
byte 1 117
byte 1 115
byte 1 0
