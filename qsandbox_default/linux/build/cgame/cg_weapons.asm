code
proc CG_MachineGunEjectBrass 136 8
file "../../../code/cgame/cg_weapons.c"
line 31
;1:/*
;2:===========================================================================
;3:Copyright (C) 1999-2005 Id Software, Inc.
;4:
;5:This file is part of Quake III Arena source code.
;6:
;7:Quake III Arena source code is free software; you can redistribute it
;8:and/or modify it under the terms of the GNU General Public License as
;9:published by the Free Software Foundation; either version 2 of the License,
;10:or (at your option) any later version.
;11:
;12:Quake III Arena source code is distributed in the hope that it will be
;13:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;14:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;15:GNU General Public License for more details.
;16:
;17:You should have received a copy of the GNU General Public License
;18:along with Quake III Arena source code; if not, write to the Free Software
;19:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;20:===========================================================================
;21:*/
;22://
;23:// cg_weapons.c -- events and effects dealing with weapons
;24:#include "cg_local.h"
;25:
;26:/*
;27:==========================
;28:CG_MachineGunEjectBrass
;29:==========================
;30:*/
;31:static void CG_MachineGunEjectBrass( centity_t *cent ) {
line 36
;32:	localEntity_t	*le;
;33:	refEntity_t		*re;
;34:	vec3_t			velocity, xvelocity;
;35:	vec3_t			offset, xoffset;
;36:	float			waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 39
;37:	vec3_t			v[3];
;38:
;39:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $82
line 40
;40:		return;
ADDRGP4 $81
JUMPV
LABELV $82
line 43
;41:	}
;42:
;43:	le = CG_AllocLocalEntity();
ADDRLP4 96
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 96
INDIRP4
ASGNP4
line 44
;44:	re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 46
;45:
;46:	velocity[0] = 0;
ADDRLP4 40
CNSTF4 0
ASGNF4
line 47
;47:	velocity[1] = -50 + 40 * crandom();
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
CNSTF4 1109393408
CNSTF4 1073741824
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 3259498496
ADDF4
ASGNF4
line 48
;48:	velocity[2] = 100 + 50 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
CNSTF4 1112014848
CNSTF4 1073741824
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 50
;49:
;50:	le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 51
;51:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 52
;52:	le->endTime = le->startTime + cg_brassTime.integer + ( cg_brassTime.integer / 4 ) * random();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRGP4 cg_brassTime+12
INDIRI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 4
DIVI4
CVIF4 4
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 54
;53:
;54:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 55
;55:	le->pos.trTime = cg.time - (rand()&15);
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ADDRLP4 116
INDIRI4
CNSTI4 15
BANDI4
SUBI4
ASGNI4
line 57
;56:
;57:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 59
;58:
;59:	offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 60
;60:	offset[1] = -4;
ADDRLP4 52+4
CNSTF4 3229614080
ASGNF4
line 61
;61:	offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 63
;62:
;63:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 64
;64:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 65
;65:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 66
;66:	VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 68
;67:
;68:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 70
;69:
;70:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $115
line 71
;71:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 72
;72:	}
LABELV $115
line 74
;73:
;74:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 75
;75:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 76
;76:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 77
;77:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 79
;78:
;79:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 80
;80:	re->hModel = cgs.media.machinegunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+956380+424
INDIRI4
ASGNI4
line 82
;81:
;82:	le->bounceFactor = 0.4 * waterScale;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1053609165
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 84
;83:
;84:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 85
;85:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 86
;86:	le->angles.trBase[0] = rand()&31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 87
;87:	le->angles.trBase[1] = rand()&31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 88
;88:	le->angles.trBase[2] = rand()&31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 89
;89:	le->angles.trDelta[0] = 2;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1073741824
ASGNF4
line 90
;90:	le->angles.trDelta[1] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
line 91
;91:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 93
;92:
;93:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 94
;94:	le->leBounceSoundType = LEBS_BRASS;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 95
;95:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 96
;96:}
LABELV $81
endproc CG_MachineGunEjectBrass 136 8
proc CG_ShotgunEjectBrass 136 8
line 105
;97:
;98:
;99:
;100:/*
;101:==========================
;102:CG_ShotgunEjectBrass
;103:==========================
;104:*/
;105:static void CG_ShotgunEjectBrass( centity_t *cent ) {
line 113
;106:	localEntity_t	*le;
;107:	refEntity_t		*re;
;108:	vec3_t			velocity, xvelocity;
;109:	vec3_t			offset, xoffset;
;110:	vec3_t			v[3];
;111:	int				i;
;112:
;113:	if ( cg_brassTime.integer <= 0 ) {
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
GTI4 $143
line 114
;114:		return;
ADDRGP4 $142
JUMPV
LABELV $143
line 117
;115:	}
;116:
;117:	for ( i = 0; i < 2; i++ ) {
ADDRLP4 92
CNSTI4 0
ASGNI4
LABELV $146
line 118
;118:		float	waterScale = 1.0f;
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
line 120
;119:
;120:		le = CG_AllocLocalEntity();
ADDRLP4 100
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 100
INDIRP4
ASGNP4
line 121
;121:		re = &le->refEntity;
ADDRLP4 64
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 123
;122:
;123:		velocity[0] = 60 + 60 * crandom();
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40
CNSTF4 1114636288
CNSTF4 1073741824
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1114636288
ADDF4
ASGNF4
line 124
;124:		if ( i == 0 ) {
ADDRLP4 92
INDIRI4
CNSTI4 0
NEI4 $150
line 125
;125:			velocity[1] = 40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 126
;126:		} else {
ADDRGP4 $151
JUMPV
LABELV $150
line 127
;127:			velocity[1] = -40 + 10 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+4
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 3256877056
ADDF4
ASGNF4
line 128
;128:		}
LABELV $151
line 129
;129:		velocity[2] = 100 + 50 * crandom();
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 40+8
CNSTF4 1112014848
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 131
;130:
;131:		le->leType = LE_FRAGMENT;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 3
ASGNI4
line 132
;132:		le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 133
;133:		le->endTime = le->startTime + cg_brassTime.integer*3 + cg_brassTime.integer * random();
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 3
ADDRGP4 cg_brassTime+12
INDIRI4
MULI4
ADDI4
CVIF4 4
ADDRGP4 cg_brassTime+12
INDIRI4
CVIF4 4
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 135
;134:
;135:		le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 136
;136:		le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 138
;137:
;138:		AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 140
;139:
;140:		offset[0] = 8;
ADDRLP4 52
CNSTF4 1090519040
ASGNF4
line 141
;141:		offset[1] = 0;
ADDRLP4 52+4
CNSTF4 0
ASGNF4
line 142
;142:		offset[2] = 24;
ADDRLP4 52+8
CNSTF4 1103101952
ASGNF4
line 144
;143:
;144:		xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 52
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 145
;145:		xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 52
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 146
;146:		xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 52
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 52+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 52+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 147
;147:		VectorAdd( cent->lerpOrigin, xoffset, re->origin );
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 72
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 64
INDIRP4
CNSTI4 76
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 148
;148:		VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 149
;149:		if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 64
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 120
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $183
line 150
;150:			waterScale = 0.10f;
ADDRLP4 96
CNSTF4 1036831949
ASGNF4
line 151
;151:		}
LABELV $183
line 153
;152:
;153:		xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 40
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 154
;154:		xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 40
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 155
;155:		xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 40
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 40+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 156
;156:		VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 96
INDIRF4
MULF4
ASGNF4
line 158
;157:
;158:		AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 159
;159:		re->hModel = cgs.media.shotgunBrassModel;
ADDRLP4 64
INDIRP4
CNSTI4 8
ADDP4
ADDRGP4 cgs+956380+428
INDIRI4
ASGNI4
line 160
;160:		le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 162
;161:
;162:		le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 163
;163:		le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 164
;164:		le->angles.trBase[0] = rand()&31;
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 124
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 165
;165:		le->angles.trBase[1] = rand()&31;
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 128
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 166
;166:		le->angles.trBase[2] = rand()&31;
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 132
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 167
;167:		le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 168
;168:		le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 169
;169:		le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 171
;170:
;171:		le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 172
;172:		le->leBounceSoundType = LEBS_SHELL; // LEILEI shell noises
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 3
ASGNI4
line 173
;173:		le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 174
;174:	}
LABELV $147
line 117
ADDRLP4 92
ADDRLP4 92
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 2
LTI4 $146
line 175
;175:}
LABELV $142
endproc CG_ShotgunEjectBrass 136 8
proc CG_NailgunEjectBrass 112 48
line 184
;176:
;177:
;178:
;179:/*
;180:==========================
;181:CG_NailgunEjectBrass
;182:==========================
;183:*/
;184:static void CG_NailgunEjectBrass( centity_t *cent ) {
line 192
;185:	localEntity_t	*smoke;
;186:	vec3_t			origin;
;187:	vec3_t			v[3];
;188:	vec3_t			offset;
;189:	vec3_t			xoffset;
;190:	vec3_t			up;
;191:
;192:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 194
;193:
;194:	offset[0] = 0;
ADDRLP4 0
CNSTF4 0
ASGNF4
line 195
;195:	offset[1] = -12;
ADDRLP4 0+4
CNSTF4 3242196992
ASGNF4
line 196
;196:	offset[2] = 24;
ADDRLP4 0+8
CNSTF4 1103101952
ASGNF4
line 198
;197:
;198:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 48
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+12
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 199
;199:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 48+4
ADDRLP4 0
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 200
;200:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 48+8
ADDRLP4 0
INDIRF4
ADDRLP4 12+8
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 201
;201:	VectorAdd( cent->lerpOrigin, xoffset, origin );
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
ADDRLP4 88
INDIRP4
CNSTI4 816
ADDP4
INDIRF4
ADDRLP4 48
INDIRF4
ADDF4
ASGNF4
ADDRLP4 60+4
ADDRLP4 88
INDIRP4
CNSTI4 820
ADDP4
INDIRF4
ADDRLP4 48+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 60+8
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
INDIRF4
ADDRLP4 48+8
INDIRF4
ADDF4
ASGNF4
line 203
;202:
;203:	VectorSet( up, 0, 0, 64 );
ADDRLP4 92
CNSTF4 0
ASGNF4
ADDRLP4 72
ADDRLP4 92
INDIRF4
ASGNF4
ADDRLP4 72+4
ADDRLP4 92
INDIRF4
ASGNF4
ADDRLP4 72+8
CNSTF4 1115684864
ASGNF4
line 205
;204:
;205:	smoke = CG_SmokePuff( origin, up, 32, 1, 1, 1, 0.33f, 700, cg.time, 0, 0, cgs.media.smokePuffShader );
ADDRLP4 60
ARGP4
ADDRLP4 72
ARGP4
CNSTF4 1107296256
ARGF4
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 96
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1143930880
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 100
CNSTI4 0
ASGNI4
ADDRLP4 100
INDIRI4
ARGI4
ADDRLP4 100
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1272
INDIRI4
ARGI4
ADDRLP4 104
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 84
ADDRLP4 104
INDIRP4
ASGNP4
line 207
;206:	// use the optimized local entity add
;207:	smoke->leType = LE_SCALE_FADE;
ADDRLP4 108
CNSTI4 8
ASGNI4
ADDRLP4 84
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 208
;208:}
LABELV $210
endproc CG_NailgunEjectBrass 112 48
export CG_RailTrail
proc CG_RailTrail 644 16
line 215
;209:
;210:/*
;211:==========================
;212:CG_RailTrail
;213:==========================
;214:*/
;215:void CG_RailTrail (clientInfo_t *ci, vec3_t start, vec3_t end) {
line 227
;216:	vec3_t axis[36], move, move2, next_move, vec, temp;
;217:	float  len;
;218:	int    i, j, skip;
;219: 
;220:	localEntity_t *le;
;221:	refEntity_t   *re;
;222: 
;223:#define RADIUS   4
;224:#define ROTATION 1
;225:#define SPACING  5
;226: 
;227:	start[2] -= 4;
ADDRLP4 516
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 516
INDIRP4
ADDRLP4 516
INDIRP4
INDIRF4
CNSTF4 1082130432
SUBF4
ASGNF4
line 229
;228: 
;229:	le = CG_AllocLocalEntity();
ADDRLP4 520
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 520
INDIRP4
ASGNP4
line 230
;230:	re = &le->refEntity;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 232
;231: 
;232:	le->leType = LE_FADE_RGB;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 233
;233:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 234
;234:	le->endTime = cg.time + cg_railTrailTime.value;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
ADDRGP4 cg_railTrailTime+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 235
;235:	le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 237
;236: 
;237:	re->shaderTime = cg.time / 1000.0f;
ADDRLP4 20
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 238
;238:	re->reType = RT_RAIL_CORE;
ADDRLP4 20
INDIRP4
CNSTI4 4
ASGNI4
line 239
;239:	re->customShader = cgs.media.railCoreShader;
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+956380+436
INDIRI4
ASGNI4
line 241
;240: 
;241:	VectorCopy(start, re->origin);
ADDRLP4 20
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 242
;242:	VectorCopy(end, re->oldorigin);
ADDRLP4 20
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 244
;243: 
;244:	re->shaderRGBA[0] = ci->color1[0] * 255;
ADDRLP4 532
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 536
CNSTF4 1325400064
ASGNF4
ADDRLP4 532
INDIRF4
ADDRLP4 536
INDIRF4
LTF4 $250
ADDRLP4 528
ADDRLP4 532
INDIRF4
ADDRLP4 536
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $251
JUMPV
LABELV $250
ADDRLP4 528
ADDRLP4 532
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $251
ADDRLP4 20
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 528
INDIRU4
CVUU1 4
ASGNU1
line 245
;245:	re->shaderRGBA[1] = ci->color1[1] * 255;
ADDRLP4 544
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 548
CNSTF4 1325400064
ASGNF4
ADDRLP4 544
INDIRF4
ADDRLP4 548
INDIRF4
LTF4 $253
ADDRLP4 540
ADDRLP4 544
INDIRF4
ADDRLP4 548
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $254
JUMPV
LABELV $253
ADDRLP4 540
ADDRLP4 544
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $254
ADDRLP4 20
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 540
INDIRU4
CVUU1 4
ASGNU1
line 246
;246:	re->shaderRGBA[2] = ci->color1[2] * 255;
ADDRLP4 556
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 560
CNSTF4 1325400064
ASGNF4
ADDRLP4 556
INDIRF4
ADDRLP4 560
INDIRF4
LTF4 $256
ADDRLP4 552
ADDRLP4 556
INDIRF4
ADDRLP4 560
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $257
JUMPV
LABELV $256
ADDRLP4 552
ADDRLP4 556
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $257
ADDRLP4 20
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 552
INDIRU4
CVUU1 4
ASGNU1
line 247
;247:	re->shaderRGBA[3] = 255;
ADDRLP4 20
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 249
;248:
;249:	le->color[0] = ci->color1[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
line 250
;250:	le->color[1] = ci->color1[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
line 251
;251:	le->color[2] = ci->color1[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
line 252
;252:	le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 254
;253:
;254:	AxisClear( re->axis );
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 256
;255: 
;256:	if (cg_oldRail.integer)
ADDRGP4 cg_oldRail+12
INDIRI4
CNSTI4 0
EQI4 $258
line 257
;257:	{
line 259
;258:		// nudge down a bit so it isn't exactly in center
;259:		re->origin[2] -= 8;
ADDRLP4 564
ADDRLP4 20
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 564
INDIRP4
ADDRLP4 564
INDIRP4
INDIRF4
CNSTF4 1090519040
SUBF4
ASGNF4
line 260
;260:		re->oldorigin[2] -= 8;
ADDRLP4 568
ADDRLP4 20
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 568
INDIRP4
ADDRLP4 568
INDIRP4
INDIRF4
CNSTF4 1090519040
SUBF4
ASGNF4
line 261
;261:		return;
ADDRGP4 $242
JUMPV
LABELV $258
line 264
;262:	}
;263:
;264:	VectorCopy (start, move);
ADDRLP4 8
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 265
;265:	VectorSubtract (end, start, vec);
ADDRLP4 564
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 568
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 564
INDIRP4
INDIRF4
ADDRLP4 568
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 572
CNSTI4 4
ASGNI4
ADDRLP4 24+4
ADDRLP4 564
INDIRP4
ADDRLP4 572
INDIRI4
ADDP4
INDIRF4
ADDRLP4 568
INDIRP4
ADDRLP4 572
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 576
CNSTI4 8
ASGNI4
ADDRLP4 24+8
ADDRFP4 8
INDIRP4
ADDRLP4 576
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 576
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 266
;266:	len = VectorNormalize (vec);
ADDRLP4 24
ARGP4
ADDRLP4 580
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 500
ADDRLP4 580
INDIRF4
ASGNF4
line 267
;267:	PerpendicularVector(temp, vec);
ADDRLP4 488
ARGP4
ADDRLP4 24
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 268
;268:	for (i = 0 ; i < 36; i++)
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $263
line 269
;269:	{
line 270
;270:		RotatePointAroundVector(axis[i], vec, temp, i * 10);//banshee 2.4 was 10
CNSTI4 12
ADDRLP4 4
INDIRI4
MULI4
ADDRLP4 40
ADDP4
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 488
ARGP4
CNSTI4 10
ADDRLP4 4
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRGP4 RotatePointAroundVector
CALLV
pop
line 271
;271:	}
LABELV $264
line 268
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 36
LTI4 $263
line 273
;272:
;273:	VectorMA(move, 20, vec, move);
ADDRLP4 584
CNSTF4 1101004800
ASGNF4
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 584
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 584
INDIRF4
ADDRLP4 24+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
CNSTF4 1101004800
ADDRLP4 24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 274
;274:	VectorCopy(move, next_move);
ADDRLP4 504
ADDRLP4 8
INDIRB
ASGNB 12
line 275
;275:	VectorScale (vec, SPACING, vec);
ADDRLP4 588
CNSTF4 1084227584
ASGNF4
ADDRLP4 24
ADDRLP4 588
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 588
INDIRF4
ADDRLP4 24+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 24+8
CNSTF4 1084227584
ADDRLP4 24+8
INDIRF4
MULF4
ASGNF4
line 277
;276:
;277:	skip = -1;
ADDRLP4 484
CNSTI4 -1
ASGNI4
line 279
;278: 
;279:	j = 18;
ADDRLP4 36
CNSTI4 18
ASGNI4
line 280
;280:	for (i = 0; i < len; i += SPACING)
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $280
JUMPV
LABELV $277
line 281
;281:	{
line 282
;282:		if (i != skip)
ADDRLP4 4
INDIRI4
ADDRLP4 484
INDIRI4
EQI4 $281
line 283
;283:		{
line 284
;284:			skip = i + SPACING;
ADDRLP4 484
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
line 285
;285:			le = CG_AllocLocalEntity();
ADDRLP4 592
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 592
INDIRP4
ASGNP4
line 286
;286:			re = &le->refEntity;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 287
;287:			le->leFlags = LEF_PUFF_DONT_SCALE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 1
ASGNI4
line 288
;288:			le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 5
ASGNI4
line 289
;289:			le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 290
;290:			le->endTime = cg.time + (i>>1) + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 1
RSHI4
ADDI4
CNSTI4 600
ADDI4
ASGNI4
line 291
;291:			le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 293
;292:
;293:			re->shaderTime = cg.time / 1000.0f;
ADDRLP4 20
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 294
;294:			re->reType = RT_SPRITE;
ADDRLP4 20
INDIRP4
CNSTI4 2
ASGNI4
line 295
;295:			re->radius = 1.1f;
ADDRLP4 20
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1066192077
ASGNF4
line 296
;296:			re->customShader = cgs.media.railRingsShader;
ADDRLP4 20
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+956380+432
INDIRI4
ASGNI4
line 298
;297:
;298:			re->shaderRGBA[0] = ci->color2[0] * 255;
ADDRLP4 604
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 608
CNSTF4 1325400064
ASGNF4
ADDRLP4 604
INDIRF4
ADDRLP4 608
INDIRF4
LTF4 $289
ADDRLP4 600
ADDRLP4 604
INDIRF4
ADDRLP4 608
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $290
JUMPV
LABELV $289
ADDRLP4 600
ADDRLP4 604
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $290
ADDRLP4 20
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 600
INDIRU4
CVUU1 4
ASGNU1
line 299
;299:			re->shaderRGBA[1] = ci->color2[1] * 255;
ADDRLP4 616
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 620
CNSTF4 1325400064
ASGNF4
ADDRLP4 616
INDIRF4
ADDRLP4 620
INDIRF4
LTF4 $292
ADDRLP4 612
ADDRLP4 616
INDIRF4
ADDRLP4 620
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $293
JUMPV
LABELV $292
ADDRLP4 612
ADDRLP4 616
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $293
ADDRLP4 20
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 612
INDIRU4
CVUU1 4
ASGNU1
line 300
;300:			re->shaderRGBA[2] = ci->color2[2] * 255;
ADDRLP4 628
CNSTF4 1132396544
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 632
CNSTF4 1325400064
ASGNF4
ADDRLP4 628
INDIRF4
ADDRLP4 632
INDIRF4
LTF4 $295
ADDRLP4 624
ADDRLP4 628
INDIRF4
ADDRLP4 632
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $296
JUMPV
LABELV $295
ADDRLP4 624
ADDRLP4 628
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $296
ADDRLP4 20
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 624
INDIRU4
CVUU1 4
ASGNU1
line 301
;301:			re->shaderRGBA[3] = 255;
ADDRLP4 20
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 303
;302:
;303:			le->color[0] = ci->color2[0] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
MULF4
ASGNF4
line 304
;304:			le->color[1] = ci->color2[1] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
MULF4
ASGNF4
line 305
;305:			le->color[2] = ci->color2[2] * 0.75;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1061158912
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
MULF4
ASGNF4
line 306
;306:			le->color[3] = 1.0f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 308
;307:
;308:			le->pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 2
ASGNI4
line 309
;309:			le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 311
;310:
;311:			VectorCopy( move, move2);
ADDRLP4 472
ADDRLP4 8
INDIRB
ASGNB 12
line 312
;312:			VectorMA(move2, RADIUS , axis[j], move2);
ADDRLP4 636
CNSTF4 1082130432
ASGNF4
ADDRLP4 640
CNSTI4 12
ADDRLP4 36
INDIRI4
MULI4
ASGNI4
ADDRLP4 472
ADDRLP4 472
INDIRF4
ADDRLP4 636
INDIRF4
ADDRLP4 640
INDIRI4
ADDRLP4 40
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 472+4
ADDRLP4 472+4
INDIRF4
ADDRLP4 636
INDIRF4
ADDRLP4 640
INDIRI4
ADDRLP4 40+4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 472+8
ADDRLP4 472+8
INDIRF4
CNSTF4 1082130432
CNSTI4 12
ADDRLP4 36
INDIRI4
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 313
;313:			VectorCopy(move2, le->pos.trBase);
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 472
INDIRB
ASGNB 12
line 315
;314:
;315:			le->pos.trDelta[0] = axis[j][0]*6;
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1086324736
CNSTI4 12
ADDRLP4 36
INDIRI4
MULI4
ADDRLP4 40
ADDP4
INDIRF4
MULF4
ASGNF4
line 316
;316:			le->pos.trDelta[1] = axis[j][1]*6;
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
CNSTF4 1086324736
CNSTI4 12
ADDRLP4 36
INDIRI4
MULI4
ADDRLP4 40+4
ADDP4
INDIRF4
MULF4
ASGNF4
line 317
;317:			le->pos.trDelta[2] = axis[j][2]*6;
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
CNSTF4 1086324736
CNSTI4 12
ADDRLP4 36
INDIRI4
MULI4
ADDRLP4 40+8
ADDP4
INDIRF4
MULF4
ASGNF4
line 318
;318:		}
LABELV $281
line 320
;319:
;320:		VectorAdd (move, vec, move);
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRLP4 24
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 8+4
INDIRF4
ADDRLP4 24+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 24+8
INDIRF4
ADDF4
ASGNF4
line 322
;321:
;322:		j = (j + ROTATION) % 36;
ADDRLP4 36
ADDRLP4 36
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 36
MODI4
ASGNI4
line 323
;323:	}
LABELV $278
line 280
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 5
ADDI4
ASGNI4
LABELV $280
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 500
INDIRF4
LTF4 $277
line 324
;324:}
LABELV $242
endproc CG_RailTrail 644 16
export CG_PhysgunTrail
proc CG_PhysgunTrail 144 8
line 331
;325:
;326:/*
;327:==========================
;328:CG_PhysgunTrail
;329:==========================
;330:*/
;331:void CG_PhysgunTrail (clientInfo_t *ci, vec3_t start, vec3_t end) {
line 338
;332:	vec3_t move, move2, next_move, vec, temp;
;333:	float  len;
;334: 
;335:	localEntity_t *le;
;336:	refEntity_t   *re;
;337: 
;338:	le = CG_AllocLocalEntity();
ADDRLP4 72
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 72
INDIRP4
ASGNP4
line 339
;339:	re = &le->refEntity;
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 341
;340: 
;341:	le->leType = LE_FADE_RGB;
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 342
;342:	le->startTime = cg.time;
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 343
;343:	le->endTime = cg.time + 60;	//Physgun DELAY
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 60
ADDI4
ASGNI4
line 344
;344:	le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 12
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 346
;345: 
;346:	re->shaderTime = cg.time / 60.0f;
ADDRLP4 16
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
CNSTF4 1114636288
DIVF4
ASGNF4
line 347
;347:	re->reType = RT_RAIL_CORE;
ADDRLP4 16
INDIRP4
CNSTI4 4
ASGNI4
line 348
;348:	re->customShader = cgs.media.railCoreShader;
ADDRLP4 16
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+956380+436
INDIRI4
ASGNI4
line 350
;349: 
;350:	VectorCopy(start, re->origin);
ADDRLP4 16
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 351
;351:	VectorCopy(end, re->oldorigin);
ADDRLP4 16
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 353
;352: 
;353:	re->shaderRGBA[0] = ci->pg_red;
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 88
CNSTF4 1325400064
ASGNF4
ADDRLP4 84
INDIRF4
ADDRLP4 88
INDIRF4
LTF4 $319
ADDRLP4 80
ADDRLP4 84
INDIRF4
ADDRLP4 88
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $320
JUMPV
LABELV $319
ADDRLP4 80
ADDRLP4 84
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $320
ADDRLP4 16
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 80
INDIRU4
CVUU1 4
ASGNU1
line 354
;354:	re->shaderRGBA[1] = ci->pg_green;
ADDRLP4 96
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRF4
ASGNF4
ADDRLP4 100
CNSTF4 1325400064
ASGNF4
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRF4
LTF4 $322
ADDRLP4 92
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $323
JUMPV
LABELV $322
ADDRLP4 92
ADDRLP4 96
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $323
ADDRLP4 16
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 92
INDIRU4
CVUU1 4
ASGNU1
line 355
;355:	re->shaderRGBA[2] = ci->pg_blue;
ADDRLP4 108
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRF4
ASGNF4
ADDRLP4 112
CNSTF4 1325400064
ASGNF4
ADDRLP4 108
INDIRF4
ADDRLP4 112
INDIRF4
LTF4 $325
ADDRLP4 104
ADDRLP4 108
INDIRF4
ADDRLP4 112
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $326
JUMPV
LABELV $325
ADDRLP4 104
ADDRLP4 108
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $326
ADDRLP4 16
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 104
INDIRU4
CVUU1 4
ASGNU1
line 356
;356:	re->shaderRGBA[3] = 255;
ADDRLP4 16
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 358
;357:
;358:	le->color[0] = (ci->pg_red / 255);
ADDRLP4 12
INDIRP4
CNSTI4 108
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
CNSTF4 1132396544
DIVF4
ASGNF4
line 359
;359:	le->color[1] = (ci->pg_green / 255);
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRF4
CNSTF4 1132396544
DIVF4
ASGNF4
line 360
;360:	le->color[2] = (ci->pg_blue / 255);
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 144
ADDP4
INDIRF4
CNSTF4 1132396544
DIVF4
ASGNF4
line 361
;361:	le->color[3] = 1.0f;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 363
;362:
;363:	AxisClear( re->axis );
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 365
;364:
;365:	VectorCopy (start, move);
ADDRLP4 20
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 366
;366:	VectorSubtract (end, start, vec);
ADDRLP4 116
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 120
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 116
INDIRP4
INDIRF4
ADDRLP4 120
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 124
CNSTI4 4
ASGNI4
ADDRLP4 0+4
ADDRLP4 116
INDIRP4
ADDRLP4 124
INDIRI4
ADDP4
INDIRF4
ADDRLP4 120
INDIRP4
ADDRLP4 124
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 128
CNSTI4 8
ASGNI4
ADDRLP4 0+8
ADDRFP4 8
INDIRP4
ADDRLP4 128
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 128
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 367
;367:	len = VectorNormalize (vec);
ADDRLP4 0
ARGP4
ADDRLP4 132
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 56
ADDRLP4 132
INDIRF4
ASGNF4
line 368
;368:	PerpendicularVector(temp, vec);
ADDRLP4 44
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 370
;369:
;370:	VectorMA(move, 20, vec, move);
ADDRLP4 136
CNSTF4 1101004800
ASGNF4
ADDRLP4 20
ADDRLP4 20
INDIRF4
ADDRLP4 136
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 20+4
ADDRLP4 20+4
INDIRF4
ADDRLP4 136
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 20+8
ADDRLP4 20+8
INDIRF4
CNSTF4 1101004800
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 371
;371:	VectorCopy(move, next_move);
ADDRLP4 32
ADDRLP4 20
INDIRB
ASGNB 12
line 372
;372:	VectorScale (vec, SPACING, vec);
ADDRLP4 140
CNSTF4 1084227584
ASGNF4
ADDRLP4 0
ADDRLP4 140
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 140
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1084227584
ADDRLP4 0+8
INDIRF4
MULF4
ASGNF4
line 373
;373:}
LABELV $312
endproc CG_PhysgunTrail 144 8
export CG_GravitygunTrail
proc CG_GravitygunTrail 108 8
line 380
;374:
;375:/*
;376:==========================
;377:CG_GravitygunTrail
;378:==========================
;379:*/
;380:void CG_GravitygunTrail (clientInfo_t *ci, vec3_t start, vec3_t end) {
line 387
;381:	vec3_t move, move2, next_move, vec, temp;
;382:	float  len;
;383: 
;384:	localEntity_t *le;
;385:	refEntity_t   *re;
;386: 
;387:	le = CG_AllocLocalEntity();
ADDRLP4 72
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 72
INDIRP4
ASGNP4
line 388
;388:	re = &le->refEntity;
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 390
;389: 
;390:	le->leType = LE_FADE_RGB;
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 7
ASGNI4
line 391
;391:	le->startTime = cg.time;
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 392
;392:	le->endTime = cg.time + 60;	//Physgun DELAY
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 60
ADDI4
ASGNI4
line 393
;393:	le->lifeRate = 1.0 / (le->endTime - le->startTime);
ADDRLP4 12
INDIRP4
CNSTI4 28
ADDP4
CNSTF4 1065353216
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 395
;394: 
;395:	re->shaderTime = cg.time / 60.0f;
ADDRLP4 16
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
CNSTF4 1114636288
DIVF4
ASGNF4
line 396
;396:	re->reType = RT_RAIL_CORE;
ADDRLP4 16
INDIRP4
CNSTI4 4
ASGNI4
line 397
;397:	re->customShader = cgs.media.railCoreShader;
ADDRLP4 16
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+956380+436
INDIRI4
ASGNI4
line 399
;398: 
;399:	VectorCopy(start, re->origin);
ADDRLP4 16
INDIRP4
CNSTI4 68
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 400
;400:	VectorCopy(end, re->oldorigin);
ADDRLP4 16
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 402
;401: 
;402:	re->shaderRGBA[0] = 120.0f;
ADDRLP4 16
INDIRP4
CNSTI4 116
ADDP4
CNSTU1 120
ASGNU1
line 403
;403:	re->shaderRGBA[1] = 60.0f;
ADDRLP4 16
INDIRP4
CNSTI4 117
ADDP4
CNSTU1 60
ASGNU1
line 404
;404:	re->shaderRGBA[2] = 0.0f;
ADDRLP4 16
INDIRP4
CNSTI4 118
ADDP4
CNSTU1 0
ASGNU1
line 405
;405:	re->shaderRGBA[3] = 255;
ADDRLP4 16
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 255
ASGNU1
line 407
;406:
;407:	le->color[0] = (120.0f / 255);
ADDRLP4 12
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1055977713
ASGNF4
line 408
;408:	le->color[1] = (60.0f / 255);
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1047589105
ASGNF4
line 409
;409:	le->color[2] = (0.0f / 255);
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 0
ASGNF4
line 410
;410:	le->color[3] = 1.0f;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1065353216
ASGNF4
line 412
;411:
;412:	AxisClear( re->axis );
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 414
;413:
;414:	VectorCopy (start, move);
ADDRLP4 20
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 415
;415:	VectorSubtract (end, start, vec);
ADDRLP4 80
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 84
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 80
INDIRP4
INDIRF4
ADDRLP4 84
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 88
CNSTI4 4
ASGNI4
ADDRLP4 0+4
ADDRLP4 80
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
ADDRLP4 84
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 92
CNSTI4 8
ASGNI4
ADDRLP4 0+8
ADDRFP4 8
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 416
;416:	len = VectorNormalize (vec);
ADDRLP4 0
ARGP4
ADDRLP4 96
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 56
ADDRLP4 96
INDIRF4
ASGNF4
line 417
;417:	PerpendicularVector(temp, vec);
ADDRLP4 44
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 419
;418:
;419:	VectorMA(move, 20, vec, move);
ADDRLP4 100
CNSTF4 1101004800
ASGNF4
ADDRLP4 20
ADDRLP4 20
INDIRF4
ADDRLP4 100
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 20+4
ADDRLP4 20+4
INDIRF4
ADDRLP4 100
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 20+8
ADDRLP4 20+8
INDIRF4
CNSTF4 1101004800
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 420
;420:	VectorCopy(move, next_move);
ADDRLP4 32
ADDRLP4 20
INDIRB
ASGNB 12
line 421
;421:	VectorScale (vec, SPACING, vec);
ADDRLP4 104
CNSTF4 1084227584
ASGNF4
ADDRLP4 0
ADDRLP4 104
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 104
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1084227584
ADDRLP4 0+8
INDIRF4
MULF4
ASGNF4
line 422
;422:}
LABELV $339
endproc CG_GravitygunTrail 108 8
proc CG_OldRocketTrail 96 48
line 429
;423:
;424:/*
;425:==========================
;426:CG_OldRocketTrail	(for the crappy old rocket trail.)
;427:==========================
;428:*/
;429:static void CG_OldRocketTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 439
;430:	int		step;
;431:	vec3_t	origin, lastPos;
;432:	int		t;
;433:	int		startTime, contents;
;434:	int		lastContents;
;435:	entityState_t	*es;
;436:	vec3_t	up;
;437:	localEntity_t	*smoke;
;438:
;439:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $358
line 440
;440:		return;
ADDRGP4 $357
JUMPV
LABELV $358
line 443
;441:	}
;442:
;443:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 444
;444:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 445
;445:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 447
;446:
;447:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 449
;448:
;449:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 450
;450:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
ASGNI4
line 451
;451:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 453
;452:
;453:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 454
;454:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 457
;455:
;456:	// if object (e.g. grenade) is stationary, don't toss up smoke
;457:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $364
line 458
;458:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 459
;459:		return;
ADDRGP4 $357
JUMPV
LABELV $364
line 462
;460:	}
;461:
;462:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 463
;463:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 465
;464:
;465:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 467
;466:
;467:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $375
line 468
;468:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $357
line 469
;469:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 470
;470:		}
line 471
;471:		return;
ADDRGP4 $357
JUMPV
line 474
;472:	}
;473:
;474:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $372
line 475
;475:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 477
;476:
;477:		smoke = CG_SmokePuff( lastPos, up, 
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
ADDRLP4 80
CNSTF4 1065353216
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1272
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 88
INDIRP4
ASGNP4
line 486
;478:					  wi->trailRadius, 
;479:					  1, 1, 1, 0.33f,
;480:					  wi->wiTrailTime, 
;481:					  t,
;482:					  0,
;483:					  0, 
;484:					  cgs.media.smokePuffShader );
;485:		// use the optimized local entity add
;486:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 92
CNSTI4 8
ASGNI4
ADDRLP4 16
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
ADDRLP4 92
INDIRI4
ASGNI4
line 487
;487:	}
LABELV $373
line 474
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $375
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
LEI4 $372
line 489
;488:
;489:}
LABELV $357
endproc CG_OldRocketTrail 96 48
proc CG_LeiSmokeTrail 152 48
line 497
;490:
;491:/*
;492:==========================
;493:CG_LeiSmokeTrail 
;494:==========================
;495:*/
;496:
;497:static void CG_LeiSmokeTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 509
;498:	int		step;
;499:	vec3_t	origin, lastPos;
;500:	int		t;
;501:	int		startTime, contents;
;502:	int		lastContents;
;503:	entityState_t	*es;
;504:	vec3_t	up;
;505:	localEntity_t	*smoke;
;506:	int		therando;
;507:	int		theradio;
;508:
;509:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $379
line 510
;510:		return;
ADDRGP4 $378
JUMPV
LABELV $379
line 513
;511:	}
;512:
;513:	up[0] = 5 - 10 * crandom();
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
CNSTF4 1084227584
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 72
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 514
;514:	up[1] = 5 - 10 * crandom();
ADDRLP4 76
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32+4
CNSTF4 1084227584
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 76
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 515
;515:	up[2] = 8 - 5 * crandom();
ADDRLP4 80
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32+8
CNSTF4 1090519040
CNSTF4 1084227584
CNSTF4 1073741824
ADDRLP4 80
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 517
;516:
;517:	step = 18;
ADDRLP4 24
CNSTI4 18
ASGNI4
line 519
;518:
;519:	es = &ent->currentState;
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
line 520
;520:	startTime = ent->trailTime;
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
ASGNI4
line 521
;521:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 24
INDIRI4
ADDRLP4 64
INDIRI4
ADDRLP4 24
INDIRI4
ADDI4
ADDRLP4 24
INDIRI4
DIVI4
MULI4
ASGNI4
line 523
;522:
;523:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 52
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 524
;524:	contents = CG_PointContents( origin, -1 );
ADDRLP4 52
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 88
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 48
ADDRLP4 88
INDIRI4
ASGNI4
line 527
;525:
;526:	// if object (e.g. grenade) is stationary, don't toss up smoke
;527:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $385
line 528
;528:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 529
;529:		return;
ADDRGP4 $378
JUMPV
LABELV $385
line 532
;530:	}
;531:
;532:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 533
;533:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 8
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 92
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 68
ADDRLP4 92
INDIRI4
ASGNI4
line 535
;534:
;535:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 537
;536:
;537:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 48
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $396
line 538
;538:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 48
INDIRI4
ADDRLP4 68
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $378
line 539
;539:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 8
ARGP4
ADDRLP4 52
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 540
;540:		}
line 541
;541:		return;
ADDRGP4 $378
JUMPV
line 544
;542:	}
;543:
;544:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $393
line 545
;545:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 546
;546:		therando = crandom() * 4;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 4
CNSTF4 1082130432
CNSTF4 1073741824
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CVFI4 4
ASGNI4
line 548
;547:		
;548:		theradio =  wi->trailRadius * (rand() * 0.7); // what is this doing here
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44
ADDRFP4 4
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 1060320051
ADDRLP4 100
INDIRI4
CVIF4 4
MULF4
MULF4
CVFI4 4
ASGNI4
line 549
;549:	if (therando == 3)		smoke = CG_SmokePuff( lastPos, up, 27, 1, 1, 1, 0.9f, wi->wiTrailTime,  t, 0, 0,  cgs.media.lsmkShader1 );
ADDRLP4 4
INDIRI4
CNSTI4 3
NEI4 $397
ADDRLP4 8
ARGP4
ADDRLP4 32
ARGP4
CNSTF4 1104674816
ARGF4
ADDRLP4 104
CNSTF4 1065353216
ASGNF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 104
INDIRF4
ARGF4
CNSTF4 1063675494
ARGF4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 108
CNSTI4 0
ASGNI4
ADDRLP4 108
INDIRI4
ARGI4
ADDRLP4 108
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1304
INDIRI4
ARGI4
ADDRLP4 112
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 112
INDIRP4
ASGNP4
ADDRGP4 $398
JUMPV
LABELV $397
line 550
;550:	else if (therando == 1)		smoke = CG_SmokePuff( lastPos, up, 27, 1, 1, 1, 0.9f, wi->wiTrailTime,  t, 0, 0,  cgs.media.lsmkShader2 );
ADDRLP4 4
INDIRI4
CNSTI4 1
NEI4 $401
ADDRLP4 8
ARGP4
ADDRLP4 32
ARGP4
CNSTF4 1104674816
ARGF4
ADDRLP4 116
CNSTF4 1065353216
ASGNF4
ADDRLP4 116
INDIRF4
ARGF4
ADDRLP4 116
INDIRF4
ARGF4
ADDRLP4 116
INDIRF4
ARGF4
CNSTF4 1063675494
ARGF4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 120
CNSTI4 0
ASGNI4
ADDRLP4 120
INDIRI4
ARGI4
ADDRLP4 120
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1308
INDIRI4
ARGI4
ADDRLP4 124
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 124
INDIRP4
ASGNP4
ADDRGP4 $402
JUMPV
LABELV $401
line 551
;551:	else	if (therando == 2)	smoke = CG_SmokePuff( lastPos, up, 27, 1, 1, 1, 0.9f, wi->wiTrailTime,  t, 0, 0,  cgs.media.lsmkShader3 );
ADDRLP4 4
INDIRI4
CNSTI4 2
NEI4 $405
ADDRLP4 8
ARGP4
ADDRLP4 32
ARGP4
CNSTF4 1104674816
ARGF4
ADDRLP4 128
CNSTF4 1065353216
ASGNF4
ADDRLP4 128
INDIRF4
ARGF4
ADDRLP4 128
INDIRF4
ARGF4
ADDRLP4 128
INDIRF4
ARGF4
CNSTF4 1063675494
ARGF4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 132
CNSTI4 0
ASGNI4
ADDRLP4 132
INDIRI4
ARGI4
ADDRLP4 132
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1312
INDIRI4
ARGI4
ADDRLP4 136
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 136
INDIRP4
ASGNP4
ADDRGP4 $406
JUMPV
LABELV $405
line 552
;552:	else				smoke = CG_SmokePuff( lastPos, up, 27, 1, 1, 1, 0.9f, wi->wiTrailTime,  t, 0, 0,  cgs.media.lsmkShader4 );
ADDRLP4 8
ARGP4
ADDRLP4 32
ARGP4
CNSTF4 1104674816
ARGF4
ADDRLP4 140
CNSTF4 1065353216
ASGNF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 140
INDIRF4
ARGF4
CNSTF4 1063675494
ARGF4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 144
CNSTI4 0
ASGNI4
ADDRLP4 144
INDIRI4
ARGI4
ADDRLP4 144
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1316
INDIRI4
ARGI4
ADDRLP4 148
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 20
ADDRLP4 148
INDIRP4
ASGNP4
LABELV $406
LABELV $402
LABELV $398
line 554
;553:		// use the optimized local entity add
;554:		smoke->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 5
ASGNI4
line 556
;555:		//smoke->trType = TR_GRAVITY;
;556:	}
LABELV $394
line 544
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
ADDI4
ASGNI4
LABELV $396
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
LEI4 $393
line 558
;557:
;558:}
LABELV $378
endproc CG_LeiSmokeTrail 152 48
proc CG_LeiPlasmaTrail 92 48
line 561
;559:
;560:
;561:static void CG_LeiPlasmaTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 571
;562:	int		step;
;563:	vec3_t	origin, lastPos;
;564:	int		t;
;565:	int		startTime, contents;
;566:	int		lastContents;
;567:	entityState_t	*es;
;568:	vec3_t	up;
;569:	localEntity_t	*smoke;
;570:
;571:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $412
line 572
;572:		return;
ADDRGP4 $411
JUMPV
LABELV $412
line 575
;573:	}
;574:
;575:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 576
;576:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 577
;577:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 579
;578:
;579:	step = 16;
ADDRLP4 20
CNSTI4 16
ASGNI4
line 581
;580:
;581:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 582
;582:	startTime = ent->trailTime;
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
ASGNI4
line 583
;583:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 52
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 585
;584:
;585:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 40
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 586
;586:	contents = CG_PointContents( origin, -1 );
ADDRLP4 40
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 68
INDIRI4
ASGNI4
line 589
;587:
;588:	// if object (e.g. grenade) is stationary, don't toss up smoke
;589:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $418
line 590
;590:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 591
;591:		return;
ADDRGP4 $411
JUMPV
LABELV $418
line 594
;592:	}
;593:
;594:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 595
;595:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 597
;596:
;597:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 599
;598:
;599:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 56
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $427
line 600
;600:		return;
ADDRGP4 $411
JUMPV
line 603
;601:	}
;602:
;603:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $424
line 604
;604:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 606
;605:
;606:		smoke = CG_SmokePuff( lastPos, up, 27, 1, 1, 1, 0.9f, wi->wiTrailTime,  t, 0, 0,  cgs.media.lsmkShader1 );
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
CNSTF4 1104674816
ARGF4
ADDRLP4 76
CNSTF4 1065353216
ASGNF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
CNSTF4 1063675494
ARGF4
ADDRFP4 4
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 80
CNSTI4 0
ASGNI4
ADDRLP4 80
INDIRI4
ARGI4
ADDRLP4 80
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1304
INDIRI4
ARGI4
ADDRLP4 84
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 84
INDIRP4
ASGNP4
line 608
;607:		// use the optimized local entity add
;608:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 88
CNSTI4 8
ASGNI4
ADDRLP4 16
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
ADDRLP4 88
INDIRI4
ASGNI4
line 610
;609:		//smoke->trType = TR_GRAVITY;
;610:	}
LABELV $425
line 603
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $427
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
LEI4 $424
line 612
;611:
;612:}
LABELV $411
endproc CG_LeiPlasmaTrail 92 48
proc CG_NailTrail 96 48
line 621
;613:
;614:
;615:
;616:/*
;617:==========================
;618:CG_NailTrail
;619:==========================
;620:*/
;621:static void CG_NailTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 631
;622:	int		step;
;623:	vec3_t	origin, lastPos;
;624:	int		t;
;625:	int		startTime, contents;
;626:	int		lastContents;
;627:	entityState_t	*es;
;628:	vec3_t	up;
;629:	localEntity_t	*smoke;
;630:
;631:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $431
line 632
;632:		return;
ADDRGP4 $430
JUMPV
LABELV $431
line 635
;633:	}
;634:
;635:	up[0] = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
line 636
;636:	up[1] = 0;
ADDRLP4 28+4
CNSTF4 0
ASGNF4
line 637
;637:	up[2] = 0;
ADDRLP4 28+8
CNSTF4 0
ASGNF4
line 639
;638:
;639:	step = 50;
ADDRLP4 20
CNSTI4 50
ASGNI4
line 641
;640:
;641:	es = &ent->currentState;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
line 642
;642:	startTime = ent->trailTime;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
ASGNI4
line 643
;643:	t = step * ( (startTime + step) / step );
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 56
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ADDRLP4 20
INDIRI4
DIVI4
MULI4
ASGNI4
line 645
;644:
;645:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 44
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 646
;646:	contents = CG_PointContents( origin, -1 );
ADDRLP4 44
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 68
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 68
INDIRI4
ASGNI4
line 649
;647:
;648:	// if object (e.g. grenade) is stationary, don't toss up smoke
;649:	if ( es->pos.trType == TR_STATIONARY ) {
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $437
line 650
;650:		ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 651
;651:		return;
ADDRGP4 $430
JUMPV
LABELV $437
line 654
;652:	}
;653:
;654:	BG_EvaluateTrajectory( &es->pos, ent->trailTime, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 655
;655:	lastContents = CG_PointContents( lastPos, -1 );
ADDRLP4 4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 72
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 60
ADDRLP4 72
INDIRI4
ASGNI4
line 657
;656:
;657:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 659
;658:
;659:	if ( contents & ( CONTENTS_WATER | CONTENTS_SLIME | CONTENTS_LAVA ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $448
line 660
;660:		if ( contents & lastContents & CONTENTS_WATER ) {
ADDRLP4 40
INDIRI4
ADDRLP4 60
INDIRI4
BANDI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $430
line 661
;661:			CG_BubbleTrail( lastPos, origin, 8 );
ADDRLP4 4
ARGP4
ADDRLP4 44
ARGP4
CNSTF4 1090519040
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 662
;662:		}
line 663
;663:		return;
ADDRGP4 $430
JUMPV
line 666
;664:	}
;665:
;666:	for ( ; t <= ent->trailTime ; t += step ) {
LABELV $445
line 667
;667:		BG_EvaluateTrajectory( &es->pos, t, lastPos );
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 669
;668:
;669:		smoke = CG_SmokePuff( lastPos, up, 
ADDRLP4 4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
ARGF4
ADDRLP4 80
CNSTF4 1065353216
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
ADDRLP4 76
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
ARGF4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 84
CNSTI4 0
ASGNI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRLP4 84
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1384
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 88
INDIRP4
ASGNP4
line 678
;670:					  wi->trailRadius, 
;671:					  1, 1, 1, 0.33f,
;672:					  wi->wiTrailTime, 
;673:					  t,
;674:					  0,
;675:					  0, 
;676:					  cgs.media.nailPuffShader );
;677:		// use the optimized local entity add
;678:		smoke->leType = LE_SCALE_FADE;
ADDRLP4 92
CNSTI4 8
ASGNI4
ADDRLP4 16
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
ADDRLP4 92
INDIRI4
ASGNI4
line 679
;679:	}
LABELV $446
line 666
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
ADDI4
ASGNI4
LABELV $448
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
LEI4 $445
line 681
;680:
;681:}
LABELV $430
endproc CG_NailTrail 96 48
proc CG_OldPlasmaTrail 200 12
line 689
;682:
;683:
;684:/*
;685:==========================
;686:CG_NailTrail
;687:==========================
;688:*/
;689:static void CG_OldPlasmaTrail( centity_t *cent, const weaponInfo_t *wi ) {
line 698
;690:	localEntity_t	*le;
;691:	refEntity_t		*re;
;692:	entityState_t	*es;
;693:	vec3_t			velocity, xvelocity, origin;
;694:	vec3_t			offset, xoffset;
;695:	vec3_t			v[3];
;696:	int				t, startTime, step;
;697:
;698:	float	waterScale = 1.0f;
ADDRLP4 92
CNSTF4 1065353216
ASGNF4
line 700
;699:
;700:	if ( cg_noProjectileTrail.integer ) {
ADDRGP4 cg_noProjectileTrail+12
INDIRI4
CNSTI4 0
EQI4 $452
line 701
;701:		return;
ADDRGP4 $451
JUMPV
LABELV $452
line 704
;702:	}
;703:
;704:	step = 50;
ADDRLP4 108
CNSTI4 50
ASGNI4
line 706
;705:
;706:	es = &cent->currentState;
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
line 707
;707:	startTime = cent->trailTime;
ADDRLP4 116
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
ASGNI4
line 708
;708:	t = step * ( (startTime + step) / step );
ADDRLP4 120
ADDRLP4 108
INDIRI4
ADDRLP4 116
INDIRI4
ADDRLP4 108
INDIRI4
ADDI4
ADDRLP4 108
INDIRI4
DIVI4
MULI4
ASGNI4
line 710
;709:
;710:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 112
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 96
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 712
;711:
;712:	le = CG_AllocLocalEntity();
ADDRLP4 128
ADDRGP4 CG_AllocLocalEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 128
INDIRP4
ASGNP4
line 713
;713:	re = &le->refEntity;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 156
ADDP4
ASGNP4
line 715
;714:
;715:	velocity[0] = 60 - 120 * crandom();
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44
CNSTF4 1114636288
CNSTF4 1123024896
CNSTF4 1073741824
ADDRLP4 132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 716
;716:	velocity[1] = 40 - 80 * crandom();
ADDRLP4 136
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+4
CNSTF4 1109393408
CNSTF4 1117782016
CNSTF4 1073741824
ADDRLP4 136
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 717
;717:	velocity[2] = 100 - 200 * crandom();
ADDRLP4 140
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 44+8
CNSTF4 1120403456
CNSTF4 1128792064
CNSTF4 1073741824
ADDRLP4 140
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
SUBF4
ASGNF4
line 719
;718:
;719:	le->leType = LE_MOVE_SCALE_FADE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 5
ASGNI4
line 720
;720:	le->leFlags = LEF_TUMBLE;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 721
;721:	le->leBounceSoundType = LEBS_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 722
;722:	le->leMarkType = LEMT_NONE;
ADDRLP4 0
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 724
;723:
;724:	le->startTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 725
;725:	le->endTime = le->startTime + 600;
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 600
ADDI4
ASGNI4
line 727
;726:
;727:	le->pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
CNSTI4 5
ASGNI4
line 728
;728:	le->pos.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 730
;729:
;730:	AnglesToAxis( cent->lerpAngles, v );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 732
;731:
;732:	offset[0] = 2;
ADDRLP4 56
CNSTF4 1073741824
ASGNF4
line 733
;733:	offset[1] = 2;
ADDRLP4 56+4
CNSTF4 1073741824
ASGNF4
line 734
;734:	offset[2] = 2;
ADDRLP4 56+8
CNSTF4 1073741824
ASGNF4
line 736
;735:
;736:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
ADDRLP4 80
ADDRLP4 56
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 737
;737:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
ADDRLP4 80+4
ADDRLP4 56
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 738
;738:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
ADDRLP4 80+8
ADDRLP4 56
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 56+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 56+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 740
;739:
;740:	VectorAdd( origin, xoffset, re->origin );
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 96
INDIRF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 96+4
INDIRF4
ADDRLP4 80+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 40
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 96+8
INDIRF4
ADDRLP4 80+8
INDIRF4
ADDF4
ASGNF4
line 741
;741:	VectorCopy( re->origin, le->pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 743
;742:
;743:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
ADDRLP4 40
INDIRP4
CNSTI4 68
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 148
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 148
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $486
line 744
;744:		waterScale = 0.10f;
ADDRLP4 92
CNSTF4 1036831949
ASGNF4
line 745
;745:	}
LABELV $486
line 747
;746:
;747:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
ADDRLP4 68
ADDRLP4 44
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24
INDIRF4
MULF4
ADDF4
ASGNF4
line 748
;748:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
ADDRLP4 68+4
ADDRLP4 44
INDIRF4
ADDRLP4 4+4
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
line 749
;749:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
ADDRLP4 68+8
ADDRLP4 44
INDIRF4
ADDRLP4 4+8
INDIRF4
MULF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 4+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 4+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 750
;750:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 68
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68+4
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 68+8
INDIRF4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 752
;751:
;752:	AxisCopy( axisDefault, re->axis );
ADDRGP4 axisDefault
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 753
;753:    re->shaderTime = cg.time / 1000.0f;
ADDRLP4 40
INDIRP4
CNSTI4 128
ADDP4
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
CNSTF4 1148846080
DIVF4
ASGNF4
line 754
;754:    re->reType = RT_SPRITE;
ADDRLP4 40
INDIRP4
CNSTI4 2
ASGNI4
line 755
;755:    re->radius = 0.25f;
ADDRLP4 40
INDIRP4
CNSTI4 132
ADDP4
CNSTF4 1048576000
ASGNF4
line 756
;756:	re->customShader = cgs.media.railRingsShader;
ADDRLP4 40
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+956380+432
INDIRI4
ASGNI4
line 757
;757:	le->bounceFactor = 0.3f;
ADDRLP4 0
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1050253722
ASGNF4
line 760
;758:
;759:
;760:    re->shaderRGBA[0] = wi->flashDlightColor[0] * 63;
ADDRLP4 156
CNSTF4 1115422720
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 160
CNSTF4 1325400064
ASGNF4
ADDRLP4 156
INDIRF4
ADDRLP4 160
INDIRF4
LTF4 $514
ADDRLP4 152
ADDRLP4 156
INDIRF4
ADDRLP4 160
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $515
JUMPV
LABELV $514
ADDRLP4 152
ADDRLP4 156
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $515
ADDRLP4 40
INDIRP4
CNSTI4 116
ADDP4
ADDRLP4 152
INDIRU4
CVUU1 4
ASGNU1
line 761
;761:    re->shaderRGBA[1] = wi->flashDlightColor[1] * 63;
ADDRLP4 168
CNSTF4 1115422720
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 172
CNSTF4 1325400064
ASGNF4
ADDRLP4 168
INDIRF4
ADDRLP4 172
INDIRF4
LTF4 $517
ADDRLP4 164
ADDRLP4 168
INDIRF4
ADDRLP4 172
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $518
JUMPV
LABELV $517
ADDRLP4 164
ADDRLP4 168
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $518
ADDRLP4 40
INDIRP4
CNSTI4 117
ADDP4
ADDRLP4 164
INDIRU4
CVUU1 4
ASGNU1
line 762
;762:    re->shaderRGBA[2] = wi->flashDlightColor[2] * 63;
ADDRLP4 180
CNSTF4 1115422720
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 184
CNSTF4 1325400064
ASGNF4
ADDRLP4 180
INDIRF4
ADDRLP4 184
INDIRF4
LTF4 $520
ADDRLP4 176
ADDRLP4 180
INDIRF4
ADDRLP4 184
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $521
JUMPV
LABELV $520
ADDRLP4 176
ADDRLP4 180
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $521
ADDRLP4 40
INDIRP4
CNSTI4 118
ADDP4
ADDRLP4 176
INDIRU4
CVUU1 4
ASGNU1
line 763
;763:    re->shaderRGBA[3] = 63;
ADDRLP4 40
INDIRP4
CNSTI4 119
ADDP4
CNSTU1 63
ASGNU1
line 765
;764:
;765:    le->color[0] = wi->flashDlightColor[0] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 108
ADDP4
CNSTF4 1045220557
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
MULF4
ASGNF4
line 766
;766:    le->color[1] = wi->flashDlightColor[1] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 112
ADDP4
CNSTF4 1045220557
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
MULF4
ASGNF4
line 767
;767:    le->color[2] = wi->flashDlightColor[2] * 0.2;
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1045220557
ADDRFP4 4
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
MULF4
ASGNF4
line 768
;768:    le->color[3] = 0.25f;
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1048576000
ASGNF4
line 770
;769:
;770:	le->angles.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 2
ASGNI4
line 771
;771:	le->angles.trTime = cg.time;
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 772
;772:	le->angles.trBase[0] = rand()&31;
ADDRLP4 188
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 188
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 773
;773:	le->angles.trBase[1] = rand()&31;
ADDRLP4 192
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 192
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 774
;774:	le->angles.trBase[2] = rand()&31;
ADDRLP4 196
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 196
INDIRI4
CNSTI4 31
BANDI4
CVIF4 4
ASGNF4
line 775
;775:	le->angles.trDelta[0] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1065353216
ASGNF4
line 776
;776:	le->angles.trDelta[1] = 0.5;
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1056964608
ASGNF4
line 777
;777:	le->angles.trDelta[2] = 0;
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 779
;778:
;779:}
LABELV $451
endproc CG_OldPlasmaTrail 200 12
export CG_GrappleTrail
proc CG_GrappleTrail 220 16
line 785
;780:/*
;781:==========================
;782:CG_GrappleTrail
;783:==========================
;784:*/
;785:void CG_GrappleTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 791
;786:	vec3_t	origin;
;787:	entityState_t	*es;
;788:	vec3_t			forward, up;
;789:	refEntity_t		beam;
;790:
;791:	es = &ent->currentState;
ADDRLP4 200
ADDRFP4 0
INDIRP4
ASGNP4
line 793
;792:
;793:	BG_EvaluateTrajectory( &es->pos, cg.time, origin );
ADDRLP4 200
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 188
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 794
;794:	ent->trailTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 796
;795:
;796:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 798
;797:	//FIXME adjust for muzzle position
;798:	VectorCopy ( cg_entities[ ent->currentState.otherEntityNum ].lerpOrigin, beam.origin );
ADDRLP4 0+68
CNSTI4 928
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities+816
ADDP4
INDIRB
ASGNB 12
line 799
;799:	beam.origin[2] += 26;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 800
;800:	AngleVectors( cg_entities[ ent->currentState.otherEntityNum ].lerpAngles, forward, NULL, up );
CNSTI4 928
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities+828
ADDP4
ARGP4
ADDRLP4 204
ARGP4
CNSTP4 0
ARGP4
ADDRLP4 176
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 801
;801:	VectorMA( beam.origin, -6, up, beam.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
CNSTF4 3233808384
ADDRLP4 176
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
CNSTF4 3233808384
ADDRLP4 176+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 3233808384
ADDRLP4 176+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 802
;802:	VectorCopy( origin, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 188
INDIRB
ASGNB 12
line 804
;803:
;804:	if (Distance( beam.origin, beam.oldorigin ) < 64 )
ADDRLP4 0+68
ARGP4
ADDRLP4 0+84
ARGP4
ADDRLP4 216
ADDRGP4 Distance
CALLF4
ASGNF4
ADDRLP4 216
INDIRF4
CNSTF4 1115684864
GEF4 $544
line 805
;805:		return; // Don't draw if close
ADDRGP4 $523
JUMPV
LABELV $544
line 807
;806:
;807:	beam.reType = RT_RAIL_CORE;
ADDRLP4 0
CNSTI4 4
ASGNI4
line 808
;808:	beam.customShader = cgs.media.grappleShader;
ADDRLP4 0+112
ADDRGP4 cgs+956380+1348
INDIRI4
ASGNI4
line 810
;809:
;810:	AxisClear( beam.axis );
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 811
;811:	beam.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 812
;812:	beam.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 813
;813:	beam.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 814
;814:	beam.shaderRGBA[3] = 0xff;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 815
;815:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 816
;816:}
LABELV $523
endproc CG_GrappleTrail 220 16
proc CG_RocketTrail 0 8
line 824
;817:
;818:/*
;819:==========================
;820:CG_GrenadeTrail
;821:==========================
;822:*/
;823:// LEILEI enhancment
;824:static void CG_RocketTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 826
;825:
;826:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $560
line 827
;827:			CG_LeiSmokeTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_LeiSmokeTrail
CALLV
pop
line 828
;828:		}
ADDRGP4 $561
JUMPV
LABELV $560
line 830
;829:		else
;830:		{	
line 831
;831:			CG_OldRocketTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_OldRocketTrail
CALLV
pop
line 832
;832:		}
LABELV $561
line 833
;833:}
LABELV $559
endproc CG_RocketTrail 0 8
proc CG_PlasmaTrail 0 8
line 835
;834:
;835:static void CG_PlasmaTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 837
;836:
;837:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $564
line 838
;838:			CG_LeiPlasmaTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_LeiPlasmaTrail
CALLV
pop
line 839
;839:		}
ADDRGP4 $565
JUMPV
LABELV $564
line 841
;840:		else
;841:		{	
line 842
;842:			CG_OldPlasmaTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_OldPlasmaTrail
CALLV
pop
line 843
;843:		}
LABELV $565
line 844
;844:}
LABELV $563
endproc CG_PlasmaTrail 0 8
proc CG_GrenadeTrail 0 8
line 847
;845:
;846:
;847:static void CG_GrenadeTrail( centity_t *ent, const weaponInfo_t *wi ) {
line 848
;848:	CG_RocketTrail( ent, wi );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 CG_RocketTrail
CALLV
pop
line 849
;849:}
LABELV $567
endproc CG_GrenadeTrail 0 8
export CG_RegisterWeapon
proc CG_RegisterWeapon 424 12
line 863
;850:
;851:	
;852:
;853:
;854:
;855:
;856:/*
;857:=================
;858:CG_RegisterWeapon
;859:
;860:The server says this item is used on this level
;861:=================
;862:*/
;863:void CG_RegisterWeapon( int weaponNum ) {
line 870
;864:	weaponInfo_t	*weaponInfo;
;865:	gitem_t			*item, *ammo;
;866:	char			path[MAX_QPATH];
;867:	vec3_t			mins, maxs;
;868:	int				i;
;869:
;870:	weaponInfo = &cg_weapons[weaponNum];
ADDRLP4 12
CNSTI4 136
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 872
;871:
;872:	if ( weaponNum == 0 ) {
ADDRFP4 0
INDIRI4
CNSTI4 0
NEI4 $569
line 873
;873:		return;
ADDRGP4 $568
JUMPV
LABELV $569
line 876
;874:	}
;875:
;876:	if ( weaponInfo->registered ) {
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $571
line 877
;877:		return;
ADDRGP4 $568
JUMPV
LABELV $571
line 880
;878:	}
;879:
;880:	memset( weaponInfo, 0, sizeof( *weaponInfo ) );
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 136
ARGI4
ADDRGP4 memset
CALLP4
pop
line 881
;881:	weaponInfo->registered = qtrue;
ADDRLP4 12
INDIRP4
CNSTI4 1
ASGNI4
line 883
;882:
;883:	for ( item = bg_itemlist + 1 ; item->classname ; item++ ) {
ADDRLP4 4
ADDRGP4 bg_itemlist+56
ASGNP4
ADDRGP4 $576
JUMPV
LABELV $573
line 884
;884:		if ( item->giType == IT_WEAPON && item->giTag == weaponNum ) {
ADDRLP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 1
NEI4 $578
ADDRLP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $578
line 885
;885:			weaponInfo->item = item;
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRP4
ASGNP4
line 886
;886:			break;
ADDRGP4 $575
JUMPV
LABELV $578
line 888
;887:		}
;888:	}
LABELV $574
line 883
ADDRLP4 4
ADDRLP4 4
INDIRP4
CNSTI4 56
ADDP4
ASGNP4
LABELV $576
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $573
LABELV $575
line 890
;889:	
;890:	if ( !item->classname ) {
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $580
line 891
;891:		cg.weaponSelect = WEAPONS_NUM;
ADDRGP4 cg+1870440
CNSTI4 19
ASGNI4
line 892
;892:		return;
ADDRGP4 $568
JUMPV
LABELV $580
line 895
;893:		//CG_Error( "Couldn't find weapon %i", weaponNum );
;894:	}
;895:	CG_RegisterItemVisuals( item - bg_itemlist );
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
ARGI4
ADDRGP4 CG_RegisterItemVisuals
CALLV
pop
line 898
;896:
;897:	// load cmodel before model so filecache works
;898:	weaponInfo->weaponModel = trap_R_RegisterModel_MiTech( item->world_model[0] );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ADDRLP4 104
INDIRI4
ASGNI4
line 901
;899:
;900:	// calc midpoint for rotation
;901:	trap_R_ModelBounds( weaponInfo->weaponModel, mins, maxs );
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRLP4 92
ARGP4
ADDRGP4 trap_R_ModelBounds
CALLV
pop
line 902
;902:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $583
line 903
;903:		weaponInfo->weaponMidpoint[i] = mins[i] + 0.5 * ( maxs[i] - mins[i] );
ADDRLP4 108
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 112
ADDRLP4 108
INDIRI4
ADDRLP4 16
ADDP4
INDIRF4
ASGNF4
ADDRLP4 108
INDIRI4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ADDP4
ADDRLP4 112
INDIRF4
CNSTF4 1056964608
ADDRLP4 108
INDIRI4
ADDRLP4 92
ADDP4
INDIRF4
ADDRLP4 112
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 904
;904:	}
LABELV $584
line 902
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $583
line 906
;905:
;906:	weaponInfo->weaponIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 108
INDIRI4
ASGNI4
line 907
;907:	weaponInfo->ammoIcon = trap_R_RegisterShader( item->icon );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 112
INDIRI4
ASGNI4
line 909
;908:
;909:	for ( ammo = bg_itemlist + 1 ; ammo->classname ; ammo++ ) {
ADDRLP4 8
ADDRGP4 bg_itemlist+56
ASGNP4
ADDRGP4 $590
JUMPV
LABELV $587
line 910
;910:		if ( ammo->giType == IT_AMMO && ammo->giTag == weaponNum ) {
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 2
NEI4 $592
ADDRLP4 8
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $592
line 911
;911:			break;
ADDRGP4 $589
JUMPV
LABELV $592
line 913
;912:		}
;913:	}
LABELV $588
line 909
ADDRLP4 8
ADDRLP4 8
INDIRP4
CNSTI4 56
ADDP4
ASGNP4
LABELV $590
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $587
LABELV $589
line 914
;914:	if ( ammo->classname && ammo->world_model[0] ) {
ADDRLP4 120
CNSTU4 0
ASGNU4
ADDRLP4 8
INDIRP4
INDIRP4
CVPU4 4
ADDRLP4 120
INDIRU4
EQU4 $594
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 120
INDIRU4
EQU4 $594
line 915
;915:		weaponInfo->ammoModel = trap_R_RegisterModel_MiTech( ammo->world_model[0] );
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 124
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 916
;916:	}
LABELV $594
line 918
;917:
;918:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 28
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 919
;919:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 28
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 920
;920:	strcat( path, "_flash.md3" );
ADDRLP4 28
ARGP4
ADDRGP4 $596
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 921
;921:	weaponInfo->flashModel = trap_R_RegisterModel_MiTech( path );
ADDRLP4 28
ARGP4
ADDRLP4 124
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 124
INDIRI4
ASGNI4
line 923
;922:
;923:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 28
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 924
;924:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 28
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 925
;925:	strcat( path, "_barrel.md3" );
ADDRLP4 28
ARGP4
ADDRGP4 $597
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 926
;926:	weaponInfo->barrelModel = trap_R_RegisterModel_MiTech( path );
ADDRLP4 28
ARGP4
ADDRLP4 128
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 128
INDIRI4
ASGNI4
line 928
;927:
;928:	Q_strncpyz( path, item->world_model[0], MAX_QPATH );
ADDRLP4 28
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 929
;929:	COM_StripExtension(path, path, sizeof(path));
ADDRLP4 28
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 COM_StripExtension
CALLV
pop
line 930
;930:	strcat( path, "_hand.md3" );
ADDRLP4 28
ARGP4
ADDRGP4 $598
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 931
;931:	weaponInfo->handsModel = trap_R_RegisterModel_MiTech( path );
ADDRLP4 28
ARGP4
ADDRLP4 132
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 933
;932:
;933:	if ( !weaponInfo->handsModel ) {
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
NEI4 $599
line 934
;934:		weaponInfo->handsModel = trap_R_RegisterModel_MiTech( "models/weapons2/shotgun/shotgun_hand.md3" );
ADDRGP4 $601
ARGP4
ADDRLP4 136
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 136
INDIRI4
ASGNI4
line 935
;935:	}
LABELV $599
line 937
;936:
;937:	weaponInfo->loopFireSound = qfalse;
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 0
ASGNI4
line 939
;938:
;939:	switch ( weaponNum ) {					//look for this to add new ones - WEAPONS_HYPER
ADDRLP4 136
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 136
INDIRI4
CNSTI4 1
LTI4 $602
ADDRLP4 136
INDIRI4
CNSTI4 18
GTI4 $602
ADDRLP4 136
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $731-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $731
address $604
address $642
address $649
address $664
address $651
address $607
address $681
address $672
address $692
address $626
address $669
address $658
address $633
address $699
address $706
address $713
address $720
address $726
code
LABELV $604
line 943
;940:	case WP_GAUNTLET:
;941:		//MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
;942:		//weaponInfo->readySound = trap_S_RegisterSound_MiTech( "sound/weapons/bfg/bfg_humd.wav", qfalse );
;943:		weaponInfo->firingSound = trap_S_RegisterSound_MiTech( "sound/weapons/melee/fstrun.wav", qfalse );
ADDRGP4 $605
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 140
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 140
INDIRI4
ASGNI4
line 944
;944:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/melee/fstatck.wav", qfalse );
ADDRGP4 $606
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 144
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 144
INDIRI4
ASGNI4
line 945
;945:		break;
ADDRGP4 $603
JUMPV
LABELV $607
line 948
;946:
;947:	case WP_LIGHTNING:
;948:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 949
;949:		weaponInfo->readySound = trap_S_RegisterSound_MiTech( "sound/weapons/melee/fsthum.wav", qfalse );
ADDRGP4 $608
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 148
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 148
INDIRI4
ASGNI4
line 950
;950:		weaponInfo->firingSound = trap_S_RegisterSound_MiTech( "sound/weapons/lightning/lg_hum.wav", qfalse );
ADDRGP4 $609
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 152
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 152
INDIRI4
ASGNI4
line 952
;951:
;952:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/lightning/lg_fire.wav", qfalse );
ADDRGP4 $610
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 156
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 156
INDIRI4
ASGNI4
line 953
;953:		cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew");
ADDRGP4 $613
ARGP4
ADDRLP4 160
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+440
ADDRLP4 160
INDIRI4
ASGNI4
line 954
;954:		cgs.media.lightningExplosionModel = trap_R_RegisterModel_MiTech( "models/weaphits/crackle.md3" );
ADDRGP4 $616
ARGP4
ADDRLP4 164
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1652
ADDRLP4 164
INDIRI4
ASGNI4
line 955
;955:		cgs.media.sfx_lghit1 = trap_S_RegisterSound_MiTech( "sound/weapons/lightning/lg_hit.wav", qfalse );
ADDRGP4 $619
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 168
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1996
ADDRLP4 168
INDIRI4
ASGNI4
line 956
;956:		cgs.media.sfx_lghit2 = trap_S_RegisterSound_MiTech( "sound/weapons/lightning/lg_hit2.wav", qfalse );
ADDRGP4 $622
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 172
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRGP4 cgs+956380+2000
ADDRLP4 172
INDIRI4
ASGNI4
line 957
;957:		cgs.media.sfx_lghit3 = trap_S_RegisterSound_MiTech( "sound/weapons/lightning/lg_hit3.wav", qfalse );
ADDRGP4 $625
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 176
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRGP4 cgs+956380+2004
ADDRLP4 176
INDIRI4
ASGNI4
line 959
;958:
;959:		break;
ADDRGP4 $603
JUMPV
LABELV $626
line 962
;960:
;961:	case WP_GRAPPLING_HOOK:
;962:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 963
;963:		weaponInfo->missileModel = trap_R_RegisterModel_MiTech( "models/ammo/hook/hook.md3" );
ADDRGP4 $627
ARGP4
ADDRLP4 180
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
line 964
;964:		weaponInfo->missileTrailFunc = CG_GrappleTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrappleTrail
ASGNP4
line 965
;965:		weaponInfo->missileDlight = 0;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 0
ASGNF4
line 966
;966:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 967
;967:		weaponInfo->trailRadius = 64;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 968
;968:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 969
;969:		cgs.media.grappleShader = trap_R_RegisterShader( "grappleRope");
ADDRGP4 $630
ARGP4
ADDRLP4 184
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1348
ADDRLP4 184
INDIRI4
ASGNI4
line 970
;970:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/grapple/grapfire.wav", qfalse );
ADDRGP4 $631
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 188
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 188
INDIRI4
ASGNI4
line 971
;971:		weaponInfo->missileSound = trap_S_RegisterSound_MiTech( "sound/weapons/grapple/grappull.wav", qfalse );
ADDRGP4 $632
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 192
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 192
INDIRI4
ASGNI4
line 973
;972:        //cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew");
;973:		break;
ADDRGP4 $603
JUMPV
LABELV $633
line 977
;974:
;975:
;976:	case WP_CHAINGUN:
;977:		weaponInfo->firingSound = trap_S_RegisterSound_MiTech( "sound/weapons/vulcan/wvulfire.wav", qfalse );
ADDRGP4 $634
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 196
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 196
INDIRI4
ASGNI4
line 978
;978:		weaponInfo->loopFireSound = qtrue;
ADDRLP4 12
INDIRP4
CNSTI4 132
ADDP4
CNSTI4 1
ASGNI4
line 979
;979:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 980
;980:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/vulcan/vulcanf1b.wav", qfalse );
ADDRGP4 $635
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 200
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 200
INDIRI4
ASGNI4
line 981
;981:		weaponInfo->flashSound[1] = trap_S_RegisterSound_MiTech( "sound/weapons/vulcan/vulcanf2b.wav", qfalse );
ADDRGP4 $636
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 204
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 204
INDIRI4
ASGNI4
line 982
;982:		weaponInfo->flashSound[2] = trap_S_RegisterSound_MiTech( "sound/weapons/vulcan/vulcanf3b.wav", qfalse );
ADDRGP4 $637
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 208
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 208
INDIRI4
ASGNI4
line 983
;983:		weaponInfo->flashSound[3] = trap_S_RegisterSound_MiTech( "sound/weapons/vulcan/vulcanf4b.wav", qfalse );
ADDRGP4 $638
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 212
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 212
INDIRI4
ASGNI4
line 984
;984:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_MachineGunEjectBrass
ASGNP4
line 985
;985:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
ADDRGP4 $641
ARGP4
ADDRLP4 216
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1664
ADDRLP4 216
INDIRI4
ASGNI4
line 986
;986:		break;
ADDRGP4 $603
JUMPV
LABELV $642
line 990
;987:
;988:
;989:	case WP_MACHINEGUN:
;990:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 991
;991:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/machinegun/machgf1b.wav", qfalse );
ADDRGP4 $643
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 220
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 220
INDIRI4
ASGNI4
line 992
;992:		weaponInfo->flashSound[1] = trap_S_RegisterSound_MiTech( "sound/weapons/machinegun/machgf2b.wav", qfalse );
ADDRGP4 $644
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 224
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 224
INDIRI4
ASGNI4
line 993
;993:		weaponInfo->flashSound[2] = trap_S_RegisterSound_MiTech( "sound/weapons/machinegun/machgf3b.wav", qfalse );
ADDRGP4 $645
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 228
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 228
INDIRI4
ASGNI4
line 994
;994:		weaponInfo->flashSound[3] = trap_S_RegisterSound_MiTech( "sound/weapons/machinegun/machgf4b.wav", qfalse );
ADDRGP4 $646
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 232
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 232
INDIRI4
ASGNI4
line 995
;995:		weaponInfo->ejectBrassFunc = CG_MachineGunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_MachineGunEjectBrass
ASGNP4
line 996
;996:		cgs.media.bulletExplosionShader = trap_R_RegisterShader( "bulletExplosion" );
ADDRGP4 $641
ARGP4
ADDRLP4 236
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1664
ADDRLP4 236
INDIRI4
ASGNI4
line 997
;997:		break;
ADDRGP4 $603
JUMPV
LABELV $649
line 1000
;998:
;999:	case WP_SHOTGUN:
;1000:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1001
;1001:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/shotgun/sshotf1b.wav", qfalse );
ADDRGP4 $650
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 240
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 240
INDIRI4
ASGNI4
line 1002
;1002:		weaponInfo->ejectBrassFunc = CG_ShotgunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_ShotgunEjectBrass
ASGNP4
line 1003
;1003:		break;
ADDRGP4 $603
JUMPV
LABELV $651
line 1006
;1004:
;1005:	case WP_ROCKET_LAUNCHER:
;1006:		weaponInfo->missileModel = trap_R_RegisterModel_MiTech( "models/ammo/rocket/rocket.md3" );
ADDRGP4 $652
ARGP4
ADDRLP4 244
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 244
INDIRI4
ASGNI4
line 1007
;1007:		weaponInfo->missileSound = trap_S_RegisterSound_MiTech( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $653
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 248
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 248
INDIRI4
ASGNI4
line 1008
;1008:		weaponInfo->missileTrailFunc = CG_RocketTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_RocketTrail
ASGNP4
line 1009
;1009:		weaponInfo->missileDlight = 200;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 1010
;1010:		weaponInfo->wiTrailTime = 2000;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1157234688
ASGNF4
line 1011
;1011:		weaponInfo->trailRadius = 64;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1115684864
ASGNF4
line 1013
;1012:		
;1013:		MAKERGB( weaponInfo->missileDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 0
ASGNF4
line 1014
;1014:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1016
;1015:
;1016:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $654
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 252
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 252
INDIRI4
ASGNI4
line 1017
;1017:		cgs.media.rocketExplosionShader = trap_R_RegisterShader( "rocketExplosion" );
ADDRGP4 $657
ARGP4
ADDRLP4 256
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1668
ADDRLP4 256
INDIRI4
ASGNI4
line 1018
;1018:		break;
ADDRGP4 $603
JUMPV
LABELV $658
line 1021
;1019:
;1020:	case WP_PROX_LAUNCHER:
;1021:		weaponInfo->missileModel = trap_R_RegisterModel_MiTech( "models/weaphits/proxmine.md3" );
ADDRGP4 $659
ARGP4
ADDRLP4 260
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 260
INDIRI4
ASGNI4
line 1022
;1022:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 1023
;1023:		weaponInfo->wiTrailTime = 700;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1143930880
ASGNF4
line 1024
;1024:		weaponInfo->trailRadius = 32;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1107296256
ASGNF4
line 1025
;1025:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1026
;1026:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/proxmine/wstbfire.wav", qfalse );
ADDRGP4 $660
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 264
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 264
INDIRI4
ASGNI4
line 1027
;1027:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
ADDRGP4 $663
ARGP4
ADDRLP4 268
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1672
ADDRLP4 268
INDIRI4
ASGNI4
line 1028
;1028:		break;
ADDRGP4 $603
JUMPV
LABELV $664
line 1031
;1029:
;1030:	case WP_GRENADE_LAUNCHER:
;1031:		weaponInfo->missileModel = trap_R_RegisterModel_MiTech( "models/ammo/grenade1.md3" );
ADDRGP4 $665
ARGP4
ADDRLP4 272
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 272
INDIRI4
ASGNI4
line 1032
;1032:		weaponInfo->missileTrailFunc = CG_GrenadeTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_GrenadeTrail
ASGNP4
line 1033
;1033:		weaponInfo->wiTrailTime = 700;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1143930880
ASGNF4
line 1034
;1034:		weaponInfo->trailRadius = 32;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1107296256
ASGNF4
line 1035
;1035:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.70f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1036
;1036:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/grenade/grenlf1a.wav", qfalse );
ADDRGP4 $666
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 276
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 276
INDIRI4
ASGNI4
line 1037
;1037:		cgs.media.grenadeExplosionShader = trap_R_RegisterShader( "grenadeExplosion" );
ADDRGP4 $663
ARGP4
ADDRLP4 280
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1672
ADDRLP4 280
INDIRI4
ASGNI4
line 1038
;1038:		break;
ADDRGP4 $603
JUMPV
LABELV $669
line 1042
;1039:
;1040:
;1041:	case WP_NAILGUN:
;1042:		weaponInfo->ejectBrassFunc = CG_NailgunEjectBrass;
ADDRLP4 12
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 CG_NailgunEjectBrass
ASGNP4
line 1043
;1043:		weaponInfo->missileTrailFunc = CG_NailTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_NailTrail
ASGNP4
line 1045
;1044://		weaponInfo->missileSound = trap_S_RegisterSound_MiTech( "sound/weapons/nailgun/wnalflit.wav", qfalse );
;1045:		weaponInfo->trailRadius = 16;
ADDRLP4 12
INDIRP4
CNSTI4 116
ADDP4
CNSTF4 1098907648
ASGNF4
line 1046
;1046:		weaponInfo->wiTrailTime = 250;
ADDRLP4 12
INDIRP4
CNSTI4 120
ADDP4
CNSTF4 1132068864
ASGNF4
line 1047
;1047:		weaponInfo->missileModel = trap_R_RegisterModel_MiTech( "models/weaphits/nail.md3" );
ADDRGP4 $670
ARGP4
ADDRLP4 284
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 284
INDIRI4
ASGNI4
line 1048
;1048:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.75f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1061158912
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1049
;1049:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/nailgun/wnalfire.wav", qfalse );
ADDRGP4 $671
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 288
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 288
INDIRI4
ASGNI4
line 1050
;1050:		break;
ADDRGP4 $603
JUMPV
LABELV $672
line 1055
;1051:
;1052:
;1053:	case WP_PLASMAGUN:
;1054://		weaponInfo->missileModel = cgs.media.invulnerabilityPowerupModel;
;1055:		weaponInfo->missileTrailFunc = CG_PlasmaTrail;
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
ADDRGP4 CG_PlasmaTrail
ASGNP4
line 1056
;1056:		weaponInfo->missileSound = trap_S_RegisterSound_MiTech( "sound/weapons/plasma/lasfly.wav", qfalse );
ADDRGP4 $673
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 292
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 292
INDIRI4
ASGNI4
line 1057
;1057:		MAKERGB( weaponInfo->flashDlightColor, 0.6f, 0.6f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1058642330
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 1058
;1058:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/plasma/hyprbf1a.wav", qfalse );
ADDRGP4 $674
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 296
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 296
INDIRI4
ASGNI4
line 1059
;1059:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $677
ARGP4
ADDRLP4 300
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1660
ADDRLP4 300
INDIRI4
ASGNI4
line 1060
;1060:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $680
ARGP4
ADDRLP4 304
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+432
ADDRLP4 304
INDIRI4
ASGNI4
line 1061
;1061:		break;
ADDRGP4 $603
JUMPV
LABELV $681
line 1064
;1062:
;1063:	case WP_RAILGUN:
;1064:		weaponInfo->readySound = trap_S_RegisterSound_MiTech( "sound/weapons/railgun/rg_hum.wav", qfalse );
ADDRGP4 $682
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 308
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 308
INDIRI4
ASGNI4
line 1065
;1065:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.5f, 0 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1056964608
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 0
ASGNF4
line 1066
;1066:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/railgun/railgf1a.wav", qfalse );
ADDRGP4 $683
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 312
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 312
INDIRI4
ASGNI4
line 1067
;1067:		cgs.media.railExplosionShader = trap_R_RegisterShader( "railExplosion" );
ADDRGP4 $686
ARGP4
ADDRLP4 316
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1656
ADDRLP4 316
INDIRI4
ASGNI4
line 1068
;1068:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $680
ARGP4
ADDRLP4 320
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+432
ADDRLP4 320
INDIRI4
ASGNI4
line 1069
;1069:		cgs.media.railCoreShader = trap_R_RegisterShader( "railCore" );
ADDRGP4 $691
ARGP4
ADDRLP4 324
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+436
ADDRLP4 324
INDIRI4
ASGNI4
line 1070
;1070:		break;
ADDRGP4 $603
JUMPV
LABELV $692
line 1073
;1071:
;1072:	case WP_BFG:
;1073:		weaponInfo->readySound = trap_S_RegisterSound_MiTech( "sound/weapons/bfg/bfg_hum.wav", qfalse );
ADDRGP4 $693
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 328
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 124
ADDP4
ADDRLP4 328
INDIRI4
ASGNI4
line 1074
;1074:		MAKERGB( weaponInfo->flashDlightColor, 1, 0.7f, 1 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1060320051
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 1075
;1075:		MAKERGB( weaponInfo->missileDlightColor, 0.40f, 1, 0.20f );
ADDRLP4 12
INDIRP4
CNSTI4 96
ADDP4
CNSTF4 1053609165
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 104
ADDP4
CNSTF4 1045220557
ASGNF4
line 1076
;1076:		weaponInfo->missileDlight = 200;
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
CNSTF4 1128792064
ASGNF4
line 1077
;1077:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/bfg/bfg_fire.wav", qfalse );
ADDRGP4 $694
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 332
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 332
INDIRI4
ASGNI4
line 1078
;1078:		cgs.media.bfgExplosionShader = trap_R_RegisterShader( "bfgExplosion" );
ADDRGP4 $697
ARGP4
ADDRLP4 336
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1676
ADDRLP4 336
INDIRI4
ASGNI4
line 1079
;1079:		weaponInfo->missileModel = trap_R_RegisterModel_MiTech( "models/weaphits/bfg.md3" );
ADDRGP4 $698
ARGP4
ADDRLP4 340
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 340
INDIRI4
ASGNI4
line 1080
;1080:		weaponInfo->missileSound = trap_S_RegisterSound_MiTech( "sound/weapons/rocket/rockfly.wav", qfalse );
ADDRGP4 $653
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 344
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 344
INDIRI4
ASGNI4
line 1081
;1081:		break;
ADDRGP4 $603
JUMPV
LABELV $699
line 1085
;1082:		
;1083:	case WP_FLAMETHROWER:
;1084://		weaponInfo->missileModel = cgs.media.invulnerabilityPowerupModel;
;1085:		weaponInfo->missileSound = trap_S_RegisterSound_MiTech( "sound/weapons/flamethrower/lasfly.wav", qfalse );
ADDRGP4 $700
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 348
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 348
INDIRI4
ASGNI4
line 1086
;1086:		MAKERGB( weaponInfo->flashDlightColor, 1.0f, 1.0f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 1087
;1087:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/flamethrower/hyprbf1a.wav", qfalse );
ADDRGP4 $701
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 352
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 352
INDIRI4
ASGNI4
line 1088
;1088:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $677
ARGP4
ADDRLP4 356
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1660
ADDRLP4 356
INDIRI4
ASGNI4
line 1089
;1089:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $680
ARGP4
ADDRLP4 360
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+432
ADDRLP4 360
INDIRI4
ASGNI4
line 1090
;1090:		break;
ADDRGP4 $603
JUMPV
LABELV $706
line 1094
;1091:		
;1092:	case WP_ANTIMATTER:
;1093://		weaponInfo->missileModel = cgs.media.invulnerabilityPowerupModel;
;1094:		weaponInfo->missileSound = trap_S_RegisterSound_MiTech( "sound/weapons/antimatter/lasfly.wav", qfalse );
ADDRGP4 $707
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 364
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 84
ADDP4
ADDRLP4 364
INDIRI4
ASGNI4
line 1095
;1095:		MAKERGB( weaponInfo->flashDlightColor, 1.0f, 1.0f, 1.0f );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 1096
;1096:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/antimatter/hyprbf1a.wav", qfalse );
ADDRGP4 $708
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 368
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 368
INDIRI4
ASGNI4
line 1097
;1097:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $677
ARGP4
ADDRLP4 372
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1660
ADDRLP4 372
INDIRI4
ASGNI4
line 1098
;1098:		cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
ADDRGP4 $680
ARGP4
ADDRLP4 376
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+432
ADDRLP4 376
INDIRI4
ASGNI4
line 1099
;1099:		break;
ADDRGP4 $603
JUMPV
LABELV $713
line 1105
;1100:		
;1101:	case WP_TOOLGUN:
;1102:		//weaponInfo->missileModel = cgs.media.invulnerabilityPowerupModel;
;1103:		//weaponInfo->missileSound = trap_S_RegisterSound_MiTech( "sound/weapons/antimatter/lasfly.wav", qfalse );
;1104:		//MAKERGB( weaponInfo->flashDlightColor, 1.0f, 1.0f, 1.0f );
;1105:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/toolgun/fire1.wav", qfalse );
ADDRGP4 $714
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 380
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 380
INDIRI4
ASGNI4
line 1106
;1106:		weaponInfo->flashSound[1] = trap_S_RegisterSound_MiTech( "sound/weapons/toolgun/fire2.wav", qfalse );
ADDRGP4 $715
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 384
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 384
INDIRI4
ASGNI4
line 1107
;1107:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $677
ARGP4
ADDRLP4 388
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1660
ADDRLP4 388
INDIRI4
ASGNI4
line 1108
;1108:		cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew");
ADDRGP4 $613
ARGP4
ADDRLP4 392
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+440
ADDRLP4 392
INDIRI4
ASGNI4
line 1110
;1109:		//cgs.media.railRingsShader = trap_R_RegisterShader( "railDisc" );
;1110:		break;
ADDRGP4 $603
JUMPV
LABELV $720
line 1113
;1111:
;1112:	case WP_PHYSGUN:
;1113:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/misc/silence.wav", qfalse );
ADDRGP4 $721
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 396
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 396
INDIRI4
ASGNI4
line 1114
;1114:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $677
ARGP4
ADDRLP4 400
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1660
ADDRLP4 400
INDIRI4
ASGNI4
line 1115
;1115:		cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew");
ADDRGP4 $613
ARGP4
ADDRLP4 404
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+440
ADDRLP4 404
INDIRI4
ASGNI4
line 1116
;1116:		break;
ADDRGP4 $603
JUMPV
LABELV $726
line 1119
;1117:		
;1118:	case WP_GRAVITYGUN:
;1119:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/misc/silence.wav", qfalse );
ADDRGP4 $721
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 408
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 408
INDIRI4
ASGNI4
line 1120
;1120:		cgs.media.plasmaExplosionShader = trap_R_RegisterShader( "plasmaExplosion" );
ADDRGP4 $677
ARGP4
ADDRLP4 412
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+1660
ADDRLP4 412
INDIRI4
ASGNI4
line 1121
;1121:		cgs.media.lightningShader = trap_R_RegisterShader( "lightningBoltNew");
ADDRGP4 $613
ARGP4
ADDRLP4 416
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRGP4 cgs+956380+440
ADDRLP4 416
INDIRI4
ASGNI4
line 1122
;1122:		break;
ADDRGP4 $603
JUMPV
LABELV $602
line 1125
;1123:		
;1124:	 default:
;1125:		MAKERGB( weaponInfo->flashDlightColor, 1, 1, 1 );
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 48
ADDP4
CNSTF4 1065353216
ASGNF4
line 1126
;1126:		weaponInfo->flashSound[0] = trap_S_RegisterSound_MiTech( "sound/weapons/rocket/rocklf1a.wav", qfalse );
ADDRGP4 $654
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 420
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 420
INDIRI4
ASGNI4
line 1127
;1127:		break;
LABELV $603
line 1129
;1128:	}
;1129:}
LABELV $568
endproc CG_RegisterWeapon 424 12
export CG_RegisterItemVisuals
proc CG_RegisterItemVisuals 28 12
line 1138
;1130:
;1131:/*
;1132:=================
;1133:CG_RegisterItemVisuals
;1134:
;1135:The server says this item is used on this level
;1136:=================
;1137:*/
;1138:void CG_RegisterItemVisuals( int itemNum ) {
line 1142
;1139:	itemInfo_t		*itemInfo;
;1140:	gitem_t			*item;
;1141:
;1142:	if ( itemNum < 0 || itemNum >= bg_numItems ) {
ADDRLP4 8
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $736
ADDRLP4 8
INDIRI4
ADDRGP4 bg_numItems
INDIRI4
LTI4 $734
LABELV $736
line 1143
;1143:		CG_Error( "CG_RegisterItemVisuals: itemNum %d out of range [0-%d]", itemNum, bg_numItems-1 );
ADDRGP4 $737
ARGP4
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 bg_numItems
INDIRI4
CNSTI4 1
SUBI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 1144
;1144:	}
LABELV $734
line 1146
;1145:
;1146:	itemInfo = &cg_items[ itemNum ];
ADDRLP4 4
CNSTI4 24
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_items
ADDP4
ASGNP4
line 1147
;1147:	if ( itemInfo->registered ) {
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 0
EQI4 $738
line 1148
;1148:		return;
ADDRGP4 $733
JUMPV
LABELV $738
line 1151
;1149:	}
;1150:
;1151:	item = &bg_itemlist[ itemNum ];
ADDRLP4 0
CNSTI4 56
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 bg_itemlist
ADDP4
ASGNP4
line 1153
;1152:
;1153:	memset( itemInfo, 0, sizeof( &itemInfo ) );
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1154
;1154:	itemInfo->registered = qtrue;
ADDRLP4 4
INDIRP4
CNSTI4 1
ASGNI4
line 1156
;1155:
;1156:	itemInfo->models[0] = trap_R_RegisterModel_MiTech( item->world_model[0] );
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1158
;1157:
;1158:	itemInfo->icon = trap_R_RegisterShader( item->icon );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1160
;1159:
;1160:	if ( item->giType == IT_WEAPON ) {
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 1
NEI4 $740
line 1161
;1161:		CG_RegisterWeapon( item->giTag );
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1162
;1162:	}
LABELV $740
line 1167
;1163:
;1164:	//
;1165:	// powerups have an accompanying ring or sphere
;1166:	//
;1167:	if ( item->giType == IT_POWERUP || item->giType == IT_HEALTH || 
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 5
EQI4 $746
ADDRLP4 20
INDIRI4
CNSTI4 4
EQI4 $746
ADDRLP4 20
INDIRI4
CNSTI4 3
EQI4 $746
ADDRLP4 20
INDIRI4
CNSTI4 6
NEI4 $742
LABELV $746
line 1168
;1168:		item->giType == IT_ARMOR || item->giType == IT_HOLDABLE ) {
line 1169
;1169:		if ( item->world_model[1] ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $747
line 1170
;1170:			itemInfo->models[1] = trap_R_RegisterModel_MiTech( item->world_model[1] );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1171
;1171:		}
LABELV $747
line 1172
;1172:	}
LABELV $742
line 1173
;1173:}
LABELV $733
endproc CG_RegisterItemVisuals 28 12
proc CG_MapTorsoToWeaponFrame 24 0
line 1190
;1174:
;1175:
;1176:/*
;1177:========================================================================================
;1178:
;1179:VIEW WEAPON
;1180:
;1181:========================================================================================
;1182:*/
;1183:
;1184:/*
;1185:=================
;1186:CG_MapTorsoToWeaponFrame
;1187:
;1188:=================
;1189:*/
;1190:static int CG_MapTorsoToWeaponFrame( clientInfo_t *ci, int frame ) {
line 1193
;1191:
;1192:	// change weapon
;1193:	if ( frame >= ci->animations[TORSO_DROP].firstFrame 
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
LTI4 $750
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
CNSTI4 9
ADDI4
GEI4 $750
line 1194
;1194:		&& frame < ci->animations[TORSO_DROP].firstFrame + 9 ) {
line 1195
;1195:		return frame - ci->animations[TORSO_DROP].firstFrame + 6;
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRI4
SUBI4
CNSTI4 6
ADDI4
RETI4
ADDRGP4 $749
JUMPV
LABELV $750
line 1199
;1196:	}
;1197:
;1198:	// stand attack
;1199:	if ( frame >= ci->animations[TORSO_ATTACK].firstFrame 
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 956
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $752
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
CNSTI4 6
ADDI4
GEI4 $752
line 1200
;1200:		&& frame < ci->animations[TORSO_ATTACK].firstFrame + 6 ) {
line 1201
;1201:		return 1 + frame - ci->animations[TORSO_ATTACK].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 956
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $749
JUMPV
LABELV $752
line 1205
;1202:	}
;1203:
;1204:	// stand attack 2
;1205:	if ( frame >= ci->animations[TORSO_ATTACK2].firstFrame 
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 984
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
LTI4 $754
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
CNSTI4 6
ADDI4
GEI4 $754
line 1206
;1206:		&& frame < ci->animations[TORSO_ATTACK2].firstFrame + 6 ) {
line 1207
;1207:		return 1 + frame - ci->animations[TORSO_ATTACK2].firstFrame;
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDI4
ADDRFP4 0
INDIRP4
CNSTI4 984
ADDP4
INDIRI4
SUBI4
RETI4
ADDRGP4 $749
JUMPV
LABELV $754
line 1210
;1208:	}
;1209:	
;1210:	return 0;
CNSTI4 0
RETI4
LABELV $749
endproc CG_MapTorsoToWeaponFrame 24 0
proc CG_CalculateWeaponPosition 40 4
line 1219
;1211:}
;1212:
;1213:
;1214:/*
;1215:==============
;1216:CG_CalculateWeaponPosition
;1217:==============
;1218:*/
;1219:static void CG_CalculateWeaponPosition( vec3_t origin, vec3_t angles ) {
line 1224
;1220:	float	scale;
;1221:	int		delta;
;1222:	float	fracsin;
;1223:
;1224:	VectorCopy( cg.refdef.vieworg, origin );
ADDRFP4 0
INDIRP4
ADDRGP4 cg+1870616+24
INDIRB
ASGNB 12
line 1225
;1225:	VectorCopy( cg.refdefViewAngles, angles );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+1870984
INDIRB
ASGNB 12
line 1228
;1226:
;1227:	// on odd legs, invert some angles
;1228:	if ( cg.bobcycle & 1 ) {
ADDRGP4 cg+1953060
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $760
line 1229
;1229:		scale = -cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+1953064
INDIRF4
NEGF4
ASGNF4
line 1230
;1230:	} else {
ADDRGP4 $761
JUMPV
LABELV $760
line 1231
;1231:		scale = cg.xyspeed;
ADDRLP4 0
ADDRGP4 cg+1953064
INDIRF4
ASGNF4
line 1232
;1232:	}
LABELV $761
line 1235
;1233:
;1234:	// gun angles from bobbing
;1235:	angles[ROLL] += scale * cg.bobfracsin * 0.005;
ADDRLP4 12
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDRLP4 0
INDIRF4
ADDRGP4 cg+1953056
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1236
;1236:	angles[YAW] += scale * cg.bobfracsin * 0.01;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRGP4 cg+1953056
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1237
;1237:	angles[PITCH] += cg.xyspeed * cg.bobfracsin * 0.005;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CNSTF4 1000593162
ADDRGP4 cg+1953064
INDIRF4
ADDRGP4 cg+1953056
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1240
;1238:
;1239:	// drop the weapon when landing
;1240:	delta = cg.time - cg.landTime;
ADDRLP4 8
ADDRGP4 cg+1868892
INDIRI4
ADDRGP4 cg+1870436
INDIRI4
SUBI4
ASGNI4
line 1241
;1241:	if ( delta < LAND_DEFLECT_TIME ) {
ADDRLP4 8
INDIRI4
CNSTI4 150
GEI4 $771
line 1242
;1242:		origin[2] += cg.landChange*0.25 * delta / LAND_DEFLECT_TIME;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+1870432
INDIRF4
MULF4
ADDRLP4 8
INDIRI4
CVIF4 4
MULF4
CNSTF4 1125515264
DIVF4
ADDF4
ASGNF4
line 1243
;1243:	} else if ( delta < LAND_DEFLECT_TIME + LAND_RETURN_TIME ) {
ADDRGP4 $772
JUMPV
LABELV $771
ADDRLP4 8
INDIRI4
CNSTI4 450
GEI4 $774
line 1244
;1244:		origin[2] += cg.landChange*0.25 * 
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
CNSTF4 1048576000
ADDRGP4 cg+1870432
INDIRF4
MULF4
CNSTI4 450
ADDRLP4 8
INDIRI4
SUBI4
CVIF4 4
MULF4
CNSTF4 1133903872
DIVF4
ADDF4
ASGNF4
line 1246
;1245:			(LAND_DEFLECT_TIME + LAND_RETURN_TIME - delta) / LAND_RETURN_TIME;
;1246:	}
LABELV $774
LABELV $772
line 1259
;1247:
;1248:#if 0
;1249:	// drop the weapon when stair climbing
;1250:	delta = cg.time - cg.stepTime;
;1251:	if ( delta < STEP_TIME/2 ) {
;1252:		origin[2] -= cg.stepChange*0.25 * delta / (STEP_TIME/2);
;1253:	} else if ( delta < STEP_TIME ) {
;1254:		origin[2] -= cg.stepChange*0.25 * (STEP_TIME - delta) / (STEP_TIME/2);
;1255:	}
;1256:#endif
;1257:
;1258:	// idle drift
;1259:	scale = cg.xyspeed + 40;
ADDRLP4 0
ADDRGP4 cg+1953064
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 1260
;1260:	fracsin = sin( cg.time * 0.001 );
CNSTF4 981668463
ADDRGP4 cg+1868892
INDIRI4
CVIF4 4
MULF4
ARGF4
ADDRLP4 24
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 24
INDIRF4
ASGNF4
line 1261
;1261:	angles[ROLL] += scale * fracsin * 0.01;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1262
;1262:	angles[YAW] += scale * fracsin * 0.01;
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1263
;1263:	angles[PITCH] += scale * fracsin * 0.01;
ADDRLP4 36
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1008981770
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1264
;1264:}
LABELV $756
endproc CG_CalculateWeaponPosition 40 4
proc CG_LightningBolt 328 28
line 1278
;1265:
;1266:
;1267:/*
;1268:===============
;1269:CG_LightningBolt
;1270:
;1271:Origin will be the exact tag point, which is slightly
;1272:different than the muzzle point used for determining hits.
;1273:The cent should be the non-predicted cent if it is from the player,
;1274:so the endpoint will reflect the simulated strike (lagging the predicted
;1275:angle)
;1276:===============
;1277:*/
;1278:static void CG_LightningBolt( centity_t *cent, vec3_t origin ) {
line 1286
;1279:	trace_t  trace;
;1280:	refEntity_t  beam;
;1281:	vec3_t   forward;
;1282:	vec3_t   muzzlePoint, endPoint;
;1283:	clientInfo_t	*ci;
;1284:	int				weaphack;
;1285:
;1286:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 272
CNSTI4 1944
ADDRFP4 0
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+440948
ADDP4
ASGNP4
line 1288
;1287:	
;1288:	if(ci->swepid >= 1){
ADDRLP4 272
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
LTI4 $781
line 1289
;1289:	weaphack = ci->swepid;
ADDRLP4 188
ADDRLP4 272
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
line 1290
;1290:	} else {
ADDRGP4 $782
JUMPV
LABELV $781
line 1291
;1291:	weaphack = cent->currentState.weapon;
ADDRLP4 188
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ASGNI4
line 1292
;1292:	}
LABELV $782
line 1294
;1293:
;1294:	if (weaphack != WP_LIGHTNING && weaphack != WP_TOOLGUN && weaphack != WP_PHYSGUN && weaphack != WP_GRAVITYGUN) {
ADDRLP4 188
INDIRI4
CNSTI4 6
EQI4 $783
ADDRLP4 188
INDIRI4
CNSTI4 16
EQI4 $783
ADDRLP4 188
INDIRI4
CNSTI4 17
EQI4 $783
ADDRLP4 188
INDIRI4
CNSTI4 18
EQI4 $783
line 1295
;1295:		return;
ADDRGP4 $779
JUMPV
LABELV $783
line 1298
;1296:	}
;1297:
;1298:	memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1302
;1299:
;1300://unlagged - attack prediction #1
;1301:	// if the entity is us, unlagged is on server-side, and we've got it on for the lightning gun
;1302:	if ( (cent->currentState.number == cg.predictedPlayerState.clientNum) && cgs.delagHitscan &&
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+1868928+140
INDIRI4
NEI4 $785
ADDRLP4 280
CNSTI4 0
ASGNI4
ADDRGP4 cgs+958932
INDIRI4
ADDRLP4 280
INDIRI4
EQI4 $785
ADDRGP4 cg_delag+12
INDIRI4
CNSTI4 1
BANDI4
ADDRLP4 280
INDIRI4
NEI4 $792
ADDRGP4 cg_delag+12
INDIRI4
CNSTI4 8
BANDI4
ADDRLP4 280
INDIRI4
EQI4 $785
LABELV $792
line 1303
;1303:			( cg_delag.integer & 1 || cg_delag.integer & 8 ) ) {
line 1305
;1304:		// always shoot straight forward from our current position
;1305:		AngleVectors( cg.predictedPlayerState.viewangles, forward, NULL, NULL );
ADDRGP4 cg+1868928+152
ARGP4
ADDRLP4 192
ARGP4
ADDRLP4 284
CNSTP4 0
ASGNP4
ADDRLP4 284
INDIRP4
ARGP4
ADDRLP4 284
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1306
;1306:		VectorCopy( cg.predictedPlayerState.origin, muzzlePoint );
ADDRLP4 176
ADDRGP4 cg+1868928+20
INDIRB
ASGNB 12
line 1307
;1307:	}
ADDRGP4 $786
JUMPV
LABELV $785
line 1312
;1308:	else
;1309://unlagged - attack prediction #1
;1310:
;1311:	// CPMA  "true" lightning
;1312:    if ((cent->currentState.number == cg.predictedPlayerState.clientNum) && (cg_trueLightning.value != 0)) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+1868928+140
INDIRI4
NEI4 $797
ADDRGP4 cg_trueLightning+8
INDIRF4
CNSTF4 0
EQF4 $797
line 1319
;1313:		vec3_t angle;
;1314:		int i;
;1315:
;1316://unlagged - true lightning
;1317:		// might as well fix up true lightning while we're at it
;1318:		vec3_t viewangles;
;1319:		VectorCopy( cg.predictedPlayerState.viewangles, viewangles );
ADDRLP4 300
ADDRGP4 cg+1868928+152
INDIRB
ASGNB 12
line 1322
;1320://unlagged - true lightning
;1321:
;1322:		for (i = 0; i < 3; i++) {
ADDRLP4 284
CNSTI4 0
ASGNI4
LABELV $804
line 1323
;1323:			float a = cent->lerpAngles[i] - cg.refdefViewAngles[i];
ADDRLP4 316
ADDRLP4 284
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 312
ADDRLP4 316
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ADDP4
INDIRF4
ADDRLP4 316
INDIRI4
ADDRGP4 cg+1870984
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1324
;1324:			if (a > 180) {
ADDRLP4 312
INDIRF4
CNSTF4 1127481344
LEF4 $809
line 1325
;1325:				a -= 360;
ADDRLP4 312
ADDRLP4 312
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1326
;1326:			}
LABELV $809
line 1327
;1327:			if (a < -180) {
ADDRLP4 312
INDIRF4
CNSTF4 3274964992
GEF4 $811
line 1328
;1328:				a += 360;
ADDRLP4 312
ADDRLP4 312
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1329
;1329:			}
LABELV $811
line 1331
;1330:
;1331:			angle[i] = cg.refdefViewAngles[i] + a * (1.0 - cg_trueLightning.value);
ADDRLP4 320
ADDRLP4 284
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 320
INDIRI4
ADDRLP4 288
ADDP4
ADDRLP4 320
INDIRI4
ADDRGP4 cg+1870984
ADDP4
INDIRF4
ADDRLP4 312
INDIRF4
CNSTF4 1065353216
ADDRGP4 cg_trueLightning+8
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1332
;1332:			if (angle[i] < 0) {
ADDRLP4 284
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 288
ADDP4
INDIRF4
CNSTF4 0
GEF4 $815
line 1333
;1333:				angle[i] += 360;
ADDRLP4 324
ADDRLP4 284
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 288
ADDP4
ASGNP4
ADDRLP4 324
INDIRP4
ADDRLP4 324
INDIRP4
INDIRF4
CNSTF4 1135869952
ADDF4
ASGNF4
line 1334
;1334:			}
LABELV $815
line 1335
;1335:			if (angle[i] > 360) {
ADDRLP4 284
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 288
ADDP4
INDIRF4
CNSTF4 1135869952
LEF4 $817
line 1336
;1336:				angle[i] -= 360;
ADDRLP4 324
ADDRLP4 284
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 288
ADDP4
ASGNP4
ADDRLP4 324
INDIRP4
ADDRLP4 324
INDIRP4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
line 1337
;1337:			}
LABELV $817
line 1338
;1338:		}
LABELV $805
line 1322
ADDRLP4 284
ADDRLP4 284
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 284
INDIRI4
CNSTI4 3
LTI4 $804
line 1340
;1339:
;1340:		AngleVectors(angle, forward, NULL, NULL );
ADDRLP4 288
ARGP4
ADDRLP4 192
ARGP4
ADDRLP4 312
CNSTP4 0
ASGNP4
ADDRLP4 312
INDIRP4
ARGP4
ADDRLP4 312
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1345
;1341://unlagged - true lightning
;1342://		VectorCopy(cent->lerpOrigin, muzzlePoint );
;1343://		VectorCopy(cg.refdef.vieworg, muzzlePoint );
;1344:		// *this* is the correct origin for true lightning
;1345:		VectorCopy(cg.predictedPlayerState.origin, muzzlePoint );
ADDRLP4 176
ADDRGP4 cg+1868928+20
INDIRB
ASGNB 12
line 1347
;1346://unlagged - true lightning
;1347:	} else {
ADDRGP4 $798
JUMPV
LABELV $797
line 1349
;1348:		// !CPMA
;1349:		AngleVectors( cent->lerpAngles, forward, NULL, NULL );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRLP4 192
ARGP4
ADDRLP4 284
CNSTP4 0
ASGNP4
ADDRLP4 284
INDIRP4
ARGP4
ADDRLP4 284
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1350
;1350:		VectorCopy(cent->lerpOrigin, muzzlePoint );
ADDRLP4 176
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 1351
;1351:	}
LABELV $798
LABELV $786
line 1354
;1352:
;1353:	// FIXME: crouch
;1354:	muzzlePoint[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 176+8
ADDRLP4 176+8
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 1356
;1355:
;1356:	VectorMA( muzzlePoint, 14, forward, muzzlePoint );
ADDRLP4 284
CNSTF4 1096810496
ASGNF4
ADDRLP4 176
ADDRLP4 176
INDIRF4
ADDRLP4 284
INDIRF4
ADDRLP4 192
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 176+4
ADDRLP4 176+4
INDIRF4
ADDRLP4 284
INDIRF4
ADDRLP4 192+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 176+8
ADDRLP4 176+8
INDIRF4
CNSTF4 1096810496
ADDRLP4 192+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1359
;1357:
;1358:	// project forward by the lightning range
;1359:	if (weaphack == WP_LIGHTNING){
ADDRLP4 188
INDIRI4
CNSTI4 6
NEI4 $828
line 1360
;1360:	VectorMA( muzzlePoint, mod_lgrange, forward, endPoint );
ADDRLP4 288
ADDRGP4 mod_lgrange
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 260
ADDRLP4 176
INDIRF4
ADDRLP4 192
INDIRF4
ADDRLP4 288
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 260+4
ADDRLP4 176+4
INDIRF4
ADDRLP4 192+4
INDIRF4
ADDRLP4 288
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 260+8
ADDRLP4 176+8
INDIRF4
ADDRLP4 192+8
INDIRF4
ADDRGP4 mod_lgrange
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 1361
;1361:	} else if (weaphack == WP_TOOLGUN){
ADDRGP4 $829
JUMPV
LABELV $828
ADDRLP4 188
INDIRI4
CNSTI4 16
NEI4 $836
line 1362
;1362:	VectorMA( muzzlePoint, TOOLGUN_RANGE, forward, endPoint );	
ADDRLP4 288
CNSTF4 1157627904
ASGNF4
ADDRLP4 260
ADDRLP4 176
INDIRF4
ADDRLP4 288
INDIRF4
ADDRLP4 192
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 260+4
ADDRLP4 176+4
INDIRF4
ADDRLP4 288
INDIRF4
ADDRLP4 192+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 260+8
ADDRLP4 176+8
INDIRF4
CNSTF4 1157627904
ADDRLP4 192+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1363
;1363:	} else if (weaphack == WP_PHYSGUN){
ADDRGP4 $837
JUMPV
LABELV $836
ADDRLP4 188
INDIRI4
CNSTI4 17
NEI4 $844
line 1364
;1364:	VectorMA( muzzlePoint, PHYSGUN_RANGE, forward, endPoint );	
ADDRLP4 288
CNSTF4 1166016512
ASGNF4
ADDRLP4 260
ADDRLP4 176
INDIRF4
ADDRLP4 288
INDIRF4
ADDRLP4 192
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 260+4
ADDRLP4 176+4
INDIRF4
ADDRLP4 288
INDIRF4
ADDRLP4 192+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 260+8
ADDRLP4 176+8
INDIRF4
CNSTF4 1166016512
ADDRLP4 192+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1365
;1365:	} else if (weaphack == WP_GRAVITYGUN){
ADDRGP4 $845
JUMPV
LABELV $844
ADDRLP4 188
INDIRI4
CNSTI4 18
NEI4 $852
line 1366
;1366:	VectorMA( muzzlePoint, GRAVITYGUN_RANGE, forward, endPoint );	
ADDRLP4 288
CNSTF4 1140850688
ASGNF4
ADDRLP4 260
ADDRLP4 176
INDIRF4
ADDRLP4 288
INDIRF4
ADDRLP4 192
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 260+4
ADDRLP4 176+4
INDIRF4
ADDRLP4 288
INDIRF4
ADDRLP4 192+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 260+8
ADDRLP4 176+8
INDIRF4
CNSTF4 1140850688
ADDRLP4 192+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1367
;1367:	}
LABELV $852
LABELV $845
LABELV $837
LABELV $829
line 1370
;1368:
;1369:	// see if it hit a wall
;1370:	CG_Trace( &trace, muzzlePoint, vec3_origin, vec3_origin, endPoint, 
ADDRLP4 204
ARGP4
ADDRLP4 176
ARGP4
ADDRLP4 288
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 288
INDIRP4
ARGP4
ADDRLP4 288
INDIRP4
ARGP4
ADDRLP4 260
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1374
;1371:		cent->currentState.number, MASK_SHOT );
;1372:
;1373:	// this is the endpoint
;1374:	VectorCopy( trace.endpos, beam.oldorigin );
ADDRLP4 0+84
ADDRLP4 204+12
INDIRB
ASGNB 12
line 1378
;1375:
;1376:	// use the provided origin, even though it may be slightly
;1377:	// different than the muzzle origin
;1378:	VectorCopy( origin, beam.origin );
ADDRLP4 0+68
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1380
;1379:	
;1380:	if (weaphack == WP_PHYSGUN) {
ADDRLP4 188
INDIRI4
CNSTI4 17
NEI4 $863
line 1381
;1381:		CG_PhysgunTrail (ci, origin, trace.endpos);
ADDRLP4 272
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 204+12
ARGP4
ADDRGP4 CG_PhysgunTrail
CALLV
pop
line 1382
;1382:		return;
ADDRGP4 $779
JUMPV
LABELV $863
line 1384
;1383:	}
;1384:	if (weaphack == WP_GRAVITYGUN) {
ADDRLP4 188
INDIRI4
CNSTI4 18
NEI4 $866
line 1385
;1385:		CG_GravitygunTrail (ci, origin, trace.endpos);
ADDRLP4 272
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 204+12
ARGP4
ADDRGP4 CG_GravitygunTrail
CALLV
pop
line 1386
;1386:		return;
ADDRGP4 $779
JUMPV
LABELV $866
line 1389
;1387:	}
;1388:
;1389:	beam.reType = RT_LIGHTNING;
ADDRLP4 0
CNSTI4 6
ASGNI4
line 1390
;1390:	beam.customShader = cgs.media.lightningShader;
ADDRLP4 0+112
ADDRGP4 cgs+956380+440
INDIRI4
ASGNI4
line 1391
;1391:	trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1394
;1392:
;1393:	// add the impact flare if it hit something
;1394:	if ( trace.fraction < 1.0 ) {
ADDRLP4 204+8
INDIRF4
CNSTF4 1065353216
GEF4 $872
line 1398
;1395:		vec3_t	angles;
;1396:		vec3_t	dir;
;1397:
;1398:		VectorSubtract( beam.oldorigin, beam.origin, dir );
ADDRLP4 292
ADDRLP4 0+84
INDIRF4
ADDRLP4 0+68
INDIRF4
SUBF4
ASGNF4
ADDRLP4 292+4
ADDRLP4 0+84+4
INDIRF4
ADDRLP4 0+68+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 292+8
ADDRLP4 0+84+8
INDIRF4
ADDRLP4 0+68+8
INDIRF4
SUBF4
ASGNF4
line 1399
;1399:		VectorNormalize( dir );
ADDRLP4 292
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1401
;1400:
;1401:		memset( &beam, 0, sizeof( beam ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1402
;1402:		beam.hModel = cgs.media.lightningExplosionModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+1652
INDIRI4
ASGNI4
line 1404
;1403:
;1404:		VectorMA( trace.endpos, -16, dir, beam.origin );
ADDRLP4 0+68
ADDRLP4 204+12
INDIRF4
CNSTF4 3246391296
ADDRLP4 292
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 204+12+4
INDIRF4
CNSTF4 3246391296
ADDRLP4 292+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 204+12+8
INDIRF4
CNSTF4 3246391296
ADDRLP4 292+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1407
;1405:
;1406:		// make a random orientation
;1407:		angles[0] = rand() % 360;
ADDRLP4 316
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 304
ADDRLP4 316
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1408
;1408:		angles[1] = rand() % 360;
ADDRLP4 320
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 304+4
ADDRLP4 320
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1409
;1409:		angles[2] = rand() % 360;
ADDRLP4 324
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 304+8
ADDRLP4 324
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 1410
;1410:		AnglesToAxis( angles, beam.axis );
ADDRLP4 304
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1411
;1411:		trap_R_AddRefEntityToScene( &beam );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1412
;1412:	}
LABELV $872
line 1413
;1413:}
LABELV $779
endproc CG_LightningBolt 328 28
proc CG_SpawnRailTrail 8 12
line 1423
;1414:
;1415:/*
;1416:===============
;1417:CG_SpawnRailTrail
;1418:
;1419:Origin will be the exact tag point, which is slightly
;1420:different than the muzzle point used for determining hits.
;1421:===============
;1422:*/
;1423:static void CG_SpawnRailTrail( centity_t *cent, vec3_t origin ) {
line 1427
;1424:	clientInfo_t	*ci;
;1425:	int				weaphack;
;1426:
;1427:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 0
CNSTI4 1944
ADDRFP4 0
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+440948
ADDP4
ASGNP4
line 1429
;1428:	
;1429:	if(ci->swepid >= 1){
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
LTI4 $907
line 1430
;1430:	weaphack = ci->swepid;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
line 1431
;1431:	} else {
ADDRGP4 $908
JUMPV
LABELV $907
line 1432
;1432:	weaphack = cent->currentState.weapon;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ASGNI4
line 1433
;1433:	}
LABELV $908
line 1435
;1434:
;1435:	if ( weaphack != WP_RAILGUN ) {
ADDRLP4 4
INDIRI4
CNSTI4 7
EQI4 $909
line 1436
;1436:		return;
ADDRGP4 $905
JUMPV
LABELV $909
line 1438
;1437:	}
;1438:	if ( !cent->pe.railgunFlash ) {
ADDRFP4 0
INDIRP4
CNSTI4 660
ADDP4
INDIRI4
CNSTI4 0
NEI4 $911
line 1439
;1439:		return;
ADDRGP4 $905
JUMPV
LABELV $911
line 1441
;1440:	}
;1441:	cent->pe.railgunFlash = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 660
ADDP4
CNSTI4 1
ASGNI4
line 1442
;1442:	CG_RailTrail( ci, origin, cent->pe.railgunImpact );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
ARGP4
ADDRGP4 CG_RailTrail
CALLV
pop
line 1443
;1443:}
LABELV $905
endproc CG_SpawnRailTrail 8 12
proc CG_MachinegunSpinAngle 44 16
line 1453
;1444:
;1445:
;1446:/*
;1447:======================
;1448:CG_MachinegunSpinAngle
;1449:======================
;1450:*/
;1451:#define		SPIN_SPEED	0.9
;1452:#define		COAST_TIME	1000
;1453:static float	CG_MachinegunSpinAngle( centity_t *cent ) {
line 1460
;1454:	int		delta;
;1455:	float	angle;
;1456:	float	speed;
;1457:	clientInfo_t	*ci;
;1458:	int				weaphack;
;1459:
;1460:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 8
CNSTI4 1944
ADDRFP4 0
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+440948
ADDP4
ASGNP4
line 1462
;1461:	
;1462:	if(ci->swepid >= 1){
ADDRLP4 8
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
LTI4 $915
line 1463
;1463:	weaphack = ci->swepid;
ADDRLP4 12
ADDRLP4 8
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
line 1464
;1464:	} else {
ADDRGP4 $916
JUMPV
LABELV $915
line 1465
;1465:	weaphack = cent->currentState.weapon;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ASGNI4
line 1466
;1466:	}
LABELV $916
line 1468
;1467:
;1468:	delta = cg.time - cent->pe.barrelTime;
ADDRLP4 0
ADDRGP4 cg+1868892
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 668
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1469
;1469:	if ( cent->pe.barrelSpinning ) {
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
CNSTI4 0
EQI4 $918
line 1470
;1470:		angle = cent->pe.barrelAngle + delta * SPIN_SPEED;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
CNSTF4 1063675494
ADDRLP4 0
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 1471
;1471:	} else {
ADDRGP4 $919
JUMPV
LABELV $918
line 1472
;1472:		if ( delta > COAST_TIME ) {
ADDRLP4 0
INDIRI4
CNSTI4 1000
LEI4 $920
line 1473
;1473:			delta = COAST_TIME;
ADDRLP4 0
CNSTI4 1000
ASGNI4
line 1474
;1474:		}
LABELV $920
line 1476
;1475:
;1476:		speed = 0.5 * ( SPIN_SPEED + (float)( COAST_TIME - delta ) / COAST_TIME );
ADDRLP4 16
CNSTF4 1056964608
CNSTI4 1000
ADDRLP4 0
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1148846080
DIVF4
CNSTF4 1063675494
ADDF4
MULF4
ASGNF4
line 1477
;1477:		angle = cent->pe.barrelAngle + delta * speed;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 1478
;1478:	}
LABELV $919
line 1480
;1479:
;1480:	if ( cent->pe.barrelSpinning == !(cent->currentState.eFlags & EF_FIRING) ) {
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
NEI4 $925
ADDRLP4 20
CNSTI4 1
ASGNI4
ADDRGP4 $926
JUMPV
LABELV $925
ADDRLP4 20
CNSTI4 0
ASGNI4
LABELV $926
ADDRLP4 24
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $922
line 1481
;1481:		cent->pe.barrelTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 668
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 1482
;1482:		cent->pe.barrelAngle = AngleMod( angle );
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 28
ADDRGP4 AngleMod
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 664
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
line 1483
;1483:		cent->pe.barrelSpinning = !!(cent->currentState.eFlags & EF_FIRING);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $929
ADDRLP4 32
CNSTI4 1
ASGNI4
ADDRGP4 $930
JUMPV
LABELV $929
ADDRLP4 32
CNSTI4 0
ASGNI4
LABELV $930
ADDRLP4 36
INDIRP4
CNSTI4 672
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 1485
;1484:
;1485:		if ( weaphack == WP_CHAINGUN && !cent->pe.barrelSpinning ) {
ADDRLP4 12
INDIRI4
CNSTI4 13
NEI4 $931
ADDRFP4 0
INDIRP4
CNSTI4 672
ADDP4
INDIRI4
CNSTI4 0
NEI4 $931
line 1486
;1486:			trap_S_StartSound( NULL, cent->currentState.number, CHAN_WEAPON, trap_S_RegisterSound_MiTech( "sound/weapons/vulcan/wvulwind.wav", qfalse ) );
ADDRGP4 $933
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 40
ADDRGP4 trap_S_RegisterSound_MiTech
CALLI4
ASGNI4
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 40
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1487
;1487:		}
LABELV $931
line 1489
;1488:
;1489:	}
LABELV $922
line 1491
;1490:
;1491:	return angle;
ADDRLP4 4
INDIRF4
RETF4
LABELV $913
endproc CG_MachinegunSpinAngle 44 16
proc CG_AddWeaponWithPowerups 0 4
line 1500
;1492:}
;1493:
;1494:
;1495:/*
;1496:========================
;1497:CG_AddWeaponWithPowerups
;1498:========================
;1499:*/
;1500:static void CG_AddWeaponWithPowerups( refEntity_t *gun, int powerups ) {
line 1502
;1501:	// add powerup effects
;1502:	if ( powerups & ( 1 << PW_INVIS ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $935
line 1503
;1503:            if( (cgs.dmflags & DF_INVIS) == 0) {
ADDRGP4 cgs+339044
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
NEI4 $936
line 1504
;1504:		gun->customShader = cgs.media.invisShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+956380+1548
INDIRI4
ASGNI4
line 1505
;1505:		trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1506
;1506:            }
line 1507
;1507:	} else {
ADDRGP4 $936
JUMPV
LABELV $935
line 1508
;1508:		trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1510
;1509:
;1510:		if ( powerups & ( 1 << PW_BATTLESUIT ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $942
line 1511
;1511:			gun->customShader = cgs.media.battleWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+956380+1560
INDIRI4
ASGNI4
line 1512
;1512:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1513
;1513:		}
LABELV $942
line 1514
;1514:		if ( powerups & ( 1 << PW_QUAD ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $946
line 1515
;1515:			gun->customShader = cgs.media.quadWeaponShader;
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
ADDRGP4 cgs+956380+1544
INDIRI4
ASGNI4
line 1516
;1516:			trap_R_AddRefEntityToScene( gun );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1517
;1517:		}
LABELV $946
line 1518
;1518:	}
LABELV $936
line 1519
;1519:}
LABELV $934
endproc CG_AddWeaponWithPowerups 0 4
export CG_AddPlayerWeapon
proc CG_AddPlayerWeapon 652 24
line 1531
;1520:
;1521:
;1522:/*
;1523:=============
;1524:CG_AddPlayerWeapon
;1525:
;1526:Used for both the view weapon (ps is valid) and the world modelother character models (ps is NULL)
;1527:The main player will have this called for BOTH cases, so effects like light and
;1528:sound should only be done on the world model case.
;1529:=============
;1530:*/
;1531:void CG_AddPlayerWeapon( refEntity_t *parent, playerState_t *ps, centity_t *cent, int team, clientInfo_t *ci ) {
line 1541
;1532:	refEntity_t	gun;
;1533:	refEntity_t	barrel;
;1534:	refEntity_t	flash;
;1535:	vec3_t		angles;
;1536:	int			weaponNum;
;1537:	weaponInfo_t	*weapon;
;1538:	centity_t	*nonPredictedCent;
;1539:	orientation_t	lerped;
;1540:
;1541:if ( cg.snap->ps.pm_type == PM_CUTSCENE ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 7
NEI4 $951
line 1542
;1542:	weaponNum = 1;
ADDRLP4 352
CNSTI4 1
ASGNI4
line 1543
;1543:} else {
ADDRGP4 $952
JUMPV
LABELV $951
line 1544
;1544:	if(ci->swepid <= 15){
ADDRFP4 16
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 15
GTI4 $954
line 1545
;1545:	weaponNum = cent->currentState.weapon;
ADDRLP4 352
ADDRFP4 8
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ASGNI4
line 1546
;1546:	} else {
ADDRGP4 $955
JUMPV
LABELV $954
line 1547
;1547:	weaponNum = ci->swepid;
ADDRLP4 352
ADDRFP4 16
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
line 1548
;1548:	}
LABELV $955
line 1549
;1549:}
LABELV $952
line 1551
;1550:
;1551:	CG_RegisterWeapon( weaponNum );
ADDRLP4 352
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1552
;1552:	weapon = &cg_weapons[weaponNum];
ADDRLP4 404
CNSTI4 136
ADDRLP4 352
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1555
;1553:
;1554:	// add the weapon
;1555:	memset( &gun, 0, sizeof( gun ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1556
;1556:	VectorCopy( parent->lightingOrigin, gun.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1557
;1557:	gun.shadowPlane = parent->shadowPlane;
ADDRLP4 0+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1558
;1558:	gun.renderfx = parent->renderfx;
ADDRLP4 0+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1561
;1559:
;1560:	// set custom shading for railgun refire rate
;1561:	if ( ps || cent->currentState.clientNum == cg.predictedPlayerState.clientNum ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $963
ADDRFP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ADDRGP4 cg+1868928+140
INDIRI4
NEI4 $959
LABELV $963
line 1562
;1562:		if ( weaponNum == WP_RAILGUN 
ADDRLP4 352
INDIRI4
CNSTI4 7
NEI4 $964
ADDRGP4 cg+1868928+148
INDIRI4
CNSTI4 3
NEI4 $964
line 1563
;1563:			&& cg.predictedPlayerState.weaponstate == WEAPON_FIRING ) {
line 1566
;1564:			float	f;
;1565:
;1566:			f = (float)cg.predictedPlayerState.weaponTime / 1500;
ADDRLP4 600
ADDRGP4 cg+1868928+44
INDIRI4
CVIF4 4
CNSTF4 1153138688
DIVF4
ASGNF4
line 1567
;1567:			gun.shaderRGBA[1] = 0;
ADDRLP4 0+116+1
CNSTU1 0
ASGNU1
line 1568
;1568:			gun.shaderRGBA[0] = 
ADDRLP4 608
CNSTF4 1132396544
CNSTF4 1065353216
ADDRLP4 600
INDIRF4
SUBF4
MULF4
ASGNF4
ADDRLP4 612
CNSTF4 1325400064
ASGNF4
ADDRLP4 608
INDIRF4
ADDRLP4 612
INDIRF4
LTF4 $976
ADDRLP4 604
ADDRLP4 608
INDIRF4
ADDRLP4 612
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $977
JUMPV
LABELV $976
ADDRLP4 604
ADDRLP4 608
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $977
ADDRLP4 616
ADDRLP4 604
INDIRU4
CVUU1 4
ASGNU1
ADDRLP4 0+116+2
ADDRLP4 616
INDIRU1
ASGNU1
ADDRLP4 0+116
ADDRLP4 616
INDIRU1
ASGNU1
line 1570
;1569:			gun.shaderRGBA[2] = 255 * ( 1.0 - f );
;1570:		} else {
ADDRGP4 $965
JUMPV
LABELV $964
line 1571
;1571:			gun.shaderRGBA[0] = 255;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 1572
;1572:			gun.shaderRGBA[1] = 100;
ADDRLP4 0+116+1
CNSTU1 100
ASGNU1
line 1573
;1573:			gun.shaderRGBA[2] = 100;
ADDRLP4 0+116+2
CNSTU1 100
ASGNU1
line 1574
;1574:			gun.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1575
;1575:		}
LABELV $965
line 1576
;1576:	}
LABELV $959
line 1578
;1577:	
;1578:	if ( weaponNum == WP_PHYSGUN ){
ADDRLP4 352
INDIRI4
CNSTI4 17
NEI4 $985
line 1579
;1579:		gun.shaderRGBA[0] = ci->pg_red;
ADDRLP4 604
ADDRFP4 16
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 608
CNSTF4 1325400064
ASGNF4
ADDRLP4 604
INDIRF4
ADDRLP4 608
INDIRF4
LTF4 $989
ADDRLP4 600
ADDRLP4 604
INDIRF4
ADDRLP4 608
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $990
JUMPV
LABELV $989
ADDRLP4 600
ADDRLP4 604
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $990
ADDRLP4 0+116
ADDRLP4 600
INDIRU4
CVUU1 4
ASGNU1
line 1580
;1580:		gun.shaderRGBA[1] = ci->pg_green;
ADDRLP4 616
ADDRFP4 16
INDIRP4
CNSTI4 140
ADDP4
INDIRF4
ASGNF4
ADDRLP4 620
CNSTF4 1325400064
ASGNF4
ADDRLP4 616
INDIRF4
ADDRLP4 620
INDIRF4
LTF4 $994
ADDRLP4 612
ADDRLP4 616
INDIRF4
ADDRLP4 620
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $995
JUMPV
LABELV $994
ADDRLP4 612
ADDRLP4 616
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $995
ADDRLP4 0+116+1
ADDRLP4 612
INDIRU4
CVUU1 4
ASGNU1
line 1581
;1581:		gun.shaderRGBA[2] = ci->pg_blue;
ADDRLP4 628
ADDRFP4 16
INDIRP4
CNSTI4 144
ADDP4
INDIRF4
ASGNF4
ADDRLP4 632
CNSTF4 1325400064
ASGNF4
ADDRLP4 628
INDIRF4
ADDRLP4 632
INDIRF4
LTF4 $999
ADDRLP4 624
ADDRLP4 628
INDIRF4
ADDRLP4 632
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1000
JUMPV
LABELV $999
ADDRLP4 624
ADDRLP4 628
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1000
ADDRLP4 0+116+2
ADDRLP4 624
INDIRU4
CVUU1 4
ASGNU1
line 1582
;1582:		gun.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1583
;1583:	}
LABELV $985
line 1584
;1584:	if ( weaponNum == WP_GRAVITYGUN ){
ADDRLP4 352
INDIRI4
CNSTI4 18
NEI4 $1003
line 1585
;1585:		gun.shaderRGBA[0] = 120;
ADDRLP4 0+116
CNSTU1 120
ASGNU1
line 1586
;1586:		gun.shaderRGBA[1] = 60;
ADDRLP4 0+116+1
CNSTU1 60
ASGNU1
line 1587
;1587:		gun.shaderRGBA[2] = 0;
ADDRLP4 0+116+2
CNSTU1 0
ASGNU1
line 1588
;1588:		gun.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1589
;1589:	}
LABELV $1003
line 1591
;1590:
;1591:	gun.hModel = weapon->weaponModel;
ADDRLP4 0+8
ADDRLP4 404
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ASGNI4
line 1592
;1592:	if (!gun.hModel) {
ADDRLP4 0+8
INDIRI4
CNSTI4 0
NEI4 $1013
line 1593
;1593:		return;
ADDRGP4 $950
JUMPV
LABELV $1013
line 1599
;1594:	}
;1595:	//if ( cent->currentState.eFlags & EF_TALK ) {
;1596:	//	gun.hModel = trap_R_RegisterModel_MiTech( "smartphone.md3" );
;1597:	//}
;1598:
;1599:	if ( !ps ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1016
line 1601
;1600:		// add weapon ready sound
;1601:		cent->pe.lightningFiring = qfalse;
ADDRFP4 8
INDIRP4
CNSTI4 644
ADDP4
CNSTI4 0
ASGNI4
line 1602
;1602:		if ( ( cent->currentState.eFlags & EF_FIRING ) && weapon->firingSound ) {
ADDRLP4 600
CNSTI4 0
ASGNI4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
ADDRLP4 600
INDIRI4
EQI4 $1018
ADDRLP4 404
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
ADDRLP4 600
INDIRI4
EQI4 $1018
line 1604
;1603:			// lightning gun and guantlet make a different sound when fire is held down
;1604:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->firingSound );
ADDRLP4 604
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 604
INDIRP4
INDIRI4
ARGI4
ADDRLP4 604
INDIRP4
CNSTI4 816
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 404
INDIRP4
CNSTI4 128
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1605
;1605:			cent->pe.lightningFiring = qtrue;
ADDRFP4 8
INDIRP4
CNSTI4 644
ADDP4
CNSTI4 1
ASGNI4
line 1606
;1606:		} else if ( weapon->readySound && cg.predictedPlayerState.pm_type != PM_CUTSCENE ) {	
ADDRGP4 $1019
JUMPV
LABELV $1018
ADDRLP4 404
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1020
ADDRGP4 cg+1868928+4
INDIRI4
CNSTI4 7
EQI4 $1020
line 1611
;1607:			//note: the pm_cutscene check above makes weapon idle noises stop during cutscenes, but it does so for 
;1608:			//ALL weapons, including those of bots. Unfortunately this method is called without supplying ps for the 
;1609:			//player itself as well. So unfortunately, I cannot differentiate between bots and players which means that
;1610:			//either ALL hums play or NO hums play. I've chosen for the latter option during cutscenes.
;1611:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->readySound );
ADDRLP4 604
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 604
INDIRP4
INDIRI4
ARGI4
ADDRLP4 604
INDIRP4
CNSTI4 816
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 404
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 1612
;1612:		}
LABELV $1020
LABELV $1019
line 1613
;1613:	}
LABELV $1016
line 1615
;1614:
;1615:	trap_R_LerpTag(&lerped, parent->hModel, parent->oldframe, parent->frame,
ADDRLP4 356
ARGP4
ADDRLP4 600
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 600
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 600
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRLP4 600
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
CNSTF4 1065353216
ADDRLP4 600
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ARGF4
ADDRGP4 $1024
ARGP4
ADDRGP4 trap_R_LerpTag
CALLI4
pop
line 1617
;1616:		1.0 - parent->backlerp, "tag_weapon");
;1617:	VectorCopy(parent->origin, gun.origin);
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
INDIRB
ASGNB 12
line 1619
;1618:
;1619:	VectorMA(gun.origin, lerped.origin[0], parent->axis[0], gun.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 356
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 356
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 356
INDIRF4
MULF4
ADDF4
ASGNF4
line 1622
;1620:
;1621:	// Make weapon appear left-handed for 2 and centered for 3
;1622:	if(ps && cg_drawGun.integer == 2)
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1036
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 2
NEI4 $1036
line 1623
;1623:		VectorMA(gun.origin, -lerped.origin[1], parent->axis[1], gun.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 356+4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 356+4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 356+4
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRGP4 $1037
JUMPV
LABELV $1036
line 1624
;1624:	else if(!ps || cg_drawGun.integer != 3)
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1055
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 3
EQI4 $1052
LABELV $1055
line 1625
;1625:       	VectorMA(gun.origin, lerped.origin[1], parent->axis[1], gun.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 356+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 356+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 356+4
INDIRF4
MULF4
ADDF4
ASGNF4
LABELV $1052
LABELV $1037
line 1627
;1626:
;1627:	VectorMA(gun.origin, lerped.origin[2], parent->axis[2], gun.origin);
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRF4
ADDRLP4 356+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRF4
ADDRLP4 356+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ADDRLP4 356+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1629
;1628:
;1629:	MatrixMultiply(lerped.axis, ((refEntity_t *)parent)->axis, gun.axis);
ADDRLP4 356+12
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 1630
;1630:	gun.backlerp = parent->backlerp;
ADDRLP4 0+100
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
ASGNF4
line 1632
;1631:
;1632:	CG_AddWeaponWithPowerups( &gun, cent->currentState.powerups );
ADDRLP4 0
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1638
;1633:
;1634:	// add the spinning barrel
;1635:	//if ( cent->currentState.eFlags & EF_TALK ) {
;1636:	//	return;
;1637:	//}
;1638:	if ( weapon->barrelModel ) {
ADDRLP4 404
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1085
line 1639
;1639:		memset( &barrel, 0, sizeof( barrel ) );
ADDRLP4 420
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1640
;1640:		VectorCopy( parent->lightingOrigin, barrel.lightingOrigin );
ADDRLP4 420+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1641
;1641:		barrel.shadowPlane = parent->shadowPlane;
ADDRLP4 420+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1642
;1642:		barrel.renderfx = parent->renderfx;
ADDRLP4 420+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1644
;1643:
;1644:		barrel.hModel = weapon->barrelModel;
ADDRLP4 420+8
ADDRLP4 404
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 1645
;1645:		angles[YAW] = 0;
ADDRLP4 408+4
CNSTF4 0
ASGNF4
line 1646
;1646:		angles[PITCH] = 0;
ADDRLP4 408
CNSTF4 0
ASGNF4
line 1647
;1647:		angles[ROLL] = CG_MachinegunSpinAngle( cent );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 604
ADDRGP4 CG_MachinegunSpinAngle
CALLF4
ASGNF4
ADDRLP4 408+8
ADDRLP4 604
INDIRF4
ASGNF4
line 1648
;1648:		AnglesToAxis( angles, barrel.axis );
ADDRLP4 408
ARGP4
ADDRLP4 420+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1650
;1649:
;1650:		CG_PositionRotatedEntityOnTag( &barrel, &gun, weapon->weaponModel, "tag_barrel" );
ADDRLP4 420
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 404
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1094
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1652
;1651:
;1652:		CG_AddWeaponWithPowerups( &barrel, cent->currentState.powerups );
ADDRLP4 420
ARGP4
ADDRFP4 8
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_AddWeaponWithPowerups
CALLV
pop
line 1653
;1653:	}
LABELV $1085
line 1656
;1654:
;1655:	// make sure we aren't looking at cg.predictedPlayerEntity for LG
;1656:	nonPredictedCent = &cg_entities[cent->currentState.clientNum];
ADDRLP4 596
CNSTI4 928
ADDRFP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1661
;1657:
;1658:	// if the index of the nonPredictedCent is not the same as the clientNum
;1659:	// then this is a fake player (like on teh single player podiums), so
;1660:	// go ahead and use the cent
;1661:	if( ( nonPredictedCent - cg_entities ) != cent->currentState.clientNum ) {
ADDRLP4 596
INDIRP4
CVPU4 4
ADDRGP4 cg_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 928
DIVI4
ADDRFP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
EQI4 $1095
line 1662
;1662:		nonPredictedCent = cent;
ADDRLP4 596
ADDRFP4 8
INDIRP4
ASGNP4
line 1663
;1663:	}
LABELV $1095
line 1666
;1664:
;1665:	// add the flash
;1666:	if ( ( weaponNum == WP_LIGHTNING || weaponNum == WP_GAUNTLET || weaponNum == WP_GRAPPLING_HOOK || weaponNum == WP_PHYSGUN || weaponNum == WP_GRAVITYGUN )
ADDRLP4 352
INDIRI4
CNSTI4 6
EQI4 $1102
ADDRLP4 352
INDIRI4
CNSTI4 1
EQI4 $1102
ADDRLP4 352
INDIRI4
CNSTI4 10
EQI4 $1102
ADDRLP4 352
INDIRI4
CNSTI4 17
EQI4 $1102
ADDRLP4 352
INDIRI4
CNSTI4 18
NEI4 $1097
LABELV $1102
ADDRLP4 596
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1097
line 1668
;1667:		&& ( nonPredictedCent->currentState.eFlags & EF_FIRING ) ) 
;1668:	{
line 1670
;1669:		// continuous flash
;1670:	} else {
ADDRGP4 $1098
JUMPV
LABELV $1097
line 1672
;1671:		// impulse flash
;1672:		if ( cg.time - cent->muzzleFlashTime > MUZZLE_FLASH_TIME && !cent->pe.railgunFlash ) {
ADDRLP4 608
ADDRFP4 8
INDIRP4
ASGNP4
ADDRGP4 cg+1868892
INDIRI4
ADDRLP4 608
INDIRP4
CNSTI4 464
ADDP4
INDIRI4
SUBI4
CNSTI4 75
LEI4 $1103
ADDRLP4 608
INDIRP4
CNSTI4 660
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1103
line 1673
;1673:			return;
ADDRGP4 $950
JUMPV
LABELV $1103
line 1675
;1674:		}
;1675:	}
LABELV $1098
line 1677
;1676:
;1677:	memset( &flash, 0, sizeof( flash ) );
ADDRLP4 176
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1678
;1678:	VectorCopy( parent->lightingOrigin, flash.lightingOrigin );
ADDRLP4 176+12
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 1679
;1679:	flash.shadowPlane = parent->shadowPlane;
ADDRLP4 176+24
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1680
;1680:	flash.renderfx = parent->renderfx;
ADDRLP4 176+4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 1682
;1681:
;1682:	flash.hModel = weapon->flashModel;
ADDRLP4 176+8
ADDRLP4 404
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 1683
;1683:	if (!flash.hModel) {
ADDRLP4 176+8
INDIRI4
CNSTI4 0
NEI4 $1110
line 1684
;1684:		return;
ADDRGP4 $950
JUMPV
LABELV $1110
line 1686
;1685:	}
;1686:	angles[YAW] = 0;
ADDRLP4 408+4
CNSTF4 0
ASGNF4
line 1687
;1687:	angles[PITCH] = 0;
ADDRLP4 408
CNSTF4 0
ASGNF4
line 1688
;1688:	angles[ROLL] = crandom() * 10;
ADDRLP4 608
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 408+8
CNSTF4 1092616192
CNSTF4 1073741824
ADDRLP4 608
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ASGNF4
line 1689
;1689:	AnglesToAxis( angles, flash.axis );
ADDRLP4 408
ARGP4
ADDRLP4 176+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1692
;1690:
;1691:	// colorize the railgun blast
;1692:	if ( weaponNum == WP_RAILGUN ) {
ADDRLP4 352
INDIRI4
CNSTI4 7
NEI4 $1116
line 1695
;1693:		clientInfo_t	*ci;
;1694:
;1695:		ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 612
CNSTI4 1944
ADDRFP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+440948
ADDP4
ASGNP4
line 1696
;1696:		flash.shaderRGBA[0] = 255 * ci->color1[0];
ADDRLP4 620
CNSTF4 1132396544
ADDRLP4 612
INDIRP4
CNSTI4 76
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 624
CNSTF4 1325400064
ASGNF4
ADDRLP4 620
INDIRF4
ADDRLP4 624
INDIRF4
LTF4 $1121
ADDRLP4 616
ADDRLP4 620
INDIRF4
ADDRLP4 624
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1122
JUMPV
LABELV $1121
ADDRLP4 616
ADDRLP4 620
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1122
ADDRLP4 176+116
ADDRLP4 616
INDIRU4
CVUU1 4
ASGNU1
line 1697
;1697:		flash.shaderRGBA[1] = 255 * ci->color1[1];
ADDRLP4 632
CNSTF4 1132396544
ADDRLP4 612
INDIRP4
CNSTI4 80
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 636
CNSTF4 1325400064
ASGNF4
ADDRLP4 632
INDIRF4
ADDRLP4 636
INDIRF4
LTF4 $1126
ADDRLP4 628
ADDRLP4 632
INDIRF4
ADDRLP4 636
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1127
JUMPV
LABELV $1126
ADDRLP4 628
ADDRLP4 632
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1127
ADDRLP4 176+116+1
ADDRLP4 628
INDIRU4
CVUU1 4
ASGNU1
line 1698
;1698:		flash.shaderRGBA[2] = 255 * ci->color1[2];
ADDRLP4 644
CNSTF4 1132396544
ADDRLP4 612
INDIRP4
CNSTI4 84
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 648
CNSTF4 1325400064
ASGNF4
ADDRLP4 644
INDIRF4
ADDRLP4 648
INDIRF4
LTF4 $1131
ADDRLP4 640
ADDRLP4 644
INDIRF4
ADDRLP4 648
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1132
JUMPV
LABELV $1131
ADDRLP4 640
ADDRLP4 644
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1132
ADDRLP4 176+116+2
ADDRLP4 640
INDIRU4
CVUU1 4
ASGNU1
line 1699
;1699:	}
LABELV $1116
line 1701
;1700:
;1701:	CG_PositionRotatedEntityOnTag( &flash, &gun, weapon->weaponModel, "tag_flash");
ADDRLP4 176
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 404
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $1133
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 1702
;1702:	trap_R_AddRefEntityToScene( &flash );
ADDRLP4 176
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1704
;1703:
;1704:	if ( ps || cg.renderingThirdPerson ||
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1140
ADDRGP4 cg+1868916
INDIRI4
CNSTI4 0
NEI4 $1140
ADDRFP4 8
INDIRP4
INDIRI4
ADDRGP4 cg+1868928+140
INDIRI4
EQI4 $1134
LABELV $1140
line 1705
;1705:		cent->currentState.number != cg.predictedPlayerState.clientNum ) {
line 1707
;1706:		// add lightning bolt
;1707:		CG_LightningBolt( nonPredictedCent, flash.origin );
ADDRLP4 596
INDIRP4
ARGP4
ADDRLP4 176+68
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1710
;1708:
;1709:		// add rail trail
;1710:		CG_SpawnRailTrail( cent, flash.origin );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 176+68
ARGP4
ADDRGP4 CG_SpawnRailTrail
CALLV
pop
line 1712
;1711:
;1712:		if ( weapon->flashDlightColor[0] || weapon->flashDlightColor[1] || weapon->flashDlightColor[2] ) {
ADDRLP4 616
CNSTF4 0
ASGNF4
ADDRLP4 404
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 616
INDIRF4
NEF4 $1146
ADDRLP4 404
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ADDRLP4 616
INDIRF4
NEF4 $1146
ADDRLP4 404
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ADDRLP4 616
INDIRF4
EQF4 $1143
LABELV $1146
line 1713
;1713:			trap_R_AddLightToScene( flash.origin, 300 + (rand()&31), weapon->flashDlightColor[0],
ADDRLP4 620
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 176+68
ARGP4
ADDRLP4 620
INDIRI4
CNSTI4 31
BANDI4
CNSTI4 300
ADDI4
CVIF4 4
ARGF4
ADDRLP4 404
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ARGF4
ADDRLP4 404
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
ARGF4
ADDRLP4 404
INDIRP4
CNSTI4 48
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1715
;1714:			weapon->flashDlightColor[1], weapon->flashDlightColor[2] );
;1715:		}
LABELV $1143
line 1716
;1716:	}
LABELV $1134
line 1717
;1717:}
LABELV $950
endproc CG_AddPlayerWeapon 652 24
export CG_AddViewWeapon
proc CG_AddViewWeapon 224 20
line 1726
;1718:
;1719:/*
;1720:==============
;1721:CG_AddViewWeapon
;1722:
;1723:Add the weapon, and flash for the player's view
;1724:==============
;1725:*/
;1726:void CG_AddViewWeapon( playerState_t *ps ) {
line 1734
;1727:	refEntity_t	hand;
;1728:	centity_t	*cent;
;1729:	clientInfo_t	*ci;
;1730:	float		fovOffset;
;1731:	vec3_t		angles;
;1732:	weaponInfo_t	*weapon;
;1733:
;1734:	if (cg.renderingEyesPerson >= 1 && cg.renderingEyesPerson <= 3) {
ADDRGP4 cg+1868920
INDIRI4
CNSTI4 1
LTI4 $1149
ADDRGP4 cg+1868920
INDIRI4
CNSTI4 3
GTI4 $1149
line 1737
;1735:		vec3_t origin;
;1736:	
;1737:		if (cg.predictedPlayerState.eFlags & EF_FIRING) {
ADDRGP4 cg+1868928+104
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1148
line 1739
;1738:			// Special hack for lightning gun...
;1739:			VectorCopy(cg.refdef.vieworg, origin);
ADDRLP4 204
ADDRGP4 cg+1870616+24
INDIRB
ASGNB 12
line 1740
;1740:			VectorMA(origin, -8, cg.refdef.viewaxis[2], origin);
ADDRLP4 216
CNSTF4 3238002688
ASGNF4
ADDRLP4 204
ADDRLP4 204
INDIRF4
ADDRLP4 216
INDIRF4
ADDRGP4 cg+1870616+36+24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 204+4
ADDRLP4 204+4
INDIRF4
ADDRLP4 216
INDIRF4
ADDRGP4 cg+1870616+36+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 204+8
ADDRLP4 204+8
INDIRF4
CNSTF4 3238002688
ADDRGP4 cg+1870616+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1741
;1741:			CG_LightningBolt(&cg_entities[ps->clientNum], origin);
CNSTI4 928
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRLP4 204
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1742
;1742:		}
line 1743
;1743:		return;
ADDRGP4 $1148
JUMPV
LABELV $1149
line 1746
;1744:	}
;1745:	
;1746:	if ( ps->persistant[PERS_TEAM] == TEAM_SPECTATOR ) {
ADDRFP4 0
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1174
line 1747
;1747:		return;
ADDRGP4 $1148
JUMPV
LABELV $1174
line 1750
;1748:	}
;1749:
;1750:	if ( ps->pm_type == PM_INTERMISSION || ps->pm_type == PM_CUTSCENE ) {
ADDRLP4 204
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 204
INDIRI4
CNSTI4 5
EQI4 $1178
ADDRLP4 204
INDIRI4
CNSTI4 7
NEI4 $1176
LABELV $1178
line 1751
;1751:		return;
ADDRGP4 $1148
JUMPV
LABELV $1176
line 1756
;1752:	}
;1753:
;1754:	// no gun if in third person view or a camera is active
;1755:	//if ( cg.renderingThirdPerson || cg.cameraMode) {
;1756:	if ( cg.renderingThirdPerson ) {
ADDRGP4 cg+1868916
INDIRI4
CNSTI4 0
EQI4 $1179
line 1757
;1757:		return;
ADDRGP4 $1148
JUMPV
LABELV $1179
line 1762
;1758:	}
;1759:
;1760:
;1761:	// allow the gun to be completely removed
;1762:	if ( !cg_drawGun.integer ) {
ADDRGP4 cg_drawGun+12
INDIRI4
CNSTI4 0
NEI4 $1182
line 1765
;1763:		vec3_t		origin;
;1764:
;1765:		if ( cg.predictedPlayerState.eFlags & EF_FIRING ) {
ADDRGP4 cg+1868928+104
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1148
line 1767
;1766:			// special hack for lightning gun...
;1767:			VectorCopy( cg.refdef.vieworg, origin );
ADDRLP4 208
ADDRGP4 cg+1870616+24
INDIRB
ASGNB 12
line 1768
;1768:			VectorMA( origin, -8, cg.refdef.viewaxis[2], origin );
ADDRLP4 220
CNSTF4 3238002688
ASGNF4
ADDRLP4 208
ADDRLP4 208
INDIRF4
ADDRLP4 220
INDIRF4
ADDRGP4 cg+1870616+36+24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 208+4
ADDRLP4 208+4
INDIRF4
ADDRLP4 220
INDIRF4
ADDRGP4 cg+1870616+36+24+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 208+8
ADDRLP4 208+8
INDIRF4
CNSTF4 3238002688
ADDRGP4 cg+1870616+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1769
;1769:			CG_LightningBolt( &cg_entities[ps->clientNum], origin );
CNSTI4 928
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRLP4 208
ARGP4
ADDRGP4 CG_LightningBolt
CALLV
pop
line 1770
;1770:		}
line 1771
;1771:		return;
ADDRGP4 $1148
JUMPV
LABELV $1182
line 1775
;1772:	}
;1773:
;1774:	// don't draw if testing a gun model
;1775:	if ( cg.testGun ) {
ADDRGP4 cg+1956304
INDIRI4
CNSTI4 0
EQI4 $1206
line 1776
;1776:		return;
ADDRGP4 $1148
JUMPV
LABELV $1206
line 1780
;1777:	}
;1778:
;1779:	// drop gun lower at higher fov
;1780:	if ( cg_fov.integer > 90 ) {
ADDRGP4 cg_fov+12
INDIRI4
CNSTI4 90
LEI4 $1209
line 1781
;1781:		fovOffset = -0.2 * ( cg_fov.integer - 90 );
ADDRLP4 176
CNSTF4 3192704205
ADDRGP4 cg_fov+12
INDIRI4
CNSTI4 90
SUBI4
CVIF4 4
MULF4
ASGNF4
line 1782
;1782:	} else {
ADDRGP4 $1210
JUMPV
LABELV $1209
line 1783
;1783:		fovOffset = 0;
ADDRLP4 176
CNSTF4 0
ASGNF4
line 1784
;1784:	}
LABELV $1210
line 1786
;1785:
;1786:	cent = &cg.predictedPlayerEntity;	// &cg_entities[cg.snap->ps.clientNum];
ADDRLP4 180
ADDRGP4 cg+1869400
ASGNP4
line 1787
;1787:	CG_RegisterWeapon( ps->generic2 );
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1788
;1788:	weapon = &cg_weapons[ ps->generic2 ];
ADDRLP4 200
CNSTI4 136
ADDRFP4 0
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 1790
;1789:
;1790:	memset (&hand, 0, sizeof(hand));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1793
;1791:
;1792:	// set up gun position
;1793:	CG_CalculateWeaponPosition( hand.origin, angles );
ADDRLP4 0+68
ARGP4
ADDRLP4 188
ARGP4
ADDRGP4 CG_CalculateWeaponPosition
CALLV
pop
line 1795
;1794:
;1795:	VectorMA( hand.origin, cg_gun_x.value, cg.refdef.viewaxis[0], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+1870616+36
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+1870616+36+4
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+1870616+36+8
INDIRF4
ADDRGP4 cg_gun_x+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1796
;1796:	VectorMA( hand.origin, cg_gun_y.value, cg.refdef.viewaxis[1], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+1870616+36+12
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+1870616+36+12+4
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+1870616+36+12+8
INDIRF4
ADDRGP4 cg_gun_y+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 1797
;1797:	VectorMA( hand.origin, (cg_gun_z.value+fovOffset), cg.refdef.viewaxis[2], hand.origin );
ADDRLP4 0+68
ADDRLP4 0+68
INDIRF4
ADDRGP4 cg+1870616+36+24
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 176
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+4
ADDRLP4 0+68+4
INDIRF4
ADDRGP4 cg+1870616+36+24+4
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 176
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
ADDRGP4 cg+1870616+36+24+8
INDIRF4
ADDRGP4 cg_gun_z+8
INDIRF4
ADDRLP4 176
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1799
;1798:
;1799:	AnglesToAxis( angles, hand.axis );
ADDRLP4 188
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1802
;1800:
;1801:	// map torso animations to weapon animations
;1802:	if ( cg_gun_frame.integer ) {
ADDRGP4 cg_gun_frame+12
INDIRI4
CNSTI4 0
EQI4 $1285
line 1804
;1803:		// development tool
;1804:		hand.frame = hand.oldframe = cg_gun_frame.integer;
ADDRLP4 208
ADDRGP4 cg_gun_frame+12
INDIRI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 208
INDIRI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 208
INDIRI4
ASGNI4
line 1805
;1805:		hand.backlerp = 0;
ADDRLP4 0+100
CNSTF4 0
ASGNF4
line 1806
;1806:	} else {
ADDRGP4 $1286
JUMPV
LABELV $1285
line 1808
;1807:		// get clientinfo for animation map
;1808:		ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 184
CNSTI4 1944
ADDRLP4 180
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+440948
ADDP4
ASGNP4
line 1809
;1809:		hand.frame = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.frame );
ADDRLP4 184
INDIRP4
ARGP4
ADDRLP4 180
INDIRP4
CNSTI4 548
ADDP4
INDIRI4
ARGI4
ADDRLP4 208
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+80
ADDRLP4 208
INDIRI4
ASGNI4
line 1810
;1810:		hand.oldframe = CG_MapTorsoToWeaponFrame( ci, cent->pe.torso.oldFrame );
ADDRLP4 184
INDIRP4
ARGP4
ADDRLP4 180
INDIRP4
CNSTI4 540
ADDP4
INDIRI4
ARGI4
ADDRLP4 212
ADDRGP4 CG_MapTorsoToWeaponFrame
CALLI4
ASGNI4
ADDRLP4 0+96
ADDRLP4 212
INDIRI4
ASGNI4
line 1811
;1811:		hand.backlerp = cent->pe.torso.backlerp;
ADDRLP4 0+100
ADDRLP4 180
INDIRP4
CNSTI4 556
ADDP4
INDIRF4
ASGNF4
line 1812
;1812:	}
LABELV $1286
line 1814
;1813:
;1814:	hand.hModel = weapon->handsModel;
ADDRLP4 0+8
ADDRLP4 200
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1815
;1815:	hand.renderfx = RF_DEPTHHACK | RF_FIRST_PERSON | RF_MINLIGHT;
ADDRLP4 0+4
CNSTI4 13
ASGNI4
line 1818
;1816:
;1817:	// add everything onto the hand
;1818:	CG_AddPlayerWeapon( &hand, ps, &cg.predictedPlayerEntity, ps->persistant[PERS_TEAM], ci );
ADDRLP4 0
ARGP4
ADDRLP4 208
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 208
INDIRP4
ARGP4
ADDRGP4 cg+1869400
ARGP4
ADDRLP4 208
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
ARGI4
ADDRLP4 184
INDIRP4
ARGP4
ADDRGP4 CG_AddPlayerWeapon
CALLV
pop
line 1819
;1819:}
LABELV $1148
endproc CG_AddViewWeapon 224 20
lit
align 1
LABELV $1337
byte 1 0
skip 255
export CG_DrawWeaponSelect
code
proc CG_DrawWeaponSelect 304 12
line 1834
;1820:
;1821:/*
;1822:==============================================================================
;1823:
;1824:WEAPON SELECTION
;1825:
;1826:==============================================================================
;1827:*/
;1828:
;1829:/*
;1830:===================
;1831:CG_DrawWeaponSelect
;1832:===================
;1833:*/
;1834:void CG_DrawWeaponSelect( void ) {
line 1845
;1835:	int		i;
;1836:	int		bits;
;1837:	int		count;
;1838:	float		*color;
;1839:	vec4_t		realColor; 
;1840:	int			swepnum; 
;1841:	//clientInfo_t	*ci; 
;1842:	
;1843:	//ci = &cgs.clientinfo[cg.snap->ps.clientNum];
;1844:	//swepnum = ci->swepid;
;1845:	swepnum = cg.snap->ps.generic2;
ADDRLP4 32
ADDRGP4 cg+36
INDIRP4
CNSTI4 488
ADDP4
INDIRI4
ASGNI4
line 1847
;1846:	// don't display if dead
;1847:	if ( cg.predictedPlayerState.stats[STAT_HEALTH] <= 0 ) {
ADDRGP4 cg+1868928+184
INDIRI4
CNSTI4 0
GTI4 $1301
line 1848
;1848:		return;
ADDRGP4 $1299
JUMPV
LABELV $1301
line 1851
;1849:	}
;1850:
;1851:	color = CG_FadeColor( cg.weaponSelectTime, WEAPON_SELECT_TIME );
ADDRGP4 cg+1952964
INDIRI4
ARGI4
ADDRGP4 cg_weaponselecttime+12
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 CG_FadeColor
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 36
INDIRP4
ASGNP4
line 1854
;1852:
;1853:	//Elimination: Always show weapon bar
;1854:	if(cg_alwaysWeaponBar.integer) {
ADDRGP4 cg_alwaysWeaponBar+12
INDIRI4
CNSTI4 0
EQI4 $1307
line 1855
;1855:		realColor[0] = 1.0;
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
line 1856
;1856:		realColor[1] = 1.0;
ADDRLP4 16+4
CNSTF4 1065353216
ASGNF4
line 1857
;1857:		realColor[2] = 1.0;
ADDRLP4 16+8
CNSTF4 1065353216
ASGNF4
line 1858
;1858:		realColor[3] = 1.0;
ADDRLP4 16+12
CNSTF4 1065353216
ASGNF4
line 1859
;1859:		color = realColor;
ADDRLP4 12
ADDRLP4 16
ASGNP4
line 1860
;1860:	}
LABELV $1307
line 1862
;1861:
;1862:	if ( !color ) {
ADDRLP4 12
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1313
line 1863
;1863:		if( cg_weaponBarActiveWidth.integer != 0 )
ADDRGP4 cg_weaponBarActiveWidth+12
INDIRI4
CNSTI4 0
EQI4 $1299
line 1864
;1864:			trap_Cvar_Set("cg_weaponBarActiveWidth", "0");
ADDRGP4 $1318
ARGP4
ADDRGP4 $1319
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 1865
;1865:		return;
ADDRGP4 $1299
JUMPV
LABELV $1313
line 1867
;1866:	}
;1867:	trap_R_SetColor( color );
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1873
;1868:
;1869:	// showing weapon select clears pickup item display, but not the blend blob
;1870:	//cg.itemPickupTime = 0;
;1871:
;1872:	// count the number of weapons owned
;1873:	bits = cg.snap->ps.stats[ STAT_WEAPONS ];
ADDRLP4 4
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
ASGNI4
line 1874
;1874:	count = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1875
;1875:	for ( i = 1 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1321
line 1876
;1876:		if ( bits & ( 1 << i ) ) {
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1325
line 1877
;1877:			count++;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1878
;1878:		}
LABELV $1325
line 1879
;1879:	}
LABELV $1322
line 1875
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1321
line 1881
;1880:	
;1881:	for ( i = MAX_WEAPONS ; i < WEAPONS_NUM ; i++ ) {
ADDRLP4 0
CNSTI4 16
ASGNI4
LABELV $1327
line 1882
;1882:		if(cg.swep_listcl[i] >= 1){
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+1870444
ADDP4
INDIRI4
CNSTI4 1
LTI4 $1331
line 1883
;1883:			count++;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1884
;1884:		}
LABELV $1331
line 1885
;1885:	}
LABELV $1328
line 1881
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 19
LTI4 $1327
line 1888
;1886:	
;1887:	//CG_DrawWeaponBarNew(WEAPONS_NUM,bits,swepnum);		//FOR MANY WEAPONS WEAPONS_HYPER
;1888:	CG_DrawWeaponBarNew2(count,bits,swepnum); //FOR VANILLA WEAPONS WEAPONS_HYPER
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRGP4 CG_DrawWeaponBarNew2
CALLV
pop
line 1889
;1889:	trap_R_SetColor(NULL);
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 1890
;1890:	if( cg_weaponBarActiveWidth.integer != count * 20 ) {
ADDRGP4 cg_weaponBarActiveWidth+12
INDIRI4
CNSTI4 20
ADDRLP4 8
INDIRI4
MULI4
EQI4 $1299
line 1891
;1891:		char weapons[256] = "";
ADDRLP4 40
ADDRGP4 $1337
INDIRB
ASGNB 256
line 1892
;1892:		trap_Cvar_Set("cg_weaponBarActiveWidth", va("%d", count * 20)); // Weapon bar width, counting from the center
ADDRGP4 $1338
ARGP4
CNSTI4 20
ADDRLP4 8
INDIRI4
MULI4
ARGI4
ADDRLP4 296
ADDRGP4 va
CALLP4
ASGNP4
ADDRGP4 $1318
ARGP4
ADDRLP4 296
INDIRP4
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 1893
;1893:		for ( i = 0 ; i < MAX_WEAPONS ; i++ ) { //Q3 WEAPON SYSTEM
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1339
line 1894
;1894:			if ( bits & ( 1 << i ) ) {
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
EQI4 $1343
line 1895
;1895:				strcat( weapons, va("%d/", i) );
ADDRGP4 $1345
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 300
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 40
ARGP4
ADDRLP4 300
INDIRP4
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 1896
;1896:			}
LABELV $1343
line 1897
;1897:		}
LABELV $1340
line 1893
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1339
line 1899
;1898:		
;1899:		for ( i = MAX_WEAPONS ; i < WEAPONS_NUM ; i++ ) { //NEW WEAPON SYSTEM
ADDRLP4 0
CNSTI4 16
ASGNI4
LABELV $1346
line 1900
;1900:			if(cg.swep_listcl[i] >= 1){
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+1870444
ADDP4
INDIRI4
CNSTI4 1
LTI4 $1350
line 1901
;1901:				strcat( weapons, va("%d/", i) );
ADDRGP4 $1345
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 300
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 40
ARGP4
ADDRLP4 300
INDIRP4
ARGP4
ADDRGP4 strcat
CALLP4
pop
line 1902
;1902:			}
LABELV $1350
line 1903
;1903:		}		
LABELV $1347
line 1899
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 19
LTI4 $1346
line 1905
;1904:		
;1905:		trap_Cvar_Set("cg_weaponBarActiveWeapons", weapons); // Weapon list to select from
ADDRGP4 $1353
ARGP4
ADDRLP4 40
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 1906
;1906:	}
line 1907
;1907:	return;
LABELV $1299
endproc CG_DrawWeaponSelect 304 12
export CG_DrawWeaponBar0
proc CG_DrawWeaponBar0 24 20
line 1916
;1908:}
;1909:
;1910:/*
;1911:===============
;1912:CG_DrawWeaponBar0
;1913:===============
;1914:*/
;1915:
;1916:void CG_DrawWeaponBar0(int count, int bits){
line 1918
;1917:
;1918:	int y = 4;
ADDRLP4 8
CNSTI4 4
ASGNI4
line 1919
;1919:	int x = 320 - count * 20;
ADDRLP4 4
CNSTI4 320
CNSTI4 20
ADDRFP4 0
INDIRI4
MULI4
SUBI4
ASGNI4
line 1922
;1920:	int i;
;1921:	
;1922:	for ( i = 0 ; i < MAX_WEAPONS ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1355
line 1924
;1923:                //Sago: Do mad change of grapple placement:
;1924:                if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1359
line 1925
;1925:                    continue;
ADDRGP4 $1356
JUMPV
LABELV $1359
line 1926
;1926:                if(i==0)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $1361
line 1927
;1927:                    i=10;
ADDRLP4 0
CNSTI4 10
ASGNI4
LABELV $1361
line 1928
;1928:		if ( !( bits & ( 1 << i ) ) ) {
ADDRFP4 4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1363
line 1929
;1929:                    if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1356
line 1930
;1930:                        i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1931
;1931:			continue;
ADDRGP4 $1356
JUMPV
LABELV $1363
line 1934
;1932:		}
;1933:
;1934:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1936
;1935:		// draw weapon icon
;1936:		CG_DrawPic( x, y, 32, 32, cg_weapons[i].weaponIcon );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
CNSTF4 1107296256
ASGNF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
CNSTI4 136
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1939
;1937:
;1938:		// draw selection marker
;1939:		if ( i == cg.weaponSelect ) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+1870440
INDIRI4
NEI4 $1368
line 1940
;1940:			CG_DrawPic( x-4, y-4, 40, 40, cgs.media.selectShader );
ADDRLP4 16
CNSTI4 4
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 16
INDIRI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 20
CNSTF4 1109393408
ASGNF4
ADDRLP4 20
INDIRF4
ARGF4
ADDRLP4 20
INDIRF4
ARGF4
ADDRGP4 cgs+956380+456
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1941
;1941:		}
LABELV $1368
line 1944
;1942:
;1943:		// no ammo cross on top
;1944:		if ( !cg.snap->ps.ammo[ i ] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1373
line 1945
;1945:			  CG_DrawPic( x, y, 32, 32, cgs.media.noammoShader );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
CNSTF4 1107296256
ASGNF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 cgs+956380+1268
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1946
;1946:		}
LABELV $1373
line 1948
;1947:
;1948:		x += 40;
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 40
ADDI4
ASGNI4
line 1950
;1949:                //Sago: Undo mad change of weapons
;1950:                if(i==10)
ADDRLP4 0
INDIRI4
CNSTI4 10
NEI4 $1378
line 1951
;1951:                        i=0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1378
line 1952
;1952:	}
LABELV $1356
line 1922
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1355
line 1953
;1953:}
LABELV $1354
endproc CG_DrawWeaponBar0 24 20
export CG_DrawWeaponBarNew
proc CG_DrawWeaponBarNew 20 20
line 1961
;1954:
;1955:/*
;1956:===============
;1957:CG_DrawWeaponBarNew
;1958:===============
;1959:*/
;1960:
;1961:void CG_DrawWeaponBarNew(int count, int bits, int swepnum){
line 1963
;1962:
;1963:	int y = (480 - 32) - 35;
ADDRLP4 0
CNSTI4 413
ASGNI4
line 1964
;1964:	int x = 640+cl_screenoffset.integer-32;
ADDRLP4 4
ADDRGP4 cl_screenoffset+12
INDIRI4
CNSTI4 640
ADDI4
CNSTI4 32
SUBI4
ASGNI4
line 1966
;1965:
;1966:		CG_RegisterWeapon( swepnum );
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1968
;1967:		// draw weapon icon
;1968:		CG_DrawPic( x, y, 32, 32, cg_weapons[swepnum].weaponIcon );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
CNSTF4 1107296256
ASGNF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
CNSTI4 136
ADDRFP4 8
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1971
;1969:
;1970:		// no ammo cross on top
;1971:		if ( !cg.snap->ps.ammo[ swepnum ] && swepnum <= 15 ) {
ADDRLP4 12
ADDRFP4 8
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1383
ADDRLP4 12
INDIRI4
CNSTI4 15
GTI4 $1383
line 1972
;1972:			  CG_DrawPic( x, y, 32, 32, cgs.media.noammoShader );
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
CNSTF4 1107296256
ASGNF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 cgs+956380+1268
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 1973
;1973:		}
LABELV $1383
line 1974
;1974:}
LABELV $1380
endproc CG_DrawWeaponBarNew 20 20
export CG_DrawWeaponBarNew2
proc CG_DrawWeaponBarNew2 44 20
line 1982
;1975:
;1976:/*
;1977:===============
;1978:CG_DrawWeaponBarNew2
;1979:===============
;1980:*/
;1981:
;1982:void CG_DrawWeaponBarNew2(int count, int bits, int swepnum){
line 1983
;1983:	float scale = 1.00;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 1984
;1984:	int y = 4;
ADDRLP4 12
CNSTI4 4
ASGNI4
line 1985
;1985:	int x = 320 - count * (20*scale);
ADDRLP4 8
CNSTF4 1134559232
ADDRFP4 0
INDIRI4
CVIF4 4
CNSTF4 1101004800
ADDRLP4 4
INDIRF4
MULF4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 1988
;1986:	int i;
;1987:	
;1988:	trap_GetGlconfig( &cgs.glconfig );
ADDRGP4 cgs+327684
ARGP4
ADDRGP4 trap_GetGlconfig
CALLV
pop
line 1990
;1989:	
;1990:	for ( i = 1 ; i <= WEAPONS_NUM ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $1390
line 1991
;1991:        if ( !(cg.snap->ps.stats[STAT_WEAPONS] & ( 1 << i )) && i <= 15 ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1394
ADDRLP4 0
INDIRI4
CNSTI4 15
GTI4 $1394
line 1992
;1992:            continue;
ADDRGP4 $1391
JUMPV
LABELV $1394
line 1994
;1993:        }
;1994:		if(!cg.swep_listcl[i] && i >= 16 ){
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+1870444
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1397
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1397
line 1995
;1995:		    continue;	
ADDRGP4 $1391
JUMPV
LABELV $1397
line 1997
;1996:		}
;1997:		CG_RegisterWeapon( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 CG_RegisterWeapon
CALLV
pop
line 1999
;1998:		// draw weapon icon
;1999:		CG_DrawPic( x, y, 32*scale, 32*scale, cg_weapons[i].weaponIcon );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 24
CNSTF4 1107296256
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
CNSTI4 136
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 cg_weapons+68
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2002
;2000:
;2001:		// draw selection marker
;2002:		if ( i == cg.weaponSelect ) {
ADDRLP4 0
INDIRI4
ADDRGP4 cg+1870440
INDIRI4
NEI4 $1401
line 2004
;2003:			//CG_DrawPic( x, y, 32*scale, 32*scale, cgs.media.selectShader );
;2004:			CG_DrawPic( x-(4*scale), y-(4*scale), 40*scale, 40*scale, cgs.media.selectShader );
ADDRLP4 32
CNSTF4 1082130432
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 8
INDIRI4
CVIF4 4
ADDRLP4 32
INDIRF4
SUBF4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ADDRLP4 32
INDIRF4
SUBF4
ARGF4
ADDRLP4 36
CNSTF4 1109393408
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRGP4 cgs+956380+456
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2005
;2005:		}
LABELV $1401
line 2008
;2006:
;2007:		// no ammo cross on top
;2008:		if ( !cg.snap->ps.ammo[ i ] && i <= 15 ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 420
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1406
ADDRLP4 0
INDIRI4
CNSTI4 15
GTI4 $1406
line 2009
;2009:			  CG_DrawPic( x, y, 32*scale, 32*scale, cgs.media.noammoShader );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
CNSTF4 1107296256
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
INDIRF4
ARGF4
ADDRLP4 32
INDIRF4
ARGF4
ADDRGP4 cgs+956380+1268
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2010
;2010:		}
LABELV $1406
line 2011
;2011:		if( cg.swep_listcl[i] == 2 && i >= 16 ){
ADDRLP4 36
CNSTI4 2
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 36
INDIRI4
LSHI4
ADDRGP4 cg+1870444
ADDP4
INDIRI4
ADDRLP4 36
INDIRI4
NEI4 $1411
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $1411
line 2012
;2012:			CG_DrawPic( x, y, 32*scale, 32*scale, cgs.media.noammoShader );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 40
CNSTF4 1107296256
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
ADDRLP4 40
INDIRF4
ARGF4
ADDRLP4 40
INDIRF4
ARGF4
ADDRGP4 cgs+956380+1268
INDIRI4
ARGI4
ADDRGP4 CG_DrawPic
CALLV
pop
line 2013
;2013:		}
LABELV $1411
line 2015
;2014:
;2015:		x += 40*scale;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CVIF4 4
CNSTF4 1109393408
ADDRLP4 4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2016
;2016:	}
LABELV $1391
line 1990
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 19
LEI4 $1390
line 2017
;2017:}
LABELV $1388
endproc CG_DrawWeaponBarNew2 44 20
proc CG_WeaponSelectable 8 0
line 2025
;2018:
;2019:
;2020:/*
;2021:===============
;2022:CG_WeaponSelectable
;2023:===============
;2024:*/
;2025:static qboolean CG_WeaponSelectable( int i ) {
line 2026
;2026:	if ( !cg.snap->ps.ammo[i] && cg.snap->ps.ammo[i] != 1 ) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 4
CNSTI4 420
ASGNI4
ADDRLP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1417
ADDRLP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 4
INDIRI4
ADDP4
ADDP4
INDIRI4
CNSTI4 1
EQI4 $1417
line 2027
;2027:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1416
JUMPV
LABELV $1417
line 2029
;2028:	}
;2029:	if ( !(cg.snap->ps.stats[ STAT_WEAPONS ] & ( 1 << i )) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1421
line 2030
;2030:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $1416
JUMPV
LABELV $1421
line 2033
;2031:	}
;2032:
;2033:	return qtrue;
CNSTI4 1
RETI4
LABELV $1416
endproc CG_WeaponSelectable 8 0
export CG_NextWeapon_f
proc CG_NextWeapon_f 20 8
line 2041
;2034:}
;2035:
;2036:/*
;2037:===============
;2038:CG_NextWeapon_f
;2039:===============
;2040:*/
;2041:void CG_NextWeapon_f( void ) {
line 2045
;2042:	int		i;
;2043:	int		original;
;2044:
;2045:	if(BG_VehicleCheckClass(cg.snap->ps.stats[STAT_VEHICLE])){	//VEHICLE-SYSTEM: weapon lock for 1
ADDRGP4 cg+36
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $1425
line 2046
;2046:		if(!BG_GetVehicleSettings(cg.snap->ps.stats[STAT_VEHICLE], VSET_WEAPON)){
ADDRGP4 cg+36
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 12
ADDRGP4 BG_GetVehicleSettings
CALLF4
ASGNF4
ADDRLP4 12
INDIRF4
CNSTF4 0
NEF4 $1428
line 2047
;2047:			return;	
ADDRGP4 $1424
JUMPV
LABELV $1428
line 2049
;2048:		}
;2049:	}
LABELV $1425
line 2050
;2050:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1431
line 2051
;2051:		return;
ADDRGP4 $1424
JUMPV
LABELV $1431
line 2053
;2052:	}
;2053:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1434
line 2054
;2054:		return;
ADDRGP4 $1424
JUMPV
LABELV $1434
line 2057
;2055:	}
;2056:	
;2057:	if ( cg.snap->ps.weapon == WP_PHYSGUN ){
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 17
NEI4 $1437
line 2058
;2058:		if( cg.snap->ps.eFlags & EF_FIRING ){
ADDRGP4 cg+36
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1440
line 2059
;2059:			trap_SendConsoleCommand("physgun_dist 0\n");
ADDRGP4 $1443
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 2060
;2060:			return;
ADDRGP4 $1424
JUMPV
LABELV $1440
line 2062
;2061:		}
;2062:	}
LABELV $1437
line 2064
;2063:
;2064:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+1952964
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 2065
;2065:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+1870440
INDIRI4
ASGNI4
line 2067
;2066:
;2067:	for ( i = 0 ; i < WEAPONS_NUM ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1447
line 2068
;2068:	cg.weaponSelect++;
ADDRLP4 12
ADDRGP4 cg+1870440
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2069
;2069:	if ( cg.weaponSelect > WEAPONS_NUM ) {
ADDRGP4 cg+1870440
INDIRI4
CNSTI4 19
LEI4 $1452
line 2070
;2070:		cg.weaponSelect = 1;
ADDRGP4 cg+1870440
CNSTI4 1
ASGNI4
line 2071
;2071:	}
LABELV $1452
line 2072
;2072:    if(cg.weaponSelect <= 15){
ADDRGP4 cg+1870440
INDIRI4
CNSTI4 15
GTI4 $1456
line 2073
;2073:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+1870440
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $1457
line 2074
;2074:			break;
ADDRGP4 $1449
JUMPV
line 2076
;2075:		}
;2076:    } else {
LABELV $1456
line 2077
;2077:	if(cg.swep_listcl[cg.weaponSelect] == 1){
ADDRGP4 cg+1870440
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+1870444
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1462
line 2078
;2078:		break;
ADDRGP4 $1449
JUMPV
LABELV $1462
line 2080
;2079:	}
;2080:	}
LABELV $1457
line 2081
;2081:	}
LABELV $1448
line 2067
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 19
LTI4 $1447
LABELV $1449
line 2083
;2082:	
;2083:	if(cg.weaponSelect == WP_TOOLGUN){
ADDRGP4 cg+1870440
INDIRI4
CNSTI4 16
NEI4 $1466
line 2084
;2084:	trap_Cvar_Set("cg_hide255", "0");
ADDRGP4 $1469
ARGP4
ADDRGP4 $1319
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2085
;2085:	} else {
ADDRGP4 $1467
JUMPV
LABELV $1466
line 2086
;2086:	trap_Cvar_Set("cg_hide255", "1");
ADDRGP4 $1469
ARGP4
ADDRGP4 $1470
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2087
;2087:	}
LABELV $1467
line 2088
;2088:}
LABELV $1424
endproc CG_NextWeapon_f 20 8
export CG_PrevWeapon_f
proc CG_PrevWeapon_f 20 8
line 2095
;2089:
;2090:/*
;2091:===============
;2092:CG_PrevWeapon_f
;2093:===============
;2094:*/
;2095:void CG_PrevWeapon_f( void ) {
line 2099
;2096:	int		i;
;2097:	int		original;
;2098:
;2099:	if(BG_VehicleCheckClass(cg.snap->ps.stats[STAT_VEHICLE])){	//VEHICLE-SYSTEM: weapon lock for 1
ADDRGP4 cg+36
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $1472
line 2100
;2100:		if(!BG_GetVehicleSettings(cg.snap->ps.stats[STAT_VEHICLE], VSET_WEAPON)){
ADDRGP4 cg+36
INDIRP4
CNSTI4 276
ADDP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 12
ADDRGP4 BG_GetVehicleSettings
CALLF4
ASGNF4
ADDRLP4 12
INDIRF4
CNSTF4 0
NEF4 $1475
line 2101
;2101:			return;	
ADDRGP4 $1471
JUMPV
LABELV $1475
line 2103
;2102:		}
;2103:	}
LABELV $1472
line 2104
;2104:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1478
line 2105
;2105:		return;
ADDRGP4 $1471
JUMPV
LABELV $1478
line 2107
;2106:	}
;2107:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1481
line 2108
;2108:		return;
ADDRGP4 $1471
JUMPV
LABELV $1481
line 2111
;2109:	}
;2110:	
;2111:	if ( cg.snap->ps.weapon == WP_PHYSGUN ){
ADDRGP4 cg+36
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 17
NEI4 $1484
line 2112
;2112:		if( cg.snap->ps.eFlags & EF_FIRING ){
ADDRGP4 cg+36
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1487
line 2113
;2113:			trap_SendConsoleCommand("physgun_dist 1\n");
ADDRGP4 $1490
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 2114
;2114:			return;
ADDRGP4 $1471
JUMPV
LABELV $1487
line 2116
;2115:		}
;2116:	}
LABELV $1484
line 2118
;2117:
;2118:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+1952964
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 2119
;2119:	original = cg.weaponSelect;
ADDRLP4 4
ADDRGP4 cg+1870440
INDIRI4
ASGNI4
line 2121
;2120:
;2121:	for ( i = 0 ; i < WEAPONS_NUM; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1494
line 2122
;2122:	cg.weaponSelect--;
ADDRLP4 12
ADDRGP4 cg+1870440
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2123
;2123:	if ( cg.weaponSelect < 1 ) {
ADDRGP4 cg+1870440
INDIRI4
CNSTI4 1
GEI4 $1499
line 2124
;2124:		cg.weaponSelect = WEAPONS_NUM;
ADDRGP4 cg+1870440
CNSTI4 19
ASGNI4
line 2125
;2125:	}
LABELV $1499
line 2126
;2126:    if(cg.weaponSelect <= 15){
ADDRGP4 cg+1870440
INDIRI4
CNSTI4 15
GTI4 $1503
line 2127
;2127:		if ( CG_WeaponSelectable( cg.weaponSelect ) ) {
ADDRGP4 cg+1870440
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $1504
line 2128
;2128:			break;
ADDRGP4 $1496
JUMPV
line 2130
;2129:		}
;2130:    } else {
LABELV $1503
line 2131
;2131:	if(cg.swep_listcl[cg.weaponSelect] == 1){
ADDRGP4 cg+1870440
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+1870444
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1509
line 2132
;2132:		break;
ADDRGP4 $1496
JUMPV
LABELV $1509
line 2134
;2133:	}
;2134:	}
LABELV $1504
line 2135
;2135:	}
LABELV $1495
line 2121
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 19
LTI4 $1494
LABELV $1496
line 2137
;2136:	
;2137:	if(cg.weaponSelect == WP_TOOLGUN){
ADDRGP4 cg+1870440
INDIRI4
CNSTI4 16
NEI4 $1513
line 2138
;2138:	trap_Cvar_Set("cg_hide255", "0");
ADDRGP4 $1469
ARGP4
ADDRGP4 $1319
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2139
;2139:	} else {
ADDRGP4 $1514
JUMPV
LABELV $1513
line 2140
;2140:	trap_Cvar_Set("cg_hide255", "1");
ADDRGP4 $1469
ARGP4
ADDRGP4 $1470
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2141
;2141:	}
LABELV $1514
line 2142
;2142:}
LABELV $1471
endproc CG_PrevWeapon_f 20 8
export CG_Weapon_f
proc CG_Weapon_f 12 8
line 2149
;2143:
;2144:/*
;2145:===============
;2146:CG_Weapon_f
;2147:===============
;2148:*/
;2149:void CG_Weapon_f( void ) {
line 2152
;2150:	int		num;
;2151:
;2152:	if ( !cg.snap ) {
ADDRGP4 cg+36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1517
line 2153
;2153:		return;
ADDRGP4 $1516
JUMPV
LABELV $1517
line 2155
;2154:	}
;2155:	if ( cg.snap->ps.pm_flags & PMF_FOLLOW ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $1520
line 2156
;2156:		return;
ADDRGP4 $1516
JUMPV
LABELV $1520
line 2159
;2157:	}
;2158:
;2159:	num = atoi( CG_Argv( 1 ) );
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 CG_Argv
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 atoi
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
line 2161
;2160:
;2161:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+1952964
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 2162
;2162:    if(num < MAX_WEAPONS){
ADDRLP4 0
INDIRI4
CNSTI4 16
GEI4 $1525
line 2163
;2163:	if ( ! ( cg.snap->ps.stats[STAT_WEAPONS] & ( 1 << num ) ) ) {
ADDRGP4 cg+36
INDIRP4
CNSTI4 240
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $1526
line 2164
;2164:		return;		// don't have the weapon
ADDRGP4 $1516
JUMPV
line 2166
;2165:	}
;2166:    } else {
LABELV $1525
line 2167
;2167:	if(!cg.swep_listcl[num]){
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cg+1870444
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1530
line 2168
;2168:	return;		// don't have the weapon
ADDRGP4 $1516
JUMPV
LABELV $1530
line 2170
;2169:	}
;2170:	}
LABELV $1526
line 2172
;2171:
;2172:	cg.weaponSelect = num;
ADDRGP4 cg+1870440
ADDRLP4 0
INDIRI4
ASGNI4
line 2174
;2173:	
;2174:	if(cg.weaponSelect == WP_TOOLGUN){
ADDRGP4 cg+1870440
INDIRI4
CNSTI4 16
NEI4 $1534
line 2175
;2175:	trap_Cvar_Set("cg_hide255", "0");
ADDRGP4 $1469
ARGP4
ADDRGP4 $1319
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2176
;2176:	} else {
ADDRGP4 $1535
JUMPV
LABELV $1534
line 2177
;2177:	trap_Cvar_Set("cg_hide255", "1");
ADDRGP4 $1469
ARGP4
ADDRGP4 $1470
ARGP4
ADDRGP4 trap_Cvar_Set
CALLV
pop
line 2178
;2178:	}
LABELV $1535
line 2179
;2179:}
LABELV $1516
endproc CG_Weapon_f 12 8
export CG_OutOfAmmoChange
proc CG_OutOfAmmoChange 8 4
line 2188
;2180:
;2181:/*
;2182:===================
;2183:CG_OutOfAmmoChange
;2184:
;2185:The current weapon has just run out of ammo
;2186:===================
;2187:*/
;2188:void CG_OutOfAmmoChange( void ) {
line 2191
;2189:	int		i;
;2190:
;2191:	cg.weaponSelectTime = cg.time;
ADDRGP4 cg+1952964
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 2193
;2192:
;2193:	for ( i = MAX_WEAPONS-1 ; i > 0 ; i-- ) {
ADDRLP4 0
CNSTI4 15
ASGNI4
LABELV $1540
line 2194
;2194:		if ( CG_WeaponSelectable( i ) ) {
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 CG_WeaponSelectable
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1544
line 2195
;2195:			cg.weaponSelect = i;
ADDRGP4 cg+1870440
ADDRLP4 0
INDIRI4
ASGNI4
line 2196
;2196:			break;
ADDRGP4 $1542
JUMPV
LABELV $1544
line 2198
;2197:		}
;2198:	}
LABELV $1541
line 2193
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $1540
LABELV $1542
line 2199
;2199:}
LABELV $1537
endproc CG_OutOfAmmoChange 8 4
export CG_FireWeapon
proc CG_FireWeapon 28 16
line 2218
;2200:
;2201:
;2202:
;2203:/*
;2204:===================================================================================================
;2205:
;2206:WEAPON EVENTS
;2207:
;2208:===================================================================================================
;2209:*/
;2210:
;2211:/*
;2212:================
;2213:CG_FireWeapon
;2214:
;2215:Caused by an EV_FIRE_WEAPON event
;2216:================
;2217:*/
;2218:void CG_FireWeapon( centity_t *cent ) {
line 2225
;2219:	clientInfo_t	*ci;
;2220:	entityState_t *ent;
;2221:	int				c;
;2222:	weaponInfo_t	*weap;
;2223:	int				weaphack;
;2224:
;2225:	if((cgs.gametype == GT_ELIMINATION || cgs.gametype == GT_CTF_ELIMINATION) && cgs.roundStartTime>=cg.time)
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 9
EQI4 $1554
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 10
NEI4 $1548
LABELV $1554
ADDRGP4 cgs+342396
INDIRI4
ADDRGP4 cg+1868892
INDIRI4
LTI4 $1548
line 2226
;2226:		return; //if we havn't started in ELIMINATION then do not fire
ADDRGP4 $1547
JUMPV
LABELV $1548
line 2228
;2227:
;2228:	ent = &cent->currentState;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
line 2230
;2229:	
;2230:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 12
CNSTI4 1944
ADDRFP4 0
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+440948
ADDP4
ASGNP4
line 2232
;2231:	
;2232:	if(ci->swepid >= 1){
ADDRLP4 12
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
LTI4 $1556
line 2233
;2233:	weaphack = ci->swepid;
ADDRLP4 8
ADDRLP4 12
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
line 2234
;2234:	} else {
ADDRGP4 $1557
JUMPV
LABELV $1556
line 2235
;2235:	weaphack = ent->weapon;
ADDRLP4 8
ADDRLP4 16
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ASGNI4
line 2236
;2236:	}
LABELV $1557
line 2238
;2237:	
;2238:	if ( weaphack == WP_NONE ) {
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $1558
line 2239
;2239:		return;
ADDRGP4 $1547
JUMPV
LABELV $1558
line 2241
;2240:	}
;2241:	if ( weaphack > WEAPONS_NUM ) {
ADDRLP4 8
INDIRI4
CNSTI4 19
LEI4 $1560
line 2242
;2242:		CG_Error( "CG_FireWeapon: weaphack > WEAPONS_NUM" );
ADDRGP4 $1562
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 2243
;2243:		return;
ADDRGP4 $1547
JUMPV
LABELV $1560
line 2245
;2244:	}
;2245:	weap = &cg_weapons[ weaphack ];
ADDRLP4 4
CNSTI4 136
ADDRLP4 8
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 2249
;2246:
;2247:	// mark the entity as muzzle flashing, so when it is added it will
;2248:	// append the flash to the weapon model
;2249:	cent->muzzleFlashTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 2252
;2250:
;2251:	// lightning gun only does this this on initial press
;2252:	if ( weaphack == WP_LIGHTNING ) {
ADDRLP4 8
INDIRI4
CNSTI4 6
NEI4 $1564
line 2253
;2253:		if ( cent->pe.lightningFiring ) {
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1566
line 2254
;2254:			return;
ADDRGP4 $1547
JUMPV
LABELV $1566
line 2256
;2255:		}
;2256:	}
LABELV $1564
line 2258
;2257:	
;2258:	if ( weaphack == WP_TOOLGUN && cent->currentState.clientNum == cg.snap->ps.clientNum && cg.snap->ps.persistant[PERS_TEAM] != TEAM_SPECTATOR ){
ADDRLP4 8
INDIRI4
CNSTI4 16
NEI4 $1568
ADDRFP4 0
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $1568
ADDRGP4 cg+36
INDIRP4
CNSTI4 304
ADDP4
INDIRI4
CNSTI4 3
EQI4 $1568
line 2259
;2259:		if(toolgun_mod19.integer == 0){
ADDRGP4 toolgun_mod19+12
INDIRI4
CNSTI4 0
NEI4 $1572
line 2260
;2260:		trap_SendConsoleCommand("vstr toolgun_toolcmd1\n");
ADDRGP4 $1575
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 2261
;2261:		} else
ADDRGP4 $1573
JUMPV
LABELV $1572
line 2262
;2262:		if(toolgun_mod19.integer == 1){
ADDRGP4 toolgun_mod19+12
INDIRI4
CNSTI4 1
NEI4 $1576
line 2263
;2263:		trap_SendConsoleCommand("vstr toolgun_toolcmd2\n");
ADDRGP4 $1579
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 2264
;2264:		} else
ADDRGP4 $1577
JUMPV
LABELV $1576
line 2265
;2265:		if(toolgun_mod19.integer == 2){
ADDRGP4 toolgun_mod19+12
INDIRI4
CNSTI4 2
NEI4 $1580
line 2266
;2266:		trap_SendConsoleCommand("vstr toolgun_toolcmd3\n");
ADDRGP4 $1583
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 2267
;2267:		} else
ADDRGP4 $1581
JUMPV
LABELV $1580
line 2268
;2268:		if(toolgun_mod19.integer == 3){
ADDRGP4 toolgun_mod19+12
INDIRI4
CNSTI4 3
NEI4 $1584
line 2269
;2269:		trap_SendConsoleCommand("vstr toolgun_toolcmd4\n");
ADDRGP4 $1587
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 2270
;2270:		} else {
ADDRGP4 $1585
JUMPV
LABELV $1584
line 2271
;2271:		trap_SendConsoleCommand("vstr toolgun_toolcmd1\n");
ADDRGP4 $1575
ARGP4
ADDRGP4 trap_SendConsoleCommand
CALLV
pop
line 2272
;2272:		}
LABELV $1585
LABELV $1581
LABELV $1577
LABELV $1573
line 2273
;2273:	}
LABELV $1568
line 2276
;2274:
;2275:	// play quad sound if needed
;2276:	if ( cent->currentState.powerups & ( 1 << PW_QUAD ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1588
line 2277
;2277:		trap_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.media.quadSound );
CNSTP4 0
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRGP4 cgs+956380+1820
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2278
;2278:	}
LABELV $1588
line 2281
;2279:
;2280:	// play a sound
;2281:	for ( c = 0 ; c < 4 ; c++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1592
line 2282
;2282:		if ( !weap->flashSound[c] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1596
line 2283
;2283:			break;
ADDRGP4 $1594
JUMPV
LABELV $1596
line 2285
;2284:		}
;2285:	}
LABELV $1593
line 2281
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $1592
LABELV $1594
line 2286
;2286:	if ( c > 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LEI4 $1598
line 2287
;2287:		c = rand() % c;
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ADDRLP4 0
INDIRI4
MODI4
ASGNI4
line 2288
;2288:		if ( weap->flashSound[c] )
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1600
line 2289
;2289:		{
line 2290
;2290:			trap_S_StartSound( NULL, ent->number, CHAN_WEAPON, weap->flashSound[c] );
CNSTP4 0
ARGP4
ADDRLP4 16
INDIRP4
INDIRI4
ARGI4
ADDRLP4 24
CNSTI4 2
ASGNI4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2291
;2291:		}
LABELV $1600
line 2292
;2292:	}
LABELV $1598
line 2295
;2293:
;2294:	// do brass ejection
;2295:	if ( weap->ejectBrassFunc && cg_brassTime.integer > 0 ) {
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1602
ADDRGP4 cg_brassTime+12
INDIRI4
CNSTI4 0
LEI4 $1602
line 2296
;2296:		weap->ejectBrassFunc( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CALLV
pop
line 2297
;2297:	}
LABELV $1602
line 2300
;2298:
;2299://unlagged - attack prediction #1
;2300:	CG_PredictWeaponEffects( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_PredictWeaponEffects
CALLV
pop
line 2302
;2301://unlagged - attack prediction #1
;2302:}
LABELV $1547
endproc CG_FireWeapon 28 16
export CG_MissileHitWall
proc CG_MissileHitWall 260 44
line 2389
;2303:
;2304:
;2305:/*
;2306:==========================
;2307:CG_Explosionia LEILEI
;2308:==========================
;2309:
;2310:static void CG_Explosionia ( centity_t *cent ) {
;2311:	localEntity_t	*le;
;2312:	ec3_t			velocity, xvelocity;
;2313:	vec3_t			offset, xoffset;
;2314:	float			waterScale = 1.0f;
;2315:	vec3_t			v[3];
;2316:
;2317:	if ( cg_brassTime.integer <= 0 ) {
;2318:		return;
;2319:	}
;2320:
;2321:	le = CG_AllocLocalEntity();
;2322:	
;2323:
;2324:	velocity[0] = -50 + 100 * crandom();
;2325:	velocity[1] = -50 + 100 * crandom();
;2326:	velocity[2] = -50 + 100 * crandom();
;2327:
;2328:	le->leType = LE_FALL_SCALE_FADE;
;2329:	le->startTime = cg.time;
;2330:	le->endTime = le->startTime + cg_brassTime.integer + ( cg_brassTime.integer / 4 ) * random();
;2331:
;2332:	//le->pos.trType = TR_GRAVITY;
;2333:	le->pos.trTime = cg.time - (rand()&15);
;2334:
;2335:	AnglesToAxis( cent->lerpAngles, v );
;2336:
;2337:	offset[0] = 8;
;2338:	offset[1] = -4;
;2339:	offset[2] = 24;
;2340:
;2341:	xoffset[0] = offset[0] * v[0][0] + offset[1] * v[1][0] + offset[2] * v[2][0];
;2342:	xoffset[1] = offset[0] * v[0][1] + offset[1] * v[1][1] + offset[2] * v[2][1];
;2343:	xoffset[2] = offset[0] * v[0][2] + offset[1] * v[1][2] + offset[2] * v[2][2];
;2344:	VectorAdd( cent->lerpOrigin, xoffset, re->origin );
;2345:
;2346:	VectorCopy( re->origin, le->pos.trBase );
;2347:
;2348:	if ( CG_PointContents( re->origin, -1 ) & CONTENTS_WATER ) {
;2349:		waterScale = 0.10f;
;2350:	}
;2351:
;2352:	xvelocity[0] = velocity[0] * v[0][0] + velocity[1] * v[1][0] + velocity[2] * v[2][0];
;2353:	xvelocity[1] = velocity[0] * v[0][1] + velocity[1] * v[1][1] + velocity[2] * v[2][1];
;2354:	xvelocity[2] = velocity[0] * v[0][2] + velocity[1] * v[1][2] + velocity[2] * v[2][2];
;2355:	VectorScale( xvelocity, waterScale, le->pos.trDelta );
;2356:
;2357:	le->bounceFactor = 0.4 * waterScale;
;2358:
;2359:	le->angles.trType = TR_LINEAR;
;2360:	le->angles.trTime = cg.time;
;2361:	le->angles.trBase[0] = rand()&31;
;2362:	le->angles.trBase[1] = rand()&31;
;2363:	le->angles.trBase[2] = rand()&31;
;2364:	le->angles.trDelta[0] = 2;
;2365:	le->angles.trDelta[1] = 1;
;2366:	le->angles.trDelta[2] = 0;
;2367:	le = CG_SmokePuff( le->origin, le->velocity, 
;2368:					  30,		// radius
;2369:					  1, 1, 1, 1,	// color
;2370:					  2000,		// trailTime
;2371:					  cg.time,		// startTime
;2372:					  0,		// fadeInTime
;2373:					  0,		// flags
;2374:					  cgs.media.lbumShader1 );
;2375:	le->leFlags = LEF_TUMBLE;
;2376:	le->leBounceSoundType = LEBS_NONE;
;2377:	le->leMarkType = LEMT_NONE;
;2378:}
;2379:
;2380:*/
;2381:
;2382:/*
;2383:=================
;2384:CG_MissileHitWall
;2385:
;2386:Caused by an EV_MISSILE_MISS event, or directly by local bullet tracing
;2387:=================
;2388:*/
;2389:void CG_MissileHitWall( int weapon, int clientNum, vec3_t origin, vec3_t dir, impactSound_t soundType ) {
line 2407
;2390:	qhandle_t		mod;
;2391:	qhandle_t		mark;
;2392:	qhandle_t		shader;
;2393:	sfxHandle_t		sfx;
;2394:	float			radius;
;2395:	float			light;
;2396:	vec3_t			lightColor;
;2397:	localEntity_t	*le;
;2398:	int				r;
;2399:	qboolean		alphaFade;
;2400:	qboolean		isSprite;
;2401:	int				duration;
;2402:	vec3_t			sprOrg;
;2403:	vec3_t			sprVel;
;2404:	
;2405:	//CG_Printf(va("CG_MissileHitWall: %i\n", weapon));
;2406:
;2407:	mark = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2408
;2408:	radius = 32;
ADDRLP4 24
CNSTF4 1107296256
ASGNF4
line 2409
;2409:	sfx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 2410
;2410:	mod = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 2411
;2411:	shader = 0;
ADDRLP4 56
CNSTI4 0
ASGNI4
line 2412
;2412:	light = 0;
ADDRLP4 68
CNSTF4 0
ASGNF4
line 2413
;2413:	lightColor[0] = 1;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 2414
;2414:	lightColor[1] = 1;
ADDRLP4 4+4
CNSTF4 1065353216
ASGNF4
line 2415
;2415:	lightColor[2] = 0;
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 2418
;2416:
;2417:	// set defaults
;2418:	isSprite = qfalse;
ADDRLP4 64
CNSTI4 0
ASGNI4
line 2419
;2419:	duration = 600;
ADDRLP4 72
CNSTI4 600
ASGNI4
line 2421
;2420:
;2421:	switch ( weapon ) {
ADDRLP4 80
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 84
CNSTI4 2
ASGNI4
ADDRLP4 80
INDIRI4
ADDRLP4 84
INDIRI4
LTI4 $1608
ADDRLP4 80
INDIRI4
CNSTI4 18
GTI4 $1608
ADDRLP4 80
INDIRI4
ADDRLP4 84
INDIRI4
LSHI4
ADDRGP4 $1916-8
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1916
address $1899
address $1854
address $1688
address $1731
address $1623
address $1783
address $1797
address $1811
address $1608
address $1610
address $1649
address $1861
address $1825
address $1832
address $1839
address $1852
address $1853
code
LABELV $1608
LABELV $1610
line 2425
;2422:	default:
;2423:
;2424:	case WP_NAILGUN:
;2425:		if( soundType == IMPACTSOUND_FLESH ) {
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $1611
line 2426
;2426:			sfx = cgs.media.sfx_nghitflesh;
ADDRLP4 16
ADDRGP4 cgs+956380+2040
INDIRI4
ASGNI4
line 2427
;2427:		} else if( soundType == IMPACTSOUND_METAL ) {
ADDRGP4 $1612
JUMPV
LABELV $1611
ADDRFP4 16
INDIRI4
CNSTI4 1
NEI4 $1615
line 2428
;2428:			sfx = cgs.media.sfx_nghitmetal;
ADDRLP4 16
ADDRGP4 cgs+956380+2044
INDIRI4
ASGNI4
line 2429
;2429:		} else {
ADDRGP4 $1616
JUMPV
LABELV $1615
line 2430
;2430:			sfx = cgs.media.sfx_nghit;
ADDRLP4 16
ADDRGP4 cgs+956380+2036
INDIRI4
ASGNI4
line 2431
;2431:		}
LABELV $1616
LABELV $1612
line 2432
;2432:		mark = cgs.media.holeMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1512
INDIRI4
ASGNI4
line 2433
;2433:		radius = 12;
ADDRLP4 24
CNSTF4 1094713344
ASGNF4
line 2434
;2434:		break;
ADDRGP4 $1609
JUMPV
LABELV $1623
line 2438
;2435:
;2436:	case WP_LIGHTNING:
;2437:		// no explosion at LG impact, it is added with the beam
;2438:		r = rand() & 3;
ADDRLP4 88
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
ADDRLP4 88
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 2439
;2439:		if ( !cg_paintballMode.integer ) {
ADDRGP4 cg_paintballMode+12
INDIRI4
CNSTI4 0
NEI4 $1624
line 2440
;2440:		if ( r < 2 ) {
ADDRLP4 76
INDIRI4
CNSTI4 2
GEI4 $1627
line 2441
;2441:			sfx = cgs.media.sfx_lghit2;
ADDRLP4 16
ADDRGP4 cgs+956380+2000
INDIRI4
ASGNI4
line 2442
;2442:		} else if ( r == 2 ) {
ADDRGP4 $1625
JUMPV
LABELV $1627
ADDRLP4 76
INDIRI4
CNSTI4 2
NEI4 $1631
line 2443
;2443:			sfx = cgs.media.sfx_lghit1;
ADDRLP4 16
ADDRGP4 cgs+956380+1996
INDIRI4
ASGNI4
line 2444
;2444:		} else {
ADDRGP4 $1625
JUMPV
LABELV $1631
line 2445
;2445:			sfx = cgs.media.sfx_lghit3;
ADDRLP4 16
ADDRGP4 cgs+956380+2004
INDIRI4
ASGNI4
line 2446
;2446:		}
line 2447
;2447:		} else {
ADDRGP4 $1625
JUMPV
LABELV $1624
line 2448
;2448:			if ( r < 2 ) {
ADDRLP4 76
INDIRI4
CNSTI4 2
GEI4 $1637
line 2449
;2449:				sfx = cgs.media.gibBounce1Sound;
ADDRLP4 16
ADDRGP4 cgs+956380+2124
INDIRI4
ASGNI4
line 2450
;2450:			} else if ( r == 2 ) {
ADDRGP4 $1638
JUMPV
LABELV $1637
ADDRLP4 76
INDIRI4
CNSTI4 2
NEI4 $1641
line 2451
;2451:				sfx = cgs.media.gibBounce2Sound;
ADDRLP4 16
ADDRGP4 cgs+956380+2128
INDIRI4
ASGNI4
line 2452
;2452:			} else {
ADDRGP4 $1642
JUMPV
LABELV $1641
line 2453
;2453:				sfx = cgs.media.gibBounce3Sound;
ADDRLP4 16
ADDRGP4 cgs+956380+2132
INDIRI4
ASGNI4
line 2454
;2454:			}
LABELV $1642
LABELV $1638
line 2455
;2455:		}
LABELV $1625
line 2456
;2456:		mark = cgs.media.holeMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1512
INDIRI4
ASGNI4
line 2457
;2457:		radius = 12;
ADDRLP4 24
CNSTF4 1094713344
ASGNF4
line 2458
;2458:		break;
ADDRGP4 $1609
JUMPV
LABELV $1649
line 2461
;2459:
;2460:	case WP_PROX_LAUNCHER:
;2461:		mod = cgs.media.dishFlashModel;
ADDRLP4 20
ADDRGP4 cgs+956380+1648
INDIRI4
ASGNI4
line 2462
;2462:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 56
ADDRGP4 cgs+956380+1672
INDIRI4
ASGNI4
line 2463
;2463:		sfx = cgs.media.sfx_proxexp;
ADDRLP4 16
ADDRGP4 cgs+956380+2032
INDIRI4
ASGNI4
line 2464
;2464:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1508
INDIRI4
ASGNI4
line 2465
;2465:		radius = 64;
ADDRLP4 24
CNSTF4 1115684864
ASGNF4
line 2466
;2466:		light = 300;
ADDRLP4 68
CNSTF4 1133903872
ASGNF4
line 2467
;2467:		isSprite = qtrue;
ADDRLP4 64
CNSTI4 1
ASGNI4
line 2469
;2468:		// LEILEI START enhancement
;2469:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $1609
line 2471
;2470:		// some more fireball, fireball, fireball, fire fire!
;2471:		VectorMA( origin, 24, dir, sprOrg );
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 96
CNSTF4 1103101952
ASGNF4
ADDRLP4 100
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 92
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 108
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
CNSTF4 1103101952
ADDRFP4 12
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2472
;2472:		VectorScale( dir, 64, sprVel );
ADDRLP4 112
CNSTF4 1115684864
ASGNF4
ADDRLP4 116
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 112
INDIRF4
ADDRLP4 116
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 112
INDIRF4
ADDRLP4 116
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1115684864
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2473
;2473:		lightColor[0] = 0.7;	// subtler explosion colors
ADDRLP4 4
CNSTF4 1060320051
ASGNF4
line 2474
;2474:		lightColor[1] = 0.6;
ADDRLP4 4+4
CNSTF4 1058642330
ASGNF4
line 2475
;2475:		lightColor[2] = 0.4;
ADDRLP4 4+8
CNSTF4 1053609165
ASGNF4
line 2476
;2476:		VectorMA( origin, 4, dir, sprOrg );
ADDRLP4 120
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 124
CNSTF4 1082130432
ASGNF4
ADDRLP4 128
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 120
INDIRP4
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 128
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 120
INDIRP4
ADDRLP4 132
INDIRI4
ADDP4
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 128
INDIRP4
ADDRLP4 132
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 136
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 136
INDIRI4
ADDP4
INDIRF4
CNSTF4 1082130432
ADDRFP4 12
INDIRP4
ADDRLP4 136
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2477
;2477:		VectorScale( dir, 2, sprVel );
ADDRLP4 140
CNSTF4 1073741824
ASGNF4
ADDRLP4 144
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1073741824
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2478
;2478:		VectorMA( origin, 4, dir, sprOrg );
ADDRLP4 148
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 152
CNSTF4 1082130432
ASGNF4
ADDRLP4 156
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 148
INDIRP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 160
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 148
INDIRP4
ADDRLP4 160
INDIRI4
ADDP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRP4
ADDRLP4 160
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 164
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 164
INDIRI4
ADDP4
INDIRF4
CNSTF4 1082130432
ADDRFP4 12
INDIRP4
ADDRLP4 164
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2479
;2479:		VectorScale( dir, 42, sprVel );
ADDRLP4 168
CNSTF4 1109917696
ASGNF4
ADDRLP4 172
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 168
INDIRF4
ADDRLP4 172
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 168
INDIRF4
ADDRLP4 172
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1109917696
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2480
;2480:		CG_ParticleExplosion( "explode1", sprOrg, sprVel, 700, 10, 108 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 700
ARGI4
CNSTI4 10
ARGI4
CNSTI4 108
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2481
;2481:		VectorMA( origin, 4, dir, sprOrg );
ADDRLP4 176
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 180
CNSTF4 1082130432
ASGNF4
ADDRLP4 184
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 176
INDIRP4
INDIRF4
ADDRLP4 180
INDIRF4
ADDRLP4 184
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 188
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 176
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
ADDRLP4 180
INDIRF4
ADDRLP4 184
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 192
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
CNSTF4 1082130432
ADDRFP4 12
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2482
;2482:		VectorScale( dir, 82, sprVel );
ADDRLP4 196
CNSTF4 1118044160
ASGNF4
ADDRLP4 200
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 196
INDIRF4
ADDRLP4 200
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 196
INDIRF4
ADDRLP4 200
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1118044160
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2483
;2483:		CG_ParticleExplosion( "explode1", sprOrg, sprVel, 400, 11, 158 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 400
ARGI4
CNSTI4 11
ARGI4
CNSTI4 158
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2484
;2484:		VectorMA( origin, -5, dir, sprOrg );
ADDRLP4 204
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 208
CNSTF4 3231711232
ASGNF4
ADDRLP4 212
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 212
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 216
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 204
INDIRP4
ADDRLP4 216
INDIRI4
ADDP4
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 212
INDIRP4
ADDRLP4 216
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 220
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 220
INDIRI4
ADDP4
INDIRF4
CNSTF4 3231711232
ADDRFP4 12
INDIRP4
ADDRLP4 220
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2485
;2485:		VectorScale( dir, 182, sprVel );
ADDRLP4 224
CNSTF4 1127612416
ASGNF4
ADDRLP4 228
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 224
INDIRF4
ADDRLP4 228
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 224
INDIRF4
ADDRLP4 228
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1127612416
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2486
;2486:		CG_ParticleExplosion( "explode1", sprOrg, sprVel, 600, 47, 88 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 600
ARGI4
CNSTI4 47
ARGI4
CNSTI4 88
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2487
;2487:		VectorMA( origin, -5, dir, sprOrg );
ADDRLP4 232
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 236
CNSTF4 3231711232
ASGNF4
ADDRLP4 240
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 232
INDIRP4
INDIRF4
ADDRLP4 236
INDIRF4
ADDRLP4 240
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 244
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 232
INDIRP4
ADDRLP4 244
INDIRI4
ADDP4
INDIRF4
ADDRLP4 236
INDIRF4
ADDRLP4 240
INDIRP4
ADDRLP4 244
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 248
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 248
INDIRI4
ADDP4
INDIRF4
CNSTF4 3231711232
ADDRFP4 12
INDIRP4
ADDRLP4 248
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2488
;2488:		VectorScale( dir, 64, sprVel );
ADDRLP4 252
CNSTF4 1115684864
ASGNF4
ADDRLP4 256
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 252
INDIRF4
ADDRLP4 256
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 252
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1115684864
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2489
;2489:		CG_ParticleExplosion( "explode1", sprOrg, sprVel, 110, 72, 28 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 110
ARGI4
CNSTI4 72
ARGI4
CNSTI4 28
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2490
;2490:		mod = 0; // turns off the sprite (unfortunately, disables dlight)
ADDRLP4 20
CNSTI4 0
ASGNI4
line 2491
;2491:		}
line 2494
;2492:		// LEILEI END enhancement
;2493:
;2494:		break;
ADDRGP4 $1609
JUMPV
LABELV $1688
line 2497
;2495:
;2496:	case WP_GRENADE_LAUNCHER:
;2497:		mod = cgs.media.dishFlashModel;
ADDRLP4 20
ADDRGP4 cgs+956380+1648
INDIRI4
ASGNI4
line 2498
;2498:		shader = cgs.media.grenadeExplosionShader;
ADDRLP4 56
ADDRGP4 cgs+956380+1672
INDIRI4
ASGNI4
line 2499
;2499:		if ( !cg_paintballMode.integer )
ADDRGP4 cg_paintballMode+12
INDIRI4
CNSTI4 0
NEI4 $1693
line 2500
;2500:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+956380+2024
INDIRI4
ASGNI4
ADDRGP4 $1694
JUMPV
LABELV $1693
line 2502
;2501:		else
;2502:			sfx = cgs.media.gibSound;
ADDRLP4 16
ADDRGP4 cgs+956380+2120
INDIRI4
ASGNI4
LABELV $1694
line 2503
;2503:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1508
INDIRI4
ASGNI4
line 2504
;2504:		radius = 64;
ADDRLP4 24
CNSTF4 1115684864
ASGNF4
line 2505
;2505:		light = 300;
ADDRLP4 68
CNSTF4 1133903872
ASGNF4
line 2506
;2506:		isSprite = qtrue;
ADDRLP4 64
CNSTI4 1
ASGNI4
line 2508
;2507:		// LEILEI START enhancement
;2508:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $1609
line 2510
;2509:		// some more fireball, fireball, fireball, fire fire!
;2510:		VectorMA( origin, 24, dir, sprOrg );
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 96
CNSTF4 1103101952
ASGNF4
ADDRLP4 100
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 92
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 108
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
CNSTF4 1103101952
ADDRFP4 12
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2511
;2511:		VectorScale( dir, 64, sprVel );
ADDRLP4 112
CNSTF4 1115684864
ASGNF4
ADDRLP4 116
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 112
INDIRF4
ADDRLP4 116
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 112
INDIRF4
ADDRLP4 116
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1115684864
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2512
;2512:		lightColor[0] = 0.7;	// subtler explosion colors
ADDRLP4 4
CNSTF4 1060320051
ASGNF4
line 2513
;2513:		lightColor[1] = 0.6;
ADDRLP4 4+4
CNSTF4 1058642330
ASGNF4
line 2514
;2514:		lightColor[2] = 0.4;
ADDRLP4 4+8
CNSTF4 1053609165
ASGNF4
line 2515
;2515:		VectorMA( origin, 4, dir, sprOrg );
ADDRLP4 120
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 124
CNSTF4 1082130432
ASGNF4
ADDRLP4 128
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 120
INDIRP4
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 128
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 120
INDIRP4
ADDRLP4 132
INDIRI4
ADDP4
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 128
INDIRP4
ADDRLP4 132
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 136
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 136
INDIRI4
ADDP4
INDIRF4
CNSTF4 1082130432
ADDRFP4 12
INDIRP4
ADDRLP4 136
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2516
;2516:		VectorScale( dir, 2, sprVel );
ADDRLP4 140
CNSTF4 1073741824
ASGNF4
ADDRLP4 144
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1073741824
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2517
;2517:		VectorMA( origin, 4, dir, sprOrg );
ADDRLP4 148
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 152
CNSTF4 1082130432
ASGNF4
ADDRLP4 156
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 148
INDIRP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 160
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 148
INDIRP4
ADDRLP4 160
INDIRI4
ADDP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRP4
ADDRLP4 160
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 164
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 164
INDIRI4
ADDP4
INDIRF4
CNSTF4 1082130432
ADDRFP4 12
INDIRP4
ADDRLP4 164
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2518
;2518:		VectorScale( dir, 42, sprVel );
ADDRLP4 168
CNSTF4 1109917696
ASGNF4
ADDRLP4 172
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 168
INDIRF4
ADDRLP4 172
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 168
INDIRF4
ADDRLP4 172
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1109917696
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2519
;2519:		CG_ParticleExplosion( "explode1", sprOrg, sprVel, 700, 10, 108 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 700
ARGI4
CNSTI4 10
ARGI4
CNSTI4 108
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2520
;2520:		VectorMA( origin, 4, dir, sprOrg );
ADDRLP4 176
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 180
CNSTF4 1082130432
ASGNF4
ADDRLP4 184
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 176
INDIRP4
INDIRF4
ADDRLP4 180
INDIRF4
ADDRLP4 184
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 188
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 176
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
ADDRLP4 180
INDIRF4
ADDRLP4 184
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 192
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
CNSTF4 1082130432
ADDRFP4 12
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2521
;2521:		VectorScale( dir, 82, sprVel );
ADDRLP4 196
CNSTF4 1118044160
ASGNF4
ADDRLP4 200
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 196
INDIRF4
ADDRLP4 200
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 196
INDIRF4
ADDRLP4 200
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1118044160
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2522
;2522:		CG_ParticleExplosion( "explode1", sprOrg, sprVel, 400, 11, 158 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 400
ARGI4
CNSTI4 11
ARGI4
CNSTI4 158
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2523
;2523:		VectorMA( origin, -5, dir, sprOrg );
ADDRLP4 204
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 208
CNSTF4 3231711232
ASGNF4
ADDRLP4 212
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 212
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 216
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 204
INDIRP4
ADDRLP4 216
INDIRI4
ADDP4
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 212
INDIRP4
ADDRLP4 216
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 220
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 220
INDIRI4
ADDP4
INDIRF4
CNSTF4 3231711232
ADDRFP4 12
INDIRP4
ADDRLP4 220
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2524
;2524:		VectorScale( dir, 182, sprVel );
ADDRLP4 224
CNSTF4 1127612416
ASGNF4
ADDRLP4 228
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 224
INDIRF4
ADDRLP4 228
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 224
INDIRF4
ADDRLP4 228
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1127612416
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2525
;2525:		CG_ParticleExplosion( "explode1", sprOrg, sprVel, 600, 47, 88 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 600
ARGI4
CNSTI4 47
ARGI4
CNSTI4 88
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2526
;2526:		VectorMA( origin, -5, dir, sprOrg );
ADDRLP4 232
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 236
CNSTF4 3231711232
ASGNF4
ADDRLP4 240
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 232
INDIRP4
INDIRF4
ADDRLP4 236
INDIRF4
ADDRLP4 240
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 244
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 232
INDIRP4
ADDRLP4 244
INDIRI4
ADDP4
INDIRF4
ADDRLP4 236
INDIRF4
ADDRLP4 240
INDIRP4
ADDRLP4 244
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 248
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 248
INDIRI4
ADDP4
INDIRF4
CNSTF4 3231711232
ADDRFP4 12
INDIRP4
ADDRLP4 248
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2527
;2527:		VectorScale( dir, 64, sprVel );
ADDRLP4 252
CNSTF4 1115684864
ASGNF4
ADDRLP4 256
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 252
INDIRF4
ADDRLP4 256
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 252
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1115684864
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2528
;2528:		CG_ParticleExplosion( "explode1", sprOrg, sprVel, 110, 72, 28 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 110
ARGI4
CNSTI4 72
ARGI4
CNSTI4 28
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2529
;2529:		mod = 0; // turns off the sprite (unfortunately, disables dlight)
ADDRLP4 20
CNSTI4 0
ASGNI4
line 2530
;2530:		}
line 2532
;2531:		// LEILEI END enhancement
;2532:		break;
ADDRGP4 $1609
JUMPV
LABELV $1731
line 2534
;2533:	case WP_ROCKET_LAUNCHER:
;2534:		mod = cgs.media.dishFlashModel;
ADDRLP4 20
ADDRGP4 cgs+956380+1648
INDIRI4
ASGNI4
line 2535
;2535:		shader = cgs.media.rocketExplosionShader;
ADDRLP4 56
ADDRGP4 cgs+956380+1668
INDIRI4
ASGNI4
line 2536
;2536:		if ( !cg_paintballMode.integer )
ADDRGP4 cg_paintballMode+12
INDIRI4
CNSTI4 0
NEI4 $1736
line 2537
;2537:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+956380+2024
INDIRI4
ASGNI4
ADDRGP4 $1737
JUMPV
LABELV $1736
line 2539
;2538:		else
;2539:			sfx = cgs.media.gibSound;
ADDRLP4 16
ADDRGP4 cgs+956380+2120
INDIRI4
ASGNI4
LABELV $1737
line 2540
;2540:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1508
INDIRI4
ASGNI4
line 2541
;2541:		radius = 64;
ADDRLP4 24
CNSTF4 1115684864
ASGNF4
line 2542
;2542:		light = 300;
ADDRLP4 68
CNSTF4 1133903872
ASGNF4
line 2543
;2543:		isSprite = qtrue;
ADDRLP4 64
CNSTI4 1
ASGNI4
line 2544
;2544:		duration = 1000;
ADDRLP4 72
CNSTI4 1000
ASGNI4
line 2545
;2545:		lightColor[0] = 1;
ADDRLP4 4
CNSTF4 1065353216
ASGNF4
line 2546
;2546:		lightColor[1] = 0.75;
ADDRLP4 4+4
CNSTF4 1061158912
ASGNF4
line 2547
;2547:		lightColor[2] = 0.0;
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 2548
;2548:		if (!cg_oldRocket.integer) {
ADDRGP4 cg_oldRocket+12
INDIRI4
CNSTI4 0
NEI4 $1747
line 2550
;2549:			// explosion sprite animation
;2550:			VectorMA( origin, 24, dir, sprOrg );
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 96
CNSTF4 1103101952
ASGNF4
ADDRLP4 100
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 92
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 108
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
CNSTF4 1103101952
ADDRFP4 12
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2551
;2551:			VectorScale( dir, 64, sprVel );
ADDRLP4 112
CNSTF4 1115684864
ASGNF4
ADDRLP4 116
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 112
INDIRF4
ADDRLP4 116
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 112
INDIRF4
ADDRLP4 116
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1115684864
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2553
;2552:
;2553:			CG_ParticleExplosion( "explode1", sprOrg, sprVel, 1400, 20, 30 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 1400
ARGI4
CNSTI4 20
ARGI4
CNSTI4 30
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2554
;2554:		}
LABELV $1747
line 2556
;2555:		// LEILEI START enhancement
;2556:		if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $1609
line 2558
;2557:		// some more fireball, fireball, fireball, fire fire!
;2558:		VectorMA( origin, 24, dir, sprOrg );
ADDRLP4 92
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 96
CNSTF4 1103101952
ASGNF4
ADDRLP4 100
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 92
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 100
INDIRP4
ADDRLP4 104
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 108
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
CNSTF4 1103101952
ADDRFP4 12
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2559
;2559:		VectorScale( dir, 64, sprVel );
ADDRLP4 112
CNSTF4 1115684864
ASGNF4
ADDRLP4 116
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 112
INDIRF4
ADDRLP4 116
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 112
INDIRF4
ADDRLP4 116
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1115684864
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2560
;2560:		lightColor[0] = 0.7;	// subtler explosion colors
ADDRLP4 4
CNSTF4 1060320051
ASGNF4
line 2561
;2561:		lightColor[1] = 0.6;
ADDRLP4 4+4
CNSTF4 1058642330
ASGNF4
line 2562
;2562:		lightColor[2] = 0.4;
ADDRLP4 4+8
CNSTF4 1053609165
ASGNF4
line 2563
;2563:		VectorMA( origin, 4, dir, sprOrg );
ADDRLP4 120
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 124
CNSTF4 1082130432
ASGNF4
ADDRLP4 128
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 120
INDIRP4
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 128
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 120
INDIRP4
ADDRLP4 132
INDIRI4
ADDP4
INDIRF4
ADDRLP4 124
INDIRF4
ADDRLP4 128
INDIRP4
ADDRLP4 132
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 136
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 136
INDIRI4
ADDP4
INDIRF4
CNSTF4 1082130432
ADDRFP4 12
INDIRP4
ADDRLP4 136
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2564
;2564:		VectorScale( dir, 2, sprVel );
ADDRLP4 140
CNSTF4 1073741824
ASGNF4
ADDRLP4 144
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 140
INDIRF4
ADDRLP4 144
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1073741824
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2565
;2565:		VectorMA( origin, 4, dir, sprOrg );
ADDRLP4 148
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 152
CNSTF4 1082130432
ASGNF4
ADDRLP4 156
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 148
INDIRP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 160
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 148
INDIRP4
ADDRLP4 160
INDIRI4
ADDP4
INDIRF4
ADDRLP4 152
INDIRF4
ADDRLP4 156
INDIRP4
ADDRLP4 160
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 164
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 164
INDIRI4
ADDP4
INDIRF4
CNSTF4 1082130432
ADDRFP4 12
INDIRP4
ADDRLP4 164
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2566
;2566:		VectorScale( dir, 42, sprVel );
ADDRLP4 168
CNSTF4 1109917696
ASGNF4
ADDRLP4 172
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 168
INDIRF4
ADDRLP4 172
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 168
INDIRF4
ADDRLP4 172
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1109917696
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2567
;2567:		CG_ParticleExplosion( "explode1", sprOrg, sprVel, 700, 10, 108 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 700
ARGI4
CNSTI4 10
ARGI4
CNSTI4 108
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2568
;2568:		VectorMA( origin, 4, dir, sprOrg );
ADDRLP4 176
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 180
CNSTF4 1082130432
ASGNF4
ADDRLP4 184
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 176
INDIRP4
INDIRF4
ADDRLP4 180
INDIRF4
ADDRLP4 184
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 188
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 176
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
ADDRLP4 180
INDIRF4
ADDRLP4 184
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 192
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
CNSTF4 1082130432
ADDRFP4 12
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2569
;2569:		VectorScale( dir, 82, sprVel );
ADDRLP4 196
CNSTF4 1118044160
ASGNF4
ADDRLP4 200
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 196
INDIRF4
ADDRLP4 200
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 196
INDIRF4
ADDRLP4 200
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1118044160
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2570
;2570:		CG_ParticleExplosion( "explode1", sprOrg, sprVel, 400, 11, 158 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 400
ARGI4
CNSTI4 11
ARGI4
CNSTI4 158
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2571
;2571:		VectorMA( origin, -5, dir, sprOrg );
ADDRLP4 204
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 208
CNSTF4 3231711232
ASGNF4
ADDRLP4 212
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 212
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 216
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 204
INDIRP4
ADDRLP4 216
INDIRI4
ADDP4
INDIRF4
ADDRLP4 208
INDIRF4
ADDRLP4 212
INDIRP4
ADDRLP4 216
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 220
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 220
INDIRI4
ADDP4
INDIRF4
CNSTF4 3231711232
ADDRFP4 12
INDIRP4
ADDRLP4 220
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2572
;2572:		VectorScale( dir, 182, sprVel );
ADDRLP4 224
CNSTF4 1127612416
ASGNF4
ADDRLP4 228
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 224
INDIRF4
ADDRLP4 228
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 224
INDIRF4
ADDRLP4 228
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1127612416
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2573
;2573:		CG_ParticleExplosion( "explode1", sprOrg, sprVel, 600, 47, 88 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 600
ARGI4
CNSTI4 47
ARGI4
CNSTI4 88
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2574
;2574:		VectorMA( origin, -5, dir, sprOrg );
ADDRLP4 232
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 236
CNSTF4 3231711232
ASGNF4
ADDRLP4 240
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 232
INDIRP4
INDIRF4
ADDRLP4 236
INDIRF4
ADDRLP4 240
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 244
CNSTI4 4
ASGNI4
ADDRLP4 32+4
ADDRLP4 232
INDIRP4
ADDRLP4 244
INDIRI4
ADDP4
INDIRF4
ADDRLP4 236
INDIRF4
ADDRLP4 240
INDIRP4
ADDRLP4 244
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 248
CNSTI4 8
ASGNI4
ADDRLP4 32+8
ADDRFP4 8
INDIRP4
ADDRLP4 248
INDIRI4
ADDP4
INDIRF4
CNSTF4 3231711232
ADDRFP4 12
INDIRP4
ADDRLP4 248
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 2575
;2575:		VectorScale( dir, 64, sprVel );
ADDRLP4 252
CNSTF4 1115684864
ASGNF4
ADDRLP4 256
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 252
INDIRF4
ADDRLP4 256
INDIRP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+4
ADDRLP4 252
INDIRF4
ADDRLP4 256
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 44+8
CNSTF4 1115684864
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ASGNF4
line 2576
;2576:		CG_ParticleExplosion( "explode1", sprOrg, sprVel, 110, 72, 28 );
ADDRGP4 $1675
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
CNSTI4 110
ARGI4
CNSTI4 72
ARGI4
CNSTI4 28
ARGI4
ADDRGP4 CG_ParticleExplosion
CALLV
pop
line 2577
;2577:		mod = 0; // turns off the sprite (unfortunately, disables dlight)
ADDRLP4 20
CNSTI4 0
ASGNI4
line 2578
;2578:		}
line 2580
;2579:		// LEILEI END enhancement
;2580:		break;
ADDRGP4 $1609
JUMPV
LABELV $1783
line 2582
;2581:	case WP_RAILGUN:
;2582:		mod = cgs.media.ringFlashModel;
ADDRLP4 20
ADDRGP4 cgs+956380+1644
INDIRI4
ASGNI4
line 2583
;2583:		shader = cgs.media.railExplosionShader;
ADDRLP4 56
ADDRGP4 cgs+956380+1656
INDIRI4
ASGNI4
line 2584
;2584:		if ( !cg_paintballMode.integer )
ADDRGP4 cg_paintballMode+12
INDIRI4
CNSTI4 0
NEI4 $1788
line 2585
;2585:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+956380+2028
INDIRI4
ASGNI4
ADDRGP4 $1789
JUMPV
LABELV $1788
line 2587
;2586:		else
;2587:			sfx = cgs.media.gibBounce3Sound;
ADDRLP4 16
ADDRGP4 cgs+956380+2132
INDIRI4
ASGNI4
LABELV $1789
line 2588
;2588:		mark = cgs.media.energyMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1516
INDIRI4
ASGNI4
line 2589
;2589:		radius = 24;
ADDRLP4 24
CNSTF4 1103101952
ASGNF4
line 2590
;2590:		break;
ADDRGP4 $1609
JUMPV
LABELV $1797
line 2592
;2591:	case WP_PLASMAGUN:
;2592:		mod = cgs.media.ringFlashModel;
ADDRLP4 20
ADDRGP4 cgs+956380+1644
INDIRI4
ASGNI4
line 2593
;2593:		shader = cgs.media.plasmaExplosionShader;
ADDRLP4 56
ADDRGP4 cgs+956380+1660
INDIRI4
ASGNI4
line 2594
;2594:		if ( !cg_paintballMode.integer )
ADDRGP4 cg_paintballMode+12
INDIRI4
CNSTI4 0
NEI4 $1802
line 2595
;2595:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+956380+2028
INDIRI4
ASGNI4
ADDRGP4 $1803
JUMPV
LABELV $1802
line 2597
;2596:		else
;2597:			sfx = cgs.media.gibBounce3Sound;
ADDRLP4 16
ADDRGP4 cgs+956380+2132
INDIRI4
ASGNI4
LABELV $1803
line 2598
;2598:		mark = cgs.media.energyMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1516
INDIRI4
ASGNI4
line 2599
;2599:		radius = 16;
ADDRLP4 24
CNSTF4 1098907648
ASGNF4
line 2600
;2600:		break;
ADDRGP4 $1609
JUMPV
LABELV $1811
line 2602
;2601:	case WP_BFG:
;2602:		mod = cgs.media.dishFlashModel;
ADDRLP4 20
ADDRGP4 cgs+956380+1648
INDIRI4
ASGNI4
line 2603
;2603:		shader = cgs.media.bfgExplosionShader;
ADDRLP4 56
ADDRGP4 cgs+956380+1676
INDIRI4
ASGNI4
line 2604
;2604:		if ( !cg_paintballMode.integer )
ADDRGP4 cg_paintballMode+12
INDIRI4
CNSTI4 0
NEI4 $1816
line 2605
;2605:		sfx = cgs.media.sfx_rockexp;
ADDRLP4 16
ADDRGP4 cgs+956380+2024
INDIRI4
ASGNI4
ADDRGP4 $1817
JUMPV
LABELV $1816
line 2607
;2606:		else
;2607:			sfx = cgs.media.gibSound;
ADDRLP4 16
ADDRGP4 cgs+956380+2120
INDIRI4
ASGNI4
LABELV $1817
line 2608
;2608:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1508
INDIRI4
ASGNI4
line 2609
;2609:		radius = 32;
ADDRLP4 24
CNSTF4 1107296256
ASGNF4
line 2610
;2610:		isSprite = qtrue;
ADDRLP4 64
CNSTI4 1
ASGNI4
line 2611
;2611:		break;
ADDRGP4 $1609
JUMPV
LABELV $1825
line 2613
;2612:	case WP_FLAMETHROWER:
;2613:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+956380+2028
INDIRI4
ASGNI4
line 2614
;2614:		shader = cgs.media.plasmaExplosionShader;
ADDRLP4 56
ADDRGP4 cgs+956380+1660
INDIRI4
ASGNI4
line 2615
;2615:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1508
INDIRI4
ASGNI4
line 2616
;2616:		radius = 32;
ADDRLP4 24
CNSTF4 1107296256
ASGNF4
line 2617
;2617:		break;
ADDRGP4 $1609
JUMPV
LABELV $1832
line 2619
;2618:	case WP_ANTIMATTER:
;2619:		sfx = cgs.media.sfx_plasmaexp;
ADDRLP4 16
ADDRGP4 cgs+956380+2028
INDIRI4
ASGNI4
line 2620
;2620:		shader = cgs.media.plasmaExplosionShader;
ADDRLP4 56
ADDRGP4 cgs+956380+1660
INDIRI4
ASGNI4
line 2621
;2621:		mark = cgs.media.burnMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1508
INDIRI4
ASGNI4
line 2622
;2622:		radius = 1;
ADDRLP4 24
CNSTF4 1065353216
ASGNF4
line 2623
;2623:		break;
ADDRGP4 $1609
JUMPV
LABELV $1839
line 2626
;2624:	case WP_TOOLGUN:
;2625:		// no explosion at LG impact, it is added with the beam
;2626:		r = rand() & 3;
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
ADDRLP4 92
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 2627
;2627:		if ( r < 2 ) {
ADDRLP4 76
INDIRI4
CNSTI4 2
GEI4 $1840
line 2628
;2628:			sfx = cgs.media.sfx_lghit2;
ADDRLP4 16
ADDRGP4 cgs+956380+2000
INDIRI4
ASGNI4
line 2629
;2629:		} else if ( r == 2 ) {
ADDRGP4 $1841
JUMPV
LABELV $1840
ADDRLP4 76
INDIRI4
CNSTI4 2
NEI4 $1844
line 2630
;2630:			sfx = cgs.media.sfx_lghit1;
ADDRLP4 16
ADDRGP4 cgs+956380+1996
INDIRI4
ASGNI4
line 2631
;2631:		} else {
ADDRGP4 $1845
JUMPV
LABELV $1844
line 2632
;2632:			sfx = cgs.media.sfx_lghit3;
ADDRLP4 16
ADDRGP4 cgs+956380+2004
INDIRI4
ASGNI4
line 2633
;2633:		}
LABELV $1845
LABELV $1841
line 2634
;2634:		mark = cgs.media.holeMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1512
INDIRI4
ASGNI4
line 2635
;2635:		radius = 12;
ADDRLP4 24
CNSTF4 1094713344
ASGNF4
line 2636
;2636:		break;
ADDRGP4 $1609
JUMPV
LABELV $1852
line 2638
;2637:	case WP_PHYSGUN:
;2638:		mod =  0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 2639
;2639:		shader = 0;
ADDRLP4 56
CNSTI4 0
ASGNI4
line 2640
;2640:		sfx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 2641
;2641:		mark = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2642
;2642:		radius = 0;
ADDRLP4 24
CNSTF4 0
ASGNF4
line 2643
;2643:		break;
ADDRGP4 $1609
JUMPV
LABELV $1853
line 2645
;2644:	case WP_GRAVITYGUN:
;2645:		mod =  0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 2646
;2646:		shader = 0;
ADDRLP4 56
CNSTI4 0
ASGNI4
line 2647
;2647:		sfx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 2648
;2648:		mark = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2649
;2649:		radius = 0;
ADDRLP4 24
CNSTF4 0
ASGNF4
line 2650
;2650:		break;
ADDRGP4 $1609
JUMPV
LABELV $1854
line 2652
;2651:	case WP_SHOTGUN:
;2652:		mod = cgs.media.bulletFlashModel;
ADDRLP4 20
ADDRGP4 cgs+956380+1640
INDIRI4
ASGNI4
line 2653
;2653:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 56
ADDRGP4 cgs+956380+1664
INDIRI4
ASGNI4
line 2654
;2654:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1504
INDIRI4
ASGNI4
line 2655
;2655:		sfx = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 2656
;2656:		radius = 4;
ADDRLP4 24
CNSTF4 1082130432
ASGNF4
line 2657
;2657:		break;
ADDRGP4 $1609
JUMPV
LABELV $1861
line 2660
;2658:
;2659:	case WP_CHAINGUN:
;2660:		mod = cgs.media.bulletFlashModel;
ADDRLP4 20
ADDRGP4 cgs+956380+1640
INDIRI4
ASGNI4
line 2661
;2661:		if( soundType == IMPACTSOUND_FLESH ) {
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $1864
line 2662
;2662:			sfx = cgs.media.sfx_chghitflesh;
ADDRLP4 16
ADDRGP4 cgs+956380+2052
INDIRI4
ASGNI4
line 2663
;2663:		} else if( soundType == IMPACTSOUND_METAL ) {
ADDRGP4 $1865
JUMPV
LABELV $1864
ADDRFP4 16
INDIRI4
CNSTI4 1
NEI4 $1868
line 2664
;2664:			sfx = cgs.media.sfx_chghitmetal;
ADDRLP4 16
ADDRGP4 cgs+956380+2056
INDIRI4
ASGNI4
line 2665
;2665:		} else {
ADDRGP4 $1869
JUMPV
LABELV $1868
line 2666
;2666:			sfx = cgs.media.sfx_chghit;
ADDRLP4 16
ADDRGP4 cgs+956380+2048
INDIRI4
ASGNI4
line 2667
;2667:		}
LABELV $1869
LABELV $1865
line 2669
;2668:
;2669:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1504
INDIRI4
ASGNI4
line 2670
;2670:		r = rand() & 3;
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
ADDRLP4 96
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 2671
;2671:		if ( !cg_paintballMode.integer ) {
ADDRGP4 cg_paintballMode+12
INDIRI4
CNSTI4 0
NEI4 $1876
line 2672
;2672:			if ( r == 0 ) {
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $1879
line 2673
;2673:				sfx = cgs.media.sfx_ric1;
ADDRLP4 16
ADDRGP4 cgs+956380+2008
INDIRI4
ASGNI4
line 2674
;2674:			} else if ( r == 1 ) {
ADDRGP4 $1877
JUMPV
LABELV $1879
ADDRLP4 76
INDIRI4
CNSTI4 1
NEI4 $1883
line 2675
;2675:				sfx = cgs.media.sfx_ric2;
ADDRLP4 16
ADDRGP4 cgs+956380+2012
INDIRI4
ASGNI4
line 2676
;2676:			} else {
ADDRGP4 $1877
JUMPV
LABELV $1883
line 2677
;2677:				sfx = cgs.media.sfx_ric3;
ADDRLP4 16
ADDRGP4 cgs+956380+2016
INDIRI4
ASGNI4
line 2678
;2678:			}
line 2679
;2679:		} else {
ADDRGP4 $1877
JUMPV
LABELV $1876
line 2680
;2680:			if ( r == 0 ) {
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $1889
line 2681
;2681:				sfx = cgs.media.gibBounce1Sound;
ADDRLP4 16
ADDRGP4 cgs+956380+2124
INDIRI4
ASGNI4
line 2682
;2682:			} else if ( r == 1 ) {
ADDRGP4 $1890
JUMPV
LABELV $1889
ADDRLP4 76
INDIRI4
CNSTI4 1
NEI4 $1893
line 2683
;2683:				sfx = cgs.media.gibBounce2Sound;
ADDRLP4 16
ADDRGP4 cgs+956380+2128
INDIRI4
ASGNI4
line 2684
;2684:			} else {
ADDRGP4 $1894
JUMPV
LABELV $1893
line 2685
;2685:				sfx = cgs.media.gibBounce3Sound;
ADDRLP4 16
ADDRGP4 cgs+956380+2132
INDIRI4
ASGNI4
line 2686
;2686:			}
LABELV $1894
LABELV $1890
line 2687
;2687:		}
LABELV $1877
line 2689
;2688:
;2689:		radius = 8;
ADDRLP4 24
CNSTF4 1090519040
ASGNF4
line 2690
;2690:		break;
ADDRGP4 $1609
JUMPV
LABELV $1899
line 2693
;2691:
;2692:	case WP_MACHINEGUN:
;2693:		mod = cgs.media.bulletFlashModel;
ADDRLP4 20
ADDRGP4 cgs+956380+1640
INDIRI4
ASGNI4
line 2694
;2694:		shader = cgs.media.bulletExplosionShader;
ADDRLP4 56
ADDRGP4 cgs+956380+1664
INDIRI4
ASGNI4
line 2695
;2695:		mark = cgs.media.bulletMarkShader;
ADDRLP4 0
ADDRGP4 cgs+956380+1504
INDIRI4
ASGNI4
line 2696
;2696:		r = rand() & 3;
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 76
ADDRLP4 100
INDIRI4
CNSTI4 3
BANDI4
ASGNI4
line 2697
;2697:		if ( r == 0 ) {
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $1906
line 2698
;2698:			sfx = cgs.media.sfx_ric1;
ADDRLP4 16
ADDRGP4 cgs+956380+2008
INDIRI4
ASGNI4
line 2699
;2699:		} else if ( r == 1 ) {
ADDRGP4 $1907
JUMPV
LABELV $1906
ADDRLP4 76
INDIRI4
CNSTI4 1
NEI4 $1910
line 2700
;2700:			sfx = cgs.media.sfx_ric2;
ADDRLP4 16
ADDRGP4 cgs+956380+2012
INDIRI4
ASGNI4
line 2701
;2701:		} else {
ADDRGP4 $1911
JUMPV
LABELV $1910
line 2702
;2702:			sfx = cgs.media.sfx_ric3;
ADDRLP4 16
ADDRGP4 cgs+956380+2016
INDIRI4
ASGNI4
line 2703
;2703:		}
LABELV $1911
LABELV $1907
line 2705
;2704:
;2705:		radius = 8;
ADDRLP4 24
CNSTF4 1090519040
ASGNF4
line 2706
;2706:		break;
LABELV $1609
line 2709
;2707:	}
;2708:
;2709:	if ( sfx ) {
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $1918
line 2710
;2710:		trap_S_StartSound( origin, ENTITYNUM_WORLD, CHAN_AUTO, sfx );
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 4094
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 2711
;2711:	}
LABELV $1918
line 2716
;2712:
;2713:	//
;2714:	// create the explosion
;2715:	//
;2716:	if ( mod ) {
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $1920
line 2717
;2717:		le = CG_MakeExplosion( origin, dir, 
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 72
INDIRI4
ARGI4
ADDRLP4 64
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 CG_MakeExplosion
CALLP4
ASGNP4
ADDRLP4 28
ADDRLP4 88
INDIRP4
ASGNP4
line 2720
;2718:							   mod,	shader,
;2719:							   duration, isSprite );
;2720:		le->light = light;
ADDRLP4 28
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 68
INDIRF4
ASGNF4
line 2721
;2721:		VectorCopy( lightColor, le->lightColor );
ADDRLP4 28
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 2722
;2722:		if ( weapon == WP_RAILGUN ) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $1922
line 2724
;2723:			// colorize with client color
;2724:			VectorCopy( cgs.clientinfo[clientNum].color1, le->color );
ADDRLP4 28
INDIRP4
CNSTI4 108
ADDP4
CNSTI4 1944
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 cgs+440948+76
ADDP4
INDIRB
ASGNB 12
line 2725
;2725:			le->refEntity.shaderRGBA[0] = le->color[0] * 0xff;
ADDRLP4 100
CNSTF4 1132396544
ADDRLP4 28
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 104
CNSTF4 1325400064
ASGNF4
ADDRLP4 100
INDIRF4
ADDRLP4 104
INDIRF4
LTF4 $1927
ADDRLP4 92
ADDRLP4 100
INDIRF4
ADDRLP4 104
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1928
JUMPV
LABELV $1927
ADDRLP4 92
ADDRLP4 100
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1928
ADDRLP4 28
INDIRP4
CNSTI4 272
ADDP4
ADDRLP4 92
INDIRU4
CVUU1 4
ASGNU1
line 2726
;2726:			le->refEntity.shaderRGBA[1] = le->color[1] * 0xff;
ADDRLP4 116
CNSTF4 1132396544
ADDRLP4 28
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 120
CNSTF4 1325400064
ASGNF4
ADDRLP4 116
INDIRF4
ADDRLP4 120
INDIRF4
LTF4 $1930
ADDRLP4 108
ADDRLP4 116
INDIRF4
ADDRLP4 120
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1931
JUMPV
LABELV $1930
ADDRLP4 108
ADDRLP4 116
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1931
ADDRLP4 28
INDIRP4
CNSTI4 273
ADDP4
ADDRLP4 108
INDIRU4
CVUU1 4
ASGNU1
line 2727
;2727:			le->refEntity.shaderRGBA[2] = le->color[2] * 0xff;
ADDRLP4 132
CNSTF4 1132396544
ADDRLP4 28
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 136
CNSTF4 1325400064
ASGNF4
ADDRLP4 132
INDIRF4
ADDRLP4 136
INDIRF4
LTF4 $1933
ADDRLP4 124
ADDRLP4 132
INDIRF4
ADDRLP4 136
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1934
JUMPV
LABELV $1933
ADDRLP4 124
ADDRLP4 132
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1934
ADDRLP4 28
INDIRP4
CNSTI4 274
ADDP4
ADDRLP4 124
INDIRU4
CVUU1 4
ASGNU1
line 2728
;2728:			le->refEntity.shaderRGBA[3] = 0xff;
ADDRLP4 28
INDIRP4
CNSTI4 275
ADDP4
CNSTU1 255
ASGNU1
line 2729
;2729:		}
LABELV $1922
line 2730
;2730:	}
LABELV $1920
line 2735
;2731:
;2732:	//
;2733:	// impact mark
;2734:	//
;2735:	alphaFade = (mark == cgs.media.energyMarkShader);	// plasma fades alpha, all others fade color
ADDRLP4 0
INDIRI4
ADDRGP4 cgs+956380+1516
INDIRI4
NEI4 $1938
ADDRLP4 88
CNSTI4 1
ASGNI4
ADDRGP4 $1939
JUMPV
LABELV $1938
ADDRLP4 88
CNSTI4 0
ASGNI4
LABELV $1939
ADDRLP4 60
ADDRLP4 88
INDIRI4
ASGNI4
line 2736
;2736:	if ( weapon == WP_RAILGUN ) {
ADDRFP4 0
INDIRI4
CNSTI4 7
NEI4 $1940
line 2740
;2737:		float	*color;
;2738:
;2739:		// colorize with client color
;2740:		color = cgs.clientinfo[clientNum].color1;
ADDRLP4 92
CNSTI4 1944
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 cgs+440948+76
ADDP4
ASGNP4
line 2741
;2741:		CG_ImpactMark( mark, origin, dir, random()*360, color[0],color[1], color[2],1, alphaFade, radius, qfalse );
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
CNSTF4 1135869952
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 100
ADDRLP4 92
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
INDIRF4
ARGF4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ARGF4
ADDRLP4 100
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 24
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2742
;2742:	} else {
ADDRGP4 $1941
JUMPV
LABELV $1940
line 2743
;2743:		CG_ImpactMark( mark, origin, dir, random()*360, 1,1,1,1, alphaFade, radius, qfalse );
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
CNSTF4 1135869952
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
ARGF4
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 96
INDIRF4
ARGF4
ADDRLP4 60
INDIRI4
ARGI4
ADDRLP4 24
INDIRF4
ARGF4
CNSTI4 0
ARGI4
ADDRGP4 CG_ImpactMark
CALLV
pop
line 2744
;2744:	}
LABELV $1941
line 2745
;2745:}
LABELV $1605
endproc CG_MissileHitWall 260 44
export CG_MissileHitPlayer
proc CG_MissileHitPlayer 8 48
line 2753
;2746:
;2747:
;2748:/*
;2749:=================
;2750:CG_MissileHitPlayer
;2751:=================
;2752:*/
;2753:void CG_MissileHitPlayer( int weapon, vec3_t origin, vec3_t dir, int entityNum ) {
line 2755
;2754:// LEILEI ENHANCEMENT
;2755:	if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $1945
line 2756
;2756:		CG_SmokePuff( origin, dir, 22, 1, 1, 1, 1.0f, 900, cg.time, 0, 0,  cgs.media.lbldShader1 );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTF4 1102053376
ARGF4
ADDRLP4 0
CNSTF4 1065353216
ASGNF4
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 0
INDIRF4
ARGF4
CNSTF4 1147207680
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1340
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 2757
;2757:		CG_SpurtBlood( origin, dir, 1);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_SpurtBlood
CALLV
pop
line 2760
;2758://		CG_SpurtBlood( origin, dir, 4);
;2759://		CG_SpurtBlood( origin, dir, -12);
;2760:		}
ADDRGP4 $1946
JUMPV
LABELV $1945
line 2763
;2761:
;2762:	else
;2763:	CG_Bleed( origin, entityNum );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
LABELV $1946
line 2767
;2764:
;2765:	// some weapons will make an explosion with the blood, while
;2766:	// others will just make the blood
;2767:	switch ( weapon ) {
ADDRLP4 0
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $1952
ADDRLP4 0
INDIRI4
CNSTI4 13
GTI4 $1952
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1954-16
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1954
address $1953
address $1953
address $1952
address $1952
address $1952
address $1952
address $1952
address $1953
address $1953
address $1953
code
LABELV $1953
line 2775
;2768:	case WP_GRENADE_LAUNCHER:
;2769:	case WP_ROCKET_LAUNCHER:
;2770:
;2771:	case WP_NAILGUN:
;2772:	case WP_CHAINGUN:
;2773:	case WP_PROX_LAUNCHER:
;2774:
;2775:		CG_MissileHitWall( weapon, 0, origin, dir, IMPACTSOUND_FLESH );
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2776
;2776:		break;
line 2778
;2777:	default:
;2778:		break;
LABELV $1952
line 2780
;2779:	}
;2780:}
LABELV $1944
endproc CG_MissileHitPlayer 8 48
proc CG_ShotgunPellet 200 48
line 2797
;2781:
;2782:
;2783:
;2784:/*
;2785:============================================================================
;2786:
;2787:SHOTGUN TRACING
;2788:
;2789:============================================================================
;2790:*/
;2791:
;2792:/*
;2793:================
;2794:CG_ShotgunPellet
;2795:================
;2796:*/
;2797:static void CG_ShotgunPellet( vec3_t start, vec3_t end, int skipNum ) {
line 2807
;2798:	trace_t		tr;
;2799:	int sourceContentType, destContentType;
;2800:
;2801:// LEILEI ENHACNEMENT
;2802:	localEntity_t	*smoke;
;2803:	vec3_t  kapow;
;2804:
;2805:
;2806:
;2807:	CG_Trace( &tr, start, NULL, NULL, end, skipNum, MASK_SHOT );
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 80
CNSTP4 0
ASGNP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 2809
;2808:
;2809:	sourceContentType = CG_PointContents( start, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 84
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 68
ADDRLP4 84
INDIRI4
ASGNI4
line 2810
;2810:	destContentType = CG_PointContents( tr.endpos, 0 );
ADDRLP4 0+12
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 88
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 72
ADDRLP4 88
INDIRI4
ASGNI4
line 2813
;2811:
;2812:	// FIXME: should probably move this cruft into CG_BubbleTrail
;2813:	if ( sourceContentType == destContentType ) {
ADDRLP4 68
INDIRI4
ADDRLP4 72
INDIRI4
NEI4 $1958
line 2814
;2814:		if ( sourceContentType & CONTENTS_WATER ) {
ADDRLP4 68
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1959
line 2815
;2815:			CG_BubbleTrail( start, tr.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2816
;2816:		}
line 2817
;2817:	} else if ( sourceContentType & CONTENTS_WATER ) {
ADDRGP4 $1959
JUMPV
LABELV $1958
ADDRLP4 68
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1963
line 2820
;2818:		trace_t trace;
;2819:
;2820:		trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 92
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 148
CNSTP4 0
ASGNP4
ADDRLP4 148
INDIRP4
ARGP4
ADDRLP4 148
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2821
;2821:		CG_BubbleTrail( start, trace.endpos, 32 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 92+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2824
;2822:
;2823:// LEILEI ENHANCEMENT
;2824:				if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $1964
line 2826
;2825:				// Water Splash
;2826:					VectorCopy( trace.plane.normal, kapow );
ADDRLP4 56
ADDRLP4 92+24
INDIRB
ASGNB 12
line 2828
;2827:					
;2828:					kapow[0] = kapow[0] * (crandom() * 22);
ADDRLP4 152
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 56
INDIRF4
CNSTF4 1102053376
CNSTF4 1073741824
ADDRLP4 152
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 2829
;2829:					kapow[1] = kapow[1] * (crandom() * 22);
ADDRLP4 156
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56+4
ADDRLP4 56+4
INDIRF4
CNSTF4 1102053376
CNSTF4 1073741824
ADDRLP4 156
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 2830
;2830:					kapow[2] = kapow[2] * (crandom() * 65 + 37);
ADDRLP4 160
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56+8
ADDRLP4 56+8
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 160
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 2831
;2831:					smoke = CG_SmokePuff( trace.endpos, kapow, 14, 1, 1, 1, 1.0f, 400, cg.time, 0, 0,  cgs.media.lsplShader );
ADDRLP4 92+12
ARGP4
ADDRLP4 56
ARGP4
CNSTF4 1096810496
ARGF4
ADDRLP4 164
CNSTF4 1065353216
ASGNF4
ADDRLP4 164
INDIRF4
ARGF4
ADDRLP4 164
INDIRF4
ARGF4
ADDRLP4 164
INDIRF4
ARGF4
ADDRLP4 164
INDIRF4
ARGF4
CNSTF4 1137180672
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 168
CNSTI4 0
ASGNI4
ADDRLP4 168
INDIRI4
ARGI4
ADDRLP4 168
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1328
INDIRI4
ARGI4
ADDRLP4 172
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 76
ADDRLP4 172
INDIRP4
ASGNP4
line 2832
;2832:					smoke = CG_SmokePuff( trace.endpos, kapow, 6, 1, 1, 1, 1.0f, 200, cg.time, 0, 0,  cgs.media.lsplShader );
ADDRLP4 92+12
ARGP4
ADDRLP4 56
ARGP4
CNSTF4 1086324736
ARGF4
ADDRLP4 176
CNSTF4 1065353216
ASGNF4
ADDRLP4 176
INDIRF4
ARGF4
ADDRLP4 176
INDIRF4
ARGF4
ADDRLP4 176
INDIRF4
ARGF4
ADDRLP4 176
INDIRF4
ARGF4
CNSTF4 1128792064
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 180
CNSTI4 0
ASGNI4
ADDRLP4 180
INDIRI4
ARGI4
ADDRLP4 180
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1328
INDIRI4
ARGI4
ADDRLP4 184
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 76
ADDRLP4 184
INDIRP4
ASGNP4
line 2833
;2833:					smoke = CG_SmokePuff( trace.endpos, kapow, 10, 1, 1, 1, 1.0f, 300, cg.time, 0, 0,  cgs.media.lsplShader );
ADDRLP4 92+12
ARGP4
ADDRLP4 56
ARGP4
CNSTF4 1092616192
ARGF4
ADDRLP4 188
CNSTF4 1065353216
ASGNF4
ADDRLP4 188
INDIRF4
ARGF4
ADDRLP4 188
INDIRF4
ARGF4
ADDRLP4 188
INDIRF4
ARGF4
ADDRLP4 188
INDIRF4
ARGF4
CNSTF4 1133903872
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 192
CNSTI4 0
ASGNI4
ADDRLP4 192
INDIRI4
ARGI4
ADDRLP4 192
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1328
INDIRI4
ARGI4
ADDRLP4 196
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 76
ADDRLP4 196
INDIRP4
ASGNP4
line 2835
;2834:						
;2835:				}
line 2837
;2836:// END LEIHANCMENET
;2837:	} else if ( destContentType & CONTENTS_WATER ) {
ADDRGP4 $1964
JUMPV
LABELV $1963
ADDRLP4 72
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $1986
line 2840
;2838:		trace_t trace;
;2839:
;2840:		trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 92
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 148
CNSTP4 0
ASGNP4
ADDRLP4 148
INDIRP4
ARGP4
ADDRLP4 148
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 2841
;2841:		CG_BubbleTrail( tr.endpos, trace.endpos, 32 );
ADDRLP4 0+12
ARGP4
ADDRLP4 92+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 2844
;2842:
;2843:// LEILEI ENHANCEMENT
;2844:				if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $1990
line 2846
;2845:				// Water Splash
;2846:					VectorCopy( trace.plane.normal, kapow );
ADDRLP4 56
ADDRLP4 92+24
INDIRB
ASGNB 12
line 2848
;2847:					
;2848:					kapow[0] = kapow[0] * (crandom() * 22);
ADDRLP4 152
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 56
INDIRF4
CNSTF4 1102053376
CNSTF4 1073741824
ADDRLP4 152
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 2849
;2849:					kapow[1] = kapow[1] * (crandom() * 22);
ADDRLP4 156
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56+4
ADDRLP4 56+4
INDIRF4
CNSTF4 1102053376
CNSTF4 1073741824
ADDRLP4 156
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 2850
;2850:					kapow[2] = kapow[2] * (crandom() * 65 + 37);
ADDRLP4 160
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56+8
ADDRLP4 56+8
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 160
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 2851
;2851:					smoke = CG_SmokePuff( trace.endpos, kapow, 14, 1, 1, 1, 1.0f, 400, cg.time, 0, 0,  cgs.media.lsplShader );
ADDRLP4 92+12
ARGP4
ADDRLP4 56
ARGP4
CNSTF4 1096810496
ARGF4
ADDRLP4 164
CNSTF4 1065353216
ASGNF4
ADDRLP4 164
INDIRF4
ARGF4
ADDRLP4 164
INDIRF4
ARGF4
ADDRLP4 164
INDIRF4
ARGF4
ADDRLP4 164
INDIRF4
ARGF4
CNSTF4 1137180672
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 168
CNSTI4 0
ASGNI4
ADDRLP4 168
INDIRI4
ARGI4
ADDRLP4 168
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1328
INDIRI4
ARGI4
ADDRLP4 172
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 76
ADDRLP4 172
INDIRP4
ASGNP4
line 2852
;2852:					smoke = CG_SmokePuff( trace.endpos, kapow, 6, 1, 1, 1, 1.0f, 200, cg.time, 0, 0,  cgs.media.lsplShader );
ADDRLP4 92+12
ARGP4
ADDRLP4 56
ARGP4
CNSTF4 1086324736
ARGF4
ADDRLP4 176
CNSTF4 1065353216
ASGNF4
ADDRLP4 176
INDIRF4
ARGF4
ADDRLP4 176
INDIRF4
ARGF4
ADDRLP4 176
INDIRF4
ARGF4
ADDRLP4 176
INDIRF4
ARGF4
CNSTF4 1128792064
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 180
CNSTI4 0
ASGNI4
ADDRLP4 180
INDIRI4
ARGI4
ADDRLP4 180
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1328
INDIRI4
ARGI4
ADDRLP4 184
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 76
ADDRLP4 184
INDIRP4
ASGNP4
line 2853
;2853:					smoke = CG_SmokePuff( trace.endpos, kapow, 10, 1, 1, 1, 1.0f, 300, cg.time, 0, 0,  cgs.media.lsplShader );
ADDRLP4 92+12
ARGP4
ADDRLP4 56
ARGP4
CNSTF4 1092616192
ARGF4
ADDRLP4 188
CNSTF4 1065353216
ASGNF4
ADDRLP4 188
INDIRF4
ARGF4
ADDRLP4 188
INDIRF4
ARGF4
ADDRLP4 188
INDIRF4
ARGF4
ADDRLP4 188
INDIRF4
ARGF4
CNSTF4 1133903872
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 192
CNSTI4 0
ASGNI4
ADDRLP4 192
INDIRI4
ARGI4
ADDRLP4 192
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1328
INDIRI4
ARGI4
ADDRLP4 196
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 76
ADDRLP4 196
INDIRP4
ASGNP4
line 2854
;2854:				}
LABELV $1990
line 2856
;2855:// END LEIHANCMENET
;2856:	}
LABELV $1986
LABELV $1964
LABELV $1959
line 2858
;2857:
;2858:	if (  tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $2010
line 2859
;2859:		return;
ADDRGP4 $1956
JUMPV
LABELV $2010
line 2862
;2860:	}
;2861:
;2862:	if ( cg_entities[tr.entityNum].currentState.eType == ET_PLAYER ) {
CNSTI4 928
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 cg_entities+4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $2013
line 2863
;2863:		CG_MissileHitPlayer( WP_SHOTGUN, tr.endpos, tr.plane.normal, tr.entityNum );
CNSTI4 3
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 0+52
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitPlayer
CALLV
pop
line 2864
;2864:	} else {
ADDRGP4 $2014
JUMPV
LABELV $2013
line 2865
;2865:		if ( tr.surfaceFlags & SURF_NOIMPACT ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $2020
line 2867
;2866:			// SURF_NOIMPACT will not make a flame puff or a mark
;2867:			return;
ADDRGP4 $1956
JUMPV
LABELV $2020
line 2869
;2868:		}
;2869:		if ( tr.surfaceFlags & SURF_METALSTEPS ) {
ADDRLP4 0+44
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $2023
line 2870
;2870:			CG_MissileHitWall( WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_METAL );
CNSTI4 3
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2872
;2871:// LEILEI ENHANCEMENT
;2872:			if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2024
line 2873
;2873:					VectorCopy( tr.plane.normal, kapow );
ADDRLP4 56
ADDRLP4 0+24
INDIRB
ASGNB 12
line 2875
;2874:
;2875:					kapow[0] = kapow[0] * (crandom() * 65 + 37);
ADDRLP4 92
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 56
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 92
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 2876
;2876:					kapow[1] = kapow[1] * (crandom() * 65 + 37);
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56+4
ADDRLP4 56+4
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 2877
;2877:					kapow[2] = kapow[2] * (crandom() * 65 + 37);
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56+8
ADDRLP4 56+8
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 2878
;2878:					CG_LeiSparks(tr.endpos, tr.plane.normal, 800, 0, 0, 7);
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 800
ARGI4
ADDRLP4 104
CNSTF4 0
ASGNF4
ADDRLP4 104
INDIRF4
ARGF4
ADDRLP4 104
INDIRF4
ARGF4
CNSTF4 1088421888
ARGF4
ADDRGP4 CG_LeiSparks
CALLV
pop
line 2879
;2879:					CG_LeiSparks(tr.endpos, tr.plane.normal, 800, 0, 0, 3);
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 800
ARGI4
ADDRLP4 108
CNSTF4 0
ASGNF4
ADDRLP4 108
INDIRF4
ARGF4
ADDRLP4 108
INDIRF4
ARGF4
CNSTF4 1077936128
ARGF4
ADDRGP4 CG_LeiSparks
CALLV
pop
line 2880
;2880:					CG_LeiSparks(tr.endpos, tr.plane.normal, 800, 0, 0, 1);
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 800
ARGI4
ADDRLP4 112
CNSTF4 0
ASGNF4
ADDRLP4 112
INDIRF4
ARGF4
ADDRLP4 112
INDIRF4
ARGF4
CNSTF4 1065353216
ARGF4
ADDRGP4 CG_LeiSparks
CALLV
pop
line 2882
;2881:				
;2882:				}
line 2884
;2883:// END LEIHANCMENET
;2884:		} else {
ADDRGP4 $2024
JUMPV
LABELV $2023
line 2885
;2885:			CG_MissileHitWall( WP_SHOTGUN, 0, tr.endpos, tr.plane.normal, IMPACTSOUND_DEFAULT );
CNSTI4 3
ARGI4
ADDRLP4 92
CNSTI4 0
ASGNI4
ADDRLP4 92
INDIRI4
ARGI4
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
ADDRLP4 92
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 2888
;2886:	
;2887:// LEILEI ENHANCEMENT
;2888:				if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2044
line 2889
;2889:					VectorCopy( tr.plane.normal, kapow );
ADDRLP4 56
ADDRLP4 0+24
INDIRB
ASGNB 12
line 2891
;2890:
;2891:					kapow[0] = kapow[0] * (crandom() * 65 + 37);
ADDRLP4 96
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56
ADDRLP4 56
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 96
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 2892
;2892:					kapow[1] = kapow[1] * (crandom() * 65 + 37);
ADDRLP4 100
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56+4
ADDRLP4 56+4
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 100
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 2893
;2893:					kapow[2] = kapow[2] * (crandom() * 65 + 37);
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 56+8
ADDRLP4 56+8
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 2894
;2894:					CG_LeiSparks(tr.endpos, tr.plane.normal, 800, 0, 0, 7);
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 800
ARGI4
ADDRLP4 108
CNSTF4 0
ASGNF4
ADDRLP4 108
INDIRF4
ARGF4
ADDRLP4 108
INDIRF4
ARGF4
CNSTF4 1088421888
ARGF4
ADDRGP4 CG_LeiSparks
CALLV
pop
line 2895
;2895:					CG_LeiSparks(tr.endpos, tr.plane.normal, 800, 0, 0, 2);
ADDRLP4 0+12
ARGP4
ADDRLP4 0+24
ARGP4
CNSTI4 800
ARGI4
ADDRLP4 112
CNSTF4 0
ASGNF4
ADDRLP4 112
INDIRF4
ARGF4
ADDRLP4 112
INDIRF4
ARGF4
CNSTF4 1073741824
ARGF4
ADDRGP4 CG_LeiSparks
CALLV
pop
line 2897
;2896:					
;2897:					smoke = CG_SmokePuff( tr.endpos, kapow, 21, 1, 1, 1, 0.9f, 1200, cg.time, 0, 0,  cgs.media.lsmkShader2 );
ADDRLP4 0+12
ARGP4
ADDRLP4 56
ARGP4
CNSTF4 1101529088
ARGF4
ADDRLP4 116
CNSTF4 1065353216
ASGNF4
ADDRLP4 116
INDIRF4
ARGF4
ADDRLP4 116
INDIRF4
ARGF4
ADDRLP4 116
INDIRF4
ARGF4
CNSTF4 1063675494
ARGF4
CNSTF4 1150681088
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 120
CNSTI4 0
ASGNI4
ADDRLP4 120
INDIRI4
ARGI4
ADDRLP4 120
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1308
INDIRI4
ARGI4
ADDRLP4 124
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 76
ADDRLP4 124
INDIRP4
ASGNP4
line 2908
;2898:					//smoke = CG_SmokePuff( tr.endpos, kapow, 21, 1, 1, 1, 0.9f, 1200, cg.time, 0, 0,  cgs.media.lbumShader1 );
;2899:#if 0
;2900:					CG_LeiPuff(tr.endpos, kapow, 500, 0, 0, 177, 6);
;2901:					CG_LeiPuff(tr.endpos, tr.plane.normal, 500, 0, 0, 127, 12);
;2902:					CG_LeiPuff(tr.endpos, tr.plane.normal, 500, 0, 0, 77, 16);
;2903:					CG_LeiPuff(tr.endpos, tr.plane.normal, 500, 0, 0, 127, 12);
;2904:					CG_LeiPuff(tr.endpos, tr.plane.normal, 500, 0, 0, 77, 16);
;2905:					CG_LeiPuff(tr.endpos, tr.plane.normal, 500, 0, 0, 127, 12);
;2906:					CG_LeiPuff(tr.endpos, tr.plane.normal, 500, 0, 0, 77, 16);
;2907:#endif
;2908:				}
LABELV $2044
line 2910
;2909:// END LEIHANCMENET
;2910:		}
LABELV $2024
line 2911
;2911:	}
LABELV $2014
line 2912
;2912:}
LABELV $1956
endproc CG_ShotgunPellet 200 48
export CG_ShotgunPattern
proc CG_ShotgunPattern 84 12
line 2924
;2913:
;2914:/*
;2915:================
;2916:CG_ShotgunPattern
;2917:
;2918:Perform the same traces the server did to locate the
;2919:hit splashes
;2920:================
;2921:*/
;2922://unlagged - attack prediction
;2923:// made this non-static for access from cg_unlagged.c
;2924:void CG_ShotgunPattern( vec3_t origin, vec3_t origin2, int seed, int otherEntNum ) {
line 2932
;2925:	int			i;
;2926:	float		r, u;
;2927:	vec3_t		end;
;2928:	vec3_t		forward, right, up;
;2929:
;2930:	// derive the right and up vectors from the forward vector, because
;2931:	// the client won't have any other information
;2932:	VectorNormalize2( origin2, forward );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 VectorNormalize2
CALLF4
pop
line 2933
;2933:	PerpendicularVector( right, forward );
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 2934
;2934:	CrossProduct( forward, right, up );
ADDRLP4 20
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 44
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 2937
;2935:
;2936:	// generate the "random" spread pattern
;2937:	for ( i = 0 ; i < mod_sgcount ; i++ ) {
ADDRLP4 56
CNSTI4 0
ASGNI4
ADDRGP4 $2064
JUMPV
LABELV $2061
line 2938
;2938:		r = Q_crandom( &seed ) * mod_sgspread * 16;
ADDRFP4 8
ARGP4
ADDRLP4 60
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 12
CNSTF4 1098907648
ADDRLP4 60
INDIRF4
ADDRGP4 mod_sgspread
INDIRI4
CVIF4 4
MULF4
MULF4
ASGNF4
line 2939
;2939:		u = Q_crandom( &seed ) * mod_sgspread * 16;
ADDRFP4 8
ARGP4
ADDRLP4 64
ADDRGP4 Q_crandom
CALLF4
ASGNF4
ADDRLP4 16
CNSTF4 1098907648
ADDRLP4 64
INDIRF4
ADDRGP4 mod_sgspread
INDIRI4
CVIF4 4
MULF4
MULF4
ASGNF4
line 2940
;2940:		VectorMA( origin, 8192 * 16, forward, end);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
CNSTF4 1207959552
ASGNF4
ADDRLP4 0
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 72
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 72
INDIRF4
ADDRLP4 20+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
CNSTF4 1207959552
ADDRLP4 20+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2941
;2941:		VectorMA (end, r, right, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 32+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 32+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 2942
;2942:		VectorMA (end, u, up, end);
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44+4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDF4
ASGNF4
line 2944
;2943:
;2944:		CG_ShotgunPellet( origin, end, otherEntNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPellet
CALLV
pop
line 2945
;2945:	}
LABELV $2062
line 2937
ADDRLP4 56
ADDRLP4 56
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $2064
ADDRLP4 56
INDIRI4
ADDRGP4 mod_sgcount
INDIRI4
LTI4 $2061
line 2946
;2946:}
LABELV $2060
endproc CG_ShotgunPattern 84 12
export CG_ShotgunFire
proc CG_ShotgunFire 92 48
line 2953
;2947:
;2948:/*
;2949:==============
;2950:CG_ShotgunFire
;2951:==============
;2952:*/
;2953:void CG_ShotgunFire( entityState_t *es ) {
line 2959
;2954:	vec3_t	v;
;2955:	vec3_t			up;
;2956:	vec3_t			forward;
;2957:	int		contents;
;2958:
;2959:	VectorSubtract( es->origin2, es->pos.trBase, v );
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 40
INDIRP4
CNSTI4 108
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 44
INDIRP4
CNSTI4 112
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2960
;2960:	VectorNormalize( v );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2961
;2961:	VectorScale( v, 32, v );
ADDRLP4 48
CNSTF4 1107296256
ASGNF4
ADDRLP4 0
ADDRLP4 48
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 48
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1107296256
ADDRLP4 0+8
INDIRF4
MULF4
ASGNF4
line 2962
;2962:	VectorAdd( es->pos.trBase, v, v );
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 52
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 52
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 2964
;2963:
;2964:	contents = CG_PointContents( es->pos.trBase, 0 );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 56
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 56
INDIRI4
ASGNI4
line 2965
;2965:	if ( !( contents & CONTENTS_WATER ) ) {
ADDRLP4 12
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
NEI4 $2092
line 2966
;2966:		VectorSet( up, 0, 0, 8 );
ADDRLP4 60
CNSTF4 0
ASGNF4
ADDRLP4 16
ADDRLP4 60
INDIRF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 60
INDIRF4
ASGNF4
ADDRLP4 16+8
CNSTF4 1090519040
ASGNF4
line 2967
;2967:			if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2096
line 2969
;2968:				// Shotgun puffy
;2969:				CG_LeiSparks(v, forward, 1500, 0, 0, 7);
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 1500
ARGI4
ADDRLP4 64
CNSTF4 0
ASGNF4
ADDRLP4 64
INDIRF4
ARGF4
ADDRLP4 64
INDIRF4
ARGF4
CNSTF4 1088421888
ARGF4
ADDRGP4 CG_LeiSparks
CALLV
pop
line 2970
;2970:				CG_LeiSparks(v, forward, 1500, 0, 0, 7);
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 1500
ARGI4
ADDRLP4 68
CNSTF4 0
ASGNF4
ADDRLP4 68
INDIRF4
ARGF4
ADDRLP4 68
INDIRF4
ARGF4
CNSTF4 1088421888
ARGF4
ADDRGP4 CG_LeiSparks
CALLV
pop
line 2971
;2971:				CG_LeiSparks(v, forward, 1500, 0, 0, 7);
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 1500
ARGI4
ADDRLP4 72
CNSTF4 0
ASGNF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRLP4 72
INDIRF4
ARGF4
CNSTF4 1088421888
ARGF4
ADDRGP4 CG_LeiSparks
CALLV
pop
line 2972
;2972:				CG_LeiSparks(v, forward, 1500, 0, 0, 7);
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 1500
ARGI4
ADDRLP4 76
CNSTF4 0
ASGNF4
ADDRLP4 76
INDIRF4
ARGF4
ADDRLP4 76
INDIRF4
ARGF4
CNSTF4 1088421888
ARGF4
ADDRGP4 CG_LeiSparks
CALLV
pop
line 2973
;2973:				CG_LeiSparks(v, forward, 1500, 0, 0, 7);
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 1500
ARGI4
ADDRLP4 80
CNSTF4 0
ASGNF4
ADDRLP4 80
INDIRF4
ARGF4
ADDRLP4 80
INDIRF4
ARGF4
CNSTF4 1088421888
ARGF4
ADDRGP4 CG_LeiSparks
CALLV
pop
line 2974
;2974:				CG_LeiSparks(v, forward, 1500, 0, 0, 7);
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 1500
ARGI4
ADDRLP4 84
CNSTF4 0
ASGNF4
ADDRLP4 84
INDIRF4
ARGF4
ADDRLP4 84
INDIRF4
ARGF4
CNSTF4 1088421888
ARGF4
ADDRGP4 CG_LeiSparks
CALLV
pop
line 2975
;2975:				CG_SmokePuff( v, up, 32, 1, 1, 1, 0.33f, 900, cg.time, 0, LEF_PUFF_DONT_SCALE, cgs.media.shotgunSmokePuffShader );
ADDRLP4 0
ARGP4
ADDRLP4 16
ARGP4
CNSTF4 1107296256
ARGF4
ADDRLP4 88
CNSTF4 1065353216
ASGNF4
ADDRLP4 88
INDIRF4
ARGF4
ADDRLP4 88
INDIRF4
ARGF4
ADDRLP4 88
INDIRF4
ARGF4
CNSTF4 1051260355
ARGF4
CNSTF4 1147207680
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 cgs+956380+1280
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 2976
;2976:			}
LABELV $2096
line 2977
;2977:	}
LABELV $2092
line 2978
;2978:	CG_ShotgunPattern( es->pos.trBase, es->origin2, es->eventParm, es->otherEntityNum );
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 104
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ARGI4
ADDRLP4 60
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_ShotgunPattern
CALLV
pop
line 2979
;2979:}
LABELV $2081
endproc CG_ShotgunFire 92 48
export CG_Tracer
proc CG_Tracer 224 16
line 2995
;2980:
;2981:/*
;2982:============================================================================
;2983:
;2984:BULLETS
;2985:
;2986:============================================================================
;2987:*/
;2988:
;2989:
;2990:/*
;2991:===============
;2992:CG_Tracer
;2993:===============
;2994:*/
;2995:void CG_Tracer( vec3_t source, vec3_t dest ) {
line 3004
;2996:	vec3_t		forward, right;
;2997:	polyVert_t	verts[4];
;2998:	vec3_t		line;
;2999:	float		len, begin, end;
;3000:	vec3_t		start, finish;
;3001:	vec3_t		midpoint;
;3002:
;3003:	// tracer
;3004:	VectorSubtract( dest, source, forward );
ADDRLP4 180
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 180
INDIRP4
INDIRF4
ADDRLP4 184
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 188
CNSTI4 4
ASGNI4
ADDRLP4 108+4
ADDRLP4 180
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
ADDRLP4 184
INDIRP4
ADDRLP4 188
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 192
CNSTI4 8
ASGNI4
ADDRLP4 108+8
ADDRFP4 4
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 192
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 3005
;3005:	len = VectorNormalize( forward );
ADDRLP4 108
ARGP4
ADDRLP4 196
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 164
ADDRLP4 196
INDIRF4
ASGNF4
line 3008
;3006:
;3007:	// start at least a little ways from the muzzle
;3008:	if ( len < 100 ) {
ADDRLP4 164
INDIRF4
CNSTF4 1120403456
GEF4 $2105
line 3009
;3009:		return;
ADDRGP4 $2102
JUMPV
LABELV $2105
line 3011
;3010:	}
;3011:	begin = 50 + random() * (len - 60);
ADDRLP4 200
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 160
ADDRLP4 200
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRLP4 164
INDIRF4
CNSTF4 1114636288
SUBF4
MULF4
CNSTF4 1112014848
ADDF4
ASGNF4
line 3012
;3012:	end = begin + cg_tracerLength.value;
ADDRLP4 156
ADDRLP4 160
INDIRF4
ADDRGP4 cg_tracerLength+8
INDIRF4
ADDF4
ASGNF4
line 3013
;3013:	if ( end > len ) {
ADDRLP4 156
INDIRF4
ADDRLP4 164
INDIRF4
LEF4 $2108
line 3014
;3014:		end = len;
ADDRLP4 156
ADDRLP4 164
INDIRF4
ASGNF4
line 3015
;3015:	}
LABELV $2108
line 3016
;3016:	VectorMA( source, begin, forward, start );
ADDRLP4 204
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
ADDRLP4 204
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+4
ADDRLP4 204
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 120+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ASGNF4
line 3017
;3017:	VectorMA( source, end, forward, finish );
ADDRLP4 212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
ADDRLP4 212
INDIRP4
INDIRF4
ADDRLP4 108
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+4
ADDRLP4 212
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 108+4
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 132+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 108+8
INDIRF4
ADDRLP4 156
INDIRF4
MULF4
ADDF4
ASGNF4
line 3019
;3018:
;3019:	line[0] = DotProduct( forward, cg.refdef.viewaxis[1] );
ADDRLP4 144
ADDRLP4 108
INDIRF4
ADDRGP4 cg+1870616+36+12
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+1870616+36+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+1870616+36+12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3020
;3020:	line[1] = DotProduct( forward, cg.refdef.viewaxis[2] );
ADDRLP4 144+4
ADDRLP4 108
INDIRF4
ADDRGP4 cg+1870616+36+24
INDIRF4
MULF4
ADDRLP4 108+4
INDIRF4
ADDRGP4 cg+1870616+36+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 108+8
INDIRF4
ADDRGP4 cg+1870616+36+24+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3022
;3021:
;3022:	VectorScale( cg.refdef.viewaxis[1], line[1], right );
ADDRLP4 96
ADDRGP4 cg+1870616+36+12
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+4
ADDRGP4 cg+1870616+36+12+4
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 96+8
ADDRGP4 cg+1870616+36+12+8
INDIRF4
ADDRLP4 144+4
INDIRF4
MULF4
ASGNF4
line 3023
;3023:	VectorMA( right, -line[0], cg.refdef.viewaxis[2], right );
ADDRLP4 220
ADDRLP4 144
INDIRF4
NEGF4
ASGNF4
ADDRLP4 96
ADDRLP4 96
INDIRF4
ADDRGP4 cg+1870616+36+24
INDIRF4
ADDRLP4 220
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg+1870616+36+24+4
INDIRF4
ADDRLP4 220
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96+8
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg+1870616+36+24+8
INDIRF4
ADDRLP4 144
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 3024
;3024:	VectorNormalize( right );
ADDRLP4 96
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 3026
;3025:
;3026:	VectorMA( finish, cg_tracerWidth.value, right, verts[0].xyz );
ADDRLP4 0
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3027
;3027:	verts[0].st[0] = 0;
ADDRLP4 0+12
CNSTF4 0
ASGNF4
line 3028
;3028:	verts[0].st[1] = 1;
ADDRLP4 0+12+4
CNSTF4 1065353216
ASGNF4
line 3029
;3029:	verts[0].modulate[0] = 255;
ADDRLP4 0+20
CNSTU1 255
ASGNU1
line 3030
;3030:	verts[0].modulate[1] = 255;
ADDRLP4 0+20+1
CNSTU1 255
ASGNU1
line 3031
;3031:	verts[0].modulate[2] = 255;
ADDRLP4 0+20+2
CNSTU1 255
ASGNU1
line 3032
;3032:	verts[0].modulate[3] = 255;
ADDRLP4 0+20+3
CNSTU1 255
ASGNU1
line 3034
;3033:
;3034:	VectorMA( finish, -cg_tracerWidth.value, right, verts[1].xyz );
ADDRLP4 0+24
ADDRLP4 132
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+4
ADDRLP4 132+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+24+8
ADDRLP4 132+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 3035
;3035:	verts[1].st[0] = 1;
ADDRLP4 0+24+12
CNSTF4 1065353216
ASGNF4
line 3036
;3036:	verts[1].st[1] = 0;
ADDRLP4 0+24+12+4
CNSTF4 0
ASGNF4
line 3037
;3037:	verts[1].modulate[0] = 255;
ADDRLP4 0+24+20
CNSTU1 255
ASGNU1
line 3038
;3038:	verts[1].modulate[1] = 255;
ADDRLP4 0+24+20+1
CNSTU1 255
ASGNU1
line 3039
;3039:	verts[1].modulate[2] = 255;
ADDRLP4 0+24+20+2
CNSTU1 255
ASGNU1
line 3040
;3040:	verts[1].modulate[3] = 255;
ADDRLP4 0+24+20+3
CNSTU1 255
ASGNU1
line 3042
;3041:
;3042:	VectorMA( start, -cg_tracerWidth.value, right, verts[2].xyz );
ADDRLP4 0+48
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+48+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
NEGF4
MULF4
ADDF4
ASGNF4
line 3043
;3043:	verts[2].st[0] = 1;
ADDRLP4 0+48+12
CNSTF4 1065353216
ASGNF4
line 3044
;3044:	verts[2].st[1] = 1;
ADDRLP4 0+48+12+4
CNSTF4 1065353216
ASGNF4
line 3045
;3045:	verts[2].modulate[0] = 255;
ADDRLP4 0+48+20
CNSTU1 255
ASGNU1
line 3046
;3046:	verts[2].modulate[1] = 255;
ADDRLP4 0+48+20+1
CNSTU1 255
ASGNU1
line 3047
;3047:	verts[2].modulate[2] = 255;
ADDRLP4 0+48+20+2
CNSTU1 255
ASGNU1
line 3048
;3048:	verts[2].modulate[3] = 255;
ADDRLP4 0+48+20+3
CNSTU1 255
ASGNU1
line 3050
;3049:
;3050:	VectorMA( start, cg_tracerWidth.value, right, verts[3].xyz );
ADDRLP4 0+72
ADDRLP4 120
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+4
ADDRLP4 120+4
INDIRF4
ADDRLP4 96+4
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+72+8
ADDRLP4 120+8
INDIRF4
ADDRLP4 96+8
INDIRF4
ADDRGP4 cg_tracerWidth+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3051
;3051:	verts[3].st[0] = 0;
ADDRLP4 0+72+12
CNSTF4 0
ASGNF4
line 3052
;3052:	verts[3].st[1] = 0;
ADDRLP4 0+72+12+4
CNSTF4 0
ASGNF4
line 3053
;3053:	verts[3].modulate[0] = 255;
ADDRLP4 0+72+20
CNSTU1 255
ASGNU1
line 3054
;3054:	verts[3].modulate[1] = 255;
ADDRLP4 0+72+20+1
CNSTU1 255
ASGNU1
line 3055
;3055:	verts[3].modulate[2] = 255;
ADDRLP4 0+72+20+2
CNSTU1 255
ASGNU1
line 3056
;3056:	verts[3].modulate[3] = 255;
ADDRLP4 0+72+20+3
CNSTU1 255
ASGNU1
line 3058
;3057:
;3058:	trap_R_AddPolyToScene( cgs.media.tracerShader, 4, verts );
ADDRGP4 cgs+956380+464
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddPolyToScene
CALLV
pop
line 3060
;3059:
;3060:	midpoint[0] = ( start[0] + finish[0] ) * 0.5;
ADDRLP4 168
CNSTF4 1056964608
ADDRLP4 120
INDIRF4
ADDRLP4 132
INDIRF4
ADDF4
MULF4
ASGNF4
line 3061
;3061:	midpoint[1] = ( start[1] + finish[1] ) * 0.5;
ADDRLP4 168+4
CNSTF4 1056964608
ADDRLP4 120+4
INDIRF4
ADDRLP4 132+4
INDIRF4
ADDF4
MULF4
ASGNF4
line 3062
;3062:	midpoint[2] = ( start[2] + finish[2] ) * 0.5;
ADDRLP4 168+8
CNSTF4 1056964608
ADDRLP4 120+8
INDIRF4
ADDRLP4 132+8
INDIRF4
ADDF4
MULF4
ASGNF4
line 3065
;3063:
;3064:	// add the tracer sound
;3065:	trap_S_StartSound( midpoint, ENTITYNUM_WORLD, CHAN_AUTO, cgs.media.tracerSound );
ADDRLP4 168
ARGP4
CNSTI4 4094
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 cgs+956380+1824
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 3067
;3066:
;3067:}
LABELV $2102
endproc CG_Tracer 224 16
proc CG_CalcMuzzlePoint 40 16
line 3075
;3068:
;3069:
;3070:/*
;3071:======================
;3072:CG_CalcMuzzlePoint
;3073:======================
;3074:*/
;3075:static qboolean	CG_CalcMuzzlePoint( int entityNum, vec3_t muzzle ) {
line 3080
;3076:	vec3_t		forward;
;3077:	centity_t	*cent;
;3078:	int			anim;
;3079:
;3080:	if ( entityNum == cg.snap->ps.clientNum ) {
ADDRFP4 0
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $2290
line 3081
;3081:		VectorCopy( cg.snap->ps.origin, muzzle );
ADDRFP4 4
INDIRP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 64
ADDP4
INDIRB
ASGNB 12
line 3082
;3082:		muzzle[2] += cg.snap->ps.viewheight;
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRGP4 cg+36
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 3083
;3083:		AngleVectors( cg.snap->ps.viewangles, forward, NULL, NULL );
ADDRGP4 cg+36
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
CNSTP4 0
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 3084
;3084:		VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3085
;3085:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $2289
JUMPV
LABELV $2290
line 3088
;3086:	}
;3087:
;3088:	cent = &cg_entities[entityNum];
ADDRLP4 12
CNSTI4 928
ADDRFP4 0
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 3089
;3089:	if ( !cent->currentValid ) {
ADDRLP4 12
INDIRP4
CNSTI4 460
ADDP4
INDIRI4
CNSTI4 0
NEI4 $2298
line 3090
;3090:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $2289
JUMPV
LABELV $2298
line 3093
;3091:	}
;3092:
;3093:	VectorCopy( cent->currentState.pos.trBase, muzzle );
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 3095
;3094:
;3095:	AngleVectors( cent->currentState.apos.trBase, forward, NULL, NULL );
ADDRLP4 12
INDIRP4
CNSTI4 60
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 20
CNSTP4 0
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 3096
;3096:	anim = cent->currentState.legsAnim & ~ANIM_TOGGLEBIT;
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 3097
;3097:	if ( anim == LEGS_WALKCR || anim == LEGS_IDLECR ) {
ADDRLP4 16
INDIRI4
CNSTI4 13
EQI4 $2302
ADDRLP4 16
INDIRI4
CNSTI4 23
NEI4 $2300
LABELV $2302
line 3098
;3098:		muzzle[2] += CROUCH_VIEWHEIGHT;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 3099
;3099:	} else {
ADDRGP4 $2301
JUMPV
LABELV $2300
line 3100
;3100:		muzzle[2] += DEFAULT_VIEWHEIGHT;
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1104150528
ADDF4
ASGNF4
line 3101
;3101:	}
LABELV $2301
line 3103
;3102:
;3103:	VectorMA( muzzle, 14, forward, muzzle );
ADDRLP4 28
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1096810496
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 3105
;3104:
;3105:	return qtrue;
CNSTI4 1
RETI4
LABELV $2289
endproc CG_CalcMuzzlePoint 40 16
export CG_Bullet
proc CG_Bullet 172 48
line 3116
;3106:
;3107:}
;3108:
;3109:/*
;3110:======================
;3111:CG_Bullet
;3112:
;3113:Renders bullet effects.
;3114:======================
;3115:*/
;3116:void CG_Bullet( vec3_t end, int sourceEntityNum, vec3_t normal, qboolean flesh, int fleshEntityNum ) {
line 3130
;3117:	trace_t trace;
;3118:	int sourceContentType, destContentType;
;3119:	vec3_t		start;
;3120:// LEILEI ENHACNEMENT
;3121:	localEntity_t	*smoke;
;3122:	vec3_t	kapew;	
;3123:	vec3_t  kapow;
;3124:
;3125:
;3126:
;3127:
;3128:	// if the shooter is currently valid, calc a source point and possibly
;3129:	// do trail effects
;3130:	if ( sourceEntityNum >= 0 && cg_tracerChance.value > 0 ) {
ADDRFP4 4
INDIRI4
CNSTI4 0
LTI4 $2306
ADDRGP4 cg_tracerChance+8
INDIRF4
CNSTF4 0
LEF4 $2306
line 3131
;3131:		if ( CG_CalcMuzzlePoint( sourceEntityNum, start ) ) {
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 24
ARGP4
ADDRLP4 104
ADDRGP4 CG_CalcMuzzlePoint
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 0
EQI4 $2309
line 3132
;3132:			sourceContentType = CG_PointContents( start, 0 );
ADDRLP4 24
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 108
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 36
ADDRLP4 108
INDIRI4
ASGNI4
line 3133
;3133:			destContentType = CG_PointContents( end, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 112
ADDRGP4 CG_PointContents
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 112
INDIRI4
ASGNI4
line 3136
;3134:
;3135:			// do a complete bubble trail if necessary
;3136:			if ( ( sourceContentType == destContentType ) && ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 116
ADDRLP4 36
INDIRI4
ASGNI4
ADDRLP4 116
INDIRI4
ADDRLP4 40
INDIRI4
NEI4 $2311
ADDRLP4 116
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2311
line 3137
;3137:				CG_BubbleTrail( start, end, 32 );
ADDRLP4 24
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3138
;3138:			}
ADDRGP4 $2312
JUMPV
LABELV $2311
line 3140
;3139:			// bubble trail from water into air
;3140:			else if ( ( sourceContentType & CONTENTS_WATER ) ) {
ADDRLP4 36
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2313
line 3141
;3141:				trap_CM_BoxTrace( &trace, end, start, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 48
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 24
ARGP4
ADDRLP4 120
CNSTP4 0
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 120
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 3142
;3142:				CG_BubbleTrail( start, trace.endpos, 32 );
ADDRLP4 24
ARGP4
ADDRLP4 48+12
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3146
;3143:
;3144:
;3145:// LEILEI ENHANCEMENT
;3146:				if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2314
line 3148
;3147:				// Water Splash
;3148:					VectorCopy( trace.plane.normal, kapow );
ADDRLP4 0
ADDRLP4 48+24
INDIRB
ASGNB 12
line 3149
;3149:					kapow[0] = kapow[0] * (crandom() * 22);
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1102053376
CNSTF4 1073741824
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 3150
;3150:					kapow[1] = kapow[1] * (crandom() * 22);
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1102053376
CNSTF4 1073741824
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 3151
;3151:					kapow[2] = kapow[2] * (crandom() * 65 + 37);
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3152
;3152:					smoke = CG_SmokePuff( trace.endpos, kapow, 14, 1, 1, 1, 1.0f, 400, cg.time, 0, 0,  cgs.media.lsplShader );
ADDRLP4 48+12
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 1096810496
ARGF4
ADDRLP4 136
CNSTF4 1065353216
ASGNF4
ADDRLP4 136
INDIRF4
ARGF4
ADDRLP4 136
INDIRF4
ARGF4
ADDRLP4 136
INDIRF4
ARGF4
ADDRLP4 136
INDIRF4
ARGF4
CNSTF4 1137180672
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 140
CNSTI4 0
ASGNI4
ADDRLP4 140
INDIRI4
ARGI4
ADDRLP4 140
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1328
INDIRI4
ARGI4
ADDRLP4 144
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 44
ADDRLP4 144
INDIRP4
ASGNP4
line 3153
;3153:					smoke = CG_SmokePuff( trace.endpos, kapow, 6, 1, 1, 1, 1.0f, 200, cg.time, 0, 0,  cgs.media.lsplShader );
ADDRLP4 48+12
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 1086324736
ARGF4
ADDRLP4 148
CNSTF4 1065353216
ASGNF4
ADDRLP4 148
INDIRF4
ARGF4
ADDRLP4 148
INDIRF4
ARGF4
ADDRLP4 148
INDIRF4
ARGF4
ADDRLP4 148
INDIRF4
ARGF4
CNSTF4 1128792064
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 152
CNSTI4 0
ASGNI4
ADDRLP4 152
INDIRI4
ARGI4
ADDRLP4 152
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1328
INDIRI4
ARGI4
ADDRLP4 156
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 44
ADDRLP4 156
INDIRP4
ASGNP4
line 3154
;3154:					smoke = CG_SmokePuff( trace.endpos, kapow, 10, 1, 1, 1, 1.0f, 300, cg.time, 0, 0,  cgs.media.lsplShader );
ADDRLP4 48+12
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 1092616192
ARGF4
ADDRLP4 160
CNSTF4 1065353216
ASGNF4
ADDRLP4 160
INDIRF4
ARGF4
ADDRLP4 160
INDIRF4
ARGF4
ADDRLP4 160
INDIRF4
ARGF4
ADDRLP4 160
INDIRF4
ARGF4
CNSTF4 1133903872
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 164
CNSTI4 0
ASGNI4
ADDRLP4 164
INDIRI4
ARGI4
ADDRLP4 164
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1328
INDIRI4
ARGI4
ADDRLP4 168
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 44
ADDRLP4 168
INDIRP4
ASGNP4
line 3157
;3155:				//	CG_LeiSplash2(trace.endpos, kapow, 900, 0, 0, 444);
;3156:						
;3157:				}
line 3161
;3158:// END LEIHANCMENET
;3159:
;3160:
;3161:			}
ADDRGP4 $2314
JUMPV
LABELV $2313
line 3163
;3162:			// bubble trail from air into water
;3163:			else if ( ( destContentType & CONTENTS_WATER ) ) {
ADDRLP4 40
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $2336
line 3164
;3164:				trap_CM_BoxTrace( &trace, start, end, NULL, NULL, 0, CONTENTS_WATER );
ADDRLP4 48
ARGP4
ADDRLP4 24
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 120
CNSTP4 0
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 120
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 trap_CM_BoxTrace
CALLV
pop
line 3165
;3165:				CG_BubbleTrail( trace.endpos, end, 32 );
ADDRLP4 48+12
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
CNSTF4 1107296256
ARGF4
ADDRGP4 CG_BubbleTrail
CALLV
pop
line 3168
;3166:
;3167:// LEILEI ENHANCEMENT
;3168:				if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2339
line 3170
;3169:				// Water Splash
;3170:					VectorCopy( trace.plane.normal, kapow );
ADDRLP4 0
ADDRLP4 48+24
INDIRB
ASGNB 12
line 3172
;3171:					
;3172:					kapow[0] = kapow[0] * (crandom() * 22);
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1102053376
CNSTF4 1073741824
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 3173
;3173:					kapow[1] = kapow[1] * (crandom() * 22);
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1102053376
CNSTF4 1073741824
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
MULF4
ASGNF4
line 3174
;3174:					kapow[2] = kapow[2] * (crandom() * 65 + 37);
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3175
;3175:					smoke = CG_SmokePuff( trace.endpos, kapow, 14, 1, 1, 1, 1.0f, 400, cg.time, 0, 0,  cgs.media.lsplShader );
ADDRLP4 48+12
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 1096810496
ARGF4
ADDRLP4 136
CNSTF4 1065353216
ASGNF4
ADDRLP4 136
INDIRF4
ARGF4
ADDRLP4 136
INDIRF4
ARGF4
ADDRLP4 136
INDIRF4
ARGF4
ADDRLP4 136
INDIRF4
ARGF4
CNSTF4 1137180672
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 140
CNSTI4 0
ASGNI4
ADDRLP4 140
INDIRI4
ARGI4
ADDRLP4 140
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1328
INDIRI4
ARGI4
ADDRLP4 144
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 44
ADDRLP4 144
INDIRP4
ASGNP4
line 3176
;3176:					smoke = CG_SmokePuff( trace.endpos, kapow, 6, 1, 1, 1, 1.0f, 200, cg.time, 0, 0,  cgs.media.lsplShader );
ADDRLP4 48+12
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 1086324736
ARGF4
ADDRLP4 148
CNSTF4 1065353216
ASGNF4
ADDRLP4 148
INDIRF4
ARGF4
ADDRLP4 148
INDIRF4
ARGF4
ADDRLP4 148
INDIRF4
ARGF4
ADDRLP4 148
INDIRF4
ARGF4
CNSTF4 1128792064
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 152
CNSTI4 0
ASGNI4
ADDRLP4 152
INDIRI4
ARGI4
ADDRLP4 152
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1328
INDIRI4
ARGI4
ADDRLP4 156
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 44
ADDRLP4 156
INDIRP4
ASGNP4
line 3177
;3177:					smoke = CG_SmokePuff( trace.endpos, kapow, 10, 1, 1, 1, 1.0f, 300, cg.time, 0, 0,  cgs.media.lsplShader );
ADDRLP4 48+12
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 1092616192
ARGF4
ADDRLP4 160
CNSTF4 1065353216
ASGNF4
ADDRLP4 160
INDIRF4
ARGF4
ADDRLP4 160
INDIRF4
ARGF4
ADDRLP4 160
INDIRF4
ARGF4
ADDRLP4 160
INDIRF4
ARGF4
CNSTF4 1133903872
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 164
CNSTI4 0
ASGNI4
ADDRLP4 164
INDIRI4
ARGI4
ADDRLP4 164
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1328
INDIRI4
ARGI4
ADDRLP4 168
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 44
ADDRLP4 168
INDIRP4
ASGNP4
line 3179
;3178:			//CG_LeiSplash2(trace.endpos, kapow, 500, 0, 0, 1);
;3179:				}
LABELV $2339
line 3181
;3180:// END LEIHANCMENET
;3181:			}
LABELV $2336
LABELV $2314
LABELV $2312
line 3184
;3182:
;3183:			// draw a tracer
;3184:			if ( random() < cg_tracerChance.value ) {
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRGP4 cg_tracerChance+8
INDIRF4
GEF4 $2359
line 3185
;3185:				CG_Tracer( start, end );
ADDRLP4 24
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Tracer
CALLV
pop
line 3186
;3186:			}
LABELV $2359
line 3187
;3187:		}
LABELV $2309
line 3188
;3188:	}
LABELV $2306
line 3191
;3189:
;3190:	// impact splash and mark
;3191:	if ( flesh ) {
ADDRFP4 12
INDIRI4
CNSTI4 0
EQI4 $2362
line 3193
;3192:// LEILEI ENHANCEMENT
;3193:	if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2364
line 3194
;3194:if ( cg_blood.integer ) {
ADDRGP4 cg_blood+12
INDIRI4
CNSTI4 0
EQI4 $2363
line 3198
;3195:
;3196:		
;3197:						// Blood Hack
;3198:				VectorCopy( normal, kapow );
ADDRLP4 0
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 3200
;3199:					
;3200:				kapow[0] = kapow[0] * (crandom() * 65 + 37);
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3201
;3201:				kapow[1] = kapow[1] * (crandom() * 65 + 37);
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3202
;3202:				kapow[2] = kapow[2] * (crandom() * 65 + 37);
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3203
;3203:				VectorCopy( kapow, kapew );
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 3205
;3204:
;3205:				kapew[0] = kapew[0] * (crandom() * 2 + 37);
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 120
CNSTF4 1073741824
ASGNF4
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 120
INDIRF4
ADDRLP4 120
INDIRF4
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3206
;3206:				kapew[1] = kapew[1] * (crandom() * 2 + 37);
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 128
CNSTF4 1073741824
ASGNF4
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 128
INDIRF4
ADDRLP4 128
INDIRF4
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3207
;3207:				kapew[2] = kapew[2] * (crandom() * 2 + 37);
ADDRLP4 132
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 136
CNSTF4 1073741824
ASGNF4
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 136
INDIRF4
ADDRLP4 136
INDIRF4
ADDRLP4 132
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3209
;3208:
;3209:		CG_SmokePuff( end, kapow, 6, 1, 1, 1, 1.0f, 600, cg.time, 0, 0,  cgs.media.lbldShader1 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 1086324736
ARGF4
ADDRLP4 140
CNSTF4 1065353216
ASGNF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 140
INDIRF4
ARGF4
ADDRLP4 140
INDIRF4
ARGF4
CNSTF4 1142292480
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 144
CNSTI4 0
ASGNI4
ADDRLP4 144
INDIRI4
ARGI4
ADDRLP4 144
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1340
INDIRI4
ARGI4
ADDRGP4 CG_SmokePuff
CALLP4
pop
line 3211
;3210://		CG_SpurtBlood( end, kapow, 2);
;3211:		CG_SpurtBlood( end, kapew, 1);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 CG_SpurtBlood
CALLV
pop
line 3216
;3212:		//CG_Particle_Bleed(cgs.media.lbldShader1,kapew,'0 0 0', 0, 100);
;3213://		CG_Particle_Bleed(cgs.media.lbldShader1,kapew,kapow, 0, 100);
;3214://		CG_Particle_BloodCloud(self,end,'0 0 0');
;3215:
;3216:}
line 3217
;3217:		}
ADDRGP4 $2363
JUMPV
LABELV $2364
line 3220
;3218:
;3219:	else
;3220:		CG_Bleed( end, fleshEntityNum );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 16
INDIRI4
ARGI4
ADDRGP4 CG_Bleed
CALLV
pop
line 3221
;3221:	} else {
ADDRGP4 $2363
JUMPV
LABELV $2362
line 3222
;3222:		CG_MissileHitWall( WP_MACHINEGUN, 0, end, normal, IMPACTSOUND_DEFAULT );
CNSTI4 2
ARGI4
ADDRLP4 104
CNSTI4 0
ASGNI4
ADDRLP4 104
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 104
INDIRI4
ARGI4
ADDRGP4 CG_MissileHitWall
CALLV
pop
line 3225
;3223:
;3224:// LEILEI ENHANCEMENT
;3225:				if (cg_leiEnhancement.integer) {
ADDRGP4 cg_leiEnhancement+12
INDIRI4
CNSTI4 0
EQI4 $2381
line 3228
;3226:
;3227:				// Smoke puff
;3228:					VectorCopy( normal, kapow );
ADDRLP4 0
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 3230
;3229:					
;3230:					kapow[0] = kapow[0] * (crandom() * 65 + 37);
ADDRLP4 108
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 108
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3231
;3231:					kapow[1] = kapow[1] * (crandom() * 65 + 37);
ADDRLP4 112
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 112
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3232
;3232:					kapow[2] = kapow[2] * (crandom() * 65 + 37);
ADDRLP4 116
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 116
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3233
;3233:					VectorCopy( kapow, kapew );
ADDRLP4 12
ADDRLP4 0
INDIRB
ASGNB 12
line 3235
;3234:
;3235:					kapew[0] = kapew[0] * (crandom() * 65 + 37);
ADDRLP4 120
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 12
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 120
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3236
;3236:					kapew[1] = kapew[1] * (crandom() * 65 + 37);
ADDRLP4 124
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 124
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3237
;3237:					kapew[2] = kapew[2] * (crandom() * 65 + 37);
ADDRLP4 128
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
CNSTF4 1115815936
CNSTF4 1073741824
ADDRLP4 128
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1108606976
ADDF4
MULF4
ASGNF4
line 3240
;3238:
;3239:
;3240:					smoke = CG_SmokePuff( end, kapow, 14, 1, 1, 1, 1.0f, 600, cg.time, 0, 0,  cgs.media.lsmkShader1 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTF4 1096810496
ARGF4
ADDRLP4 132
CNSTF4 1065353216
ASGNF4
ADDRLP4 132
INDIRF4
ARGF4
ADDRLP4 132
INDIRF4
ARGF4
ADDRLP4 132
INDIRF4
ARGF4
ADDRLP4 132
INDIRF4
ARGF4
CNSTF4 1142292480
ARGF4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 136
CNSTI4 0
ASGNI4
ADDRLP4 136
INDIRI4
ARGI4
ADDRLP4 136
INDIRI4
ARGI4
ADDRGP4 cgs+956380+1304
INDIRI4
ARGI4
ADDRLP4 140
ADDRGP4 CG_SmokePuff
CALLP4
ASGNP4
ADDRLP4 44
ADDRLP4 140
INDIRP4
ASGNP4
line 3248
;3241:			//		CG_LeiSparks(end, normal, 600, 0, 0, 177);
;3242:			//		CG_LeiSparks(end, normal, 600, 0, 0, 155);
;3243:			//		CG_LeiSparks(end, normal, 600, 0, 0, 444);
;3244:			//		CG_LeiSparks(trace.endpos, trace.plane.normal, 800, 0, 0, 7);
;3245:			//		CG_LeiSparks(trace.endpos, trace.plane.normal, 800, 0, 0, 3);
;3246:			//		CG_LeiSparks(trace.endpos, trace.plane.normal, 800, 0, 0, 1);
;3247:
;3248:				}
LABELV $2381
line 3250
;3249:// END LEIHANCMENET
;3250:	}
LABELV $2363
line 3252
;3251:
;3252:}
LABELV $2305
endproc CG_Bullet 172 48
import wideAdjustX
import CG_NewParticleArea
import initparticles
import CG_LaunchFragment
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel_MiTech
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound_MiTech
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_System
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_Atmospheric_SetParticles
import CG_AddAtmosphericEffects
import teamcolormodels
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformationRus
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_SpurtBlood
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_LeiPuff
import CG_LeiSparks2
import CG_LeiSparks
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_AddRealWeapon
import CG_PositionRotatedEntityOnTag
import CG_PositionEntityOnTag
import CG_AdjustPositionForMover
import CG_Beam
import CG_AddPacketEntities
import CG_SetEntitySoundPosition
import CG_PainVehicleEvent
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_ReloadPlayers
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_AddToGenericConsole
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModelCopy
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrintRus
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import CG_DrawFade
import CG_Fade
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_InsideBox
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawGiantString
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_DrawRoundedRect
import CG_FillRect2
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_CloadMap_f
import CG_FairCvars
import SnapVectorTowards
import CG_RegisterOverlay
import CG_IsTeamGame
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_PredictWeaponEffects
import cg_teamChatBeep
import cg_chatBeep
import cg_weaponOrder
import cg_weaponBarStyle
import cg_crosshairColorBlue
import cg_crosshairColorGreen
import cg_crosshairColorRed
import cg_ch13size
import cg_ch13
import cg_ch12size
import cg_ch12
import cg_ch11size
import cg_ch11
import cg_ch10size
import cg_ch10
import cg_ch9slze
import cg_ch9size
import cg_ch9
import cg_ch8size
import cg_ch8
import cg_ch7size
import cg_ch7
import cg_ch6size
import cg_ch6
import cg_ch5size
import cg_ch5
import cg_ch4size
import cg_ch4
import cg_ch3size
import cg_ch3
import cg_ch2size
import cg_ch2
import cg_ch1size
import cg_ch1
import cg_differentCrosshairs
import cg_crosshairPulse
import cg_atmosphericLevel
import cg_fragmsgsize
import cg_autovertex
import cg_vote_custom_commands
import cg_cyclegrapple
import cg_voteflags
import cg_voip_teamonly
import cg_hitsound
import cg_alwaysWeaponBar
import cl_timeNudge
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_cmdTimeNudge
import cg_delag
import cg_enableBreath
import cg_enableDust
import cg_obeliskRespawnDelay
import cg_recordSPDemoName
import cg_recordSPDemo
import cg_singlePlayerActive
import cg_singlePlayer
import cg_currentSelectedPlayerName
import cg_currentSelectedPlayer
import cg_blueTeamName
import cg_redTeamName
import cg_music
import cg_trueLightning
import cg_oldPlasma
import cg_cameraEyes_Up
import cg_cameraEyes_Fwd
import cg_cameraEyes
import cg_cameramode
import cg_leiBrassNoise
import cg_leiGoreNoise
import cg_leiEnhancement
import cg_lodScale
import cg_letterBoxSize
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_float
import pmove_msec
import pmove_fixed
import cg_commonConsole
import cg_teamChatLines
import cg_chatLines
import cg_commonConsoleLines
import cg_consoleLines
import cg_teamChatSizeY
import cg_teamChatSizeX
import cg_chatSizeY
import cg_chatSizeX
import cg_consoleSizeY
import cg_consoleSizeX
import cg_fontShadow
import cg_fontScale
import cg_consoleTime
import cg_chatTime
import cg_newConsole
import cg_newFont
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatScaleY
import cg_teamChatScaleX
import cg_chatY
import cg_teamChatY
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawSpeed
import cg_drawAttacker
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_thirdPersonOffset
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_bigheadMode
import cg_disableLevelStartFade
import cg_paintballMode
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairScale
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_drawSyncMessage
import cg_drawsubtitles
import cg_centertime
import cg_gibtime
import cg_itemstyle
import cg_oldscoreboard
import team_legsskin
import legsskin
import ui_backcolors
import cl_screenoffset
import cg_cameraeyes
import cg_leiChibi
import cg_plightradius
import cg_plightblue
import cg_plightgreen
import cg_plightred
import cg_tolightblue
import cg_tolightgreen
import cg_tolightred
import cg_hetex
import cg_totex
import cg_ptex
import cg_helightblue
import cg_helightgreen
import cg_helightred
import con_notifytime
import cl_language
import cg_toolguninfo
import cg_postprocess
import cg_hide255
import sb_texturename
import sb_texture_view
import sb_classnum_view
import toolgun_modelst
import toolgun_toolmode4
import toolgun_toolmode3
import toolgun_toolmode2
import toolgun_toolmode1
import toolgun_tooltip4
import toolgun_tooltip3
import toolgun_tooltip2
import toolgun_tooltip1
import toolgun_tooltext
import toolgun_toolcmd4
import toolgun_toolcmd3
import toolgun_toolcmd2
import toolgun_toolcmd1
import toolgun_tool
import toolgun_mod19
import toolgun_mod18
import toolgun_mod17
import toolgun_mod16
import toolgun_mod15
import toolgun_mod14
import toolgun_mod13
import toolgun_mod12
import toolgun_mod11
import toolgun_mod10
import toolgun_mod9
import toolgun_mod8
import toolgun_mod7
import toolgun_mod6
import toolgun_mod5
import toolgun_mod4
import toolgun_mod3
import toolgun_mod2
import toolgun_mod1
import cg_weaponBarActiveWidth
import cg_weaponselecttime
import cg_itemscaletime
import cg_zoomtime
import cg_gibmodifier
import cg_gibvelocity
import cg_gibjump
import cl_giantcharheight
import cl_giantcharwidth
import cl_bigcharheight
import cl_bigcharwidth
import cl_smallcharheight
import cl_smallcharwidth
import cl_propgapwidth
import cl_propspacewidth
import cl_propheight
import cl_propsmallsizescale
import g_gametype
import mod_skyColorA
import mod_skyColorB
import mod_skyColorG
import mod_skyColorR
import mod_skyShader
import mod_fogColorA
import mod_fogColorB
import mod_fogColorG
import mod_fogColorR
import mod_fogInterval
import mod_fogDistance
import mod_fogShader
import mod_fogModel
import mod_zround
import mod_gravity
import mod_roundmode
import mod_overlay
import mod_slickmove
import mod_accelerate
import mod_invulinf
import mod_kamikazeinf
import mod_portalinf
import mod_teleporterinf
import mod_medkitinf
import mod_medkitlimit
import mod_teamblue_firespeed
import mod_teamred_firespeed
import mod_invulmove
import mod_ammolimit
import mod_noplayerclip
import mod_doublerfirespeed
import mod_guardfirespeed
import mod_scoutfirespeed
import mod_ammoregenfirespeed
import mod_hastefirespeed
import mod_amdelay
import mod_ftdelay
import mod_cgdelay
import mod_pldelay
import mod_ngdelay
import mod_bfgdelay
import mod_rgdelay
import mod_pgdelay
import mod_lgdelay
import mod_rldelay
import mod_gldelay
import mod_sgdelay
import mod_mgdelay
import mod_gdelay
import mod_jumpheight
import mod_sgspread
import mod_sgcount
import mod_lgrange
import mod_cgspread
import mod_mgspread
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_TeamName
import BG_GetVehicleSettings
import BG_VehicleCheckClass
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_DefragmentMemory
import BG_Free
import BG_InitMemory
import BG_Alloc
import BG_CanAlloc
import BG_CanItemBeGrabbed
import BG_FindItemForBackpack
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindSwepAmmo
import BG_FindSwep
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import COM_LoadLevelScores
import COM_CalculatePlayerScore
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import vectoyaw
import AngleDifference
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import Q_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import Lerp
import VelocityToAxis
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import Q_snprintf
import Q_vsnprintf
import strtol
import _atoi
import atoi
import strtod
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import ifstrlenru
import strlenru
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1675
byte 1 101
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 100
byte 1 101
byte 1 49
byte 1 0
align 1
LABELV $1587
byte 1 118
byte 1 115
byte 1 116
byte 1 114
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 116
byte 1 111
byte 1 111
byte 1 108
byte 1 99
byte 1 109
byte 1 100
byte 1 52
byte 1 10
byte 1 0
align 1
LABELV $1583
byte 1 118
byte 1 115
byte 1 116
byte 1 114
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 116
byte 1 111
byte 1 111
byte 1 108
byte 1 99
byte 1 109
byte 1 100
byte 1 51
byte 1 10
byte 1 0
align 1
LABELV $1579
byte 1 118
byte 1 115
byte 1 116
byte 1 114
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 116
byte 1 111
byte 1 111
byte 1 108
byte 1 99
byte 1 109
byte 1 100
byte 1 50
byte 1 10
byte 1 0
align 1
LABELV $1575
byte 1 118
byte 1 115
byte 1 116
byte 1 114
byte 1 32
byte 1 116
byte 1 111
byte 1 111
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 116
byte 1 111
byte 1 111
byte 1 108
byte 1 99
byte 1 109
byte 1 100
byte 1 49
byte 1 10
byte 1 0
align 1
LABELV $1562
byte 1 67
byte 1 71
byte 1 95
byte 1 70
byte 1 105
byte 1 114
byte 1 101
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 97
byte 1 99
byte 1 107
byte 1 32
byte 1 62
byte 1 32
byte 1 87
byte 1 69
byte 1 65
byte 1 80
byte 1 79
byte 1 78
byte 1 83
byte 1 95
byte 1 78
byte 1 85
byte 1 77
byte 1 0
align 1
LABELV $1490
byte 1 112
byte 1 104
byte 1 121
byte 1 115
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 100
byte 1 105
byte 1 115
byte 1 116
byte 1 32
byte 1 49
byte 1 10
byte 1 0
align 1
LABELV $1470
byte 1 49
byte 1 0
align 1
LABELV $1469
byte 1 99
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 100
byte 1 101
byte 1 50
byte 1 53
byte 1 53
byte 1 0
align 1
LABELV $1443
byte 1 112
byte 1 104
byte 1 121
byte 1 115
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 100
byte 1 105
byte 1 115
byte 1 116
byte 1 32
byte 1 48
byte 1 10
byte 1 0
align 1
LABELV $1353
byte 1 99
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 66
byte 1 97
byte 1 114
byte 1 65
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 87
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 0
align 1
LABELV $1345
byte 1 37
byte 1 100
byte 1 47
byte 1 0
align 1
LABELV $1338
byte 1 37
byte 1 100
byte 1 0
align 1
LABELV $1319
byte 1 48
byte 1 0
align 1
LABELV $1318
byte 1 99
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 66
byte 1 97
byte 1 114
byte 1 65
byte 1 99
byte 1 116
byte 1 105
byte 1 118
byte 1 101
byte 1 87
byte 1 105
byte 1 100
byte 1 116
byte 1 104
byte 1 0
align 1
LABELV $1133
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 0
align 1
LABELV $1094
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $1024
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $933
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 119
byte 1 118
byte 1 117
byte 1 108
byte 1 119
byte 1 105
byte 1 110
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $737
byte 1 67
byte 1 71
byte 1 95
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 86
byte 1 105
byte 1 115
byte 1 117
byte 1 97
byte 1 108
byte 1 115
byte 1 58
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 78
byte 1 117
byte 1 109
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 111
byte 1 102
byte 1 32
byte 1 114
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 32
byte 1 91
byte 1 48
byte 1 45
byte 1 37
byte 1 100
byte 1 93
byte 1 0
align 1
LABELV $721
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 110
byte 1 99
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $715
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 116
byte 1 111
byte 1 111
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $714
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 116
byte 1 111
byte 1 111
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $708
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 116
byte 1 101
byte 1 114
byte 1 47
byte 1 104
byte 1 121
byte 1 112
byte 1 114
byte 1 98
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $707
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 116
byte 1 101
byte 1 114
byte 1 47
byte 1 108
byte 1 97
byte 1 115
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $701
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 102
byte 1 108
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 104
byte 1 114
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 47
byte 1 104
byte 1 121
byte 1 112
byte 1 114
byte 1 98
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $700
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 102
byte 1 108
byte 1 97
byte 1 109
byte 1 101
byte 1 116
byte 1 104
byte 1 114
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 47
byte 1 108
byte 1 97
byte 1 115
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $698
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $697
byte 1 98
byte 1 102
byte 1 103
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $694
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $693
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 47
byte 1 98
byte 1 102
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $691
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 67
byte 1 111
byte 1 114
byte 1 101
byte 1 0
align 1
LABELV $686
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $683
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $682
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 114
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $680
byte 1 114
byte 1 97
byte 1 105
byte 1 108
byte 1 68
byte 1 105
byte 1 115
byte 1 99
byte 1 0
align 1
LABELV $677
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $674
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 104
byte 1 121
byte 1 112
byte 1 114
byte 1 98
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $673
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 47
byte 1 108
byte 1 97
byte 1 115
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $671
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 110
byte 1 97
byte 1 105
byte 1 108
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 119
byte 1 110
byte 1 97
byte 1 108
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $670
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 110
byte 1 97
byte 1 105
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $666
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $665
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 49
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $663
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $660
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 47
byte 1 119
byte 1 115
byte 1 116
byte 1 98
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $659
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $657
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $654
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 108
byte 1 102
byte 1 49
byte 1 97
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $653
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 102
byte 1 108
byte 1 121
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $652
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 47
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $650
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $646
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 52
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $645
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 51
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $644
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 50
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $643
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 105
byte 1 110
byte 1 101
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 109
byte 1 97
byte 1 99
byte 1 104
byte 1 103
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $641
byte 1 98
byte 1 117
byte 1 108
byte 1 108
byte 1 101
byte 1 116
byte 1 69
byte 1 120
byte 1 112
byte 1 108
byte 1 111
byte 1 115
byte 1 105
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $638
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 52
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $637
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 51
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $636
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 50
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $635
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 102
byte 1 49
byte 1 98
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $634
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 118
byte 1 117
byte 1 108
byte 1 99
byte 1 97
byte 1 110
byte 1 47
byte 1 119
byte 1 118
byte 1 117
byte 1 108
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $632
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 117
byte 1 108
byte 1 108
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $631
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 47
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $630
byte 1 103
byte 1 114
byte 1 97
byte 1 112
byte 1 112
byte 1 108
byte 1 101
byte 1 82
byte 1 111
byte 1 112
byte 1 101
byte 1 0
align 1
LABELV $627
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 97
byte 1 109
byte 1 109
byte 1 111
byte 1 47
byte 1 104
byte 1 111
byte 1 111
byte 1 107
byte 1 47
byte 1 104
byte 1 111
byte 1 111
byte 1 107
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $625
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $622
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $619
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 105
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $616
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 104
byte 1 105
byte 1 116
byte 1 115
byte 1 47
byte 1 99
byte 1 114
byte 1 97
byte 1 99
byte 1 107
byte 1 108
byte 1 101
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $613
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 66
byte 1 111
byte 1 108
byte 1 116
byte 1 78
byte 1 101
byte 1 119
byte 1 0
align 1
LABELV $610
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 102
byte 1 105
byte 1 114
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $609
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 47
byte 1 108
byte 1 103
byte 1 95
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $608
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 104
byte 1 117
byte 1 109
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $606
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 97
byte 1 116
byte 1 99
byte 1 107
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $605
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 109
byte 1 101
byte 1 108
byte 1 101
byte 1 101
byte 1 47
byte 1 102
byte 1 115
byte 1 116
byte 1 114
byte 1 117
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $601
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 115
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 50
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 47
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 103
byte 1 117
byte 1 110
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $598
byte 1 95
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $597
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $596
byte 1 95
byte 1 102
byte 1 108
byte 1 97
byte 1 115
byte 1 104
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
