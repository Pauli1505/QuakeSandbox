export CG_PositionEntityOnTag
code
proc CG_PositionEntityOnTag 84 24
file "../../../code/cgame/cg_ents.c"
line 40
;1:/*
;2:===========================================================================
;3:Copyright (C) 1999-2005 Id Software, Inc.
;4:
;5:This file is part of Quake III Arena source code.
;6:
;7:Quake III Arena source code is free software; you can redistribute it
;8:and/or modify it under the terms of the GNU General Public License as
;9:published by the Free Software Foundation; either version 2 of the License,
;10:or (at your option) any later version.
;11:
;12:Quake III Arena source code is distributed in the hope that it will be
;13:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;14:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;15:GNU General Public License for more details.
;16:
;17:You should have received a copy of the GNU General Public License
;18:along with Quake III Arena source code; if not, write to the Free Software
;19:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;20:===========================================================================
;21:*/
;22://
;23:// cg_ents.c -- present snapshot entities, happens every single frame
;24:
;25:#include "cg_local.h"
;26:
;27:
;28:static void CG_LaserSight( centity_t *cent );
;29:
;30:
;31:/*
;32:======================
;33:CG_PositionEntityOnTag
;34:
;35:Modifies the entities position and axis by the given
;36:tag location
;37:======================
;38:*/
;39:void CG_PositionEntityOnTag( refEntity_t *entity, const refEntity_t *parent,
;40:							qhandle_t parentModel, char *tagName ) {
line 45
;41:	int				i;
;42:	orientation_t	lerped;
;43:
;44:	// lerp the tag
;45:	trap_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,
ADDRLP4 4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 52
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRLP4 52
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
CNSTF4 1065353216
ADDRLP4 52
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ARGF4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LerpTag
CALLI4
pop
line 49
;46:		1.0 - parent->backlerp, tagName );
;47:
;48:	// FIXME: allow origin offsets along tag?
;49:	VectorCopy( parent->origin, entity->origin );
ADDRLP4 56
CNSTI4 68
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 50
;50:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $82
line 51
;51:		VectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 52
;52:	}
LABELV $83
line 50
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $82
line 55
;53:
;54:	// had to cast away the const to avoid compiler problems...
;55:	MatrixMultiply( lerped.axis, ((refEntity_t *)parent)->axis, entity->axis );
ADDRLP4 4+12
ARGP4
ADDRLP4 60
CNSTI4 28
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 60
INDIRI4
ADDP
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 56
;56:	entity->backlerp = parent->backlerp;
ADDRLP4 64
CNSTI4 100
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRF4
ASGNF4
line 57
;57:}
LABELV $81
endproc CG_PositionEntityOnTag 84 24
export CG_PositionRotatedEntityOnTag
proc CG_PositionRotatedEntityOnTag 120 24
line 69
;58:
;59:
;60:/*
;61:======================
;62:CG_PositionRotatedEntityOnTag
;63:
;64:Modifies the entities position and axis by the given
;65:tag location
;66:======================
;67:*/
;68:void CG_PositionRotatedEntityOnTag( refEntity_t *entity, const refEntity_t *parent,
;69:							qhandle_t parentModel, char *tagName ) {
line 76
;70:	int				i;
;71:	orientation_t	lerped;
;72:	vec3_t			tempAxis[3];
;73:
;74://AxisClear( entity->axis );
;75:	// lerp the tag
;76:	trap_R_LerpTag( &lerped, parentModel, parent->oldframe, parent->frame,
ADDRLP4 4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 88
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRLP4 88
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ARGI4
CNSTF4 1065353216
ADDRLP4 88
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ARGF4
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 trap_R_LerpTag
CALLI4
pop
line 80
;77:		1.0 - parent->backlerp, tagName );
;78:
;79:	// FIXME: allow origin offsets along tag?
;80:	VectorCopy( parent->origin, entity->origin );
ADDRLP4 92
CNSTI4 68
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
ADDRFP4 4
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 81
;81:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $88
line 82
;82:		VectorMA( entity->origin, lerped.origin[i], parent->axis[i], entity->origin );
ADDRLP4 96
ADDRFP4 0
INDIRP4
CNSTI4 68
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 112
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRF4
CNSTI4 12
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
ADDP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 83
;83:	}
LABELV $89
line 81
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $88
line 86
;84:
;85:	// had to cast away the const to avoid compiler problems...
;86:	MatrixMultiply( entity->axis, lerped.axis, tempAxis );
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ARGP4
ADDRLP4 4+12
ARGP4
ADDRLP4 52
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 87
;87:	MatrixMultiply( tempAxis, ((refEntity_t *)parent)->axis, entity->axis );
ADDRLP4 52
ARGP4
ADDRLP4 96
CNSTI4 28
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 96
INDIRI4
ADDP
ARGP4
ADDRFP4 0
INDIRP4
ADDRLP4 96
INDIRI4
ADDP4
ARGP4
ADDRGP4 MatrixMultiply
CALLV
pop
line 88
;88:}
LABELV $87
endproc CG_PositionRotatedEntityOnTag 120 24
export CG_SetEntitySoundPosition
proc CG_SetEntitySoundPosition 24 8
line 107
;89:
;90:
;91:
;92:/*
;93:==========================================================================
;94:
;95:FUNCTIONS CALLED EACH FRAME
;96:
;97:==========================================================================
;98:*/
;99:
;100:/*
;101:======================
;102:CG_SetEntitySoundPosition
;103:
;104:Also called by event processing code
;105:======================
;106:*/
;107:void CG_SetEntitySoundPosition( centity_t *cent ) {
line 108
;108:	if ( cent->currentState.solid == SOLID_BMODEL ) {
ADDRFP4 0
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 16777215
NEI4 $94
line 112
;109:		vec3_t	origin;
;110:		float	*v;
;111:
;112:		v = cgs.inlineModelMidpoints[ cent->currentState.modelindex ];
ADDRLP4 12
CNSTI4 12
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+391796
ADDP4
ASGNP4
line 113
;113:		VectorAdd( cent->lerpOrigin, v, origin );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 12
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 816
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
CNSTI4 820
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
INDIRF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 114
;114:		trap_S_UpdateEntityPosition( cent->currentState.number, origin );
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 trap_S_UpdateEntityPosition
CALLV
pop
line 115
;115:	} else {
ADDRGP4 $95
JUMPV
LABELV $94
line 116
;116:		trap_S_UpdateEntityPosition( cent->currentState.number, cent->lerpOrigin );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 816
ADDP4
ARGP4
ADDRGP4 trap_S_UpdateEntityPosition
CALLV
pop
line 117
;117:	}
LABELV $95
line 118
;118:}
LABELV $93
endproc CG_SetEntitySoundPosition 24 8
proc CG_EntityEffects 20 20
line 127
;119:
;120:/*
;121:==================
;122:CG_EntityEffects
;123:
;124:Add continuous entity effects, like local entity emission and lighting
;125:==================
;126:*/
;127:static void CG_EntityEffects( centity_t *cent ) {
line 130
;128:
;129:	// update sound origins
;130:	CG_SetEntitySoundPosition( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_SetEntitySoundPosition
CALLV
pop
line 133
;131:
;132:	// add loop sound
;133:	if ( cent->currentState.loopSound ) {
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 0
EQI4 $100
line 134
;134:		if (cent->currentState.eType != ET_SPEAKER) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 7
EQI4 $102
line 135
;135:			trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin,
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 816
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+359024
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 137
;136:				cgs.gameSounds[ cent->currentState.loopSound ] );
;137:		} else {
ADDRGP4 $103
JUMPV
LABELV $102
line 138
;138:			trap_S_AddRealLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin,
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 816
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 168
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+359024
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddRealLoopingSound
CALLV
pop
line 140
;139:				cgs.gameSounds[ cent->currentState.loopSound ] );
;140:		}
LABELV $103
line 141
;141:	}
LABELV $100
line 145
;142:
;143:
;144:	// constant light glow
;145:	if(cent->currentState.constantLight)
ADDRFP4 0
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CNSTI4 0
EQI4 $106
line 146
;146:	{
line 150
;147:		int		cl;
;148:		float		i, r, g, b;
;149:
;150:		cl = cent->currentState.constantLight;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
ASGNI4
line 153
;151:
;152:		//entityplus: trap_R_AddLightToScene takes rgb values from 0.0 - 1.0, not 0 - 255. Appears to be a bug in vQ3 SDK code.
;153:		r = (float) (cl & 0xFF) / 255.0;
ADDRLP4 8
ADDRLP4 0
INDIRI4
CNSTI4 255
BANDI4
CVIF4 4
CNSTF4 1132396544
DIVF4
ASGNF4
line 154
;154:		g = (float) ((cl >> 8) & 0xFF) / 255.0;
ADDRLP4 12
ADDRLP4 0
INDIRI4
CNSTI4 8
RSHI4
CNSTI4 255
BANDI4
CVIF4 4
CNSTF4 1132396544
DIVF4
ASGNF4
line 155
;155:		b = (float) ((cl >> 16) & 0xFF) / 255.0;
ADDRLP4 16
ADDRLP4 0
INDIRI4
CNSTI4 16
RSHI4
CNSTI4 255
BANDI4
CVIF4 4
CNSTF4 1132396544
DIVF4
ASGNF4
line 156
;156:		i = (float) ((cl >> 24) & 0xFF) * 4.0;
ADDRLP4 4
CNSTF4 1082130432
ADDRLP4 0
INDIRI4
CNSTI4 24
RSHI4
CNSTI4 255
BANDI4
CVIF4 4
MULF4
ASGNF4
line 157
;157:		trap_R_AddLightToScene(cent->lerpOrigin, i*8, r, g, b);
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
ARGP4
CNSTF4 1090519040
ADDRLP4 4
INDIRF4
MULF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 16
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 158
;158:	}
LABELV $106
line 160
;159:
;160:}
LABELV $99
endproc CG_EntityEffects 20 20
proc CG_General 1012 16
line 168
;161:
;162:
;163:/*
;164:==================
;165:CG_General
;166:==================
;167:*/
;168:static void CG_General( centity_t *cent ) {
line 174
;169:	refEntity_t			ent;
;170:	refEntity_t			wheelfr;
;171:	refEntity_t			wheelfl;
;172:	refEntity_t			wheelrr;
;173:	refEntity_t			wheelrl;
;174:	int					isVehicle = 0;
ADDRLP4 952
CNSTI4 0
ASGNI4
line 182
;175:	char 				str[MAX_QPATH];
;176:	entityState_t		*s1;
;177:	int					i;
;178:	centity_t 			*player;
;179:	int		cl;
;180:	int		r, g, b;
;181:
;182:	s1 = &cent->currentState;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 185
;183:
;184:	// if set to invisible, skip
;185:	if (!s1->modelindex) {
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 0
NEI4 $109
line 186
;186:		return;
ADDRGP4 $108
JUMPV
LABELV $109
line 189
;187:	}
;188:
;189:	memset (&ent, 0, sizeof(ent));
ADDRLP4 4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 190
;190:	memset (&wheelfr, 0, sizeof(wheelfr));
ADDRLP4 180
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 191
;191:	memset (&wheelfl, 0, sizeof(wheelfl));
ADDRLP4 356
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 192
;192:	memset (&wheelrr, 0, sizeof(wheelrr));
ADDRLP4 532
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 193
;193:	memset (&wheelrl, 0, sizeof(wheelrl));
ADDRLP4 708
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 196
;194:
;195:	// set frame
;196:	ent.frame = s1->frame;
ADDRLP4 4+80
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 197
;197:	ent.oldframe = ent.frame;
ADDRLP4 4+96
ADDRLP4 4+80
INDIRI4
ASGNI4
line 198
;198:	ent.backlerp = 0;
ADDRLP4 4+100
CNSTF4 0
ASGNF4
line 200
;199:
;200:	VectorCopy( cent->lerpOrigin, ent.origin);
ADDRLP4 4+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 201
;201:	VectorCopy( cent->lerpOrigin, ent.oldorigin);
ADDRLP4 4+84
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 203
;202:
;203:	ent.hModel = cgs.gameModels[s1->modelindex];
ADDRLP4 4+8
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+342640
ADDP4
INDIRI4
ASGNI4
line 204
;204:	ent.reType = RT_MODEL;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 205
;205:	ent.customSkin = trap_R_RegisterSkin(va("ptex/%s/%i.skin", CG_ConfigString( CS_MODELS+s1->modelindex ), s1->generic2));
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 32
ADDI4
ARGI4
ADDRLP4 976
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRGP4 $120
ARGP4
ADDRLP4 976
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 980
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 980
INDIRP4
ARGP4
ADDRLP4 984
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRLP4 4+108
ADDRLP4 984
INDIRI4
ASGNI4
line 206
;206:	if(s1->generic2 > 0){
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 0
LEI4 $121
line 207
;207:	ent.customShader = trap_R_RegisterShader(va("ptex/%s/%i", CG_ConfigString( CS_MODELS+s1->modelindex ), s1->generic2));
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 32
ADDI4
ARGI4
ADDRLP4 988
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRGP4 $124
ARGP4
ADDRLP4 988
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 992
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 992
INDIRP4
ARGP4
ADDRLP4 996
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 4+112
ADDRLP4 996
INDIRI4
ASGNI4
line 208
;208:	}					
LABELV $121
line 209
;209:	if(s1->generic2 == 255){	
ADDRLP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 255
NEI4 $125
line 210
;210:	if(cg_hide255.integer){		
ADDRGP4 cg_hide255+12
INDIRI4
CNSTI4 0
EQI4 $127
line 211
;211:	ent.customShader = cgs.media.ptexShader[0];
ADDRLP4 4+112
ADDRGP4 cgs+956380+1576
INDIRI4
ASGNI4
line 212
;212:	} else {
ADDRGP4 $128
JUMPV
LABELV $127
line 213
;213:	ent.customShader = cgs.media.ptexShader[1];
ADDRLP4 4+112
ADDRGP4 cgs+956380+1576+4
INDIRI4
ASGNI4
line 214
;214:	}
LABELV $128
line 215
;215:	}
LABELV $125
line 217
;216:
;217:	cl = cent->currentState.constantLight;
ADDRLP4 948
ADDRFP4 0
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
ASGNI4
line 218
;218:	r = (cl & 0xFF);
ADDRLP4 956
ADDRLP4 948
INDIRI4
CNSTI4 255
BANDI4
ASGNI4
line 219
;219:	g = ((cl >> 8) & 0xFF);
ADDRLP4 960
ADDRLP4 948
INDIRI4
CNSTI4 8
RSHI4
CNSTI4 255
BANDI4
ASGNI4
line 220
;220:	b = ((cl >> 16) & 0xFF);
ADDRLP4 964
ADDRLP4 948
INDIRI4
CNSTI4 16
RSHI4
CNSTI4 255
BANDI4
ASGNI4
line 221
;221:	ent.shaderRGBA[0] = r;
ADDRLP4 4+116
ADDRLP4 956
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 222
;222:	ent.shaderRGBA[1] = g;
ADDRLP4 4+116+1
ADDRLP4 960
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 223
;223:	ent.shaderRGBA[2] = b;
ADDRLP4 4+116+2
ADDRLP4 964
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 224
;224:	ent.shaderRGBA[3] = 255;
ADDRLP4 4+116+3
CNSTU1 255
ASGNU1
line 226
;225:	
;226:	Com_sprintf(str, sizeof(str), CG_ConfigString(CS_MODELS + s1->modelindex));
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 32
ADDI4
ARGI4
ADDRLP4 988
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 884
ARGP4
CNSTI4 64
ARGI4
ADDRLP4 988
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 228
;227:	
;228:	if (str != NULL && str[6] == 'v' && str[7] == 'e' && str[8] == 'h' && str[9] == '_') {		//offset to props/<6> check veh_
ADDRLP4 884
CVPU4 4
CNSTU4 0
EQU4 $144
ADDRLP4 884+6
INDIRI1
CVII4 1
CNSTI4 118
NEI4 $144
ADDRLP4 884+7
INDIRI1
CVII4 1
CNSTI4 101
NEI4 $144
ADDRLP4 884+8
INDIRI1
CVII4 1
CNSTI4 104
NEI4 $144
ADDRLP4 884+9
INDIRI1
CVII4 1
CNSTI4 95
NEI4 $144
line 229
;229:		isVehicle = 1;
ADDRLP4 952
CNSTI4 1
ASGNI4
line 230
;230:	}
LABELV $144
line 233
;231:
;232:	// player model
;233:	if (s1->number == cg.snap->ps.clientNum) {
ADDRLP4 0
INDIRP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
NEI4 $150
line 234
;234:		ent.renderfx |= RF_THIRD_PERSON;	// only draw from mirrors
ADDRLP4 4+4
ADDRLP4 4+4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 235
;235:	}
LABELV $150
line 238
;236:
;237:	// convert angles to axis
;238:	AnglesToAxis( cent->lerpAngles, ent.axis );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRLP4 4+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 240
;239:
;240:	if(s1->scales[0] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 0
EQF4 $155
line 241
;241:	VectorScale( ent.axis[0], s1->scales[0], ent.axis[0] );}
ADDRLP4 4+28
ADDRLP4 4+28
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 4+28+4
ADDRLP4 4+28+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 4+28+8
ADDRLP4 4+28+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $155
line 242
;242:	if(s1->scales[1] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
CNSTF4 0
EQF4 $167
line 243
;243:	VectorScale( ent.axis[1], s1->scales[1], ent.axis[1] );}
ADDRLP4 4+28+12
ADDRLP4 4+28+12
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 4+28+12+4
ADDRLP4 4+28+12+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 4+28+12+8
ADDRLP4 4+28+12+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $167
line 244
;244:	if(s1->scales[2] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 0
EQF4 $185
line 245
;245:	VectorScale( ent.axis[2], s1->scales[2], ent.axis[2] );}
ADDRLP4 4+28+24
ADDRLP4 4+28+24
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 4+28+24+4
ADDRLP4 4+28+24+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 4+28+24+8
ADDRLP4 4+28+24+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $185
line 247
;246:
;247:	if(isVehicle){
ADDRLP4 952
INDIRI4
CNSTI4 0
EQI4 $203
line 248
;248:    if (s1->generic1 && s1->generic1-1 == cg.predictedPlayerState.clientNum) {  
ADDRLP4 992
ADDRLP4 0
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
ADDRLP4 992
INDIRI4
CNSTI4 0
EQI4 $205
ADDRLP4 992
INDIRI4
CNSTI4 1
SUBI4
ADDRGP4 cg+1868928+140
INDIRI4
NEI4 $205
line 249
;249:		if(VectorLength(cg.predictedPlayerState.velocity) > 5){
ADDRGP4 cg+1868928+32
ARGP4
ADDRLP4 996
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 996
INDIRF4
CNSTF4 1084227584
LEF4 $209
line 250
;250:        VectorCopy(cg.predictedPlayerState.origin, ent.origin);
ADDRLP4 4+68
ADDRGP4 cg+1868928+20
INDIRB
ASGNB 12
line 251
;251:        VectorCopy(cg.predictedPlayerState.origin, ent.oldorigin);
ADDRLP4 4+84
ADDRGP4 cg+1868928+20
INDIRB
ASGNB 12
line 252
;252:        VelocityToAxis(cg.predictedPlayerState.velocity, ent.axis, 1.00f);
ADDRGP4 cg+1868928+32
ARGP4
ADDRLP4 4+28
ARGP4
CNSTF4 1065353216
ARGF4
ADDRGP4 VelocityToAxis
CALLV
pop
line 253
;253:		}
LABELV $209
line 254
;254:    }
LABELV $205
line 255
;255:	}
LABELV $203
line 258
;256:
;257:	// add to refresh list
;258:	trap_R_AddRefEntityToScene (&ent);
ADDRLP4 4
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 260
;259:	
;260:	if(isVehicle){
ADDRLP4 952
INDIRI4
CNSTI4 0
EQI4 $222
line 262
;261:	
;262:	trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cgs.media.carengine[s1->generic3] );
ADDRLP4 992
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 992
INDIRP4
INDIRI4
ARGI4
ADDRLP4 992
INDIRP4
CNSTI4 816
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+956380+1952
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 264
;263:		
;264:	wheelfr.frame = s1->frame;
ADDRLP4 180+80
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 265
;265:	wheelfr.oldframe = wheelfr.frame;
ADDRLP4 180+96
ADDRLP4 180+80
INDIRI4
ASGNI4
line 266
;266:	wheelfr.backlerp = 0;
ADDRLP4 180+100
CNSTF4 0
ASGNF4
line 268
;267:
;268:	VectorCopy( cent->lerpOrigin, wheelfr.origin);
ADDRLP4 180+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 269
;269:	VectorCopy( cent->lerpOrigin, wheelfr.oldorigin);
ADDRLP4 180+84
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 271
;270:	
;271:	wheelfr.hModel = trap_R_RegisterModel_MiTech( "props/v_wheel" );
ADDRGP4 $233
ARGP4
ADDRLP4 996
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 180+8
ADDRLP4 996
INDIRI4
ASGNI4
line 272
;272:	wheelfr.customSkin = ent.customSkin;
ADDRLP4 180+108
ADDRLP4 4+108
INDIRI4
ASGNI4
line 273
;273:	wheelfr.customShader = ent.customShader;
ADDRLP4 180+112
ADDRLP4 4+112
INDIRI4
ASGNI4
line 274
;274:	wheelfr.reType = RT_MODEL;
ADDRLP4 180
CNSTI4 0
ASGNI4
line 276
;275:	
;276:	AnglesToAxis( cent->lerpAngles, wheelfr.axis );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRLP4 180+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 278
;277:	
;278:	if(s1->scales[0] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 0
EQF4 $239
line 279
;279:	VectorScale( wheelfr.axis[0], s1->scales[0], wheelfr.axis[0] );}
ADDRLP4 180+28
ADDRLP4 180+28
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 180+28+4
ADDRLP4 180+28+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 180+28+8
ADDRLP4 180+28+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $239
line 280
;280:	if(s1->scales[1] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
CNSTF4 0
EQF4 $251
line 281
;281:	VectorScale( wheelfr.axis[1], s1->scales[1], wheelfr.axis[1] );}
ADDRLP4 180+28+12
ADDRLP4 180+28+12
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 180+28+12+4
ADDRLP4 180+28+12+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 180+28+12+8
ADDRLP4 180+28+12+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $251
line 282
;282:	if(s1->scales[2] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 0
EQF4 $269
line 283
;283:	VectorScale( wheelfr.axis[2], s1->scales[2], wheelfr.axis[2] );}
ADDRLP4 180+28+24
ADDRLP4 180+28+24
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 180+28+24+4
ADDRLP4 180+28+24+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 180+28+24+8
ADDRLP4 180+28+24+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $269
line 285
;284:	
;285:	CG_PositionEntityOnTag( &wheelfr, &ent, ent.hModel, "tag_wheelfr");
ADDRLP4 180
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 4+8
INDIRI4
ARGI4
ADDRGP4 $288
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 288
;286:
;287:
;288:	wheelfl.frame = s1->frame;
ADDRLP4 356+80
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 289
;289:	wheelfl.oldframe = wheelfl.frame;
ADDRLP4 356+96
ADDRLP4 356+80
INDIRI4
ASGNI4
line 290
;290:	wheelfl.backlerp = 0;
ADDRLP4 356+100
CNSTF4 0
ASGNF4
line 292
;291:
;292:	VectorCopy( cent->lerpOrigin, wheelfl.origin);
ADDRLP4 356+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 293
;293:	VectorCopy( cent->lerpOrigin, wheelfl.oldorigin);
ADDRLP4 356+84
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 295
;294:	
;295:	wheelfl.hModel = trap_R_RegisterModel_MiTech( "props/v_wheel" );
ADDRGP4 $233
ARGP4
ADDRLP4 1000
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 356+8
ADDRLP4 1000
INDIRI4
ASGNI4
line 296
;296:	wheelfl.customSkin = ent.customSkin;
ADDRLP4 356+108
ADDRLP4 4+108
INDIRI4
ASGNI4
line 297
;297:	wheelfl.customShader = ent.customShader;
ADDRLP4 356+112
ADDRLP4 4+112
INDIRI4
ASGNI4
line 298
;298:	wheelfl.reType = RT_MODEL;
ADDRLP4 356
CNSTI4 0
ASGNI4
line 300
;299:	
;300:	AnglesToAxis( cent->lerpAngles, wheelfl.axis );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRLP4 356+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 302
;301:	
;302:	if(s1->scales[0] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 0
EQF4 $301
line 303
;303:	VectorScale( wheelfl.axis[0], s1->scales[0], wheelfl.axis[0] );}
ADDRLP4 356+28
ADDRLP4 356+28
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 356+28+4
ADDRLP4 356+28+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 356+28+8
ADDRLP4 356+28+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $301
line 304
;304:	if(s1->scales[1] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
CNSTF4 0
EQF4 $313
line 305
;305:	VectorScale( wheelfl.axis[1], s1->scales[1], wheelfl.axis[1] );}
ADDRLP4 356+28+12
ADDRLP4 356+28+12
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 356+28+12+4
ADDRLP4 356+28+12+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 356+28+12+8
ADDRLP4 356+28+12+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $313
line 306
;306:	if(s1->scales[2] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 0
EQF4 $331
line 307
;307:	VectorScale( wheelfl.axis[2], s1->scales[2], wheelfl.axis[2] );}
ADDRLP4 356+28+24
ADDRLP4 356+28+24
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 356+28+24+4
ADDRLP4 356+28+24+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 356+28+24+8
ADDRLP4 356+28+24+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $331
line 309
;308:	
;309:	CG_PositionEntityOnTag( &wheelfl, &ent, ent.hModel, "tag_wheelfl");
ADDRLP4 356
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 4+8
INDIRI4
ARGI4
ADDRGP4 $350
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 312
;310:	
;311:
;312:	wheelrr.frame = s1->frame;
ADDRLP4 532+80
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 313
;313:	wheelrr.oldframe = wheelrr.frame;
ADDRLP4 532+96
ADDRLP4 532+80
INDIRI4
ASGNI4
line 314
;314:	wheelrr.backlerp = 0;
ADDRLP4 532+100
CNSTF4 0
ASGNF4
line 316
;315:
;316:	VectorCopy( cent->lerpOrigin, wheelrr.origin);
ADDRLP4 532+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 317
;317:	VectorCopy( cent->lerpOrigin, wheelrr.oldorigin);
ADDRLP4 532+84
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 319
;318:	
;319:	wheelrr.hModel = trap_R_RegisterModel_MiTech( "props/v_wheel" );
ADDRGP4 $233
ARGP4
ADDRLP4 1004
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 532+8
ADDRLP4 1004
INDIRI4
ASGNI4
line 320
;320:	wheelrr.customSkin = ent.customSkin;
ADDRLP4 532+108
ADDRLP4 4+108
INDIRI4
ASGNI4
line 321
;321:	wheelrr.customShader = ent.customShader;
ADDRLP4 532+112
ADDRLP4 4+112
INDIRI4
ASGNI4
line 322
;322:	wheelrr.reType = RT_MODEL;
ADDRLP4 532
CNSTI4 0
ASGNI4
line 324
;323:	
;324:	AnglesToAxis( cent->lerpAngles, wheelrr.axis );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRLP4 532+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 326
;325:	
;326:	if(s1->scales[0] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 0
EQF4 $363
line 327
;327:	VectorScale( wheelrr.axis[0], s1->scales[0], wheelrr.axis[0] );}
ADDRLP4 532+28
ADDRLP4 532+28
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 532+28+4
ADDRLP4 532+28+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 532+28+8
ADDRLP4 532+28+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $363
line 328
;328:	if(s1->scales[1] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
CNSTF4 0
EQF4 $375
line 329
;329:	VectorScale( wheelrr.axis[1], s1->scales[1], wheelrr.axis[1] );}
ADDRLP4 532+28+12
ADDRLP4 532+28+12
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 532+28+12+4
ADDRLP4 532+28+12+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 532+28+12+8
ADDRLP4 532+28+12+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $375
line 330
;330:	if(s1->scales[2] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 0
EQF4 $393
line 331
;331:	VectorScale( wheelrr.axis[2], s1->scales[2], wheelrr.axis[2] );}
ADDRLP4 532+28+24
ADDRLP4 532+28+24
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 532+28+24+4
ADDRLP4 532+28+24+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 532+28+24+8
ADDRLP4 532+28+24+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $393
line 333
;332:	
;333:	CG_PositionEntityOnTag( &wheelrr, &ent, ent.hModel, "tag_wheelrr");
ADDRLP4 532
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 4+8
INDIRI4
ARGI4
ADDRGP4 $412
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 336
;334:
;335:
;336:	wheelrl.frame = s1->frame;
ADDRLP4 708+80
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 337
;337:	wheelrl.oldframe = wheelrl.frame;
ADDRLP4 708+96
ADDRLP4 708+80
INDIRI4
ASGNI4
line 338
;338:	wheelrl.backlerp = 0;
ADDRLP4 708+100
CNSTF4 0
ASGNF4
line 340
;339:
;340:	VectorCopy( cent->lerpOrigin, wheelrl.origin);
ADDRLP4 708+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 341
;341:	VectorCopy( cent->lerpOrigin, wheelrl.oldorigin);
ADDRLP4 708+84
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 343
;342:	
;343:	wheelrl.hModel = trap_R_RegisterModel_MiTech( "props/v_wheel" );
ADDRGP4 $233
ARGP4
ADDRLP4 1008
ADDRGP4 trap_R_RegisterModel_MiTech
CALLI4
ASGNI4
ADDRLP4 708+8
ADDRLP4 1008
INDIRI4
ASGNI4
line 344
;344:	wheelrl.customSkin = ent.customSkin;
ADDRLP4 708+108
ADDRLP4 4+108
INDIRI4
ASGNI4
line 345
;345:	wheelrl.customShader = ent.customShader;
ADDRLP4 708+112
ADDRLP4 4+112
INDIRI4
ASGNI4
line 346
;346:	wheelrl.reType = RT_MODEL;
ADDRLP4 708
CNSTI4 0
ASGNI4
line 348
;347:	
;348:	AnglesToAxis( cent->lerpAngles, wheelrl.axis );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRLP4 708+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 350
;349:	
;350:	if(s1->scales[0] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 0
EQF4 $425
line 351
;351:	VectorScale( wheelrl.axis[0], s1->scales[0], wheelrl.axis[0] );}
ADDRLP4 708+28
ADDRLP4 708+28
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 708+28+4
ADDRLP4 708+28+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 708+28+8
ADDRLP4 708+28+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $425
line 352
;352:	if(s1->scales[1] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
CNSTF4 0
EQF4 $437
line 353
;353:	VectorScale( wheelrl.axis[1], s1->scales[1], wheelrl.axis[1] );}
ADDRLP4 708+28+12
ADDRLP4 708+28+12
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 708+28+12+4
ADDRLP4 708+28+12+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 708+28+12+8
ADDRLP4 708+28+12+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $437
line 354
;354:	if(s1->scales[2] != 0.0){
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 0
EQF4 $455
line 355
;355:	VectorScale( wheelrl.axis[2], s1->scales[2], wheelrl.axis[2] );}
ADDRLP4 708+28+24
ADDRLP4 708+28+24
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 708+28+24+4
ADDRLP4 708+28+24+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 708+28+24+8
ADDRLP4 708+28+24+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $455
line 357
;356:	
;357:	CG_PositionEntityOnTag( &wheelrl, &ent, ent.hModel, "tag_wheelrl");
ADDRLP4 708
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 4+8
INDIRI4
ARGI4
ADDRGP4 $474
ARGP4
ADDRGP4 CG_PositionEntityOnTag
CALLV
pop
line 359
;358:	
;359:	trap_R_AddRefEntityToScene (&wheelfr);
ADDRLP4 180
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 360
;360:	trap_R_AddRefEntityToScene (&wheelfl);
ADDRLP4 356
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 361
;361:	trap_R_AddRefEntityToScene (&wheelrr);
ADDRLP4 532
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 362
;362:	trap_R_AddRefEntityToScene (&wheelrl);
ADDRLP4 708
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 363
;363:	}
LABELV $222
line 364
;364:}
LABELV $108
endproc CG_General 1012 16
proc CG_Speaker 16 16
line 373
;365:
;366:/*
;367:==================
;368:CG_Speaker
;369:
;370:Speaker entities can automatically play sounds
;371:==================
;372:*/
;373:static void CG_Speaker( centity_t *cent ) {
line 374
;374:	if ( ! cent->currentState.clientNum ) {	// FIXME: use something other than clientNum...
ADDRFP4 0
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
CNSTI4 0
NEI4 $476
line 375
;375:		return;		// not auto triggering
ADDRGP4 $475
JUMPV
LABELV $476
line 378
;376:	}
;377:
;378:	if ( cg.time < cent->miscTime ) {
ADDRGP4 cg+1868892
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
INDIRI4
GEI4 $478
line 379
;379:		return;
ADDRGP4 $475
JUMPV
LABELV $478
line 382
;380:	}
;381:
;382:	trap_S_StartSound (NULL, cent->currentState.number, CHAN_ITEM, cgs.gameSounds[cent->currentState.eventParm] );
CNSTP4 0
ARGP4
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+359024
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 386
;383:
;384:	//	ent->s.frame = ent->wait * 10;
;385:	//	ent->s.clientNum = ent->random * 10;
;386:	cent->miscTime = cg.time + cent->currentState.frame * 100 + cent->currentState.clientNum * 100 * crandom();
ADDRLP4 4
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
CNSTI4 100
ASGNI4
ADDRLP4 8
INDIRP4
CNSTI4 484
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ADDRLP4 12
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDI4
CVIF4 4
ADDRLP4 12
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
MULI4
CVIF4 4
CNSTF4 1073741824
ADDRLP4 4
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 387
;387:}
LABELV $475
endproc CG_Speaker 16 16
proc CG_Item 408 16
line 394
;388:
;389:/*
;390:==================
;391:CG_Item
;392:==================
;393:*/
;394:static void CG_Item( centity_t *cent ) {
line 403
;395:	refEntity_t		ent;
;396:	entityState_t	*es;
;397:	gitem_t			*item;
;398:	int				msec;
;399:	float			frac;
;400:	float			scale;
;401:	weaponInfo_t	*wi;
;402:
;403:	es = &cent->currentState;
ADDRLP4 176
ADDRFP4 0
INDIRP4
ASGNP4
line 404
;404:	if ( es->modelindex >= bg_numItems ) {
ADDRLP4 176
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ADDRGP4 bg_numItems
INDIRI4
LTI4 $484
line 405
;405:		CG_Error( "Bad item index %i on entity", es->modelindex );
ADDRGP4 $486
ARGP4
ADDRLP4 176
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 406
;406:	}
LABELV $484
line 409
;407:
;408:	// if set to invisible, skip
;409:	if ( !es->modelindex || ( es->eFlags & EF_NODRAW ) ) {
ADDRLP4 204
CNSTI4 0
ASGNI4
ADDRLP4 176
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ADDRLP4 204
INDIRI4
EQI4 $489
ADDRLP4 176
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 128
BANDI4
ADDRLP4 204
INDIRI4
EQI4 $487
LABELV $489
line 410
;410:		return;
ADDRGP4 $483
JUMPV
LABELV $487
line 413
;411:	}
;412:
;413:	item = &bg_itemlist[ es->modelindex ];
ADDRLP4 180
CNSTI4 56
ADDRLP4 176
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist
ADDP4
ASGNP4
line 414
;414:	if ( cg_simpleItems.integer && item->giType != IT_TEAM ) {
ADDRGP4 cg_simpleItems+12
INDIRI4
CNSTI4 0
EQI4 $490
ADDRLP4 180
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
EQI4 $490
line 415
;415:		memset( &ent, 0, sizeof( ent ) );
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 416
;416:		ent.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 417
;417:		VectorCopy( cent->lerpOrigin, ent.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 418
;418:		ent.radius = 14;
ADDRLP4 0+132
CNSTF4 1096810496
ASGNF4
line 419
;419:		ent.customShader = cg_items[es->modelindex].icon;
ADDRLP4 0+112
CNSTI4 24
ADDRLP4 176
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_items+20
ADDP4
INDIRI4
ASGNI4
line 420
;420:		ent.shaderRGBA[0] = 255;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 421
;421:		ent.shaderRGBA[1] = 255;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 422
;422:		ent.shaderRGBA[2] = 255;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 423
;423:		ent.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 424
;424:		trap_R_AddRefEntityToScene(&ent);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 425
;425:		return;
ADDRGP4 $483
JUMPV
LABELV $490
line 429
;426:	}
;427:
;428:	// items bob up and down continuously
;429:if(cg_itemstyle.integer == 3){
ADDRGP4 cg_itemstyle+12
INDIRI4
CNSTI4 3
NEI4 $504
line 430
;430:	scale = 0.005 + cent->currentState.number * 0.00001;
ADDRLP4 196
CNSTF4 925353388
ADDRFP4 0
INDIRP4
INDIRI4
CVIF4 4
MULF4
CNSTF4 1000593162
ADDF4
ASGNF4
line 431
;431:	cent->lerpOrigin[2] += 4 + cos( ( cg.time + 1000 ) *  scale ) * 4;
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 1000
ADDI4
CVIF4 4
ADDRLP4 196
INDIRF4
MULF4
ARGF4
ADDRLP4 208
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 212
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
ASGNP4
ADDRLP4 212
INDIRP4
ADDRLP4 212
INDIRP4
INDIRF4
CNSTF4 1082130432
ADDRLP4 208
INDIRF4
MULF4
CNSTF4 1082130432
ADDF4
ADDF4
ASGNF4
line 432
;432:}
LABELV $504
line 434
;433:
;434:	memset (&ent, 0, sizeof(ent));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 437
;435:
;436:	// autorotate at one of two speeds
;437:	if ( item->giType == IT_HEALTH ) {
ADDRLP4 180
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 4
NEI4 $508
line 438
;438:		VectorCopy( cg.autoAnglesFast, cent->lerpAngles );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ADDRGP4 cg+1870568
INDIRB
ASGNB 12
line 439
;439:		AxisCopy( cg.autoAxisFast, ent.axis );
ADDRGP4 cg+1870580
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 440
;440:	} else {
ADDRGP4 $509
JUMPV
LABELV $508
line 441
;441:		VectorCopy( cg.autoAngles, cent->lerpAngles );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ADDRGP4 cg+1870520
INDIRB
ASGNB 12
line 442
;442:		AxisCopy( cg.autoAxis, ent.axis );
ADDRGP4 cg+1870532
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 443
;443:	}
LABELV $509
line 445
;444:
;445:	wi = NULL;
ADDRLP4 184
CNSTP4 0
ASGNP4
line 449
;446:	// the weapons have their origin where they attatch to player
;447:	// models, so we need to offset them or they will rotate
;448:	// eccentricly
;449:	if ( item->giType == IT_WEAPON ) {
ADDRLP4 180
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 1
NEI4 $516
line 450
;450:		wi = &cg_weapons[item->giTag];
ADDRLP4 184
CNSTI4 136
ADDRLP4 180
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 451
;451:		cent->lerpOrigin[0] -=
ADDRLP4 208
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
ASGNP4
ADDRLP4 208
INDIRP4
ADDRLP4 208
INDIRP4
INDIRF4
ADDRLP4 184
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0+28
INDIRF4
MULF4
ADDRLP4 184
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+28+12
INDIRF4
MULF4
ADDF4
ADDRLP4 184
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+28+24
INDIRF4
MULF4
ADDF4
SUBF4
ASGNF4
line 455
;452:			wi->weaponMidpoint[0] * ent.axis[0][0] +
;453:			wi->weaponMidpoint[1] * ent.axis[1][0] +
;454:			wi->weaponMidpoint[2] * ent.axis[2][0];
;455:		cent->lerpOrigin[1] -=
ADDRLP4 216
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
ASGNP4
ADDRLP4 216
INDIRP4
ADDRLP4 216
INDIRP4
INDIRF4
ADDRLP4 184
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0+28+4
INDIRF4
MULF4
ADDRLP4 184
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+28+12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 184
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+28+24+4
INDIRF4
MULF4
ADDF4
SUBF4
ASGNF4
line 459
;456:			wi->weaponMidpoint[0] * ent.axis[0][1] +
;457:			wi->weaponMidpoint[1] * ent.axis[1][1] +
;458:			wi->weaponMidpoint[2] * ent.axis[2][1];
;459:		cent->lerpOrigin[2] -=
ADDRLP4 224
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
ASGNP4
ADDRLP4 224
INDIRP4
ADDRLP4 224
INDIRP4
INDIRF4
ADDRLP4 184
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0+28+8
INDIRF4
MULF4
ADDRLP4 184
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+28+12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 184
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+28+24+8
INDIRF4
MULF4
ADDF4
SUBF4
ASGNF4
line 464
;460:			wi->weaponMidpoint[0] * ent.axis[0][2] +
;461:			wi->weaponMidpoint[1] * ent.axis[1][2] +
;462:			wi->weaponMidpoint[2] * ent.axis[2][2];
;463:
;464:		cent->lerpOrigin[2] += 8;	// an extra height boost
ADDRLP4 232
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
ASGNP4
ADDRLP4 232
INDIRP4
ADDRLP4 232
INDIRP4
INDIRF4
CNSTF4 1090519040
ADDF4
ASGNF4
line 465
;465:	}
LABELV $516
line 467
;466:
;467:	ent.hModel = cg_items[es->modelindex].models[0];
ADDRLP4 0+8
CNSTI4 24
ADDRLP4 176
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_items+4
ADDP4
INDIRI4
ASGNI4
line 469
;468:	
;469:	ent.reType = RT_MODEL;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 470
;470:	ent.customSkin = trap_R_RegisterSkin(va("ptex/%s/%i.skin", CG_ConfigString( CS_MODELS+es->modelindex ), es->generic2));
ADDRLP4 176
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 32
ADDI4
ARGI4
ADDRLP4 208
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRGP4 $120
ARGP4
ADDRLP4 208
INDIRP4
ARGP4
ADDRLP4 176
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 212
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 212
INDIRP4
ARGP4
ADDRLP4 216
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRLP4 0+108
ADDRLP4 216
INDIRI4
ASGNI4
line 471
;471:	if(es->generic2 > 0){			
ADDRLP4 176
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 0
LEI4 $542
line 472
;472:	ent.customShader = trap_R_RegisterShader(va("ptex/%s/%i", CG_ConfigString( CS_MODELS+es->modelindex ), es->generic2));
ADDRLP4 176
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 32
ADDI4
ARGI4
ADDRLP4 220
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRGP4 $124
ARGP4
ADDRLP4 220
INDIRP4
ARGP4
ADDRLP4 176
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 224
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 224
INDIRP4
ARGP4
ADDRLP4 228
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0+112
ADDRLP4 228
INDIRI4
ASGNI4
line 473
;473:	}					
LABELV $542
line 474
;474:	if(es->generic2 == 255){	
ADDRLP4 176
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 255
NEI4 $545
line 475
;475:	if(cg_hide255.integer){		
ADDRGP4 cg_hide255+12
INDIRI4
CNSTI4 0
EQI4 $547
line 476
;476:	ent.customShader = cgs.media.ptexShader[0];
ADDRLP4 0+112
ADDRGP4 cgs+956380+1576
INDIRI4
ASGNI4
line 477
;477:	} else {
ADDRGP4 $548
JUMPV
LABELV $547
line 478
;478:	ent.customShader = cgs.media.ptexShader[1];
ADDRLP4 0+112
ADDRGP4 cgs+956380+1576+4
INDIRI4
ASGNI4
line 479
;479:	}
LABELV $548
line 480
;480:	}
LABELV $545
line 482
;481:
;482:	VectorCopy( cent->lerpOrigin, ent.origin);
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 483
;483:	VectorCopy( cent->lerpOrigin, ent.oldorigin);
ADDRLP4 0+84
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 485
;484:
;485:	ent.nonNormalizedAxes = qfalse;
ADDRLP4 0+64
CNSTI4 0
ASGNI4
line 488
;486:
;487:	// if just respawned, slowly scale up
;488:	msec = cg.time - cent->miscTime;
ADDRLP4 192
ADDRGP4 cg+1868892
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
INDIRI4
SUBI4
ASGNI4
line 489
;489:	if ( msec >= 0 && msec < ITEM_SCALEUP_TIME ) {
ADDRLP4 192
INDIRI4
CNSTI4 0
LTI4 $561
ADDRLP4 192
INDIRI4
CVIF4 4
ADDRGP4 cg_itemscaletime+8
INDIRF4
GEF4 $561
line 490
;490:		frac = (float)msec / ITEM_SCALEUP_TIME;
ADDRLP4 188
ADDRLP4 192
INDIRI4
CVIF4 4
ADDRGP4 cg_itemscaletime+8
INDIRF4
DIVF4
ASGNF4
line 491
;491:		VectorScale( ent.axis[0], frac, ent.axis[0] );
ADDRLP4 0+28
ADDRLP4 0+28
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+4
ADDRLP4 0+28+4
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+8
ADDRLP4 0+28+8
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
line 492
;492:		VectorScale( ent.axis[1], frac, ent.axis[1] );
ADDRLP4 0+28+12
ADDRLP4 0+28+12
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+4
ADDRLP4 0+28+12+4
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+8
ADDRLP4 0+28+12+8
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
line 493
;493:		VectorScale( ent.axis[2], frac, ent.axis[2] );
ADDRLP4 0+28+24
ADDRLP4 0+28+24
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+4
ADDRLP4 0+28+24+4
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+8
ADDRLP4 0+28+24+8
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
line 494
;494:		ent.nonNormalizedAxes = qtrue;
ADDRLP4 0+64
CNSTI4 1
ASGNI4
line 495
;495:	} else {
ADDRGP4 $562
JUMPV
LABELV $561
line 496
;496:		frac = 1.0;
ADDRLP4 188
CNSTF4 1065353216
ASGNF4
line 497
;497:		if(es->scales[0] != 0.0){
ADDRLP4 176
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 0
EQF4 $608
line 498
;498:		VectorScale( ent.axis[0], es->scales[0], ent.axis[0] );}
ADDRLP4 0+28
ADDRLP4 0+28
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+4
ADDRLP4 0+28+4
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+8
ADDRLP4 0+28+8
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $608
line 499
;499:		if(es->scales[1] != 0.0){
ADDRLP4 176
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
CNSTF4 0
EQF4 $620
line 500
;500:		VectorScale( ent.axis[1], es->scales[1], ent.axis[1] );}
ADDRLP4 0+28+12
ADDRLP4 0+28+12
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+4
ADDRLP4 0+28+12+4
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+8
ADDRLP4 0+28+12+8
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $620
line 501
;501:		if(es->scales[2] != 0.0){
ADDRLP4 176
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 0
EQF4 $638
line 502
;502:		VectorScale( ent.axis[2], es->scales[2], ent.axis[2] );}
ADDRLP4 0+28+24
ADDRLP4 0+28+24
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+4
ADDRLP4 0+28+24+4
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+8
ADDRLP4 0+28+24+8
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $638
line 503
;503:	}
LABELV $562
line 507
;504:
;505:	// items without glow textures need to keep a minimum light value
;506:	// so they are always visible
;507:	if ( ( item->giType == IT_WEAPON ) ||
ADDRLP4 224
ADDRLP4 180
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ASGNI4
ADDRLP4 224
INDIRI4
CNSTI4 1
EQI4 $658
ADDRLP4 224
INDIRI4
CNSTI4 3
NEI4 $656
LABELV $658
line 508
;508:		 ( item->giType == IT_ARMOR ) ) {
line 509
;509:		ent.renderfx |= RF_MINLIGHT;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 510
;510:	}
LABELV $656
line 513
;511:
;512:	// increase the size of the weapons when they are presented as items
;513:	if ( item->giType == IT_WEAPON ) {
ADDRLP4 180
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 1
NEI4 $660
line 514
;514:		VectorScale( ent.axis[0], 1.5, ent.axis[0] );
ADDRLP4 0+28
CNSTF4 1069547520
ADDRLP4 0+28
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+4
CNSTF4 1069547520
ADDRLP4 0+28+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+8
CNSTF4 1069547520
ADDRLP4 0+28+8
INDIRF4
MULF4
ASGNF4
line 515
;515:		VectorScale( ent.axis[1], 1.5, ent.axis[1] );
ADDRLP4 0+28+12
CNSTF4 1069547520
ADDRLP4 0+28+12
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+4
CNSTF4 1069547520
ADDRLP4 0+28+12+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+8
CNSTF4 1069547520
ADDRLP4 0+28+12+8
INDIRF4
MULF4
ASGNF4
line 516
;516:		VectorScale( ent.axis[2], 1.5, ent.axis[2] );
ADDRLP4 0+28+24
CNSTF4 1069547520
ADDRLP4 0+28+24
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+4
CNSTF4 1069547520
ADDRLP4 0+28+24+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+8
CNSTF4 1069547520
ADDRLP4 0+28+24+8
INDIRF4
MULF4
ASGNF4
line 517
;517:		ent.nonNormalizedAxes = qtrue;
ADDRLP4 0+64
CNSTI4 1
ASGNI4
line 519
;518:		//trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, cgs.media.weaponHoverSound );
;519:	}
LABELV $660
line 521
;520:
;521:	if ( item->giType == IT_HOLDABLE && item->giTag == HI_KAMIKAZE ) {
ADDRLP4 180
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 6
NEI4 $705
ADDRLP4 180
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 3
NEI4 $705
line 522
;522:		VectorScale( ent.axis[0], 2, ent.axis[0] );
ADDRLP4 0+28
CNSTF4 1073741824
ADDRLP4 0+28
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+4
CNSTF4 1073741824
ADDRLP4 0+28+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+8
CNSTF4 1073741824
ADDRLP4 0+28+8
INDIRF4
MULF4
ASGNF4
line 523
;523:		VectorScale( ent.axis[1], 2, ent.axis[1] );
ADDRLP4 0+28+12
CNSTF4 1073741824
ADDRLP4 0+28+12
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+4
CNSTF4 1073741824
ADDRLP4 0+28+12+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+8
CNSTF4 1073741824
ADDRLP4 0+28+12+8
INDIRF4
MULF4
ASGNF4
line 524
;524:		VectorScale( ent.axis[2], 2, ent.axis[2] );
ADDRLP4 0+28+24
CNSTF4 1073741824
ADDRLP4 0+28+24
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+4
CNSTF4 1073741824
ADDRLP4 0+28+24+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+8
CNSTF4 1073741824
ADDRLP4 0+28+24+8
INDIRF4
MULF4
ASGNF4
line 525
;525:		ent.nonNormalizedAxes = qtrue;
ADDRLP4 0+64
CNSTI4 1
ASGNI4
line 526
;526:	}
LABELV $705
line 529
;527:
;528:	// add to refresh list
;529:	trap_R_AddRefEntityToScene(&ent);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 531
;530:
;531:	if ( item->giType == IT_WEAPON && wi->barrelModel ) {
ADDRLP4 180
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 1
NEI4 $750
ADDRLP4 184
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $750
line 534
;532:		refEntity_t	barrel;
;533:
;534:		memset( &barrel, 0, sizeof( barrel ) );
ADDRLP4 232
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 536
;535:
;536:		barrel.hModel = wi->barrelModel;
ADDRLP4 232+8
ADDRLP4 184
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ASGNI4
line 538
;537:
;538:		VectorCopy( ent.lightingOrigin, barrel.lightingOrigin );
ADDRLP4 232+12
ADDRLP4 0+12
INDIRB
ASGNB 12
line 539
;539:		barrel.shadowPlane = ent.shadowPlane;
ADDRLP4 232+24
ADDRLP4 0+24
INDIRF4
ASGNF4
line 540
;540:		barrel.renderfx = ent.renderfx;
ADDRLP4 232+4
ADDRLP4 0+4
INDIRI4
ASGNI4
line 542
;541:
;542:		CG_PositionRotatedEntityOnTag( &barrel, &ent, wi->weaponModel, "tag_barrel" );
ADDRLP4 232
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 184
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ARGI4
ADDRGP4 $759
ARGP4
ADDRGP4 CG_PositionRotatedEntityOnTag
CALLV
pop
line 544
;543:
;544:		AxisCopy( ent.axis, barrel.axis );
ADDRLP4 0+28
ARGP4
ADDRLP4 232+28
ARGP4
ADDRGP4 AxisCopy
CALLV
pop
line 545
;545:		barrel.nonNormalizedAxes = ent.nonNormalizedAxes;
ADDRLP4 232+64
ADDRLP4 0+64
INDIRI4
ASGNI4
line 547
;546:
;547:		trap_R_AddRefEntityToScene( &barrel );
ADDRLP4 232
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 548
;548:	}
LABELV $750
line 551
;549:
;550:	// accompanying rings / spheres for powerups
;551:	if ( !cg_simpleItems.integer )
ADDRGP4 cg_simpleItems+12
INDIRI4
CNSTI4 0
NEI4 $764
line 552
;552:	{
line 555
;553:		vec3_t spinAngles;
;554:
;555:		VectorClear( spinAngles );
ADDRLP4 244
CNSTF4 0
ASGNF4
ADDRLP4 232+8
ADDRLP4 244
INDIRF4
ASGNF4
ADDRLP4 232+4
ADDRLP4 244
INDIRF4
ASGNF4
ADDRLP4 232
ADDRLP4 244
INDIRF4
ASGNF4
line 557
;556:
;557:		if ( item->giType == IT_HEALTH || item->giType == IT_POWERUP )
ADDRLP4 248
ADDRLP4 180
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ASGNI4
ADDRLP4 248
INDIRI4
CNSTI4 4
EQI4 $771
ADDRLP4 248
INDIRI4
CNSTI4 5
NEI4 $769
LABELV $771
line 558
;558:		{
line 559
;559:			if ( ( ent.hModel = cg_items[es->modelindex].models[1] ) != 0 )
ADDRLP4 252
CNSTI4 24
ADDRLP4 176
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_items+4+4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 252
INDIRI4
ASGNI4
ADDRLP4 252
INDIRI4
CNSTI4 0
EQI4 $772
line 560
;560:			{
line 561
;561:				if ( item->giType == IT_POWERUP )
ADDRLP4 180
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 5
NEI4 $777
line 562
;562:				{
line 563
;563:					ent.origin[2] += 12;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1094713344
ADDF4
ASGNF4
line 564
;564:					spinAngles[1] = ( cg.time & 1023 ) * 360 / -1024.0f;
ADDRLP4 232+4
CNSTI4 360
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 1023
BANDI4
MULI4
CVIF4 4
CNSTF4 3296722944
DIVF4
ASGNF4
line 565
;565:				}
LABELV $777
line 566
;566:				AnglesToAxis( spinAngles, ent.axis );
ADDRLP4 232
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 569
;567:
;568:				// scale up if respawning
;569:				if ( frac != 1.0 ) {
ADDRLP4 188
INDIRF4
CNSTF4 1065353216
EQF4 $784
line 570
;570:					VectorScale( ent.axis[0], frac, ent.axis[0] );
ADDRLP4 0+28
ADDRLP4 0+28
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+4
ADDRLP4 0+28+4
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+8
ADDRLP4 0+28+8
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
line 571
;571:					VectorScale( ent.axis[1], frac, ent.axis[1] );
ADDRLP4 0+28+12
ADDRLP4 0+28+12
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+4
ADDRLP4 0+28+12+4
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+8
ADDRLP4 0+28+12+8
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
line 572
;572:					VectorScale( ent.axis[2], frac, ent.axis[2] );
ADDRLP4 0+28+24
ADDRLP4 0+28+24
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+4
ADDRLP4 0+28+24+4
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+8
ADDRLP4 0+28+24+8
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ASGNF4
line 573
;573:					ent.nonNormalizedAxes = qtrue;
ADDRLP4 0+64
CNSTI4 1
ASGNI4
line 574
;574:				}
LABELV $784
line 575
;575:				trap_R_AddRefEntityToScene( &ent );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 576
;576:			}
LABELV $772
line 577
;577:		}
LABELV $769
line 578
;578:	}
LABELV $764
line 579
;579:}
LABELV $483
endproc CG_Item 408 16
proc CG_Missile 200 20
line 588
;580:
;581://============================================================================
;582:
;583:/*
;584:===============
;585:CG_Missile
;586:===============
;587:*/
;588:static void CG_Missile( centity_t *cent ) {
line 594
;589:	refEntity_t			ent;
;590:	entityState_t		*s1;
;591:	const weaponInfo_t		*weapon;
;592://	int	col;
;593:
;594:	s1 = &cent->currentState;
ADDRLP4 180
ADDRFP4 0
INDIRP4
ASGNP4
line 595
;595:	if ( s1->generic3 > WEAPONS_NUM ) {
ADDRLP4 180
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 19
LEI4 $830
line 596
;596:		s1->generic3 = 0;
ADDRLP4 180
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 0
ASGNI4
line 597
;597:	}
LABELV $830
line 598
;598:	weapon = &cg_weapons[s1->generic3];
ADDRLP4 176
CNSTI4 136
ADDRLP4 180
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 601
;599:
;600:	// calculate the axis
;601:	VectorCopy( s1->angles, cent->lerpAngles);
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ADDRLP4 180
INDIRP4
CNSTI4 128
ADDP4
INDIRB
ASGNB 12
line 604
;602:
;603:	// add trails
;604:	if ( weapon->missileTrailFunc )
ADDRLP4 176
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $832
line 605
;605:	{
line 606
;606:		weapon->missileTrailFunc( cent, weapon );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRLP4 176
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
CALLV
pop
line 607
;607:	}
LABELV $832
line 626
;608:/*
;609:	if ( cent->currentState.modelindex == TEAM_RED ) {
;610:		col = 1;
;611:	}
;612:	else if ( cent->currentState.modelindex == TEAM_BLUE ) {
;613:		col = 2;
;614:	}
;615:	else {
;616:		col = 0;
;617:	}
;618:
;619:	// add dynamic light
;620:	if ( weapon->missileDlight ) {
;621:		trap_R_AddLightToScene(cent->lerpOrigin, weapon->missileDlight,
;622:			weapon->missileDlightColor[col][0], weapon->missileDlightColor[col][1], weapon->missileDlightColor[col][2] );
;623:	}
;624:*/
;625:	// add dynamic light
;626:	if ( weapon->missileDlight ) {
ADDRLP4 176
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
CNSTF4 0
EQF4 $834
line 627
;627:		trap_R_AddLightToScene(cent->lerpOrigin, weapon->missileDlight,
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
ARGP4
ADDRLP4 176
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ARGF4
ADDRLP4 176
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ARGF4
ADDRLP4 176
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
ARGF4
ADDRLP4 176
INDIRP4
CNSTI4 104
ADDP4
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 629
;628:			weapon->missileDlightColor[0], weapon->missileDlightColor[1], weapon->missileDlightColor[2] );
;629:	}
LABELV $834
line 632
;630:
;631:	// add missile sound
;632:	if ( weapon->missileSound ) {
ADDRLP4 176
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 0
EQI4 $836
line 635
;633:		vec3_t	velocity;
;634:
;635:		BG_EvaluateTrajectoryDelta( &cent->currentState.pos, cg.time, velocity );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 184
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 637
;636:
;637:		trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, velocity, weapon->missileSound );
ADDRLP4 196
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
INDIRP4
INDIRI4
ARGI4
ADDRLP4 196
INDIRP4
CNSTI4 816
ADDP4
ARGP4
ADDRLP4 184
ARGP4
ADDRLP4 176
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 638
;638:	}
LABELV $836
line 641
;639:
;640:	// create the render entity
;641:	memset (&ent, 0, sizeof(ent));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 642
;642:	VectorCopy( cent->lerpOrigin, ent.origin);
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 643
;643:	VectorCopy( cent->lerpOrigin, ent.oldorigin);
ADDRLP4 0+84
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 645
;644:
;645:	if ( cent->currentState.generic3 == WP_PLASMAGUN ) {
ADDRFP4 0
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 8
NEI4 $841
line 646
;646:		ent.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 647
;647:		ent.radius = 16;
ADDRLP4 0+132
CNSTF4 1098907648
ASGNF4
line 648
;648:		ent.rotation = 0;
ADDRLP4 0+136
CNSTF4 0
ASGNF4
line 649
;649:		ent.customShader = cgs.media.plasmaBallShader;
ADDRLP4 0+112
ADDRGP4 cgs+956380+1284
INDIRI4
ASGNI4
line 650
;650:		trap_R_AddRefEntityToScene( &ent );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 651
;651:		return;
ADDRGP4 $829
JUMPV
LABELV $841
line 653
;652:	}
;653:	if ( cent->currentState.generic3 == WP_FLAMETHROWER ) {
ADDRFP4 0
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 14
NEI4 $848
line 654
;654:		ent.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 655
;655:		ent.radius = 20;
ADDRLP4 0+132
CNSTF4 1101004800
ASGNF4
line 656
;656:		ent.rotation = 1;
ADDRLP4 0+136
CNSTF4 1065353216
ASGNF4
line 657
;657:		ent.customShader = cgs.media.flameBallShader;
ADDRLP4 0+112
ADDRGP4 cgs+956380+1288
INDIRI4
ASGNI4
line 658
;658:		trap_R_AddRefEntityToScene( &ent );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 659
;659:		return;
ADDRGP4 $829
JUMPV
LABELV $848
line 662
;660:	}
;661:
;662:	if ( cent->currentState.generic3 == WP_ANTIMATTER ) {
ADDRFP4 0
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 15
NEI4 $855
line 663
;663:		ent.reType = RT_SPRITE;
ADDRLP4 0
CNSTI4 2
ASGNI4
line 664
;664:		ent.radius = 50;
ADDRLP4 0+132
CNSTF4 1112014848
ASGNF4
line 665
;665:		ent.rotation = 1;
ADDRLP4 0+136
CNSTF4 1065353216
ASGNF4
line 666
;666:		ent.customShader = cgs.media.antimatterBallShader;
ADDRLP4 0+112
ADDRGP4 cgs+956380+1292
INDIRI4
ASGNI4
line 667
;667:		trap_R_AddRefEntityToScene( &ent );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 668
;668:		return;
ADDRGP4 $829
JUMPV
LABELV $855
line 672
;669:	}
;670:	
;671:	// flicker between two skins
;672:	ent.skinNum = cg.clientFrame & 1;
ADDRLP4 0+104
ADDRGP4 cg
INDIRI4
CNSTI4 1
BANDI4
ASGNI4
line 673
;673:	ent.hModel = weapon->missileModel;
ADDRLP4 0+8
ADDRLP4 176
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ASGNI4
line 674
;674:	ent.renderfx = weapon->missileRenderfx | RF_NOSHADOW;
ADDRLP4 0+4
ADDRLP4 176
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 64
BORI4
ASGNI4
line 677
;675:
;676:
;677:	if ( cent->currentState.generic3 == WP_PROX_LAUNCHER ) {
ADDRFP4 0
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 12
NEI4 $865
line 678
;678:		if (s1->generic1 == TEAM_BLUE) {
ADDRLP4 180
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
CNSTI4 2
NEI4 $867
line 679
;679:			ent.hModel = cgs.media.blueProxMine;
ADDRLP4 0+8
ADDRGP4 cgs+956380+1388
INDIRI4
ASGNI4
line 680
;680:		}
LABELV $867
line 681
;681:	}
LABELV $865
line 685
;682:
;683:
;684:	// convert direction of travel into axis
;685:	if ( VectorNormalize2( s1->pos.trDelta, ent.axis[0] ) == 0 ) {
ADDRLP4 180
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRLP4 184
ADDRGP4 VectorNormalize2
CALLF4
ASGNF4
ADDRLP4 184
INDIRF4
CNSTF4 0
NEF4 $872
line 686
;686:		ent.axis[0][2] = 1;
ADDRLP4 0+28+8
CNSTF4 1065353216
ASGNF4
line 687
;687:	}
LABELV $872
line 690
;688:
;689:	// spin as it moves
;690:	if ( s1->pos.trType != TR_STATIONARY ) {
ADDRLP4 180
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
EQI4 $877
line 691
;691:		RotateAroundDirection( ent.axis, cg.time / 4 );
ADDRLP4 0+28
ARGP4
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 4
DIVI4
CVIF4 4
ARGF4
ADDRGP4 RotateAroundDirection
CALLV
pop
line 692
;692:	} else {
ADDRGP4 $878
JUMPV
LABELV $877
line 694
;693:
;694:		if ( s1->generic3 == WP_PROX_LAUNCHER ) {
ADDRLP4 180
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 12
NEI4 $881
line 695
;695:			AnglesToAxis( cent->lerpAngles, ent.axis );
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 696
;696:		}
ADDRGP4 $882
JUMPV
LABELV $881
line 699
;697:		else
;698:
;699:		{
line 700
;700:			RotateAroundDirection( ent.axis, s1->time );
ADDRLP4 0+28
ARGP4
ADDRLP4 180
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 RotateAroundDirection
CALLV
pop
line 701
;701:		}
LABELV $882
line 702
;702:	}
LABELV $878
line 705
;703:
;704:	// add to refresh list, possibly with quad glow
;705:	CG_AddRefEntityWithPowerups( &ent, s1, TEAM_FREE, qtrue );
ADDRLP4 0
ARGP4
ADDRLP4 180
INDIRP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 CG_AddRefEntityWithPowerups
CALLV
pop
line 706
;706:}
LABELV $829
endproc CG_Missile 200 20
proc CG_Grapple 188 16
line 715
;707:
;708:/*
;709:===============
;710:CG_Grapple
;711:
;712:This is called when the grapple is sitting up against the wall
;713:===============
;714:*/
;715:static void CG_Grapple( centity_t *cent ) {
line 720
;716:	refEntity_t			ent;
;717:	entityState_t		*s1;
;718:	const weaponInfo_t		*weapon;
;719:
;720:	s1 = &cent->currentState;
ADDRLP4 176
ADDRFP4 0
INDIRP4
ASGNP4
line 721
;721:	if ( s1->generic3 > WEAPONS_NUM ) {
ADDRLP4 176
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 19
LEI4 $886
line 722
;722:		s1->generic3 = 0;
ADDRLP4 176
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 0
ASGNI4
line 723
;723:	}
LABELV $886
line 724
;724:	weapon = &cg_weapons[s1->generic3];
ADDRLP4 180
CNSTI4 136
ADDRLP4 176
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_weapons
ADDP4
ASGNP4
line 727
;725:
;726:	// calculate the axis
;727:	VectorCopy( s1->angles, cent->lerpAngles);
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ADDRLP4 176
INDIRP4
CNSTI4 128
ADDP4
INDIRB
ASGNB 12
line 731
;728:
;729: // FIXME add grapple pull sound here..?
;730:	// add missile sound
;731:	if ( weapon->missileSound ) {
ADDRLP4 180
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 0
EQI4 $888
line 732
;732:		trap_S_AddLoopingSound( cent->currentState.number, cent->lerpOrigin, vec3_origin, weapon->missileSound );
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 184
INDIRP4
INDIRI4
ARGI4
ADDRLP4 184
INDIRP4
CNSTI4 816
ADDP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 180
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_S_AddLoopingSound
CALLV
pop
line 733
;733:	}
LABELV $888
line 737
;734:
;735:
;736:	// Will draw cable if needed
;737:	CG_GrappleTrail ( cent, weapon );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 180
INDIRP4
ARGP4
ADDRGP4 CG_GrappleTrail
CALLV
pop
line 740
;738:
;739:	// create the render entity
;740:	memset (&ent, 0, sizeof(ent));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 741
;741:	VectorCopy( cent->lerpOrigin, ent.origin);
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 742
;742:	VectorCopy( cent->lerpOrigin, ent.oldorigin);
ADDRLP4 0+84
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 745
;743:
;744:	// flicker between two skins
;745:	ent.skinNum = cg.clientFrame & 1;
ADDRLP4 0+104
ADDRGP4 cg
INDIRI4
CNSTI4 1
BANDI4
ASGNI4
line 746
;746:	ent.hModel = weapon->missileModel;
ADDRLP4 0+8
ADDRLP4 180
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
ASGNI4
line 747
;747:	ent.renderfx = weapon->missileRenderfx | RF_NOSHADOW;
ADDRLP4 0+4
ADDRLP4 180
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 64
BORI4
ASGNI4
line 750
;748:
;749:	// convert direction of travel into axis
;750:	if ( VectorNormalize2( s1->pos.trDelta, ent.axis[0] ) == 0 ) {
ADDRLP4 176
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRLP4 184
ADDRGP4 VectorNormalize2
CALLF4
ASGNF4
ADDRLP4 184
INDIRF4
CNSTF4 0
NEF4 $895
line 751
;751:		ent.axis[0][2] = 1;
ADDRLP4 0+28+8
CNSTF4 1065353216
ASGNF4
line 752
;752:	}
LABELV $895
line 754
;753:
;754:	trap_R_AddRefEntityToScene( &ent );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 755
;755:}
LABELV $885
endproc CG_Grapple 188 16
proc CG_Weather 8 12
line 761
;756:/*
;757:==================
;758:CG_Weather
;759:==================
;760:*/
;761:static void CG_Weather( centity_t *cent ) {
line 764
;762:	entityState_t		*s1;
;763:
;764:	s1 = &cent->currentState;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
line 767
;765:
;766://	CG_EffectParse( "T=RAIN,B=5 10,C=0.5,G=0.5 2,BV=0,GV=0 100,W=1 2,D=300" );
;767:	CG_Atmospheric_SetParticles( s1->weapon, s1->powerups, s1->legsAnim );
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 208
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Atmospheric_SetParticles
CALLV
pop
line 768
;768:}
LABELV $900
endproc CG_Weather 8 12
proc CG_Mover 296 12
line 774
;769:/*
;770:===============
;771:CG_Mover
;772:===============
;773:*/
;774:static void CG_Mover(centity_t *cent) {
line 782
;775:    refEntity_t ent;
;776:    entityState_t *s1;
;777:    char modelname[MAX_QPATH];
;778:    int len;
;779:	int		cl;
;780:	int		r, g, b;
;781:
;782:    s1 = &cent->currentState;
ADDRLP4 176
ADDRFP4 0
INDIRP4
ASGNP4
line 785
;783:
;784:    // create the render entity
;785:    memset(&ent, 0, sizeof(ent));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 786
;786:    VectorCopy(cent->lerpOrigin, ent.origin);
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 787
;787:    VectorCopy(cent->lerpOrigin, ent.oldorigin);
ADDRLP4 0+84
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 788
;788:    AnglesToAxis(cent->lerpAngles, ent.axis);
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 790
;789:
;790:    ent.renderfx = RF_NOSHADOW;
ADDRLP4 0+4
CNSTI4 64
ASGNI4
line 793
;791:
;792:    // get the model, either as a bmodel or a modelindex
;793:    if (s1->solid == SOLID_BMODEL) {
ADDRLP4 176
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 16777215
NEI4 $906
line 794
;794:        ent.hModel = cgs.inlineDrawModel[s1->modelindex];
ADDRLP4 0+8
ADDRLP4 176
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+375412
ADDP4
INDIRI4
ASGNI4
line 795
;795:    } else {
ADDRGP4 $907
JUMPV
LABELV $906
line 796
;796:        ent.hModel = cgs.gameModels[s1->modelindex];
ADDRLP4 0+8
ADDRLP4 176
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+342640
ADDP4
INDIRI4
ASGNI4
line 797
;797:    }
LABELV $907
line 799
;798:	
;799:	cl = cent->currentState.constantLight;
ADDRLP4 248
ADDRFP4 0
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
ASGNI4
line 800
;800:	r = (cl & 0xFF);
ADDRLP4 252
ADDRLP4 248
INDIRI4
CNSTI4 255
BANDI4
ASGNI4
line 801
;801:	g = ((cl >> 8) & 0xFF);
ADDRLP4 256
ADDRLP4 248
INDIRI4
CNSTI4 8
RSHI4
CNSTI4 255
BANDI4
ASGNI4
line 802
;802:	b = ((cl >> 16) & 0xFF);
ADDRLP4 260
ADDRLP4 248
INDIRI4
CNSTI4 16
RSHI4
CNSTI4 255
BANDI4
ASGNI4
line 803
;803:	ent.shaderRGBA[0] = r;
ADDRLP4 0+116
ADDRLP4 252
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 804
;804:	ent.shaderRGBA[1] = g;
ADDRLP4 0+116+1
ADDRLP4 256
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 805
;805:	ent.shaderRGBA[2] = b;
ADDRLP4 0+116+2
ADDRLP4 260
INDIRI4
CVIU4 4
CVUU1 4
ASGNU1
line 806
;806:	ent.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 809
;807:
;808:    // Get the model name
;809:    Q_strncpyz(modelname, CG_ConfigString(CS_MODELS + s1->modelindex), sizeof(modelname));
ADDRLP4 176
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 32
ADDI4
ARGI4
ADDRLP4 264
ADDRGP4 CG_ConfigString
CALLP4
ASGNP4
ADDRLP4 180
ARGP4
ADDRLP4 264
INDIRP4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 Q_strncpyz
CALLV
pop
line 812
;810:
;811:    // Strip extension
;812:    len = strlen(modelname);
ADDRLP4 180
ARGP4
ADDRLP4 268
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 244
ADDRLP4 268
INDIRI4
ASGNI4
line 813
;813:    if (len > 4 && !Q_stricmp(modelname + len - 4, ".md3")) {
ADDRLP4 244
INDIRI4
CNSTI4 4
LEI4 $919
ADDRLP4 244
INDIRI4
ADDRLP4 180-4
ADDP4
ARGP4
ADDRGP4 $922
ARGP4
ADDRLP4 276
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 276
INDIRI4
CNSTI4 0
NEI4 $919
line 814
;814:        modelname[len - 4] = '\0';
ADDRLP4 244
INDIRI4
ADDRLP4 180-4
ADDP4
CNSTI1 0
ASGNI1
line 815
;815:    }
LABELV $919
line 817
;816:
;817:    ent.reType = RT_MODEL;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 819
;818:
;819:    if (len > 0) {
ADDRLP4 244
INDIRI4
CNSTI4 0
LEI4 $924
line 820
;820:        ent.customSkin = trap_R_RegisterSkin(va("ptex/%s/%i.skin", modelname, s1->generic2));
ADDRGP4 $120
ARGP4
ADDRLP4 180
ARGP4
ADDRLP4 176
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 280
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 280
INDIRP4
ARGP4
ADDRLP4 284
ADDRGP4 trap_R_RegisterSkin
CALLI4
ASGNI4
ADDRLP4 0+108
ADDRLP4 284
INDIRI4
ASGNI4
line 821
;821:        if (s1->generic2 > 0) {
ADDRLP4 176
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 0
LEI4 $927
line 822
;822:            ent.customShader = trap_R_RegisterShader(va("ptex/%s/%i", modelname, s1->generic2));
ADDRGP4 $124
ARGP4
ADDRLP4 180
ARGP4
ADDRLP4 176
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
ARGI4
ADDRLP4 288
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 288
INDIRP4
ARGP4
ADDRLP4 292
ADDRGP4 trap_R_RegisterShader
CALLI4
ASGNI4
ADDRLP4 0+112
ADDRLP4 292
INDIRI4
ASGNI4
line 823
;823:        }
LABELV $927
line 824
;824:        if (s1->generic2 == 255) {
ADDRLP4 176
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 255
NEI4 $930
line 825
;825:            if (cg_hide255.integer) {
ADDRGP4 cg_hide255+12
INDIRI4
CNSTI4 0
EQI4 $932
line 826
;826:                ent.customShader = cgs.media.ptexShader[0];
ADDRLP4 0+112
ADDRGP4 cgs+956380+1576
INDIRI4
ASGNI4
line 827
;827:            } else {
ADDRGP4 $933
JUMPV
LABELV $932
line 828
;828:                ent.customShader = cgs.media.ptexShader[1];
ADDRLP4 0+112
ADDRGP4 cgs+956380+1576+4
INDIRI4
ASGNI4
line 829
;829:            }
LABELV $933
line 830
;830:        }
LABELV $930
line 831
;831:    }
LABELV $924
line 833
;832:	
;833:	if(s1->scales[0] != 0.0){
ADDRLP4 176
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
CNSTF4 0
EQF4 $942
line 834
;834:	VectorScale( ent.axis[0], s1->scales[0], ent.axis[0] );}
ADDRLP4 0+28
ADDRLP4 0+28
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+4
ADDRLP4 0+28+4
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+8
ADDRLP4 0+28+8
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 116
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $942
line 835
;835:	if(s1->scales[1] != 0.0){
ADDRLP4 176
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
CNSTF4 0
EQF4 $954
line 836
;836:	VectorScale( ent.axis[1], s1->scales[1], ent.axis[1] );}
ADDRLP4 0+28+12
ADDRLP4 0+28+12
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+4
ADDRLP4 0+28+12+4
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+8
ADDRLP4 0+28+12+8
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 120
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $954
line 837
;837:	if(s1->scales[2] != 0.0){
ADDRLP4 176
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
CNSTF4 0
EQF4 $972
line 838
;838:	VectorScale( ent.axis[2], s1->scales[2], ent.axis[2] );}
ADDRLP4 0+28+24
ADDRLP4 0+28+24
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+4
ADDRLP4 0+28+24+4
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+8
ADDRLP4 0+28+24+8
INDIRF4
ADDRLP4 176
INDIRP4
CNSTI4 124
ADDP4
INDIRF4
MULF4
ASGNF4
LABELV $972
line 841
;839:
;840:    // add to refresh list
;841:    trap_R_AddRefEntityToScene(&ent);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 844
;842:
;843:    // add the secondary model
;844:    if (s1->modelindex2) {
ADDRLP4 176
INDIRP4
CNSTI4 176
ADDP4
INDIRI4
CNSTI4 0
EQI4 $990
line 845
;845:        ent.skinNum = 0;
ADDRLP4 0+104
CNSTI4 0
ASGNI4
line 846
;846:        ent.hModel = cgs.gameModels[s1->modelindex2];
ADDRLP4 0+8
ADDRLP4 176
INDIRP4
CNSTI4 176
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 cgs+342640
ADDP4
INDIRI4
ASGNI4
line 847
;847:        trap_R_AddRefEntityToScene(&ent);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 848
;848:    }
LABELV $990
line 849
;849:}
LABELV $901
endproc CG_Mover 296 12
export CG_Beam
proc CG_Beam 204 36
line 859
;850:
;851:
;852:/*
;853:===============
;854:CG_Beam
;855:
;856:Also called as an event
;857:===============
;858:*/
;859:void CG_Beam( centity_t *cent ) {
line 863
;860:	refEntity_t			ent;
;861:	entityState_t		*s1;
;862:
;863:	s1 = &cent->currentState;
ADDRLP4 176
ADDRFP4 0
INDIRP4
ASGNP4
line 866
;864:
;865:	// create the render entity
;866:	memset(&ent, 0, sizeof(ent));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 867
;867:	VectorCopy(s1->pos.trBase, ent.origin);
ADDRLP4 0+68
ADDRLP4 176
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 868
;868:	VectorCopy(s1->origin2, ent.oldorigin);
ADDRLP4 0+84
ADDRLP4 176
INDIRP4
CNSTI4 104
ADDP4
INDIRB
ASGNB 12
line 869
;869:	AxisClear(ent.axis);
ADDRLP4 0+28
ARGP4
ADDRGP4 AxisClear
CALLV
pop
line 870
;870:	ent.reType = RT_RAIL_CORE;
ADDRLP4 0
CNSTI4 4
ASGNI4
line 871
;871:	ent.customShader = cgs.media.railCoreShader;
ADDRLP4 0+112
ADDRGP4 cgs+956380+436
INDIRI4
ASGNI4
line 872
;872:	ent.shaderRGBA[0] = s1->constantLight & 255;
ADDRLP4 0+116
ADDRLP4 176
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CNSTI4 255
BANDI4
CVIU4 4
CVUU1 4
ASGNU1
line 873
;873:	ent.shaderRGBA[1] = (s1->constantLight >> 8) & 255;
ADDRLP4 0+116+1
ADDRLP4 176
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CNSTI4 8
RSHI4
CNSTI4 255
BANDI4
CVIU4 4
CVUU1 4
ASGNU1
line 874
;874:	ent.shaderRGBA[2] = (s1->constantLight >> 16) & 255;
ADDRLP4 0+116+2
ADDRLP4 176
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CNSTI4 16
RSHI4
CNSTI4 255
BANDI4
CVIU4 4
CVUU1 4
ASGNU1
line 875
;875:	ent.shaderRGBA[3] = 255;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 877
;876:
;877:	ent.renderfx = RF_NOSHADOW;
ADDRLP4 0+4
CNSTI4 64
ASGNI4
line 880
;878:
;879:	// add to refresh list
;880:	trap_R_AddRefEntityToScene(&ent);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 883
;881:
;882:	//CG_Particles(origin, count, speed, lifetime, radius, type, r, g, b)
;883:	CG_Particles(s1->origin2, 1, (int)((random() * 50) + 50), 300, 3, PT_GRAVITY, 255, (byte)((random() * 155) + 100), 0);
ADDRLP4 184
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 188
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 192
CNSTF4 1125842944
ADDRLP4 188
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1120403456
ADDF4
ASGNF4
ADDRLP4 196
CNSTF4 1325400064
ASGNF4
ADDRLP4 192
INDIRF4
ADDRLP4 196
INDIRF4
LTF4 $1011
ADDRLP4 180
ADDRLP4 192
INDIRF4
ADDRLP4 196
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1012
JUMPV
LABELV $1011
ADDRLP4 180
ADDRLP4 192
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1012
ADDRLP4 176
INDIRP4
CNSTI4 104
ADDP4
ARGP4
CNSTI4 1
ARGI4
CNSTF4 1112014848
ADDRLP4 184
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
CNSTF4 1112014848
ADDF4
CVFI4 4
ARGI4
CNSTI4 300
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 200
CNSTI4 0
ASGNI4
ADDRLP4 200
INDIRI4
ARGI4
CNSTI4 255
ARGI4
ADDRLP4 180
INDIRU4
CVUU1 4
CVUI4 1
ARGI4
ADDRLP4 200
INDIRI4
ARGI4
ADDRGP4 CG_Particles
CALLI4
pop
line 884
;884:}
LABELV $995
endproc CG_Beam 204 36
proc CG_Portal 180 12
line 892
;885:
;886:
;887:/*
;888:===============
;889:CG_Portal
;890:===============
;891:*/
;892:static void CG_Portal( centity_t *cent ) {
line 896
;893:	refEntity_t			ent;
;894:	entityState_t		*s1;
;895:
;896:	s1 = &cent->currentState;
ADDRLP4 176
ADDRFP4 0
INDIRP4
ASGNP4
line 899
;897:
;898:	// create the render entity
;899:	memset (&ent, 0, sizeof(ent));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 900
;900:	VectorCopy( cent->lerpOrigin, ent.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 901
;901:	VectorCopy( s1->origin2, ent.oldorigin );
ADDRLP4 0+84
ADDRLP4 176
INDIRP4
CNSTI4 104
ADDP4
INDIRB
ASGNB 12
line 902
;902:	ByteToDir( s1->eventParm, ent.axis[0] );
ADDRLP4 176
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
ARGI4
ADDRLP4 0+28
ARGP4
ADDRGP4 ByteToDir
CALLV
pop
line 903
;903:	PerpendicularVector( ent.axis[1], ent.axis[0] );
ADDRLP4 0+28+12
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 PerpendicularVector
CALLV
pop
line 907
;904:
;905:	// negating this tends to get the directions like they want
;906:	// we really should have a camera roll value
;907:	VectorSubtract( vec3_origin, ent.axis[1], ent.axis[1] );
ADDRLP4 0+28+12
ADDRGP4 vec3_origin
INDIRF4
ADDRLP4 0+28+12
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+28+12+4
ADDRGP4 vec3_origin+4
INDIRF4
ADDRLP4 0+28+12+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+28+12+8
ADDRGP4 vec3_origin+8
INDIRF4
ADDRLP4 0+28+12+8
INDIRF4
SUBF4
ASGNF4
line 909
;908:
;909:	CrossProduct( ent.axis[0], ent.axis[1], ent.axis[2] );
ADDRLP4 0+28
ARGP4
ADDRLP4 0+28+12
ARGP4
ADDRLP4 0+28+24
ARGP4
ADDRGP4 CrossProduct
CALLV
pop
line 910
;910:	ent.reType = RT_PORTALSURFACE;
ADDRLP4 0
CNSTI4 7
ASGNI4
line 911
;911:	ent.oldframe = s1->powerups;
ADDRLP4 0+96
ADDRLP4 176
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ASGNI4
line 912
;912:	ent.frame = s1->frame;		// rotation speed
ADDRLP4 0+80
ADDRLP4 176
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ASGNI4
line 913
;913:	ent.skinNum = s1->clientNum/256.0 * 360;	// roll offset
ADDRLP4 0+104
CNSTF4 1135869952
ADDRLP4 176
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1132462080
DIVF4
MULF4
CVFI4 4
ASGNI4
line 916
;914:
;915:	// add to refresh list
;916:	trap_R_AddRefEntityToScene(&ent);
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 917
;917:}
LABELV $1013
endproc CG_Portal 180 12
export CG_AdjustPositionForMover
proc CG_AdjustPositionForMover 92 12
line 927
;918:
;919:
;920:/*
;921:=========================
;922:CG_AdjustPositionForMover
;923:
;924:Also called by client movement prediction code
;925:=========================
;926:*/
;927:void CG_AdjustPositionForMover( const vec3_t in, int moverNum, int fromTime, int toTime, vec3_t out ) {
line 932
;928:	centity_t	*cent;
;929:	vec3_t	oldOrigin, origin, deltaOrigin;
;930:	vec3_t	oldAngles, angles, deltaAngles;
;931:
;932:	if ( moverNum <= 0 || moverNum >= ENTITYNUM_MAX_NORMAL ) {
ADDRLP4 76
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
LEI4 $1049
ADDRLP4 76
INDIRI4
CNSTI4 4093
LTI4 $1047
LABELV $1049
line 933
;933:		VectorCopy( in, out );
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 934
;934:		return;
ADDRGP4 $1046
JUMPV
LABELV $1047
line 937
;935:	}
;936:
;937:	cent = &cg_entities[ moverNum ];
ADDRLP4 0
CNSTI4 928
ADDRFP4 4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 938
;938:	if ( cent->currentState.eType != ET_MOVER ) {
ADDRLP4 80
CNSTI4 4
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
EQI4 $1050
line 939
;939:		VectorCopy( in, out );
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 940
;940:		return;
ADDRGP4 $1046
JUMPV
LABELV $1050
line 943
;941:	}
;942:
;943:	BG_EvaluateTrajectory( &cent->currentState.pos, fromTime, oldOrigin );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 16
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 944
;944:	BG_EvaluateTrajectory( &cent->currentState.apos, fromTime, oldAngles );
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 40
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 946
;945:
;946:	BG_EvaluateTrajectory( &cent->currentState.pos, toTime, origin );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 28
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 947
;947:	BG_EvaluateTrajectory( &cent->currentState.apos, toTime, angles );
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRLP4 52
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 949
;948:
;949:	VectorSubtract( origin, oldOrigin, deltaOrigin );
ADDRLP4 4
ADDRLP4 28
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 28+4
INDIRF4
ADDRLP4 16+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 28+8
INDIRF4
ADDRLP4 16+8
INDIRF4
SUBF4
ASGNF4
line 950
;950:	VectorSubtract( angles, oldAngles, deltaAngles );
ADDRLP4 64
ADDRLP4 52
INDIRF4
ADDRLP4 40
INDIRF4
SUBF4
ASGNF4
ADDRLP4 64+4
ADDRLP4 52+4
INDIRF4
ADDRLP4 40+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 64+8
ADDRLP4 52+8
INDIRF4
ADDRLP4 40+8
INDIRF4
SUBF4
ASGNF4
line 952
;951:
;952:	VectorAdd( in, deltaOrigin, out );
ADDRFP4 16
INDIRP4
ADDRFP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 84
CNSTI4 4
ASGNI4
ADDRFP4 16
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
INDIRF4
ADDRLP4 4+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 88
CNSTI4 8
ASGNI4
ADDRFP4 16
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
ADDRLP4 4+8
INDIRF4
ADDF4
ASGNF4
line 955
;953:
;954:	// FIXME: origin change when on a rotating object
;955:}
LABELV $1046
endproc CG_AdjustPositionForMover 92 12
proc CG_InterpolateEntityPosition 44 12
line 963
;956:
;957:
;958:/*
;959:=============================
;960:CG_InterpolateEntityPosition
;961:=============================
;962:*/
;963:static void CG_InterpolateEntityPosition( centity_t *cent ) {
line 969
;964:	vec3_t		current, next;
;965:	float		f;
;966:
;967:	// it would be an internal error to find an entity that interpolates without
;968:	// a snapshot ahead of the current one
;969:	if ( cg.nextSnap == NULL ) {
ADDRGP4 cg+40
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1067
line 970
;970:		CG_Error( "CG_InterpoateEntityPosition: cg.nextSnap == NULL" );
ADDRGP4 $1070
ARGP4
ADDRGP4 CG_Error
CALLV
pop
line 971
;971:	}
LABELV $1067
line 973
;972:
;973:	f = cg.frameInterpolation;
ADDRLP4 24
ADDRGP4 cg+1868876
INDIRF4
ASGNF4
line 977
;974:
;975:	// this will linearize a sine or parabolic curve, but it is important
;976:	// to not extrapolate player positions if more recent data is available
;977:	BG_EvaluateTrajectory( &cent->currentState.pos, cg.snap->serverTime, current );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 978
;978:	BG_EvaluateTrajectory( &cent->nextState.pos, cg.nextSnap->serverTime, next );
ADDRFP4 0
INDIRP4
CNSTI4 240
ADDP4
ARGP4
ADDRGP4 cg+40
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 980
;979:
;980:	cent->lerpOrigin[0] = current[0] + f * ( next[0] - current[0] );
ADDRLP4 28
ADDRLP4 0
INDIRF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
ADDRLP4 28
INDIRF4
ADDRLP4 24
INDIRF4
ADDRLP4 12
INDIRF4
ADDRLP4 28
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 981
;981:	cent->lerpOrigin[1] = current[1] + f * ( next[1] - current[1] );
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 24
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDRLP4 0+4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 982
;982:	cent->lerpOrigin[2] = current[2] + f * ( next[2] - current[2] );
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 24
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDRLP4 0+8
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 984
;983:
;984:	BG_EvaluateTrajectory( &cent->currentState.apos, cg.snap->serverTime, current );
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 985
;985:	BG_EvaluateTrajectory( &cent->nextState.apos, cg.nextSnap->serverTime, next );
ADDRFP4 0
INDIRP4
CNSTI4 276
ADDP4
ARGP4
ADDRGP4 cg+40
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 987
;986:
;987:	cent->lerpAngles[0] = LerpAngle( current[0], next[0], f );
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 32
ADDRGP4 LerpAngle
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
ADDRLP4 32
INDIRF4
ASGNF4
line 988
;988:	cent->lerpAngles[1] = LerpAngle( current[1], next[1], f );
ADDRLP4 0+4
INDIRF4
ARGF4
ADDRLP4 12+4
INDIRF4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 36
ADDRGP4 LerpAngle
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 832
ADDP4
ADDRLP4 36
INDIRF4
ASGNF4
line 989
;989:	cent->lerpAngles[2] = LerpAngle( current[2], next[2], f );
ADDRLP4 0+8
INDIRF4
ARGF4
ADDRLP4 12+8
INDIRF4
ARGF4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 40
ADDRGP4 LerpAngle
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 836
ADDP4
ADDRLP4 40
INDIRF4
ASGNF4
line 991
;990:
;991:}
LABELV $1066
endproc CG_InterpolateEntityPosition 44 12
proc CG_CalcEntityLerpPositions 124 28
line 999
;992:
;993:/*
;994:===============
;995:CG_CalcEntityLerpPositions
;996:
;997:===============
;998:*/
;999:static void CG_CalcEntityLerpPositions( centity_t *cent ) {
line 1002
;1000:	clientInfo_t	*ci;
;1001:	int				weaphack;
;1002:	int timeshift = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1004
;1003:
;1004:	ci = &cgs.clientinfo[ cent->currentState.clientNum ];
ADDRLP4 4
CNSTI4 1944
ADDRFP4 0
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
MULI4
ADDRGP4 cgs+440948
ADDP4
ASGNP4
line 1006
;1005:	
;1006:	if(ci->swepid >= 1){
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
LTI4 $1088
line 1007
;1007:	weaphack = ci->swepid;
ADDRLP4 8
ADDRLP4 4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
ASGNI4
line 1008
;1008:	} else {
ADDRGP4 $1089
JUMPV
LABELV $1088
line 1009
;1009:	weaphack = cent->currentState.weapon;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ASGNI4
line 1010
;1010:	}
LABELV $1089
line 1031
;1011:
;1012://unlagged - projectile nudge
;1013:	// this will be set to how far forward projectiles will be extrapolated
;1014://unlagged - projectile nudge
;1015:
;1016://unlagged - smooth clients #2
;1017:	// this is done server-side now - cg_smoothClients is undefined
;1018:	// players will always be TR_INTERPOLATE
;1019:/*
;1020:	// if this player does not want to see extrapolated players
;1021:	if ( !cg_smoothClients.integer ) {
;1022:		// make sure the clients use TR_INTERPOLATE
;1023:		if ( cent->currentState.number < MAX_CLIENTS ) {
;1024:			cent->currentState.pos.trType = TR_INTERPOLATE;
;1025:			cent->nextState.pos.trType = TR_INTERPOLATE;
;1026:		}
;1027:	}
;1028:*/
;1029://unlagged - smooth clients #2
;1030:
;1031:	if ( cent->interpolate && cent->currentState.pos.trType == TR_INTERPOLATE ) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 456
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1090
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1090
line 1032
;1032:		CG_InterpolateEntityPosition( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_InterpolateEntityPosition
CALLV
pop
line 1033
;1033:		return;
ADDRGP4 $1086
JUMPV
LABELV $1090
line 1038
;1034:	}
;1035:
;1036:	// first see if we can interpolate between two snaps for
;1037:	// linear extrapolated clients
;1038:	if ( cent->interpolate && cent->currentState.pos.trType == TR_LINEAR_STOP &&
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 456
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1092
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1092
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 256
GEI4 $1092
line 1039
;1039:											cent->currentState.number < MAX_CLIENTS) {
line 1040
;1040:		CG_InterpolateEntityPosition( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_InterpolateEntityPosition
CALLV
pop
line 1041
;1041:		return;
ADDRGP4 $1086
JUMPV
LABELV $1092
line 1048
;1042:	}
;1043:
;1044://unlagged - timenudge extrapolation
;1045:	// interpolating failed (probably no nextSnap), so extrapolate
;1046:	// this can also happen if the teleport bit is flipped, but that
;1047:	// won't be noticeable
;1048:	if ( cent->currentState.number < MAX_CLIENTS &&
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 256
GEI4 $1094
ADDRLP4 20
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ADDRGP4 cg+1868928+140
INDIRI4
EQI4 $1094
line 1049
;1049:			cent->currentState.clientNum != cg.predictedPlayerState.clientNum ) {
line 1050
;1050:		cent->currentState.pos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 3
ASGNI4
line 1051
;1051:		cent->currentState.pos.trTime = cg.snap->serverTime;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 cg+36
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1052
;1052:		cent->currentState.pos.trDuration = 1000 / sv_fps.integer;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTI4 1000
ADDRGP4 sv_fps+12
INDIRI4
DIVI4
ASGNI4
line 1053
;1053:	}
LABELV $1094
line 1058
;1054://unlagged - timenudge extrapolation
;1055:
;1056://unlagged - projectile nudge
;1057:	// if it's a missile but not a grappling hook
;1058:	if ( cent->currentState.eType == ET_MISSILE && weaphack != WP_GRAPPLING_HOOK ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1100
ADDRLP4 8
INDIRI4
CNSTI4 10
EQI4 $1100
line 1060
;1059:		// if it's one of ours
;1060:		if ( cent->currentState.otherEntityNum == cg.clientNum ) {
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
INDIRI4
ADDRGP4 cg+4
INDIRI4
NEI4 $1102
line 1064
;1061:			// extrapolate one server frame's worth - this will correct for tiny
;1062:			// visual inconsistencies introduced by backward-reconciling all players
;1063:			// one server frame before running projectiles
;1064:			timeshift = 1000 / sv_fps.integer;
ADDRLP4 0
CNSTI4 1000
ADDRGP4 sv_fps+12
INDIRI4
DIVI4
ASGNI4
line 1065
;1065:		}
ADDRGP4 $1103
JUMPV
LABELV $1102
line 1067
;1066:		// if it's not, and it's not a grenade launcher
;1067:		else if ( cent->currentState.weapon != WP_GRENADE_LAUNCHER ) {
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
CNSTI4 4
EQI4 $1106
line 1069
;1068:			// extrapolate based on cg_projectileNudge
;1069:			timeshift = cg_projectileNudge.integer + 1000 / sv_fps.integer;
ADDRLP4 0
ADDRGP4 cg_projectileNudge+12
INDIRI4
CNSTI4 1000
ADDRGP4 sv_fps+12
INDIRI4
DIVI4
ADDI4
ASGNI4
line 1070
;1070:		}
LABELV $1106
LABELV $1103
line 1071
;1071:	}
LABELV $1100
line 1076
;1072:
;1073:	// just use the current frame and evaluate as best we can
;1074://	BG_EvaluateTrajectory( &cent->currentState.pos, cg.time, cent->lerpOrigin );
;1075://	BG_EvaluateTrajectory( &cent->currentState.apos, cg.time, cent->lerpAngles );
;1076:	BG_EvaluateTrajectory( &cent->currentState.pos, cg.time + timeshift, cent->lerpOrigin );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+1868892
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ARGI4
ADDRLP4 24
INDIRP4
CNSTI4 816
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1077
;1077:	BG_EvaluateTrajectory( &cent->currentState.apos, cg.time + timeshift, cent->lerpAngles );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 cg+1868892
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ARGI4
ADDRLP4 28
INDIRP4
CNSTI4 828
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1080
;1078:
;1079:	// if there's a time shift
;1080:	if ( timeshift != 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $1112
line 1084
;1081:		trace_t tr;
;1082:		vec3_t lastOrigin;
;1083:
;1084:		BG_EvaluateTrajectory( &cent->currentState.pos, cg.time, lastOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 32
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1086
;1085:
;1086:		CG_Trace( &tr, lastOrigin, vec3_origin, vec3_origin, cent->lerpOrigin, cent->currentState.number, MASK_SHOT );
ADDRLP4 44
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 100
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
INDIRP4
CNSTI4 816
ADDP4
ARGP4
ADDRLP4 104
INDIRP4
INDIRI4
ARGI4
CNSTI4 100663297
ARGI4
ADDRGP4 CG_Trace
CALLV
pop
line 1089
;1087:
;1088:		// don't let the projectile go through the floor
;1089:		if ( tr.fraction < 1.0f ) {
ADDRLP4 44+8
INDIRF4
CNSTF4 1065353216
GEF4 $1115
line 1090
;1090:			cent->lerpOrigin[0] = lastOrigin[0] + tr.fraction * ( cent->lerpOrigin[0] - lastOrigin[0] );
ADDRLP4 108
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
ASGNP4
ADDRLP4 112
ADDRLP4 32
INDIRF4
ASGNF4
ADDRLP4 108
INDIRP4
ADDRLP4 112
INDIRF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 108
INDIRP4
INDIRF4
ADDRLP4 112
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1091
;1091:			cent->lerpOrigin[1] = lastOrigin[1] + tr.fraction * ( cent->lerpOrigin[1] - lastOrigin[1] );
ADDRLP4 116
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 32+4
INDIRF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 116
INDIRP4
INDIRF4
ADDRLP4 32+4
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1092
;1092:			cent->lerpOrigin[2] = lastOrigin[2] + tr.fraction * ( cent->lerpOrigin[2] - lastOrigin[2] );
ADDRLP4 120
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 32+8
INDIRF4
ADDRLP4 44+8
INDIRF4
ADDRLP4 120
INDIRP4
INDIRF4
ADDRLP4 32+8
INDIRF4
SUBF4
MULF4
ADDF4
ASGNF4
line 1093
;1093:		}
LABELV $1115
line 1094
;1094:	}
LABELV $1112
line 1099
;1095://unlagged - projectile nudge
;1096:
;1097:	// adjust for riding a mover if it wasn't rolled into the predicted
;1098:	// player state
;1099:	if ( cent != &cg.predictedPlayerEntity ) {
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 cg+1869400
CVPU4 4
EQU4 $1125
line 1100
;1100:		CG_AdjustPositionForMover( cent->lerpOrigin, cent->currentState.groundEntityNum,
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 32
INDIRP4
CNSTI4 816
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ARGI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ARGI4
ADDRGP4 cg+1868892
INDIRI4
ARGI4
ADDRLP4 36
INDIRP4
ARGP4
ADDRGP4 CG_AdjustPositionForMover
CALLV
pop
line 1102
;1101:		cg.snap->serverTime, cg.time, cent->lerpOrigin );
;1102:	}
LABELV $1125
line 1103
;1103:}
LABELV $1086
endproc CG_CalcEntityLerpPositions 124 28
proc CG_TeamBase 252 16
line 1110
;1104:
;1105:/*
;1106:===============
;1107:CG_TeamBase
;1108:===============
;1109:*/
;1110:static void CG_TeamBase( centity_t *cent ) {
line 1117
;1111:	refEntity_t model;
;1112:
;1113:	vec3_t angles;
;1114:	int t, h;
;1115:	float c;
;1116:
;1117:	if ( cgs.gametype == GT_CTF || cgs.gametype == GT_1FCTF ) {
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 5
EQI4 $1135
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 6
NEI4 $1131
LABELV $1135
line 1122
;1118://#else
;1119://	if ( cgs.gametype == GT_CTF) {
;1120:
;1121:		// show the flag base
;1122:		memset(&model, 0, sizeof(model));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1123
;1123:		model.reType = RT_MODEL;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1124
;1124:		VectorCopy( cent->lerpOrigin, model.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 1125
;1125:		VectorCopy( cent->lerpOrigin, model.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 1126
;1126:		AnglesToAxis( cent->currentState.angles, model.axis );
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1127
;1127:		if ( cent->currentState.modelindex == TEAM_RED ) {
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1139
line 1128
;1128:			model.hModel = cgs.media.redFlagBaseModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+148
INDIRI4
ASGNI4
line 1129
;1129:		}
ADDRGP4 $1140
JUMPV
LABELV $1139
line 1130
;1130:		else if ( cent->currentState.modelindex == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1144
line 1131
;1131:			model.hModel = cgs.media.blueFlagBaseModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+152
INDIRI4
ASGNI4
line 1132
;1132:		}
ADDRGP4 $1145
JUMPV
LABELV $1144
line 1133
;1133:		else {
line 1134
;1134:			model.hModel = cgs.media.neutralFlagBaseModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+156
INDIRI4
ASGNI4
line 1135
;1135:		}
LABELV $1145
LABELV $1140
line 1136
;1136:		trap_R_AddRefEntityToScene( &model );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1137
;1137:	}
ADDRGP4 $1132
JUMPV
LABELV $1131
line 1139
;1138:
;1139:	else if ( cgs.gametype == GT_OBELISK ) {
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 7
NEI4 $1152
line 1141
;1140:		// show the obelisk
;1141:		memset(&model, 0, sizeof(model));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1142
;1142:		model.reType = RT_MODEL;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1143
;1143:		VectorCopy( cent->lerpOrigin, model.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 1144
;1144:		VectorCopy( cent->lerpOrigin, model.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 1145
;1145:		AnglesToAxis( cent->currentState.angles, model.axis );
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1147
;1146:
;1147:		model.hModel = cgs.media.overloadBaseModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+160
INDIRI4
ASGNI4
line 1148
;1148:		trap_R_AddRefEntityToScene( &model );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1150
;1149:		// if hit
;1150:		if ( cent->currentState.frame == 1) {
ADDRFP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1161
line 1153
;1151:			// show hit model
;1152:			// modelindex2 is the health value of the obelisk
;1153:			c = cent->currentState.modelindex2;
ADDRLP4 176
ADDRFP4 0
INDIRP4
CNSTI4 176
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1154
;1154:			model.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 1155
;1155:			model.shaderRGBA[1] = c;
ADDRLP4 204
ADDRLP4 176
INDIRF4
ASGNF4
ADDRLP4 208
CNSTF4 1325400064
ASGNF4
ADDRLP4 204
INDIRF4
ADDRLP4 208
INDIRF4
LTF4 $1167
ADDRLP4 200
ADDRLP4 204
INDIRF4
ADDRLP4 208
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1168
JUMPV
LABELV $1167
ADDRLP4 200
ADDRLP4 204
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1168
ADDRLP4 0+116+1
ADDRLP4 200
INDIRU4
CVUU1 4
ASGNU1
line 1156
;1156:			model.shaderRGBA[2] = c;
ADDRLP4 216
ADDRLP4 176
INDIRF4
ASGNF4
ADDRLP4 220
CNSTF4 1325400064
ASGNF4
ADDRLP4 216
INDIRF4
ADDRLP4 220
INDIRF4
LTF4 $1172
ADDRLP4 212
ADDRLP4 216
INDIRF4
ADDRLP4 220
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1173
JUMPV
LABELV $1172
ADDRLP4 212
ADDRLP4 216
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1173
ADDRLP4 0+116+2
ADDRLP4 212
INDIRU4
CVUU1 4
ASGNU1
line 1157
;1157:			model.shaderRGBA[3] = 0xff;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1159
;1158:			//
;1159:			model.hModel = cgs.media.overloadEnergyModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+172
INDIRI4
ASGNI4
line 1160
;1160:			trap_R_AddRefEntityToScene( &model );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1161
;1161:		}
LABELV $1161
line 1163
;1162:		// if respawning
;1163:		if ( cent->currentState.frame == 2) {
ADDRFP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1179
line 1164
;1164:			if ( !cent->miscTime ) {
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1181
line 1165
;1165:				cent->miscTime = cg.time;
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
ADDRGP4 cg+1868892
INDIRI4
ASGNI4
line 1166
;1166:			}
LABELV $1181
line 1167
;1167:			t = cg.time - cent->miscTime;
ADDRLP4 184
ADDRGP4 cg+1868892
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1168
;1168:			h = (cg_obeliskRespawnDelay.integer - 5) * 1000;
ADDRLP4 180
CNSTI4 1000
ADDRGP4 cg_obeliskRespawnDelay+12
INDIRI4
MULI4
CNSTI4 5000
SUBI4
ASGNI4
line 1170
;1169:			//
;1170:			if (t > h) {
ADDRLP4 184
INDIRI4
ADDRLP4 180
INDIRI4
LEI4 $1186
line 1171
;1171:				c = (float) (t - h) / h;
ADDRLP4 200
ADDRLP4 180
INDIRI4
ASGNI4
ADDRLP4 176
ADDRLP4 184
INDIRI4
ADDRLP4 200
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 200
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 1172
;1172:				if (c > 1)
ADDRLP4 176
INDIRF4
CNSTF4 1065353216
LEF4 $1187
line 1173
;1173:					c = 1;
ADDRLP4 176
CNSTF4 1065353216
ASGNF4
line 1174
;1174:			}
ADDRGP4 $1187
JUMPV
LABELV $1186
line 1175
;1175:			else {
line 1176
;1176:				c = 0;
ADDRLP4 176
CNSTF4 0
ASGNF4
line 1177
;1177:			}
LABELV $1187
line 1179
;1178:			// show the lights
;1179:			AnglesToAxis( cent->currentState.angles, model.axis );
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1181
;1180:			//
;1181:			model.shaderRGBA[0] = c * 0xff;
ADDRLP4 204
CNSTF4 1132396544
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
ADDRLP4 208
CNSTF4 1325400064
ASGNF4
ADDRLP4 204
INDIRF4
ADDRLP4 208
INDIRF4
LTF4 $1193
ADDRLP4 200
ADDRLP4 204
INDIRF4
ADDRLP4 208
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1194
JUMPV
LABELV $1193
ADDRLP4 200
ADDRLP4 204
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1194
ADDRLP4 0+116
ADDRLP4 200
INDIRU4
CVUU1 4
ASGNU1
line 1182
;1182:			model.shaderRGBA[1] = c * 0xff;
ADDRLP4 216
CNSTF4 1132396544
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
ADDRLP4 220
CNSTF4 1325400064
ASGNF4
ADDRLP4 216
INDIRF4
ADDRLP4 220
INDIRF4
LTF4 $1198
ADDRLP4 212
ADDRLP4 216
INDIRF4
ADDRLP4 220
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1199
JUMPV
LABELV $1198
ADDRLP4 212
ADDRLP4 216
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1199
ADDRLP4 0+116+1
ADDRLP4 212
INDIRU4
CVUU1 4
ASGNU1
line 1183
;1183:			model.shaderRGBA[2] = c * 0xff;
ADDRLP4 228
CNSTF4 1132396544
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
ADDRLP4 232
CNSTF4 1325400064
ASGNF4
ADDRLP4 228
INDIRF4
ADDRLP4 232
INDIRF4
LTF4 $1203
ADDRLP4 224
ADDRLP4 228
INDIRF4
ADDRLP4 232
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1204
JUMPV
LABELV $1203
ADDRLP4 224
ADDRLP4 228
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1204
ADDRLP4 0+116+2
ADDRLP4 224
INDIRU4
CVUU1 4
ASGNU1
line 1184
;1184:			model.shaderRGBA[3] = c * 0xff;
ADDRLP4 240
CNSTF4 1132396544
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
ADDRLP4 244
CNSTF4 1325400064
ASGNF4
ADDRLP4 240
INDIRF4
ADDRLP4 244
INDIRF4
LTF4 $1208
ADDRLP4 236
ADDRLP4 240
INDIRF4
ADDRLP4 244
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1209
JUMPV
LABELV $1208
ADDRLP4 236
ADDRLP4 240
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1209
ADDRLP4 0+116+3
ADDRLP4 236
INDIRU4
CVUU1 4
ASGNU1
line 1186
;1185:
;1186:			model.hModel = cgs.media.overloadLightsModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+168
INDIRI4
ASGNI4
line 1187
;1187:			trap_R_AddRefEntityToScene( &model );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1189
;1188:			// show the target
;1189:			if (t > h) {
ADDRLP4 184
INDIRI4
ADDRLP4 180
INDIRI4
LEI4 $1153
line 1190
;1190:				if ( !cent->muzzleFlashTime ) {
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1215
line 1191
;1191:					trap_S_StartSound (cent->lerpOrigin, ENTITYNUM_NONE, CHAN_BODY,  cgs.media.obeliskRespawnSound);
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 5
ARGI4
ADDRGP4 cgs+956380+2104
INDIRI4
ARGI4
ADDRGP4 trap_S_StartSound
CALLV
pop
line 1192
;1192:					cent->muzzleFlashTime = 1;
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 1
ASGNI4
line 1193
;1193:				}
LABELV $1215
line 1194
;1194:				VectorCopy(cent->currentState.angles, angles);
ADDRLP4 188
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRB
ASGNB 12
line 1195
;1195:				angles[YAW] += (float) 16 * acos(1-c) * 180 / M_PI;
CNSTF4 1065353216
ADDRLP4 176
INDIRF4
SUBF4
ARGF4
ADDRLP4 248
ADDRGP4 acos
CALLF4
ASGNF4
ADDRLP4 188+4
ADDRLP4 188+4
INDIRF4
CNSTF4 1127481344
CNSTF4 1098907648
ADDRLP4 248
INDIRF4
MULF4
MULF4
CNSTF4 1078530011
DIVF4
ADDF4
ASGNF4
line 1196
;1196:				AnglesToAxis( angles, model.axis );
ADDRLP4 188
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1198
;1197:
;1198:				VectorScale( model.axis[0], c, model.axis[0]);
ADDRLP4 0+28
ADDRLP4 0+28
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+4
ADDRLP4 0+28+4
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+8
ADDRLP4 0+28+8
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
line 1199
;1199:				VectorScale( model.axis[1], c, model.axis[1]);
ADDRLP4 0+28+12
ADDRLP4 0+28+12
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+4
ADDRLP4 0+28+12+4
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+12+8
ADDRLP4 0+28+12+8
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
line 1200
;1200:				VectorScale( model.axis[2], c, model.axis[2]);
ADDRLP4 0+28+24
ADDRLP4 0+28+24
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+4
ADDRLP4 0+28+24+4
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+28+24+8
ADDRLP4 0+28+24+8
INDIRF4
ADDRLP4 176
INDIRF4
MULF4
ASGNF4
line 1202
;1201:
;1202:				model.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 1203
;1203:				model.shaderRGBA[1] = 0xff;
ADDRLP4 0+116+1
CNSTU1 255
ASGNU1
line 1204
;1204:				model.shaderRGBA[2] = 0xff;
ADDRLP4 0+116+2
CNSTU1 255
ASGNU1
line 1205
;1205:				model.shaderRGBA[3] = 0xff;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1207
;1206:				//
;1207:				model.origin[2] += 56;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1113587712
ADDF4
ASGNF4
line 1208
;1208:				model.hModel = cgs.media.overloadTargetModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+164
INDIRI4
ASGNI4
line 1209
;1209:				trap_R_AddRefEntityToScene( &model );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1210
;1210:			}
line 1211
;1211:			else {
line 1213
;1212:				//FIXME: show animated smoke
;1213:			}
line 1214
;1214:		}
ADDRGP4 $1153
JUMPV
LABELV $1179
line 1215
;1215:		else {
line 1216
;1216:			cent->miscTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
CNSTI4 0
ASGNI4
line 1217
;1217:			cent->muzzleFlashTime = 0;
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 0
ASGNI4
line 1219
;1218:			// modelindex2 is the health value of the obelisk
;1219:			c = cent->currentState.modelindex2;
ADDRLP4 176
ADDRFP4 0
INDIRP4
CNSTI4 176
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 1220
;1220:			model.shaderRGBA[0] = 0xff;
ADDRLP4 0+116
CNSTU1 255
ASGNU1
line 1221
;1221:			model.shaderRGBA[1] = c;
ADDRLP4 204
ADDRLP4 176
INDIRF4
ASGNF4
ADDRLP4 208
CNSTF4 1325400064
ASGNF4
ADDRLP4 204
INDIRF4
ADDRLP4 208
INDIRF4
LTF4 $1279
ADDRLP4 200
ADDRLP4 204
INDIRF4
ADDRLP4 208
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1280
JUMPV
LABELV $1279
ADDRLP4 200
ADDRLP4 204
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1280
ADDRLP4 0+116+1
ADDRLP4 200
INDIRU4
CVUU1 4
ASGNU1
line 1222
;1222:			model.shaderRGBA[2] = c;
ADDRLP4 216
ADDRLP4 176
INDIRF4
ASGNF4
ADDRLP4 220
CNSTF4 1325400064
ASGNF4
ADDRLP4 216
INDIRF4
ADDRLP4 220
INDIRF4
LTF4 $1284
ADDRLP4 212
ADDRLP4 216
INDIRF4
ADDRLP4 220
INDIRF4
SUBF4
CVFI4 4
CVIU4 4
CNSTU4 2147483648
ADDU4
ASGNU4
ADDRGP4 $1285
JUMPV
LABELV $1284
ADDRLP4 212
ADDRLP4 216
INDIRF4
CVFI4 4
CVIU4 4
ASGNU4
LABELV $1285
ADDRLP4 0+116+2
ADDRLP4 212
INDIRU4
CVUU1 4
ASGNU1
line 1223
;1223:			model.shaderRGBA[3] = 0xff;
ADDRLP4 0+116+3
CNSTU1 255
ASGNU1
line 1225
;1224:			// show the lights
;1225:			model.hModel = cgs.media.overloadLightsModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+168
INDIRI4
ASGNI4
line 1226
;1226:			trap_R_AddRefEntityToScene( &model );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1228
;1227:			// show the target
;1228:			model.origin[2] += 56;
ADDRLP4 0+68+8
ADDRLP4 0+68+8
INDIRF4
CNSTF4 1113587712
ADDF4
ASGNF4
line 1229
;1229:			model.hModel = cgs.media.overloadTargetModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+164
INDIRI4
ASGNI4
line 1230
;1230:			trap_R_AddRefEntityToScene( &model );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1231
;1231:		}
line 1232
;1232:	}
ADDRGP4 $1153
JUMPV
LABELV $1152
line 1233
;1233:	else if ( cgs.gametype == GT_HARVESTER ) {
ADDRGP4 cgs+339040
INDIRI4
CNSTI4 8
NEI4 $1296
line 1235
;1234:		// show harvester model
;1235:		memset(&model, 0, sizeof(model));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1236
;1236:		model.reType = RT_MODEL;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1237
;1237:		VectorCopy( cent->lerpOrigin, model.lightingOrigin );
ADDRLP4 0+12
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 1238
;1238:		VectorCopy( cent->lerpOrigin, model.origin );
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 1239
;1239:		AnglesToAxis( cent->currentState.angles, model.axis );
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
ARGP4
ADDRLP4 0+28
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1241
;1240:
;1241:		if ( cent->currentState.modelindex == TEAM_RED ) {
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1302
line 1242
;1242:			model.hModel = cgs.media.harvesterModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+176
INDIRI4
ASGNI4
line 1243
;1243:			model.customSkin = cgs.media.harvesterRedSkin;
ADDRLP4 0+108
ADDRGP4 cgs+956380+180
INDIRI4
ASGNI4
line 1244
;1244:		}
ADDRGP4 $1303
JUMPV
LABELV $1302
line 1245
;1245:		else if ( cent->currentState.modelindex == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1310
line 1246
;1246:			model.hModel = cgs.media.harvesterModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+176
INDIRI4
ASGNI4
line 1247
;1247:			model.customSkin = cgs.media.harvesterBlueSkin;
ADDRLP4 0+108
ADDRGP4 cgs+956380+184
INDIRI4
ASGNI4
line 1248
;1248:		}
ADDRGP4 $1311
JUMPV
LABELV $1310
line 1249
;1249:		else {
line 1250
;1250:			model.hModel = cgs.media.harvesterNeutralModel;
ADDRLP4 0+8
ADDRGP4 cgs+956380+188
INDIRI4
ASGNI4
line 1251
;1251:			model.customSkin = 0;
ADDRLP4 0+108
CNSTI4 0
ASGNI4
line 1252
;1252:		}
LABELV $1311
LABELV $1303
line 1253
;1253:		trap_R_AddRefEntityToScene( &model );
ADDRLP4 0
ARGP4
ADDRGP4 trap_R_AddRefEntityToScene
CALLV
pop
line 1254
;1254:	}
LABELV $1296
LABELV $1153
LABELV $1132
line 1256
;1255:
;1256:}
LABELV $1130
endproc CG_TeamBase 252 16
proc CG_AddCEntity 8 8
line 1264
;1257:
;1258:/*
;1259:===============
;1260:CG_AddCEntity
;1261:
;1262:===============
;1263:*/
;1264:static void CG_AddCEntity( centity_t *cent ) {
line 1266
;1265:	// event-only entities will have been dealt with already
;1266:	if ( cent->currentState.eType >= ET_EVENTS ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 15
LTI4 $1323
line 1267
;1267:		return;
ADDRGP4 $1322
JUMPV
LABELV $1323
line 1271
;1268:	}
;1269:
;1270:	// calculate the current origin
;1271:	CG_CalcEntityLerpPositions( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_CalcEntityLerpPositions
CALLV
pop
line 1274
;1272:
;1273:	// add automatic effects
;1274:	CG_EntityEffects( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_EntityEffects
CALLV
pop
line 1276
;1275:
;1276:	switch ( cent->currentState.eType ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $1325
ADDRLP4 0
INDIRI4
CNSTI4 14
GTI4 $1325
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1342
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1342
address $1330
address $1331
address $1332
address $1333
address $1334
address $1335
address $1336
address $1337
address $1326
address $1326
address $1326
address $1338
address $1339
address $1341
address $1340
code
LABELV $1325
line 1278
;1277:	default:
;1278:		CG_Error( "Bad entity type: %i\n", cent->currentState.eType );
ADDRGP4 $1328
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ARGI4
ADDRGP4 CG_Error
CALLV
pop
line 1279
;1279:		break;
ADDRGP4 $1326
JUMPV
line 1283
;1280:	case ET_INVISIBLE:
;1281:	case ET_PUSH_TRIGGER:
;1282:	case ET_TELEPORT_TRIGGER:
;1283:		break;
LABELV $1330
line 1285
;1284:	case ET_GENERAL:
;1285:		CG_General( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_General
CALLV
pop
line 1286
;1286:		break;
ADDRGP4 $1326
JUMPV
LABELV $1331
line 1288
;1287:	case ET_PLAYER:
;1288:		CG_Player( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Player
CALLV
pop
line 1289
;1289:		break;
ADDRGP4 $1326
JUMPV
LABELV $1332
line 1291
;1290:	case ET_ITEM:
;1291:		CG_Item( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Item
CALLV
pop
line 1292
;1292:		break;
ADDRGP4 $1326
JUMPV
LABELV $1333
line 1294
;1293:	case ET_MISSILE:
;1294:		CG_Missile( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Missile
CALLV
pop
line 1295
;1295:		break;
ADDRGP4 $1326
JUMPV
LABELV $1334
line 1297
;1296:	case ET_MOVER:
;1297:		CG_Mover( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Mover
CALLV
pop
line 1298
;1298:		break;
ADDRGP4 $1326
JUMPV
LABELV $1335
line 1300
;1299:	case ET_BEAM:
;1300:		CG_Beam( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Beam
CALLV
pop
line 1301
;1301:		break;
ADDRGP4 $1326
JUMPV
LABELV $1336
line 1303
;1302:	case ET_PORTAL:
;1303:		CG_Portal( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Portal
CALLV
pop
line 1304
;1304:		break;
ADDRGP4 $1326
JUMPV
LABELV $1337
line 1306
;1305:	case ET_SPEAKER:
;1306:		CG_Speaker( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Speaker
CALLV
pop
line 1307
;1307:		break;
ADDRGP4 $1326
JUMPV
LABELV $1338
line 1309
;1308:	case ET_GRAPPLE:
;1309:		CG_Grapple( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Grapple
CALLV
pop
line 1310
;1310:		break;
ADDRGP4 $1326
JUMPV
LABELV $1339
line 1312
;1311:	case ET_LASER:
;1312:		CG_LaserSight( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_LaserSight
CALLV
pop
line 1313
;1313:		break;
ADDRGP4 $1326
JUMPV
LABELV $1340
line 1315
;1314:	case ET_WEATHER:
;1315:		CG_Weather( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_Weather
CALLV
pop
line 1316
;1316:		break;
ADDRGP4 $1326
JUMPV
LABELV $1341
line 1318
;1317:	case ET_TEAM:
;1318:		CG_TeamBase( cent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 CG_TeamBase
CALLV
pop
line 1319
;1319:		break;
LABELV $1326
line 1321
;1320:	}
;1321:}
LABELV $1322
endproc CG_AddCEntity 8 8
proc CG_LaserSight 180 20
line 1330
;1322:
;1323:/*
;1324:==================
;1325:CG_LaserSight
;1326:  Creates the laser
;1327:==================
;1328:*/
;1329:
;1330:static void CG_LaserSight( centity_t *cent )  {
line 1335
;1331:	refEntity_t			ent;
;1332:
;1333:
;1334:	// create the render entity
;1335:	memset (&ent, 0, sizeof(ent));
ADDRLP4 0
ARGP4
CNSTI4 0
ARGI4
CNSTI4 176
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1336
;1336:	VectorCopy( cent->lerpOrigin, ent.origin);
ADDRLP4 0+68
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 1337
;1337:	VectorCopy( cent->lerpOrigin, ent.oldorigin);
ADDRLP4 0+84
ADDRFP4 0
INDIRP4
CNSTI4 816
ADDP4
INDIRB
ASGNB 12
line 1348
;1338:
;1339:/*	if (cent->currentState.eventParm == 1)
;1340:	{
;1341:		ent.reType = RT_SPRITE;
;1342:		ent.radius = 2;
;1343:		ent.rotation = 0;
;1344:		ent.customShader = cgs.media.laserShader;
;1345:		trap_R_AddRefEntityToScene( &ent );
;1346:	}
;1347:	else	{*/
;1348:		trap_R_AddLightToScene(ent.origin, 700, 0.3, 0.3, 0.3);
ADDRLP4 0+68
ARGP4
CNSTF4 1143930880
ARGF4
ADDRLP4 176
CNSTF4 1050253722
ASGNF4
ADDRLP4 176
INDIRF4
ARGF4
ADDRLP4 176
INDIRF4
ARGF4
ADDRLP4 176
INDIRF4
ARGF4
ADDRGP4 trap_R_AddLightToScene
CALLV
pop
line 1352
;1349://	}
;1350:
;1351:	
;1352:}
LABELV $1343
endproc CG_LaserSight 180 20
export CG_AddPacketEntities
proc CG_AddPacketEntities 20 12
line 1360
;1353:
;1354:/*
;1355:===============
;1356:CG_AddPacketEntities
;1357:
;1358:===============
;1359:*/
;1360:void CG_AddPacketEntities( void ) {
line 1366
;1361:	int					num;
;1362:	centity_t			*cent;
;1363:	playerState_t		*ps;
;1364:
;1365:	// set cg.frameInterpolation
;1366:	if ( cg.nextSnap ) {
ADDRGP4 cg+40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1348
line 1369
;1367:		int		delta;
;1368:
;1369:		delta = (cg.nextSnap->serverTime - cg.snap->serverTime);
ADDRLP4 16
CNSTI4 8
ASGNI4
ADDRLP4 12
ADDRGP4 cg+40
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
ADDRGP4 cg+36
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1370
;1370:		if ( delta == 0 ) {
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $1353
line 1371
;1371:			cg.frameInterpolation = 0;
ADDRGP4 cg+1868876
CNSTF4 0
ASGNF4
line 1372
;1372:		} else {
ADDRGP4 $1349
JUMPV
LABELV $1353
line 1373
;1373:			cg.frameInterpolation = (float)( cg.time - cg.snap->serverTime ) / delta;
ADDRGP4 cg+1868876
ADDRGP4 cg+1868892
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 12
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 1374
;1374:		}
line 1375
;1375:	} else {
ADDRGP4 $1349
JUMPV
LABELV $1348
line 1376
;1376:		cg.frameInterpolation = 0;	// actually, it should never be used, because
ADDRGP4 cg+1868876
CNSTF4 0
ASGNF4
line 1378
;1377:									// no entities should be marked as interpolating
;1378:	}
LABELV $1349
line 1381
;1379:
;1380:	// the auto-rotating items will all have the same axis
;1381:if(cg_itemstyle.integer == 3){
ADDRGP4 cg_itemstyle+12
INDIRI4
CNSTI4 3
NEI4 $1360
line 1382
;1382:	cg.autoAngles[0] = 0;
ADDRGP4 cg+1870520
CNSTF4 0
ASGNF4
line 1383
;1383:	cg.autoAngles[1] = ( cg.time & 2047 ) * 360 / 2048.0;
ADDRGP4 cg+1870520+4
CNSTI4 360
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 2047
BANDI4
MULI4
CVIF4 4
CNSTF4 1157627904
DIVF4
ASGNF4
line 1384
;1384:	cg.autoAngles[2] = 0;
ADDRGP4 cg+1870520+8
CNSTF4 0
ASGNF4
line 1386
;1385:
;1386:	cg.autoAnglesFast[0] = 0;
ADDRGP4 cg+1870568
CNSTF4 0
ASGNF4
line 1387
;1387:	cg.autoAnglesFast[1] = ( cg.time & 1023 ) * 360 / 1024.0f;
ADDRGP4 cg+1870568+4
CNSTI4 360
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 1023
BANDI4
MULI4
CVIF4 4
CNSTF4 1149239296
DIVF4
ASGNF4
line 1388
;1388:	cg.autoAnglesFast[2] = 0;
ADDRGP4 cg+1870568+8
CNSTF4 0
ASGNF4
line 1389
;1389:}
LABELV $1360
line 1391
;1390:
;1391:if(cg_itemstyle.integer == 2){
ADDRGP4 cg_itemstyle+12
INDIRI4
CNSTI4 2
NEI4 $1375
line 1392
;1392:	cg.autoAngles[0] = 0;
ADDRGP4 cg+1870520
CNSTF4 0
ASGNF4
line 1393
;1393:	cg.autoAngles[1] = ( cg.time & 4095 ) * 360 / 4096.0;
ADDRGP4 cg+1870520+4
CNSTI4 360
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 4095
BANDI4
MULI4
CVIF4 4
CNSTF4 1166016512
DIVF4
ASGNF4
line 1394
;1394:	cg.autoAngles[2] = 0;
ADDRGP4 cg+1870520+8
CNSTF4 0
ASGNF4
line 1396
;1395:
;1396:	cg.autoAnglesFast[0] = 0;
ADDRGP4 cg+1870568
CNSTF4 0
ASGNF4
line 1397
;1397:	cg.autoAnglesFast[1] = ( cg.time & 4095 ) * 360 / 4096.0f;
ADDRGP4 cg+1870568+4
CNSTI4 360
ADDRGP4 cg+1868892
INDIRI4
CNSTI4 4095
BANDI4
MULI4
CVIF4 4
CNSTF4 1166016512
DIVF4
ASGNF4
line 1398
;1398:	cg.autoAnglesFast[2] = 0;
ADDRGP4 cg+1870568+8
CNSTF4 0
ASGNF4
line 1399
;1399:}
LABELV $1375
line 1401
;1400:
;1401:if(cg_itemstyle.integer == 1){
ADDRGP4 cg_itemstyle+12
INDIRI4
CNSTI4 1
NEI4 $1390
line 1402
;1402:	cg.autoAngles[0] = 0;
ADDRGP4 cg+1870520
CNSTF4 0
ASGNF4
line 1403
;1403:	cg.autoAngles[1] = 0;
ADDRGP4 cg+1870520+4
CNSTF4 0
ASGNF4
line 1404
;1404:	cg.autoAngles[2] = 0;
ADDRGP4 cg+1870520+8
CNSTF4 0
ASGNF4
line 1406
;1405:
;1406:	cg.autoAnglesFast[0] = 0;
ADDRGP4 cg+1870568
CNSTF4 0
ASGNF4
line 1407
;1407:	cg.autoAnglesFast[1] = 0;
ADDRGP4 cg+1870568+4
CNSTF4 0
ASGNF4
line 1408
;1408:	cg.autoAnglesFast[2] = 0;
ADDRGP4 cg+1870568+8
CNSTF4 0
ASGNF4
line 1409
;1409:}
LABELV $1390
line 1411
;1410:
;1411:	AnglesToAxis( cg.autoAngles, cg.autoAxis );
ADDRGP4 cg+1870520
ARGP4
ADDRGP4 cg+1870532
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1412
;1412:	AnglesToAxis( cg.autoAnglesFast, cg.autoAxisFast );
ADDRGP4 cg+1870568
ARGP4
ADDRGP4 cg+1870580
ARGP4
ADDRGP4 AnglesToAxis
CALLV
pop
line 1415
;1413:
;1414:	// generate and add the entity from the playerstate
;1415:	ps = &cg.predictedPlayerState;
ADDRLP4 8
ADDRGP4 cg+1868928
ASGNP4
line 1416
;1416:	BG_PlayerStateToEntityState( ps, &cg.predictedPlayerEntity.currentState, qfalse );
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 cg+1869400
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 BG_PlayerStateToEntityState
CALLV
pop
line 1417
;1417:	CG_AddCEntity( &cg.predictedPlayerEntity );
ADDRGP4 cg+1869400
ARGP4
ADDRGP4 CG_AddCEntity
CALLV
pop
line 1420
;1418:
;1419:	// lerp the non-predicted value for lightning gun origins
;1420:	CG_CalcEntityLerpPositions( &cg_entities[ cg.snap->ps.clientNum ] );
CNSTI4 928
ADDRGP4 cg+36
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ARGP4
ADDRGP4 CG_CalcEntityLerpPositions
CALLV
pop
line 1423
;1421:
;1422://unlagged - early transitioning
;1423:	if ( cg.nextSnap ) {
ADDRGP4 cg+40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1411
line 1426
;1424:		// pre-add some of the entities sent over by the server
;1425:		// we have data for them and they don't need to interpolate
;1426:		for ( num = 0 ; num < cg.nextSnap->numEntities ; num++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $1417
JUMPV
LABELV $1414
line 1427
;1427:			cent = &cg_entities[ cg.nextSnap->entities[ num ].number ];
ADDRLP4 0
CNSTI4 928
CNSTI4 228
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cg+40
INDIRP4
CNSTI4 520
ADDP4
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1428
;1428:			if ( cent->nextState.eType == ET_MISSILE || cent->nextState.eType == ET_GENERAL ) {
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 3
EQI4 $1422
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $1420
LABELV $1422
line 1430
;1429:				// transition it immediately and add it
;1430:				CG_TransitionEntity( cent );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_TransitionEntity
CALLV
pop
line 1431
;1431:				cent->interpolate = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 456
ADDP4
CNSTI4 1
ASGNI4
line 1432
;1432:				CG_AddCEntity( cent );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddCEntity
CALLV
pop
line 1433
;1433:			}
LABELV $1420
line 1434
;1434:		}
LABELV $1415
line 1426
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1417
ADDRLP4 4
INDIRI4
ADDRGP4 cg+40
INDIRP4
CNSTI4 516
ADDP4
INDIRI4
LTI4 $1414
line 1435
;1435:	}
LABELV $1411
line 1439
;1436://unlagged - early transitioning
;1437:
;1438:	// add each entity sent over by the server
;1439:	for ( num = 0 ; num < cg.snap->numEntities ; num++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $1426
JUMPV
LABELV $1423
line 1440
;1440:		cent = &cg_entities[ cg.snap->entities[ num ].number ];
ADDRLP4 0
CNSTI4 928
CNSTI4 228
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 520
ADDP4
ADDP4
INDIRI4
MULI4
ADDRGP4 cg_entities
ADDP4
ASGNP4
line 1442
;1441://unlagged - early transitioning
;1442:		if ( !cg.nextSnap || (cent->nextState.eType != ET_MISSILE && cent->nextState.eType != ET_GENERAL) ) {
ADDRGP4 cg+40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1432
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 3
EQI4 $1429
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $1429
LABELV $1432
line 1444
;1443://unlagged - early transitioning
;1444:			CG_AddCEntity( cent );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 CG_AddCEntity
CALLV
pop
line 1445
;1445:		} //Also unlagged
LABELV $1429
line 1446
;1446:	}
LABELV $1424
line 1439
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1426
ADDRLP4 4
INDIRI4
ADDRGP4 cg+36
INDIRP4
CNSTI4 516
ADDP4
INDIRI4
LTI4 $1423
line 1447
;1447:}
LABELV $1347
endproc CG_AddPacketEntities 20 12
import CG_Particles
import wideAdjustX
import CG_NewParticleArea
import initparticles
import CG_LaunchFragment
import CG_ParticleExplosion
import CG_ParticleMisc
import CG_ParticleDust
import CG_ParticleSparks
import CG_ParticleBulletDebris
import CG_ParticleSnowFlurry
import CG_AddParticleShrapnel
import CG_ParticleSmoke
import CG_ParticleSnow
import CG_AddParticles
import CG_ClearParticles
import trap_GetEntityToken
import trap_getCameraInfo
import trap_startCamera
import trap_loadCamera
import trap_SnapVector
import trap_CIN_SetExtents
import trap_CIN_DrawCinematic
import trap_CIN_RunCinematic
import trap_CIN_StopCinematic
import trap_CIN_PlayCinematic
import trap_Key_GetKey
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_IsDown
import trap_R_RegisterFont
import trap_MemoryRemaining
import testPrintFloat
import testPrintInt
import trap_SetUserCmdValue
import trap_GetUserCmd
import trap_GetCurrentCmdNumber
import trap_GetServerCommand
import trap_GetSnapshot
import trap_GetCurrentSnapshotNumber
import trap_GetGameState
import trap_GetGlconfig
import trap_R_RemapShader
import trap_R_LerpTag
import trap_R_ModelBounds
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_LightForPoint
import trap_R_AddLightToScene
import trap_R_AddPolysToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterShader
import trap_R_RegisterSkin
import trap_R_RegisterModel_MiTech
import trap_R_RegisterModel
import trap_R_LoadWorldMap
import trap_S_StopBackgroundTrack
import trap_S_StartBackgroundTrack
import trap_S_RegisterSound_MiTech
import trap_S_RegisterSound
import trap_S_Respatialize
import trap_S_UpdateEntityPosition
import trap_S_AddRealLoopingSound
import trap_S_AddLoopingSound
import trap_S_ClearLoopingSounds
import trap_S_StartLocalSound
import trap_S_StopLoopingSound
import trap_S_StartSound
import trap_CM_MarkFragments
import trap_CM_TransformedBoxTrace
import trap_CM_BoxTrace
import trap_CM_TransformedPointContents
import trap_CM_PointContents
import trap_CM_TempBoxModel
import trap_CM_InlineModel
import trap_CM_NumInlineModels
import trap_CM_LoadMap
import trap_UpdateScreen
import trap_SendClientCommand
import trap_AddCommand
import trap_SendConsoleCommand
import trap_System
import trap_FS_Seek
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_Cvar_VariableStringBuffer
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import CG_Atmospheric_SetParticles
import CG_AddAtmosphericEffects
import teamcolormodels
import CG_CheckChangedPredictableEvents
import CG_TransitionPlayerState
import CG_Respawn
import CG_PlayBufferedVoiceChats
import CG_VoiceChatLocal
import CG_ShaderStateChanged
import CG_LoadVoiceChats
import CG_SetConfigValues
import CG_ParseServerinfo
import CG_ExecuteNewServerCommands
import CG_InitConsoleCommands
import CG_ConsoleCommand
import CG_DrawOldTourneyScoreboard
import CG_DrawOldScoreboard
import CG_DrawInformationRus
import CG_DrawInformation
import CG_LoadingClient
import CG_LoadingItem
import CG_LoadingString
import CG_TransitionEntity
import CG_ProcessSnapshots
import CG_SpurtBlood
import CG_MakeExplosion
import CG_Bleed
import CG_BigExplode
import CG_GibPlayer
import CG_ScorePlum
import CG_LightningBoltBeam
import CG_InvulnerabilityJuiced
import CG_InvulnerabilityImpact
import CG_ObeliskPain
import CG_ObeliskExplode
import CG_KamikazeEffect
import CG_SpawnEffect
import CG_BubbleTrail
import CG_SmokePuff
import CG_AddLocalEntities
import CG_AllocLocalEntity
import CG_InitLocalEntities
import CG_LeiPuff
import CG_LeiSparks2
import CG_LeiSparks
import CG_ImpactMark
import CG_AddMarks
import CG_InitMarkPolys
import CG_OutOfAmmoChange
import CG_DrawWeaponBarNew2
import CG_DrawWeaponBarNew
import CG_DrawWeaponBar0
import CG_DrawWeaponSelect
import CG_AddRealWeapon
import CG_AddPlayerWeapon
import CG_AddViewWeapon
import CG_GrappleTrail
import CG_GravitygunTrail
import CG_PhysgunTrail
import CG_RailTrail
import CG_Bullet
import CG_ShotgunFire
import CG_MissileHitPlayer
import CG_MissileHitWall
import CG_FireWeapon
import CG_RegisterItemVisuals
import CG_RegisterWeapon
import CG_Weapon_f
import CG_PrevWeapon_f
import CG_NextWeapon_f
import CG_PainVehicleEvent
import CG_PainEvent
import CG_EntityEvent
import CG_PlaceString
import CG_CheckEvents
import CG_ReloadPlayers
import CG_LoadDeferredPlayers
import CG_PredictPlayerState
import CG_Trace
import CG_PointContents
import CG_BuildSolidList
import CG_CustomSound
import CG_NewClientInfo
import CG_AddRefEntityWithPowerups
import CG_ResetPlayerEntity
import CG_Player
import CG_AddToGenericConsole
import CG_StatusHandle
import CG_OtherTeamHasFlag
import CG_YourTeamHasFlag
import CG_GameTypeString
import CG_CheckOrderPending
import CG_Text_PaintChar
import CG_Draw3DModelCopy
import CG_Draw3DModel
import CG_GetKillerText
import CG_GetGameStatusText
import CG_GetTeamColor
import CG_InitTeamChat
import CG_SetPrintString
import CG_ShowResponseHead
import CG_RunMenuScript
import CG_OwnerDrawVisible
import CG_GetValue
import CG_SelectNextPlayer
import CG_SelectPrevPlayer
import CG_Text_Height
import CG_Text_Width
import CG_Text_Paint
import CG_OwnerDraw
import CG_DrawTeamBackground
import CG_DrawFlagModel
import CG_DrawActive
import CG_DrawHead
import CG_CenterPrintRus
import CG_CenterPrint
import CG_AddLagometerSnapshotInfo
import CG_AddLagometerFrameInfo
import CG_DrawFade
import CG_Fade
import teamChat2
import teamChat1
import systemChat
import drawTeamOverlayModificationCount
import numSortedTeamPlayers
import sortedTeamPlayers
import CG_InsideBox
import CG_DrawTopBottom
import CG_DrawSides
import CG_DrawRect
import UI_DrawProportionalString
import CG_GetColorForHealth
import CG_ColorForHealth
import CG_TileClear
import CG_TeamColor
import CG_FadeColor
import CG_DrawStrlen
import CG_DrawSmallStringColor
import CG_DrawSmallString
import CG_DrawBigStringColor
import CG_DrawGiantString
import CG_DrawBigString
import CG_DrawStringExt
import CG_DrawString
import CG_DrawPic
import CG_DrawRoundedRect
import CG_FillRect2
import CG_FillRect
import CG_AdjustFrom640
import CG_DrawActiveFrame
import CG_AddBufferedSound
import CG_ZoomUp_f
import CG_ZoomDown_f
import CG_TestModelPrevSkin_f
import CG_TestModelNextSkin_f
import CG_TestModelPrevFrame_f
import CG_TestModelNextFrame_f
import CG_TestGun_f
import CG_TestModel_f
import CG_CloadMap_f
import CG_FairCvars
import SnapVectorTowards
import CG_RegisterOverlay
import CG_IsTeamGame
import CG_BuildSpectatorString
import CG_SetScoreSelection
import CG_RankRunFrame
import CG_EventHandling
import CG_MouseEvent
import CG_KeyEvent
import CG_LoadMenus
import CG_LastAttacker
import CG_CrosshairPlayer
import CG_UpdateCvars
import CG_StartMusic
import CG_Error
import CG_Printf
import CG_Argv
import CG_ConfigString
import CG_Cvar_ClampInt
import CG_PredictWeaponEffects
import cg_teamChatBeep
import cg_chatBeep
import cg_weaponOrder
import cg_weaponBarStyle
import cg_crosshairColorBlue
import cg_crosshairColorGreen
import cg_crosshairColorRed
import cg_ch13size
import cg_ch13
import cg_ch12size
import cg_ch12
import cg_ch11size
import cg_ch11
import cg_ch10size
import cg_ch10
import cg_ch9slze
import cg_ch9size
import cg_ch9
import cg_ch8size
import cg_ch8
import cg_ch7size
import cg_ch7
import cg_ch6size
import cg_ch6
import cg_ch5size
import cg_ch5
import cg_ch4size
import cg_ch4
import cg_ch3size
import cg_ch3
import cg_ch2size
import cg_ch2
import cg_ch1size
import cg_ch1
import cg_differentCrosshairs
import cg_crosshairPulse
import cg_atmosphericLevel
import cg_fragmsgsize
import cg_autovertex
import cg_vote_custom_commands
import cg_cyclegrapple
import cg_voteflags
import cg_voip_teamonly
import cg_hitsound
import cg_alwaysWeaponBar
import cl_timeNudge
import cg_optimizePrediction
import cg_projectileNudge
import sv_fps
import cg_cmdTimeNudge
import cg_delag
import cg_enableBreath
import cg_enableDust
import cg_obeliskRespawnDelay
import cg_recordSPDemoName
import cg_recordSPDemo
import cg_singlePlayerActive
import cg_singlePlayer
import cg_currentSelectedPlayerName
import cg_currentSelectedPlayer
import cg_blueTeamName
import cg_redTeamName
import cg_music
import cg_trueLightning
import cg_oldPlasma
import cg_cameraEyes_Up
import cg_cameraEyes_Fwd
import cg_cameraEyes
import cg_cameramode
import cg_leiBrassNoise
import cg_leiGoreNoise
import cg_leiEnhancement
import cg_lodScale
import cg_letterBoxSize
import cg_oldRocket
import cg_oldRail
import cg_noProjectileTrail
import cg_noTaunt
import cg_bigFont
import cg_smallFont
import cg_cameraMode
import cg_timescale
import cg_timescaleFadeSpeed
import cg_timescaleFadeEnd
import cg_cameraOrbitDelay
import cg_cameraOrbit
import pmove_float
import pmove_msec
import pmove_fixed
import cg_commonConsole
import cg_teamChatLines
import cg_chatLines
import cg_commonConsoleLines
import cg_consoleLines
import cg_teamChatSizeY
import cg_teamChatSizeX
import cg_chatSizeY
import cg_chatSizeX
import cg_consoleSizeY
import cg_consoleSizeX
import cg_fontShadow
import cg_fontScale
import cg_consoleTime
import cg_chatTime
import cg_newConsole
import cg_newFont
import cg_scorePlum
import cg_noVoiceText
import cg_noVoiceChats
import cg_teamChatsOnly
import cg_drawFriend
import cg_deferPlayers
import cg_predictItems
import cg_blood
import cg_paused
import cg_buildScript
import cg_stats
import cg_teamChatScaleY
import cg_teamChatScaleX
import cg_chatY
import cg_teamChatY
import cg_teamChatHeight
import cg_teamChatTime
import cg_synchronousClients
import cg_drawSpeed
import cg_drawAttacker
import cg_lagometer
import cg_thirdPerson
import cg_thirdPersonAngle
import cg_thirdPersonRange
import cg_thirdPersonOffset
import cg_zoomFov
import cg_fov
import cg_simpleItems
import cg_ignore
import cg_tracerLength
import cg_tracerWidth
import cg_tracerChance
import cg_viewsize
import cg_drawGun
import cg_gun_z
import cg_gun_y
import cg_gun_x
import cg_gun_frame
import cg_brassTime
import cg_addMarks
import cg_footsteps
import cg_showmiss
import cg_noPlayerAnims
import cg_nopredict
import cg_errorDecay
import cg_bigheadMode
import cg_disableLevelStartFade
import cg_paintballMode
import cg_railTrailTime
import cg_debugEvents
import cg_debugPosition
import cg_debugAnim
import cg_animSpeed
import cg_draw2D
import cg_drawStatus
import cg_crosshairScale
import cg_crosshairY
import cg_crosshairX
import cg_teamOverlayUserinfo
import cg_drawTeamOverlay
import cg_drawCrosshairNames
import cg_drawCrosshair
import cg_drawIcons
import cg_draw3dIcons
import cg_drawSnapshot
import cg_drawFPS
import cg_drawTimer
import cg_gibs
import cg_shadows
import cg_swingSpeed
import cg_bobroll
import cg_bobpitch
import cg_bobup
import cg_runroll
import cg_runpitch
import cg_drawSyncMessage
import cg_drawsubtitles
import cg_centertime
import cg_gibtime
import cg_itemstyle
import cg_oldscoreboard
import team_legsskin
import legsskin
import ui_backcolors
import cl_screenoffset
import cg_cameraeyes
import cg_leiChibi
import cg_plightradius
import cg_plightblue
import cg_plightgreen
import cg_plightred
import cg_tolightblue
import cg_tolightgreen
import cg_tolightred
import cg_hetex
import cg_totex
import cg_ptex
import cg_helightblue
import cg_helightgreen
import cg_helightred
import con_notifytime
import cl_language
import cg_toolguninfo
import cg_postprocess
import cg_hide255
import sb_texturename
import sb_texture_view
import sb_classnum_view
import toolgun_modelst
import toolgun_toolmode4
import toolgun_toolmode3
import toolgun_toolmode2
import toolgun_toolmode1
import toolgun_tooltip4
import toolgun_tooltip3
import toolgun_tooltip2
import toolgun_tooltip1
import toolgun_tooltext
import toolgun_toolcmd4
import toolgun_toolcmd3
import toolgun_toolcmd2
import toolgun_toolcmd1
import toolgun_tool
import toolgun_mod19
import toolgun_mod18
import toolgun_mod17
import toolgun_mod16
import toolgun_mod15
import toolgun_mod14
import toolgun_mod13
import toolgun_mod12
import toolgun_mod11
import toolgun_mod10
import toolgun_mod9
import toolgun_mod8
import toolgun_mod7
import toolgun_mod6
import toolgun_mod5
import toolgun_mod4
import toolgun_mod3
import toolgun_mod2
import toolgun_mod1
import cg_weaponBarActiveWidth
import cg_weaponselecttime
import cg_itemscaletime
import cg_zoomtime
import cg_gibmodifier
import cg_gibvelocity
import cg_gibjump
import cl_giantcharheight
import cl_giantcharwidth
import cl_bigcharheight
import cl_bigcharwidth
import cl_smallcharheight
import cl_smallcharwidth
import cl_propgapwidth
import cl_propspacewidth
import cl_propheight
import cl_propsmallsizescale
import g_gametype
import mod_skyColorA
import mod_skyColorB
import mod_skyColorG
import mod_skyColorR
import mod_skyShader
import mod_fogColorA
import mod_fogColorB
import mod_fogColorG
import mod_fogColorR
import mod_fogInterval
import mod_fogDistance
import mod_fogShader
import mod_fogModel
import mod_zround
import mod_gravity
import mod_roundmode
import mod_overlay
import mod_slickmove
import mod_accelerate
import mod_invulinf
import mod_kamikazeinf
import mod_portalinf
import mod_teleporterinf
import mod_medkitinf
import mod_medkitlimit
import mod_teamblue_firespeed
import mod_teamred_firespeed
import mod_invulmove
import mod_ammolimit
import mod_noplayerclip
import mod_doublerfirespeed
import mod_guardfirespeed
import mod_scoutfirespeed
import mod_ammoregenfirespeed
import mod_hastefirespeed
import mod_amdelay
import mod_ftdelay
import mod_cgdelay
import mod_pldelay
import mod_ngdelay
import mod_bfgdelay
import mod_rgdelay
import mod_pgdelay
import mod_lgdelay
import mod_rldelay
import mod_gldelay
import mod_sgdelay
import mod_mgdelay
import mod_gdelay
import mod_jumpheight
import mod_sgspread
import mod_sgcount
import mod_lgrange
import mod_cgspread
import mod_mgspread
import cg_markPolys
import cg_items
import cg_weapons
import cg_entities
import cg
import cgs
import BG_TeamName
import BG_GetVehicleSettings
import BG_VehicleCheckClass
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_DefragmentMemory
import BG_Free
import BG_InitMemory
import BG_Alloc
import BG_CanAlloc
import BG_CanItemBeGrabbed
import BG_FindItemForBackpack
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindSwepAmmo
import BG_FindSwep
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import COM_LoadLevelScores
import COM_CalculatePlayerScore
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import vectoyaw
import AngleDifference
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import Q_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import Lerp
import VelocityToAxis
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import Q_snprintf
import Q_vsnprintf
import strtol
import _atoi
import atoi
import strtod
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import ifstrlenru
import strlenru
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1328
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 32
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $1070
byte 1 67
byte 1 71
byte 1 95
byte 1 73
byte 1 110
byte 1 116
byte 1 101
byte 1 114
byte 1 112
byte 1 111
byte 1 97
byte 1 116
byte 1 101
byte 1 69
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 80
byte 1 111
byte 1 115
byte 1 105
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 58
byte 1 32
byte 1 99
byte 1 103
byte 1 46
byte 1 110
byte 1 101
byte 1 120
byte 1 116
byte 1 83
byte 1 110
byte 1 97
byte 1 112
byte 1 32
byte 1 61
byte 1 61
byte 1 32
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 0
align 1
LABELV $922
byte 1 46
byte 1 109
byte 1 100
byte 1 51
byte 1 0
align 1
LABELV $759
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 98
byte 1 97
byte 1 114
byte 1 114
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $486
byte 1 66
byte 1 97
byte 1 100
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 32
byte 1 105
byte 1 110
byte 1 100
byte 1 101
byte 1 120
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 111
byte 1 110
byte 1 32
byte 1 101
byte 1 110
byte 1 116
byte 1 105
byte 1 116
byte 1 121
byte 1 0
align 1
LABELV $474
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 104
byte 1 101
byte 1 101
byte 1 108
byte 1 114
byte 1 108
byte 1 0
align 1
LABELV $412
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 104
byte 1 101
byte 1 101
byte 1 108
byte 1 114
byte 1 114
byte 1 0
align 1
LABELV $350
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 104
byte 1 101
byte 1 101
byte 1 108
byte 1 102
byte 1 108
byte 1 0
align 1
LABELV $288
byte 1 116
byte 1 97
byte 1 103
byte 1 95
byte 1 119
byte 1 104
byte 1 101
byte 1 101
byte 1 108
byte 1 102
byte 1 114
byte 1 0
align 1
LABELV $233
byte 1 112
byte 1 114
byte 1 111
byte 1 112
byte 1 115
byte 1 47
byte 1 118
byte 1 95
byte 1 119
byte 1 104
byte 1 101
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $124
byte 1 112
byte 1 116
byte 1 101
byte 1 120
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $120
byte 1 112
byte 1 116
byte 1 101
byte 1 120
byte 1 47
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 105
byte 1 46
byte 1 115
byte 1 107
byte 1 105
byte 1 110
byte 1 0
