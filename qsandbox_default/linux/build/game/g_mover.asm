export G_TestEntityPosition
code
proc G_TestEntityPosition 68 28
file "../../../code/game/g_mover.c"
line 53
;1:/*
;2:===========================================================================
;3:Copyright (C) 1999-2005 Id Software, Inc.
;4:
;5:This file is part of Quake III Arena source code.
;6:
;7:Quake III Arena source code is free software; you can redistribute it
;8:and/or modify it under the terms of the GNU General Public License as
;9:published by the Free Software Foundation; either version 2 of the License,
;10:or (at your option) any later version.
;11:
;12:Quake III Arena source code is distributed in the hope that it will be
;13:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;14:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;15:GNU General Public License for more details.
;16:
;17:You should have received a copy of the GNU General Public License
;18:along with Quake III Arena source code; if not, write to the Free Software
;19:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;20:===========================================================================
;21:*/
;22://
;23:
;24:#include "g_local.h"
;25:
;26:
;27:
;28:/*
;29:===============================================================================
;30:
;31:PUSHMOVE
;32:
;33:===============================================================================
;34:*/
;35:
;36:void MatchTeam( gentity_t *teamLeader, int moverState, int time );
;37:
;38:typedef struct {
;39:	gentity_t	*ent;
;40:	vec3_t	origin;
;41:	vec3_t	angles;
;42:	float	deltayaw;
;43:} pushed_t;
;44:pushed_t	pushed[MAX_GENTITIES], *pushed_p;
;45:
;46:
;47:/*
;48:============
;49:G_TestEntityPosition
;50:
;51:============
;52:*/
;53:gentity_t	*G_TestEntityPosition( gentity_t *ent ) {
line 57
;54:	trace_t	tr;
;55:	int		mask;
;56:
;57:	if ( ent->clipmask ) {
ADDRFP4 0
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
CNSTI4 0
EQI4 $66
line 58
;58:		mask = ent->clipmask;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
ASGNI4
line 59
;59:	} else {
ADDRGP4 $67
JUMPV
LABELV $66
line 60
;60:		mask = MASK_SOLID;
ADDRLP4 56
CNSTI4 1
ASGNI4
line 61
;61:	}
LABELV $67
line 62
;62:	if ( ent->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $68
line 63
;63:		trap_Trace( &tr, ent->client->ps.origin, ent->r.mins, ent->r.maxs, ent->client->ps.origin, ent->s.number, mask );
ADDRLP4 0
ARGP4
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
ADDRLP4 60
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 476
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 60
INDIRP4
INDIRI4
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 64
;64:	} else {
ADDRGP4 $69
JUMPV
LABELV $68
line 65
;65:		trap_Trace( &tr, ent->s.pos.trBase, ent->r.mins, ent->r.maxs, ent->s.pos.trBase, ent->s.number, mask );
ADDRLP4 0
ARGP4
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
ADDRLP4 60
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 476
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRLP4 60
INDIRP4
INDIRI4
ARGI4
ADDRLP4 56
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 66
;66:	}
LABELV $69
line 68
;67:
;68:	if (tr.startsolid)
ADDRLP4 0+4
INDIRI4
CNSTI4 0
EQI4 $70
line 69
;69:		return &g_entities[ tr.entityNum ];
CNSTI4 2492
ADDRLP4 0+52
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
RETP4
ADDRGP4 $65
JUMPV
LABELV $70
line 71
;70:
;71:	return NULL;
CNSTP4 0
RETP4
LABELV $65
endproc G_TestEntityPosition 68 28
export G_CreateRotationMatrix
proc G_CreateRotationMatrix 4 16
line 79
;72:}
;73:
;74:/*
;75:================
;76:G_CreateRotationMatrix
;77:================
;78:*/
;79:void G_CreateRotationMatrix(vec3_t angles, vec3_t matrix[3]) {
line 80
;80:	AngleVectors(angles, matrix[0], matrix[1], matrix[2]);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 81
;81:	VectorInverse(matrix[1]);
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 VectorInverse
CALLV
pop
line 82
;82:}
LABELV $74
endproc G_CreateRotationMatrix 4 16
export G_TransposeMatrix
proc G_TransposeMatrix 24 0
line 89
;83:
;84:/*
;85:================
;86:G_TransposeMatrix
;87:================
;88:*/
;89:void G_TransposeMatrix(vec3_t matrix[3], vec3_t transpose[3]) {
line 91
;90:	int i, j;
;91:	for (i = 0; i < 3; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $76
line 92
;92:		for (j = 0; j < 3; j++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $80
line 93
;93:			transpose[i][j] = matrix[j][i];
ADDRLP4 12
CNSTI4 2
ASGNI4
ADDRLP4 16
CNSTI4 12
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
LSHI4
ADDRLP4 16
INDIRI4
ADDRLP4 4
INDIRI4
MULI4
ADDRFP4 4
INDIRP4
ADDP4
ADDP4
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
LSHI4
ADDRLP4 16
INDIRI4
ADDRLP4 0
INDIRI4
MULI4
ADDRFP4 0
INDIRP4
ADDP4
ADDP4
INDIRF4
ASGNF4
line 94
;94:		}
LABELV $81
line 92
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $80
line 95
;95:	}
LABELV $77
line 91
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $76
line 96
;96:}
LABELV $75
endproc G_TransposeMatrix 24 0
export G_RotatePoint
proc G_RotatePoint 24 0
line 103
;97:
;98:/*
;99:================
;100:G_RotatePoint
;101:================
;102:*/
;103:void G_RotatePoint(vec3_t point, vec3_t matrix[3]) {
line 106
;104:	vec3_t tvec;
;105:
;106:	VectorCopy(point, tvec);
ADDRLP4 0
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 12
line 107
;107:	point[0] = DotProduct(matrix[0], tvec);
ADDRLP4 12
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 0
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 108
;108:	point[1] = DotProduct(matrix[1], tvec);
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 16
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 109
;109:	point[2] = DotProduct(matrix[2], tvec);
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 110
;110:}
LABELV $84
endproc G_RotatePoint 24 0
export G_TryPushingEntity
proc G_TryPushingEntity 172 8
line 119
;111:
;112:/*
;113:==================
;114:G_TryPushingEntity
;115:
;116:Returns qfalse if the move is blocked
;117:==================
;118:*/
;119:qboolean	G_TryPushingEntity( gentity_t *check, gentity_t *pusher, vec3_t move, vec3_t amove ) {
line 126
;120:	vec3_t		matrix[3], transpose[3];
;121:	vec3_t		org, org2, move2;
;122:	gentity_t	*block;
;123:
;124:	// EF_MOVER_STOP will just stop when contacting another entity
;125:	// instead of pushing it, but entities can still ride on top of it
;126:	if ( ( pusher->s.eFlags & EF_MOVER_STOP ) &&
ADDRLP4 112
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $92
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ADDRLP4 112
INDIRP4
INDIRI4
EQI4 $92
line 127
;127:		check->s.groundEntityNum != pusher->s.number ) {
line 128
;128:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $91
JUMPV
LABELV $92
line 132
;129:	}
;130:
;131:	// save off the old position
;132:	if (pushed_p > &pushed[MAX_GENTITIES]) {
ADDRGP4 pushed_p
INDIRP4
CVPU4 4
ADDRGP4 pushed+131072
CVPU4 4
LEU4 $94
line 133
;133:		G_Error( "pushed_p > &pushed[MAX_GENTITIES]" );
ADDRGP4 $97
ARGP4
ADDRGP4 G_Error
CALLV
pop
line 134
;134:	}
LABELV $94
line 135
;135:	pushed_p->ent = check;
ADDRGP4 pushed_p
INDIRP4
ADDRFP4 0
INDIRP4
ASGNP4
line 136
;136:	VectorCopy (check->s.pos.trBase, pushed_p->origin);
ADDRGP4 pushed_p
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 137
;137:	VectorCopy (check->s.apos.trBase, pushed_p->angles);
ADDRGP4 pushed_p
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRB
ASGNB 12
line 138
;138:	if ( check->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $98
line 139
;139:		pushed_p->deltayaw = check->client->ps.delta_angles[YAW];
ADDRGP4 pushed_p
INDIRP4
CNSTI4 28
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 60
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 140
;140:		VectorCopy (check->client->ps.origin, pushed_p->origin);
ADDRGP4 pushed_p
INDIRP4
CNSTI4 4
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 141
;141:	}
LABELV $98
line 142
;142:	pushed_p++;
ADDRLP4 116
ADDRGP4 pushed_p
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
line 146
;143:
;144:	// try moving the contacted entity
;145:	// figure movement due to the pusher's amove
;146:	G_CreateRotationMatrix( amove, transpose );
ADDRFP4 12
INDIRP4
ARGP4
ADDRLP4 76
ARGP4
ADDRGP4 G_CreateRotationMatrix
CALLV
pop
line 147
;147:	G_TransposeMatrix( transpose, matrix );
ADDRLP4 76
ARGP4
ADDRLP4 40
ARGP4
ADDRGP4 G_TransposeMatrix
CALLV
pop
line 148
;148:	if ( check->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $100
line 149
;149:		VectorSubtract (check->client->ps.origin, pusher->r.currentOrigin, org);
ADDRLP4 120
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
ASGNP4
ADDRLP4 124
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 120
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 124
INDIRP4
CNSTI4 528
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 120
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 124
INDIRP4
CNSTI4 532
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+8
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 536
ADDP4
INDIRF4
SUBF4
ASGNF4
line 150
;150:	}
ADDRGP4 $101
JUMPV
LABELV $100
line 151
;151:	else {
line 152
;152:		VectorSubtract (check->s.pos.trBase, pusher->r.currentOrigin, org);
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 124
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 120
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 124
INDIRP4
CNSTI4 528
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 120
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 124
INDIRP4
CNSTI4 532
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 536
ADDP4
INDIRF4
SUBF4
ASGNF4
line 153
;153:	}
LABELV $101
line 154
;154:	VectorCopy( org, org2 );
ADDRLP4 24
ADDRLP4 12
INDIRB
ASGNB 12
line 155
;155:	G_RotatePoint( org2, matrix );
ADDRLP4 24
ARGP4
ADDRLP4 40
ARGP4
ADDRGP4 G_RotatePoint
CALLV
pop
line 156
;156:	VectorSubtract (org2, org, move2);
ADDRLP4 0
ADDRLP4 24
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 24+4
INDIRF4
ADDRLP4 12+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 24+8
INDIRF4
ADDRLP4 12+8
INDIRF4
SUBF4
ASGNF4
line 158
;157:	// add movement
;158:	VectorAdd (check->s.pos.trBase, move, check->s.pos.trBase);
ADDRLP4 120
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 124
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 128
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 159
;159:	VectorAdd (check->s.pos.trBase, move2, check->s.pos.trBase);
ADDRLP4 132
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 136
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 136
INDIRP4
ADDRLP4 136
INDIRP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 160
;160:	if ( check->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $114
line 161
;161:		VectorAdd (check->client->ps.origin, move, check->client->ps.origin);
ADDRLP4 144
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 144
INDIRP4
ADDRLP4 144
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 148
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 148
INDIRP4
ADDRLP4 148
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 152
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 162
;162:		VectorAdd (check->client->ps.origin, move2, check->client->ps.origin);
ADDRLP4 156
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 156
INDIRP4
ADDRLP4 156
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 160
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 160
INDIRP4
ADDRLP4 160
INDIRP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 164
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 164
INDIRP4
ADDRLP4 164
INDIRP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 164
;163:		// make sure the client's view rotates when on a rotating mover
;164:		check->client->ps.delta_angles[YAW] += ANGLE2SHORT(amove[YAW]);
ADDRLP4 168
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 60
ADDP4
ASGNP4
ADDRLP4 168
INDIRP4
ADDRLP4 168
INDIRP4
INDIRI4
CNSTF4 1199570944
ADDRFP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
CNSTF4 1135869952
DIVF4
CVFI4 4
CNSTI4 65535
BANDI4
ADDI4
ASGNI4
line 165
;165:	}
LABELV $114
line 168
;166:
;167:	// may have pushed them off an edge
;168:	if ( check->s.groundEntityNum != pusher->s.number ) {
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ADDRFP4 4
INDIRP4
INDIRI4
EQI4 $118
line 169
;169:		check->s.groundEntityNum = -1;
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
CNSTI4 -1
ASGNI4
line 170
;170:	}
LABELV $118
line 172
;171:
;172:	block = G_TestEntityPosition( check );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 144
ADDRGP4 G_TestEntityPosition
CALLP4
ASGNP4
ADDRLP4 36
ADDRLP4 144
INDIRP4
ASGNP4
line 173
;173:	if (!block) {
ADDRLP4 36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $120
line 175
;174:		// pushed ok
;175:		if ( check->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $122
line 176
;176:			VectorCopy( check->client->ps.origin, check->r.currentOrigin );
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 148
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 177
;177:		} else {
ADDRGP4 $123
JUMPV
LABELV $122
line 178
;178:			VectorCopy( check->s.pos.trBase, check->r.currentOrigin );
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 148
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 179
;179:		}
LABELV $123
line 180
;180:		trap_LinkEntity (check);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 181
;181:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $91
JUMPV
LABELV $120
line 187
;182:	}
;183:
;184:	// if it is ok to leave in the old position, do it
;185:	// this is only relevent for riding entities, not pushed
;186:	// Sliding trapdoors can cause this.
;187:	VectorCopy( (pushed_p-1)->origin, check->s.pos.trBase);
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRGP4 pushed_p
INDIRP4
CNSTI4 -28
ADDP4
INDIRB
ASGNB 12
line 188
;188:	if ( check->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $124
line 189
;189:		VectorCopy( (pushed_p-1)->origin, check->client->ps.origin);
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ADDRGP4 pushed_p
INDIRP4
CNSTI4 -28
ADDP4
INDIRB
ASGNB 12
line 190
;190:	}
LABELV $124
line 191
;191:	VectorCopy( (pushed_p-1)->angles, check->s.apos.trBase );
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
ADDRGP4 pushed_p
INDIRP4
CNSTI4 -16
ADDP4
INDIRB
ASGNB 12
line 192
;192:	block = G_TestEntityPosition (check);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 148
ADDRGP4 G_TestEntityPosition
CALLP4
ASGNP4
ADDRLP4 36
ADDRLP4 148
INDIRP4
ASGNP4
line 193
;193:	if ( !block ) {
ADDRLP4 36
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $126
line 194
;194:		check->s.groundEntityNum = -1;
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
CNSTI4 -1
ASGNI4
line 195
;195:		pushed_p--;
ADDRLP4 152
ADDRGP4 pushed_p
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRP4
CNSTI4 -32
ADDP4
ASGNP4
line 196
;196:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $91
JUMPV
LABELV $126
line 200
;197:	}
;198:
;199:	// blocked
;200:	return qfalse;
CNSTI4 0
RETI4
LABELV $91
endproc G_TryPushingEntity 172 8
export G_CheckProxMinePosition
proc G_CheckProxMinePosition 108 28
line 208
;201:}
;202:
;203:/*
;204:==================
;205:G_CheckProxMinePosition
;206:==================
;207:*/
;208:qboolean G_CheckProxMinePosition( gentity_t *check ) {
line 212
;209:	vec3_t		start, end;
;210:	trace_t	tr;
;211:
;212:	VectorMA(check->s.pos.trBase, 0.125, check->movedir, start);
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
CNSTF4 1040187392
ASGNF4
ADDRLP4 0
ADDRLP4 80
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 84
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 748
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 80
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 84
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 752
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 88
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 1040187392
ADDRLP4 88
INDIRP4
CNSTI4 756
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 213
;213:	VectorMA(check->s.pos.trBase, 2, check->movedir, end);
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
CNSTF4 1073741824
ASGNF4
ADDRLP4 12
ADDRLP4 92
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 748
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 92
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 96
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 752
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12+8
ADDRLP4 100
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 1073741824
ADDRLP4 100
INDIRP4
CNSTI4 756
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 214
;214:	trap_Trace( &tr, start, NULL, NULL, end, check->s.number, MASK_SOLID );
ADDRLP4 24
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 104
CNSTP4 0
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 12
ARGP4
ADDRFP4 0
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 216
;215:
;216:	if (tr.startsolid || tr.fraction < 1)
ADDRLP4 24+4
INDIRI4
CNSTI4 0
NEI4 $137
ADDRLP4 24+8
INDIRF4
CNSTF4 1065353216
GEF4 $133
LABELV $137
line 217
;217:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $128
JUMPV
LABELV $133
line 219
;218:
;219:	return qtrue;
CNSTI4 1
RETI4
LABELV $128
endproc G_CheckProxMinePosition 108 28
export G_TryPushingProxMine
proc G_TryPushingProxMine 120 16
line 227
;220:}
;221:
;222:/*
;223:==================
;224:G_TryPushingProxMine
;225:==================
;226:*/
;227:qboolean G_TryPushingProxMine( gentity_t *check, gentity_t *pusher, vec3_t move, vec3_t amove ) {
line 233
;228:	vec3_t		forward, right, up;
;229:	vec3_t		org, org2, move2;
;230:	int ret;
;231:
;232:	// we need this for pushing things later
;233:	VectorSubtract (vec3_origin, amove, org);
ADDRLP4 76
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 0
ADDRGP4 vec3_origin
INDIRF4
ADDRLP4 76
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRGP4 vec3_origin+4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRGP4 vec3_origin+8
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 234
;234:	AngleVectors (org, forward, right, up);
ADDRLP4 0
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 48
ARGP4
ADDRLP4 60
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 237
;235:
;236:	// try moving the contacted entity
;237:	VectorAdd (check->s.pos.trBase, move, check->s.pos.trBase);
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 240
;238:
;239:	// figure movement due to the pusher's amove
;240:	VectorSubtract (check->s.pos.trBase, pusher->r.currentOrigin, org);
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 92
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 528
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 92
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 532
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 536
ADDP4
INDIRF4
SUBF4
ASGNF4
line 241
;241:	org2[0] = DotProduct (org, forward);
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 36+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 36+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 242
;242:	org2[1] = -DotProduct (org, right);
ADDRLP4 12+4
ADDRLP4 0
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 48+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 48+8
INDIRF4
MULF4
ADDF4
NEGF4
ASGNF4
line 243
;243:	org2[2] = DotProduct (org, up);
ADDRLP4 12+8
ADDRLP4 0
INDIRF4
ADDRLP4 60
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 60+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 60+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 244
;244:	VectorSubtract (org2, org, move2);
ADDRLP4 24
ADDRLP4 12
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
ADDRLP4 24+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 0+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 24+8
ADDRLP4 12+8
INDIRF4
ADDRLP4 0+8
INDIRF4
SUBF4
ASGNF4
line 245
;245:	VectorAdd (check->s.pos.trBase, move2, check->s.pos.trBase);
ADDRLP4 100
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRF4
ADDRLP4 24
INDIRF4
ADDF4
ASGNF4
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRF4
ADDRLP4 24+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 108
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRF4
ADDRLP4 24+8
INDIRF4
ADDF4
ASGNF4
line 247
;246:
;247:	ret = G_CheckProxMinePosition( check );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 G_CheckProxMinePosition
CALLI4
ASGNI4
ADDRLP4 72
ADDRLP4 112
INDIRI4
ASGNI4
line 248
;248:	if (ret) {
ADDRLP4 72
INDIRI4
CNSTI4 0
EQI4 $167
line 249
;249:		VectorCopy( check->s.pos.trBase, check->r.currentOrigin );
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 116
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 250
;250:		trap_LinkEntity (check);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 251
;251:	}
LABELV $167
line 252
;252:	return ret;
ADDRLP4 72
INDIRI4
RETI4
LABELV $138
endproc G_TryPushingProxMine 120 16
export G_MoverPush
proc G_MoverPush 144 32
line 266
;253:}
;254:
;255:void G_ExplodeMissile( gentity_t *ent );
;256:
;257:/*
;258:============
;259:G_MoverPush
;260:
;261:Objects need to be moved back on a failed push,
;262:otherwise riders would continue to slide.
;263:If qfalse is returned, *obstacle will be the blocking entity
;264:============
;265:*/
;266:qboolean G_MoverPush( gentity_t *pusher, vec3_t move, vec3_t amove, gentity_t **obstacle ) {
line 274
;267:	int			i, e;
;268:	gentity_t	*check;
;269:	vec3_t		mins, maxs;
;270:	pushed_t	*p;
;271:	int			listedEntities;
;272:	vec3_t		totalMins, totalMaxs;
;273:
;274:	*obstacle = NULL;
ADDRFP4 12
INDIRP4
CNSTP4 0
ASGNP4
line 279
;275:
;276:
;277:	// mins/maxs are the bounds at the destination
;278:	// totalMins / totalMaxs are the bounds for the entire move
;279:	if ( pusher->r.currentAngles[0] || pusher->r.currentAngles[1] || pusher->r.currentAngles[2]
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
CNSTF4 0
ASGNF4
ADDRLP4 68
INDIRP4
CNSTI4 540
ADDP4
INDIRF4
ADDRLP4 72
INDIRF4
NEF4 $176
ADDRLP4 68
INDIRP4
CNSTI4 544
ADDP4
INDIRF4
ADDRLP4 72
INDIRF4
NEF4 $176
ADDRLP4 68
INDIRP4
CNSTI4 548
ADDP4
INDIRF4
ADDRLP4 72
INDIRF4
NEF4 $176
ADDRLP4 76
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 72
INDIRF4
NEF4 $176
ADDRLP4 76
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 72
INDIRF4
NEF4 $176
ADDRLP4 76
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 72
INDIRF4
EQF4 $170
LABELV $176
line 280
;280:		|| amove[0] || amove[1] || amove[2] ) {
line 283
;281:		float		radius;
;282:
;283:		radius = RadiusFromBounds( pusher->r.mins, pusher->r.maxs );
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 476
ADDP4
ARGP4
ADDRLP4 84
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 88
ADDRGP4 RadiusFromBounds
CALLF4
ASGNF4
ADDRLP4 80
ADDRLP4 88
INDIRF4
ASGNF4
line 284
;284:		for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $177
line 285
;285:			mins[i] = pusher->r.currentOrigin[i] + move[i] - radius;
ADDRLP4 92
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 92
INDIRI4
ADDRLP4 16
ADDP4
ADDRLP4 92
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDP4
INDIRF4
ADDRLP4 92
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ADDRLP4 80
INDIRF4
SUBF4
ASGNF4
line 286
;286:			maxs[i] = pusher->r.currentOrigin[i] + move[i] + radius;
ADDRLP4 96
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 96
INDIRI4
ADDRLP4 28
ADDP4
ADDRLP4 96
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDP4
INDIRF4
ADDRLP4 96
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ADDRLP4 80
INDIRF4
ADDF4
ASGNF4
line 287
;287:			totalMins[i] = mins[i] - move[i];
ADDRLP4 100
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 100
INDIRI4
ADDRLP4 44
ADDP4
ADDRLP4 100
INDIRI4
ADDRLP4 16
ADDP4
INDIRF4
ADDRLP4 100
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 288
;288:			totalMaxs[i] = maxs[i] - move[i];
ADDRLP4 104
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 104
INDIRI4
ADDRLP4 56
ADDP4
ADDRLP4 104
INDIRI4
ADDRLP4 28
ADDP4
INDIRF4
ADDRLP4 104
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 289
;289:		}
LABELV $178
line 284
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 3
LTI4 $177
line 290
;290:	} else {
ADDRGP4 $171
JUMPV
LABELV $170
line 291
;291:		for (i=0 ; i<3 ; i++) {
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $181
line 292
;292:			mins[i] = pusher->r.absmin[i] + move[i];
ADDRLP4 80
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 80
INDIRI4
ADDRLP4 16
ADDP4
ADDRLP4 80
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 504
ADDP4
ADDP4
INDIRF4
ADDRLP4 80
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 293
;293:			maxs[i] = pusher->r.absmax[i] + move[i];
ADDRLP4 84
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 84
INDIRI4
ADDRLP4 28
ADDP4
ADDRLP4 84
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
ADDP4
INDIRF4
ADDRLP4 84
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 294
;294:		}
LABELV $182
line 291
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 3
LTI4 $181
line 296
;295:
;296:		VectorCopy( pusher->r.absmin, totalMins );
ADDRLP4 44
ADDRFP4 0
INDIRP4
CNSTI4 504
ADDP4
INDIRB
ASGNB 12
line 297
;297:		VectorCopy( pusher->r.absmax, totalMaxs );
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRB
ASGNB 12
line 298
;298:		for (i=0 ; i<3 ; i++) {
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $185
line 299
;299:			if ( move[i] > 0 ) {
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
CNSTF4 0
LEF4 $189
line 300
;300:				totalMaxs[i] += move[i];
ADDRLP4 80
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 84
ADDRLP4 80
INDIRI4
ADDRLP4 56
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
ADDRLP4 80
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 301
;301:			} else {
ADDRGP4 $190
JUMPV
LABELV $189
line 302
;302:				totalMins[i] += move[i];
ADDRLP4 80
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 84
ADDRLP4 80
INDIRI4
ADDRLP4 44
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
ADDRLP4 80
INDIRI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDF4
ASGNF4
line 303
;303:			}
LABELV $190
line 304
;304:		}
LABELV $186
line 298
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 3
LTI4 $185
line 305
;305:	}
LABELV $171
line 308
;306:
;307:	// unlink the pusher so we don't get it in the entityList
;308:	trap_UnlinkEntity( pusher );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_UnlinkEntity
CALLV
pop
line 310
;309:
;310:	listedEntities = trap_EntitiesInBox( totalMins, totalMaxs, MiTechEntityList, MAX_GENTITIES );
ADDRLP4 44
ARGP4
ADDRLP4 56
ARGP4
ADDRGP4 MiTechEntityList
ARGP4
CNSTI4 4096
ARGI4
ADDRLP4 80
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 80
INDIRI4
ASGNI4
line 313
;311:
;312:	// move the pusher to it's final position
;313:	VectorAdd( pusher->r.currentOrigin, move, pusher->r.currentOrigin );
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 92
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 314
;314:	VectorAdd( pusher->r.currentAngles, amove, pusher->r.currentAngles );
ADDRLP4 96
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 100
ADDRFP4 0
INDIRP4
CNSTI4 544
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 548
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDF4
ASGNF4
line 315
;315:	trap_LinkEntity( pusher );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 318
;316:
;317:	// see if any solid entities are inside the final position
;318:	for ( e = 0 ; e < listedEntities ; e++ ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRGP4 $194
JUMPV
LABELV $191
line 319
;319:		check = &g_entities[ MiTechEntityList[ e ] ];
ADDRLP4 4
CNSTI4 2492
ADDRLP4 12
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 MiTechEntityList
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 321
;320:
;321:		if ( check->s.eType == ET_MISSILE ) {
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $195
line 323
;322:			// if it is a prox mine
;323:			if ( !strcmp(check->classname, "prox mine") ) {
ADDRLP4 4
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $199
ARGP4
ADDRLP4 108
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 0
NEI4 $197
line 325
;324:				// if this prox mine is attached to this mover try to move it with the pusher
;325:				if ( check->enemy == pusher ) {
ADDRLP4 4
INDIRP4
CNSTI4 964
ADDP4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $200
line 326
;326:					if (!G_TryPushingProxMine( check, pusher, move, amove )) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 G_TryPushingProxMine
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 0
NEI4 $192
line 328
;327:						//explode
;328:						check->s.loopSound = 0;
ADDRLP4 4
INDIRP4
CNSTI4 168
ADDP4
CNSTI4 0
ASGNI4
line 329
;329:						G_AddEvent( check, EV_PROXIMITY_MINE_TRIGGER, 0 );
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 68
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 330
;330:						G_ExplodeMissile(check);
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 G_ExplodeMissile
CALLV
pop
line 331
;331:						if (check->activator) {
ADDRLP4 4
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $192
line 332
;332:							G_FreeEntity(check->activator);
ADDRLP4 4
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 333
;333:							check->activator = NULL;
ADDRLP4 4
INDIRP4
CNSTI4 968
ADDP4
CNSTP4 0
ASGNP4
line 334
;334:						}
line 336
;335:						//G_Printf("prox mine explodes\n");
;336:					}
line 337
;337:				}
ADDRGP4 $192
JUMPV
LABELV $200
line 338
;338:				else {
line 340
;339:					//check if the prox mine is crushed by the mover
;340:					if (!G_CheckProxMinePosition( check )) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 112
ADDRGP4 G_CheckProxMinePosition
CALLI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 0
NEI4 $192
line 342
;341:						//explode
;342:						check->s.loopSound = 0;
ADDRLP4 4
INDIRP4
CNSTI4 168
ADDP4
CNSTI4 0
ASGNI4
line 343
;343:						G_AddEvent( check, EV_PROXIMITY_MINE_TRIGGER, 0 );
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 68
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 344
;344:						G_ExplodeMissile(check);
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 G_ExplodeMissile
CALLV
pop
line 345
;345:						if (check->activator) {
ADDRLP4 4
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $192
line 346
;346:							G_FreeEntity(check->activator);
ADDRLP4 4
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 347
;347:							check->activator = NULL;
ADDRLP4 4
INDIRP4
CNSTI4 968
ADDP4
CNSTP4 0
ASGNP4
line 348
;348:						}
line 350
;349:						//G_Printf("prox mine explodes\n");
;350:					}
line 351
;351:				}
line 352
;352:				continue;
ADDRGP4 $192
JUMPV
LABELV $197
line 354
;353:			}
;354:		}
LABELV $195
line 356
;355:		// only push items and players
;356:		if ( check->s.eType != ET_ITEM && check->s.eType != ET_PLAYER && !check->physicsObject ) {
ADDRLP4 112
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 112
INDIRI4
CNSTI4 2
EQI4 $210
ADDRLP4 112
INDIRI4
CNSTI4 1
EQI4 $210
ADDRLP4 4
INDIRP4
CNSTI4 604
ADDP4
INDIRI4
CNSTI4 0
NEI4 $210
line 357
;357:			continue;
ADDRGP4 $192
JUMPV
LABELV $210
line 361
;358:		}
;359:
;360:		// if the entity is standing on the pusher, it will definitely be moved
;361:		if ( check->s.groundEntityNum != pusher->s.number ) {
ADDRLP4 4
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
EQI4 $212
line 363
;362:			// see if the ent needs to be tested
;363:			if ( check->r.absmin[0] >= maxs[0]
ADDRLP4 4
INDIRP4
CNSTI4 504
ADDP4
INDIRF4
ADDRLP4 28
INDIRF4
GEF4 $224
ADDRLP4 4
INDIRP4
CNSTI4 508
ADDP4
INDIRF4
ADDRLP4 28+4
INDIRF4
GEF4 $224
ADDRLP4 4
INDIRP4
CNSTI4 512
ADDP4
INDIRF4
ADDRLP4 28+8
INDIRF4
GEF4 $224
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
LEF4 $224
ADDRLP4 4
INDIRP4
CNSTI4 520
ADDP4
INDIRF4
ADDRLP4 16+4
INDIRF4
LEF4 $224
ADDRLP4 4
INDIRP4
CNSTI4 524
ADDP4
INDIRF4
ADDRLP4 16+8
INDIRF4
GTF4 $214
LABELV $224
line 368
;364:			|| check->r.absmin[1] >= maxs[1]
;365:			|| check->r.absmin[2] >= maxs[2]
;366:			|| check->r.absmax[0] <= mins[0]
;367:			|| check->r.absmax[1] <= mins[1]
;368:			|| check->r.absmax[2] <= mins[2] ) {
line 369
;369:				continue;
ADDRGP4 $192
JUMPV
LABELV $214
line 373
;370:			}
;371:			// see if the ent's bbox is inside the pusher's final position
;372:			// this does allow a fast moving object to pass through a thin entity...
;373:			if (!G_TestEntityPosition (check)) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 G_TestEntityPosition
CALLP4
ASGNP4
ADDRLP4 120
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $225
line 374
;374:				continue;
ADDRGP4 $192
JUMPV
LABELV $225
line 376
;375:			}
;376:		}
LABELV $212
line 379
;377:
;378:		// the entity needs to be pushed
;379:		if ( G_TryPushingEntity( check, pusher, move, amove ) ) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 116
ADDRGP4 G_TryPushingEntity
CALLI4
ASGNI4
ADDRLP4 116
INDIRI4
CNSTI4 0
EQI4 $227
line 380
;380:			continue;
ADDRGP4 $192
JUMPV
LABELV $227
line 386
;381:		}
;382:
;383:		// the move was blocked an entity
;384:
;385:		// bobbing entities are instant-kill and never get blocked
;386:		if ( pusher->s.pos.trType == TR_SINE || pusher->s.apos.trType == TR_SINE ) {
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 124
CNSTI4 4
ASGNI4
ADDRLP4 120
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 124
INDIRI4
EQI4 $231
ADDRLP4 120
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
ADDRLP4 124
INDIRI4
NEI4 $229
LABELV $231
line 388
;387:			//only deal damage to player if not in a cutscene
;388:			if (check && (check->client->ps.pm_type != PM_CUTSCENE || IsBot(check)))
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $192
ADDRLP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 7
NEI4 $234
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 IsBot
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 0
EQI4 $192
LABELV $234
line 389
;389:			G_Damage( check, pusher, pusher, NULL, NULL, 99999, 0, MOD_CRUSH );
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 136
INDIRP4
ARGP4
ADDRLP4 136
INDIRP4
ARGP4
ADDRLP4 140
CNSTP4 0
ASGNP4
ADDRLP4 140
INDIRP4
ARGP4
ADDRLP4 140
INDIRP4
ARGP4
CNSTI4 99999
ARGI4
CNSTI4 0
ARGI4
CNSTI4 22
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 390
;390:			continue;
ADDRGP4 $192
JUMPV
LABELV $229
line 395
;391:		}
;392:
;393:
;394:		// save off the obstacle so we can call the block function (crush, etc)
;395:		*obstacle = check;
ADDRFP4 12
INDIRP4
ADDRLP4 4
INDIRP4
ASGNP4
line 400
;396:
;397:		// move back any entities we already moved
;398:		// go backwards, so if the same entity was pushed
;399:		// twice, it goes back to the original position
;400:		for ( p=pushed_p-1 ; p>=pushed ; p-- ) {
ADDRLP4 0
ADDRGP4 pushed_p
INDIRP4
CNSTI4 -32
ADDP4
ASGNP4
ADDRGP4 $238
JUMPV
LABELV $235
line 401
;401:			VectorCopy (p->origin, p->ent->s.pos.trBase);
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRB
ASGNB 12
line 402
;402:			VectorCopy (p->angles, p->ent->s.apos.trBase);
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRB
ASGNB 12
line 403
;403:			if ( p->ent->client ) {
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $239
line 404
;404:				p->ent->client->ps.delta_angles[YAW] = p->deltayaw;
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 405
;405:				VectorCopy (p->origin, p->ent->client->ps.origin);
ADDRLP4 0
INDIRP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRB
ASGNB 12
line 406
;406:			}
LABELV $239
line 407
;407:			trap_LinkEntity (p->ent);
ADDRLP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 408
;408:		}
LABELV $236
line 400
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 -32
ADDP4
ASGNP4
LABELV $238
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRGP4 pushed
CVPU4 4
GEU4 $235
line 409
;409:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $169
JUMPV
LABELV $192
line 318
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $194
ADDRLP4 12
INDIRI4
ADDRLP4 40
INDIRI4
LTI4 $191
line 412
;410:	}
;411:
;412:	return qtrue;
CNSTI4 1
RETI4
LABELV $169
endproc G_MoverPush 144 32
export G_MoverTeam
proc G_MoverTeam 72 16
line 421
;413:}
;414:
;415:
;416:/*
;417:=================
;418:G_MoverTeam
;419:=================
;420:*/
;421:void G_MoverTeam( gentity_t *ent ) {
line 426
;422:	vec3_t		move, amove;
;423:	gentity_t	*part, *obstacle;
;424:	vec3_t		origin, angles;
;425:
;426:	obstacle = NULL;
ADDRLP4 52
CNSTP4 0
ASGNP4
line 431
;427:
;428:	// make sure all team slaves can move before commiting
;429:	// any moves or calling any think functions
;430:	// if the move is blocked, all moved objects will be backed out
;431:	pushed_p = pushed;
ADDRGP4 pushed_p
ADDRGP4 pushed
ASGNP4
line 432
;432:	for (part = ent ; part ; part=part->teamchain) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $245
JUMPV
LABELV $242
line 434
;433:		// get current position
;434:		BG_EvaluateTrajectory( &part->s.pos, level.time, origin );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 28
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 435
;435:		BG_EvaluateTrajectory( &part->s.apos, level.time, angles );
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 40
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 436
;436:		VectorSubtract( origin, part->r.currentOrigin, move );
ADDRLP4 4
ADDRLP4 28
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 28+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 28+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRF4
SUBF4
ASGNF4
line 437
;437:		VectorSubtract( angles, part->r.currentAngles, amove );
ADDRLP4 16
ADDRLP4 40
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 540
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 40+4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 544
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 40+8
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 548
ADDP4
INDIRF4
SUBF4
ASGNF4
line 438
;438:		if ( !G_MoverPush( part, move, amove, &obstacle ) ) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 16
ARGP4
ADDRLP4 52
ARGP4
ADDRLP4 64
ADDRGP4 G_MoverPush
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
NEI4 $256
line 439
;439:			break;	// move was blocked
ADDRGP4 $244
JUMPV
LABELV $256
line 441
;440:		}
;441:	}
LABELV $243
line 432
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 972
ADDP4
INDIRP4
ASGNP4
LABELV $245
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $242
LABELV $244
line 443
;442:
;443:	if (part) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $258
line 445
;444:		// go back to the previous position
;445:		for ( part = ent ; part ; part = part->teamchain ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $263
JUMPV
LABELV $260
line 446
;446:			part->s.pos.trTime += level.time - level.previousTime;
ADDRLP4 56
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+36
INDIRI4
SUBI4
ADDI4
ASGNI4
line 447
;447:			part->s.apos.trTime += level.time - level.previousTime;
ADDRLP4 60
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRI4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+36
INDIRI4
SUBI4
ADDI4
ASGNI4
line 448
;448:			BG_EvaluateTrajectory( &part->s.pos, level.time, part->r.currentOrigin );
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 449
;449:			BG_EvaluateTrajectory( &part->s.apos, level.time, part->r.currentAngles );
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 540
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 450
;450:			trap_LinkEntity( part );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 451
;451:		}
LABELV $261
line 445
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 972
ADDP4
INDIRP4
ASGNP4
LABELV $263
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $260
line 454
;452:
;453:		// if the pusher has a "blocked" function, call it
;454:		if (ent->blocked) {
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $241
line 455
;455:			ent->blocked( ent, obstacle );
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 52
INDIRP4
ARGP4
ADDRLP4 56
INDIRP4
CNSTI4 776
ADDP4
INDIRP4
CALLV
pop
line 456
;456:		}
line 457
;457:		return;
ADDRGP4 $241
JUMPV
LABELV $258
line 461
;458:	}
;459:
;460:	// the move succeeded
;461:	for ( part = ent ; part ; part = part->teamchain ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $275
JUMPV
LABELV $272
line 463
;462:		// call the reached function if time is at or past end point
;463:		if ( part->s.pos.trType == TR_LINEAR_STOP ) {
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 3
NEI4 $276
line 464
;464:			if ( level.time >= part->s.pos.trTime + part->s.pos.trDuration ) {
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ADDI4
LTI4 $278
line 465
;465:				if ( part->reached ) {
ADDRLP4 0
INDIRP4
CNSTI4 772
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $281
line 466
;466:					part->reached( part );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 772
ADDP4
INDIRP4
CALLV
pop
line 467
;467:				}
LABELV $281
line 468
;468:			}
LABELV $278
line 469
;469:		}
LABELV $276
line 470
;470:		if ( part->s.apos.trType == TR_LINEAR_STOP ) {
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CNSTI4 3
NEI4 $283
line 471
;471:			if ( level.time >= part->s.apos.trTime + part->s.apos.trDuration ) {
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ADDI4
LTI4 $285
line 472
;472:				if ( part->reached ) {
ADDRLP4 0
INDIRP4
CNSTI4 772
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $288
line 473
;473:					part->reached( part );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 772
ADDP4
INDIRP4
CALLV
pop
line 474
;474:				}
LABELV $288
line 475
;475:			}
LABELV $285
line 476
;476:		}
LABELV $283
line 477
;477:	}
LABELV $273
line 461
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 972
ADDP4
INDIRP4
ASGNP4
LABELV $275
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $272
line 478
;478:}
LABELV $241
endproc G_MoverTeam 72 16
export G_RunMover
proc G_RunMover 8 4
line 486
;479:
;480:/*
;481:================
;482:G_RunMover
;483:
;484:================
;485:*/
;486:void G_RunMover( gentity_t *ent ) {
line 489
;487:	// if not a team captain, don't do anything, because
;488:	// the captain will handle everything
;489:	if ( ent->flags & FL_TEAMSLAVE ) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $291
line 490
;490:		return;
ADDRGP4 $290
JUMPV
LABELV $291
line 494
;491:	}
;492:
;493:	// if stationary at one of the positions, don't move anything
;494:	if ( ent->s.pos.trType != TR_STATIONARY || ent->s.apos.trType != TR_STATIONARY ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $295
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $293
LABELV $295
line 495
;495:		G_MoverTeam( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_MoverTeam
CALLV
pop
line 496
;496:	}
LABELV $293
line 499
;497:
;498:	// check think function
;499:	G_RunThink( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 500
;500:}
LABELV $290
endproc G_RunMover 8 4
export SetMoverState
proc SetMoverState 88 12
line 517
;501:
;502:/*
;503:============================================================================
;504:
;505:GENERAL MOVERS
;506:
;507:Doors, plats, and buttons are all binary (two position) movers
;508:Pos1 is "at rest", pos2 is "activated"
;509:============================================================================
;510:*/
;511:
;512:/*
;513:===============
;514:SetMoverState
;515:===============
;516:*/
;517:void SetMoverState( gentity_t *ent, moverState_t moverState, int time ) {
line 521
;518:	vec3_t			delta;
;519:	float			f;
;520:
;521:	ent->moverState = moverState;
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
ADDRFP4 4
INDIRI4
ASGNI4
line 523
;522:
;523:	ent->s.pos.trTime = time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 524
;524:	ent->s.apos.trTime = time;
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 525
;525:	switch( moverState ) {
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
LTI4 $297
ADDRLP4 16
INDIRI4
CNSTI4 7
GTI4 $297
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $324
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $324
address $300
address $301
address $302
address $307
address $312
address $313
address $314
address $319
code
LABELV $300
line 527
;526:	case MOVER_POS1:
;527:		VectorCopy( ent->pos1, ent->s.pos.trBase );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 656
ADDP4
INDIRB
ASGNB 12
line 528
;528:		ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 529
;529:		break;
ADDRGP4 $298
JUMPV
LABELV $301
line 531
;530:	case MOVER_POS2:
;531:		VectorCopy( ent->pos2, ent->s.pos.trBase );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 668
ADDP4
INDIRB
ASGNB 12
line 532
;532:		ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 533
;533:		break;
ADDRGP4 $298
JUMPV
LABELV $302
line 535
;534:	case MOVER_1TO2:
;535:		VectorCopy( ent->pos1, ent->s.pos.trBase );
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 656
ADDP4
INDIRB
ASGNB 12
line 536
;536:		VectorSubtract( ent->pos2, ent->pos1, delta );
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 36
INDIRP4
CNSTI4 668
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 36
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 40
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
SUBF4
ASGNF4
line 537
;537:		f = 1000.0 / ent->s.pos.trDuration;
ADDRLP4 12
CNSTF4 1148846080
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 538
;538:		VectorScale( delta, f, ent->s.pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 539
;539:		ent->s.pos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 3
ASGNI4
line 540
;540:		break;
ADDRGP4 $298
JUMPV
LABELV $307
line 542
;541:	case MOVER_2TO1:
;542:		VectorCopy( ent->pos2, ent->s.pos.trBase );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 668
ADDP4
INDIRB
ASGNB 12
line 543
;543:		VectorSubtract( ent->pos1, ent->pos2, delta );
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 48
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 668
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 48
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 52
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
SUBF4
ASGNF4
line 544
;544:		f = 1000.0 / ent->s.pos.trDuration;
ADDRLP4 12
CNSTF4 1148846080
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 545
;545:		VectorScale( delta, f, ent->s.pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 546
;546:		ent->s.pos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 3
ASGNI4
line 547
;547:		break;
ADDRGP4 $298
JUMPV
LABELV $312
line 549
;548:	case ROTATOR_POS1:
;549:		VectorCopy( ent->pos1, ent->s.apos.trBase );
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 56
INDIRP4
CNSTI4 656
ADDP4
INDIRB
ASGNB 12
line 550
;550:		ent->s.apos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 551
;551:		break;
ADDRGP4 $298
JUMPV
LABELV $313
line 553
;552:	case ROTATOR_POS2:
;553:		VectorCopy( ent->pos2, ent->s.apos.trBase );
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 60
INDIRP4
CNSTI4 668
ADDP4
INDIRB
ASGNB 12
line 554
;554:		ent->s.apos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 555
;555:		break;
ADDRGP4 $298
JUMPV
LABELV $314
line 557
;556:	case ROTATOR_1TO2:
;557:		VectorCopy( ent->pos1, ent->s.apos.trBase );
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 656
ADDP4
INDIRB
ASGNB 12
line 558
;558:		VectorSubtract( ent->pos2, ent->pos1, delta );
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 68
INDIRP4
CNSTI4 668
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 68
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 72
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
SUBF4
ASGNF4
line 559
;559:		f = 1000.0 / ent->s.apos.trDuration;
ADDRLP4 12
CNSTF4 1148846080
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 560
;560:		VectorScale( delta, f, ent->s.apos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 561
;561:		ent->s.apos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 3
ASGNI4
line 562
;562:		break;
ADDRGP4 $298
JUMPV
LABELV $319
line 564
;563:	case ROTATOR_2TO1:
;564:		VectorCopy( ent->pos2, ent->s.apos.trBase );
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 76
INDIRP4
CNSTI4 668
ADDP4
INDIRB
ASGNB 12
line 565
;565:		VectorSubtract( ent->pos1, ent->pos2, delta );
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 80
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 668
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 80
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 84
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
SUBF4
ASGNF4
line 566
;566:		f = 1000.0 / ent->s.apos.trDuration;
ADDRLP4 12
CNSTF4 1148846080
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CVIF4 4
DIVF4
ASGNF4
line 567
;567:		VectorScale( delta, f, ent->s.apos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
line 568
;568:		ent->s.apos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 3
ASGNI4
line 569
;569:		break;	
LABELV $297
LABELV $298
line 571
;570:	}
;571:	BG_EvaluateTrajectory( &ent->s.pos, level.time, ent->r.currentOrigin );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 24
INDIRP4
CNSTI4 528
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 572
;572:	BG_EvaluateTrajectory( &ent->s.apos, level.time, ent->r.currentAngles );	
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 48
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 28
INDIRP4
CNSTI4 540
ADDP4
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 573
;573:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 574
;574:}
LABELV $296
endproc SetMoverState 88 12
export MatchTeam
proc MatchTeam 4 12
line 584
;575:
;576:/*
;577:================
;578:MatchTeam
;579:
;580:All entities in a mover team will move from pos1 to pos2
;581:in the same amount of time
;582:================
;583:*/
;584:void MatchTeam( gentity_t *teamLeader, int moverState, int time ) {
line 587
;585:	gentity_t		*slave;
;586:
;587:	for ( slave = teamLeader ; slave ; slave = slave->teamchain ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $331
JUMPV
LABELV $328
line 588
;588:		SetMoverState( slave, moverState, time );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 589
;589:	}
LABELV $329
line 587
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 972
ADDP4
INDIRP4
ASGNP4
LABELV $331
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $328
line 590
;590:}
LABELV $327
endproc MatchTeam 4 12
export ReturnToPos1
proc ReturnToPos1 8 12
line 599
;591:
;592:
;593:
;594:/*
;595:================
;596:ReturnToPos1
;597:================
;598:*/
;599:void ReturnToPos1( gentity_t *ent ) {
line 600
;600:	MatchTeam( ent, MOVER_2TO1, level.time );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 603
;601:
;602:	// looping sound
;603:	ent->s.loopSound = ent->soundLoop;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 168
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRI4
ASGNI4
line 606
;604:
;605:	// starting sound
;606:	if ( ent->sound2to1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
CNSTI4 0
EQI4 $334
line 607
;607:		G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound2to1 );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 608
;608:	}
LABELV $334
line 609
;609:}
LABELV $332
endproc ReturnToPos1 8 12
export ReturnToApos1
proc ReturnToApos1 8 12
line 616
;610:
;611:/*
;612:================
;613:ReturnToApos1
;614:================
;615:*/
;616:void ReturnToApos1( gentity_t *ent ) {
line 617
;617:	MatchTeam( ent, ROTATOR_2TO1, level.time );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 7
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 620
;618:
;619:	// looping sound
;620:	ent->s.loopSound = ent->soundLoop;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 168
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRI4
ASGNI4
line 623
;621:
;622:	// starting sound
;623:	if ( ent->sound2to1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
CNSTI4 0
EQI4 $338
line 624
;624:		G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound2to1 );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 625
;625:	}
LABELV $338
line 626
;626:}
LABELV $336
endproc ReturnToApos1 8 12
export Reached_BinaryMover
proc Reached_BinaryMover 12 12
line 634
;627:
;628:
;629:/*
;630:================
;631:Reached_BinaryMover
;632:================
;633:*/
;634:void Reached_BinaryMover( gentity_t *ent ) {
line 637
;635:
;636:	// stop the looping sound
;637:	ent->s.loopSound = ent->soundLoop;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 168
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRI4
ASGNI4
line 639
;638:
;639:	if ( ent->moverState == MOVER_1TO2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 2
NEI4 $341
line 641
;640:		// reached pos2
;641:		SetMoverState( ent, MOVER_POS2, level.time );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 644
;642:
;643:		// play sound
;644:		if ( ent->soundPos2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
EQI4 $344
line 645
;645:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->soundPos2 );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 646
;646:		}
LABELV $344
line 649
;647:
;648:		// return to pos1 after a delay
;649:		ent->think = ReturnToPos1;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 ReturnToPos1
ASGNP4
line 650
;650:		if ( ent->wait != -2000)
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
CNSTF4 3304718336
EQF4 $346
line 651
;651:		ent->nextthink = level.time + ent->wait;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
ADDF4
CVFI4 4
ASGNI4
LABELV $346
line 654
;652:
;653:		// fire targets
;654:		if ( !ent->activator ) {
ADDRFP4 0
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $349
line 655
;655:			ent->activator = ent;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 968
ADDP4
ADDRLP4 8
INDIRP4
ASGNP4
line 656
;656:		}
LABELV $349
line 657
;657:		G_UseTargets( ent, ent->activator );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
line 658
;658:	} else if ( ent->moverState == MOVER_2TO1 ) {
ADDRGP4 $342
JUMPV
LABELV $341
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 3
NEI4 $351
line 660
;659:		// reached pos1
;660:		SetMoverState( ent, MOVER_POS1, level.time );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 663
;661:
;662:		// play sound
;663:		if ( ent->soundPos1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
EQI4 $354
line 664
;664:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->soundPos1 );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 665
;665:		}
LABELV $354
line 668
;666:
;667:		// close areaportals
;668:		if ( ent->teammaster == ent || !ent->teammaster ) {
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 4
INDIRP4
CNSTI4 976
ADDP4
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 8
INDIRU4
ADDRLP4 4
INDIRP4
CVPU4 4
EQU4 $358
ADDRLP4 8
INDIRU4
CNSTU4 0
NEU4 $352
LABELV $358
line 669
;669:			trap_AdjustAreaPortalState( ent, qfalse );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 trap_AdjustAreaPortalState
CALLV
pop
line 670
;670:		}
line 671
;671:	} else if ( ent->moverState == ROTATOR_1TO2 ) {
ADDRGP4 $352
JUMPV
LABELV $351
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 6
NEI4 $359
line 673
;672:		// reached pos2
;673:		SetMoverState( ent, ROTATOR_POS2, level.time );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 5
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 676
;674:
;675:		// play sound
;676:		if ( ent->soundPos2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
EQI4 $362
line 677
;677:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->soundPos2 );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 678
;678:		}
LABELV $362
line 681
;679:
;680:		// return to apos1 after a delay
;681:		ent->think = ReturnToApos1;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 ReturnToApos1
ASGNP4
line 682
;682:		if ( ent->wait != -2000)
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
CNSTF4 3304718336
EQF4 $364
line 683
;683:			ent->nextthink = level.time + ent->wait;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
ADDF4
CVFI4 4
ASGNI4
LABELV $364
line 686
;684:
;685:		// fire targets
;686:		if ( !ent->activator ) {
ADDRFP4 0
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $367
line 687
;687:			ent->activator = ent;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 968
ADDP4
ADDRLP4 8
INDIRP4
ASGNP4
line 688
;688:		}
LABELV $367
line 689
;689:		G_UseTargets( ent, ent->activator );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
line 690
;690:	} else if ( ent->moverState == ROTATOR_2TO1 ) {
ADDRGP4 $360
JUMPV
LABELV $359
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 7
NEI4 $369
line 692
;691:		// reached pos1
;692:		SetMoverState( ent, ROTATOR_POS1, level.time );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 4
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 695
;693:
;694:		// play sound
;695:		if ( ent->soundPos1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
CNSTI4 0
EQI4 $372
line 696
;696:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->soundPos1 );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 620
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 697
;697:		}
LABELV $372
line 700
;698:
;699:		// close areaportals
;700:		if ( ent->teammaster == ent || !ent->teammaster ) {
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 4
INDIRP4
CNSTI4 976
ADDP4
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 8
INDIRU4
ADDRLP4 4
INDIRP4
CVPU4 4
EQU4 $376
ADDRLP4 8
INDIRU4
CNSTU4 0
NEU4 $370
LABELV $376
line 701
;701:			trap_AdjustAreaPortalState( ent, qfalse );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 trap_AdjustAreaPortalState
CALLV
pop
line 702
;702:		}
line 703
;703:	} else {
ADDRGP4 $370
JUMPV
LABELV $369
line 704
;704:		G_Printf( "Reached_BinaryMover: bad moverState");
ADDRGP4 $377
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 705
;705:	}
LABELV $370
LABELV $360
LABELV $352
LABELV $342
line 706
;706:}
LABELV $340
endproc Reached_BinaryMover 12 12
export Use_BinaryMover
proc Use_BinaryMover 28 12
line 714
;707:
;708:
;709:/*
;710:================
;711:Use_BinaryMover
;712:================
;713:*/
;714:void Use_BinaryMover( gentity_t *ent, gentity_t *other, gentity_t *activator ) {
line 719
;715:	int		total;
;716:	int		partial;
;717:	usercmd_t	*ucmd;
;718:	
;719:ucmd = &activator->client->pers.cmd;
ADDRLP4 8
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 476
ADDP4
ASGNP4
line 721
;720:
;721:	if ( (ent->flags & FL_NO_HUMANS) && !IsBot( activator ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $379
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 IsBot
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $379
line 722
;722:		return;
ADDRGP4 $378
JUMPV
LABELV $379
line 726
;723:	}
;724:
;725:	// only the master should be used
;726:	if ( ent->flags & FL_TEAMSLAVE ) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $381
line 727
;727:		Use_BinaryMover( ent->teammaster, other, activator );
ADDRFP4 0
INDIRP4
CNSTI4 976
ADDP4
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 728
;728:		return;
ADDRGP4 $378
JUMPV
LABELV $381
line 731
;729:	}
;730:	
;731:	ent->activator = activator;
ADDRFP4 0
INDIRP4
CNSTI4 968
ADDP4
ADDRFP4 8
INDIRP4
ASGNP4
line 733
;732:	
;733:if(ent->owner != activator->s.clientNum + 1){
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
CNSTI4 1
ADDI4
EQI4 $383
line 734
;734:if(ent->owner != 0){
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRI4
CNSTI4 0
EQI4 $385
line 735
;735:trap_SendServerCommand( activator->s.clientNum, va( "cp \"Owned by %s\"\n", ent->ownername ));
ADDRGP4 $387
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 736
;736:return;
ADDRGP4 $378
JUMPV
LABELV $385
line 738
;737:}	
;738:}
LABELV $383
line 740
;739:
;740:if(ent->locked != 0){
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
INDIRI4
CNSTI4 0
EQI4 $388
line 741
;741:return;
ADDRGP4 $378
JUMPV
LABELV $388
line 744
;742:}
;743:
;744:if(ent->price > 0){
ADDRFP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
CNSTI4 0
LEI4 $390
line 745
;745:if ( ent->moverState == MOVER_POS1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
NEI4 $392
line 746
;746:if(activator->client->pers.oldmoney < ent->price){
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1028
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
GEI4 $394
line 749
;747:	
;748:	
;749:if(ucmd->buttons & BUTTON_GESTURE){
ADDRLP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $396
line 750
;750:trap_SendServerCommand( activator->s.clientNum, va( "lp \"%i is not enough\"\n", ent->price - activator->client->pers.oldmoney ));
ADDRGP4 $398
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1028
ADDP4
INDIRI4
SUBI4
ARGI4
ADDRLP4 16
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 751
;751:return;	
ADDRGP4 $378
JUMPV
LABELV $396
line 752
;752:} else {
line 753
;753:trap_SendServerCommand( activator->s.clientNum, va( "lp \"^1%s %i$\"\n", ent->message, ent->price ));
ADDRGP4 $399
ARGP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 680
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 754
;754:return;		
ADDRGP4 $378
JUMPV
LABELV $394
line 759
;755:}
;756:
;757:
;758:}
;759:if(activator->client->pers.oldmoney >= ent->price){
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1028
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
LTI4 $400
line 762
;760:	
;761:	
;762:if(ucmd->buttons & BUTTON_GESTURE){
ADDRLP4 8
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $402
line 763
;763:trap_SendServerCommand( activator->s.clientNum, va( "lp \"%s purchased\"\n", ent->message, ent->price ));
ADDRGP4 $404
ARGP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 680
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 764
;764:} else {
ADDRGP4 $403
JUMPV
LABELV $402
line 765
;765:trap_SendServerCommand( activator->s.clientNum, va( "lp \"^2%s %i$\"\n", ent->message, ent->price ));
ADDRGP4 $405
ARGP4
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 680
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 766
;766:return;		
ADDRGP4 $378
JUMPV
LABELV $403
line 770
;767:}
;768:
;769:
;770:}
LABELV $400
line 771
;771:}
LABELV $392
line 772
;772:}
LABELV $390
line 776
;773:
;774:
;775:
;776:	if ( ent->moverState == MOVER_POS1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
NEI4 $406
line 779
;777:		// start moving 50 msec later, becase if this was player
;778:		// triggered, level.time hasn't been advanced yet
;779:		MatchTeam( ent, MOVER_1TO2, level.time + 50 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
ADDI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 782
;780:
;781:		// starting sound
;782:		if ( ent->sound1to2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 0
EQI4 $409
line 783
;783:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound1to2 );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 16
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 784
;784:		}
LABELV $409
line 787
;785:
;786:		// looping sound
;787:		ent->s.loopSound = ent->soundLoop;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 168
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 636
ADDP4
INDIRI4
ASGNI4
line 790
;788:
;789:		// open areaportal
;790:		if ( ent->teammaster == ent || !ent->teammaster ) {
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 20
INDIRP4
CNSTI4 976
ADDP4
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 24
INDIRU4
ADDRLP4 20
INDIRP4
CVPU4 4
EQU4 $413
ADDRLP4 24
INDIRU4
CNSTU4 0
NEU4 $378
LABELV $413
line 791
;791:			trap_AdjustAreaPortalState( ent, qtrue );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 trap_AdjustAreaPortalState
CALLV
pop
line 792
;792:		}
line 793
;793:		return;
ADDRGP4 $378
JUMPV
LABELV $406
line 797
;794:	}
;795:
;796:	// if all the way up, just delay before coming down
;797:	if ( ent->moverState == MOVER_POS2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 1
NEI4 $414
line 798
;798:		ent->nextthink = level.time + ent->wait;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 16
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 799
;799:		return;
ADDRGP4 $378
JUMPV
LABELV $414
line 803
;800:	}
;801:
;802:	// only partway down before reversing
;803:	if ( ent->moverState == MOVER_2TO1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 3
NEI4 $417
line 804
;804:		total = ent->s.pos.trDuration;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 805
;805:		partial = level.time - ent->s.pos.trTime;
ADDRLP4 4
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
ASGNI4
line 806
;806:		if ( partial > total ) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $420
line 807
;807:			partial = total;
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
line 808
;808:		}
LABELV $420
line 810
;809:
;810:		MatchTeam( ent, MOVER_1TO2, level.time - ( total - partial ) );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
SUBI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 812
;811:
;812:		if ( ent->sound1to2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 0
EQI4 $378
line 813
;813:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound1to2 );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 16
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 814
;814:		}
line 815
;815:		return;
ADDRGP4 $378
JUMPV
LABELV $417
line 819
;816:	}
;817:
;818:	// only partway up before reversing
;819:	if ( ent->moverState == MOVER_1TO2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 2
NEI4 $425
line 820
;820:		total = ent->s.pos.trDuration;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
ASGNI4
line 821
;821:		partial = level.time - ent->s.pos.trTime;
ADDRLP4 4
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
SUBI4
ASGNI4
line 822
;822:		if ( partial > total ) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $428
line 823
;823:			partial = total;
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
line 824
;824:		}
LABELV $428
line 826
;825:
;826:		MatchTeam( ent, MOVER_2TO1, level.time - ( total - partial ) );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
SUBI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 828
;827:
;828:		if ( ent->sound2to1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
CNSTI4 0
EQI4 $378
line 829
;829:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound2to1 );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 16
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 830
;830:		}
line 831
;831:		return;
ADDRGP4 $378
JUMPV
LABELV $425
line 834
;832:	}
;833:	
;834:	if ( ent->moverState == ROTATOR_POS1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 4
NEI4 $433
line 837
;835:		// start moving 50 msec later, becase if this was player
;836:		// triggered, level.time hasn't been advanced yet
;837:		MatchTeam( ent, ROTATOR_1TO2, level.time + 50 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
ADDI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 840
;838:
;839:		// starting sound
;840:		if ( ent->sound1to2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 0
EQI4 $436
line 841
;841:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound1to2 );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 16
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 842
;842:		}
LABELV $436
line 845
;843:
;844:		// looping sound
;845:		ent->s.loopSound = ent->soundLoop;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 168
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 636
ADDP4
INDIRI4
ASGNI4
line 848
;846:
;847:		// open areaportal
;848:		if ( ent->teammaster == ent || !ent->teammaster ) {
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 20
INDIRP4
CNSTI4 976
ADDP4
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 24
INDIRU4
ADDRLP4 20
INDIRP4
CVPU4 4
EQU4 $440
ADDRLP4 24
INDIRU4
CNSTU4 0
NEU4 $378
LABELV $440
line 849
;849:			trap_AdjustAreaPortalState( ent, qtrue );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 trap_AdjustAreaPortalState
CALLV
pop
line 850
;850:		}
line 851
;851:		return;
ADDRGP4 $378
JUMPV
LABELV $433
line 855
;852:	}
;853:
;854:	// if all the way up, just delay before coming down
;855:	if ( ent->moverState == ROTATOR_POS2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 5
NEI4 $441
line 856
;856:		ent->nextthink = level.time + ent->wait;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRLP4 16
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 857
;857:		return;
ADDRGP4 $378
JUMPV
LABELV $441
line 861
;858:	}
;859:
;860:	// only partway down before reversing
;861:	if ( ent->moverState == ROTATOR_2TO1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 7
NEI4 $444
line 862
;862:		total = ent->s.apos.trDuration;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ASGNI4
line 863
;863:		partial = level.time - ent->s.time;
ADDRLP4 4
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
SUBI4
ASGNI4
line 864
;864:		if ( partial > total ) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $447
line 865
;865:			partial = total;
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
line 866
;866:		}
LABELV $447
line 868
;867:
;868:		MatchTeam( ent, ROTATOR_1TO2, level.time - ( total - partial ) );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 6
ARGI4
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
SUBI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 870
;869:
;870:		if ( ent->sound1to2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 0
EQI4 $378
line 871
;871:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound1to2 );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 16
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 872
;872:		}
line 873
;873:		return;
ADDRGP4 $378
JUMPV
LABELV $444
line 877
;874:	}
;875:
;876:	// only partway up before reversing
;877:	if ( ent->moverState == ROTATOR_1TO2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 6
NEI4 $452
line 878
;878:		total = ent->s.apos.trDuration;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ASGNI4
line 879
;879:		partial = level.time - ent->s.time;
ADDRLP4 4
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
SUBI4
ASGNI4
line 880
;880:		if ( partial > total ) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $455
line 881
;881:			partial = total;
ADDRLP4 4
ADDRLP4 0
INDIRI4
ASGNI4
line 882
;882:		}
LABELV $455
line 884
;883:
;884:		MatchTeam( ent, ROTATOR_2TO1, level.time - ( total - partial ) );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 7
ARGI4
ADDRGP4 level+32
INDIRI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
SUBI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 886
;885:
;886:		if ( ent->sound2to1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
CNSTI4 0
EQI4 $378
line 887
;887:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound2to1 );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 16
INDIRP4
CNSTI4 628
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 888
;888:		}
line 889
;889:		return;
LABELV $452
line 891
;890:	}
;891:}
LABELV $378
endproc Use_BinaryMover 28 12
export InitMover
proc InitMover 100 12
line 903
;892:
;893:
;894:
;895:/*
;896:================
;897:InitMover
;898:
;899:"pos1", "pos2", and "speed" should be set before calling,
;900:so the movement delta can be calculated
;901:================
;902:*/
;903:void InitMover( gentity_t *ent ) {
line 913
;904:	vec3_t		move;
;905:	float		distance;
;906:	float		light;
;907:	vec3_t		color;
;908:	qboolean	lightSet, colorSet;
;909:	char		*sound;
;910:
;911:	// if the "model2" key is set, use a seperate model
;912:	// for drawing, but clip against the brushes
;913:	if ( ent->model2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 584
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $461
line 914
;914:		ent->s.modelindex2 = G_ModelIndex( ent->model2 );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 584
ADDP4
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 G_ModelIndex
CALLI4
ASGNI4
ADDRLP4 44
INDIRP4
CNSTI4 176
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 915
;915:	}
LABELV $461
line 918
;916:
;917:	// if the "loopsound" key is set, use a constant looping sound when moving
;918:	if ( G_SpawnString( "noise", "100", &sound ) ) {
ADDRGP4 $465
ARGP4
ADDRGP4 $466
ARGP4
ADDRLP4 40
ARGP4
ADDRLP4 44
ADDRGP4 G_SpawnString
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $463
line 919
;919:		ent->s.loopSound = G_SoundIndex( sound );
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 920
;920:	}
LABELV $463
line 923
;921:
;922:	// if the "color" or "light" keys are set, setup constantLight
;923:	lightSet = G_SpawnFloat( "light", "100", &light );
ADDRGP4 $467
ARGP4
ADDRGP4 $466
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 48
ADDRGP4 G_SpawnFloat
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 48
INDIRI4
ASGNI4
line 924
;924:	colorSet = G_SpawnVector( "color", "1 1 1", color );
ADDRGP4 $468
ARGP4
ADDRGP4 $469
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 52
ADDRGP4 G_SpawnVector
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 52
INDIRI4
ASGNI4
line 925
;925:	if ( lightSet || colorSet ) {
ADDRLP4 56
CNSTI4 0
ASGNI4
ADDRLP4 28
INDIRI4
ADDRLP4 56
INDIRI4
NEI4 $472
ADDRLP4 32
INDIRI4
ADDRLP4 56
INDIRI4
EQI4 $470
LABELV $472
line 928
;926:		int		r, g, b, i;
;927:
;928:		r = color[0] * 255;
ADDRLP4 60
CNSTF4 1132396544
ADDRLP4 12
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 929
;929:		if ( r > 255 ) {
ADDRLP4 60
INDIRI4
CNSTI4 255
LEI4 $473
line 930
;930:			r = 255;
ADDRLP4 60
CNSTI4 255
ASGNI4
line 931
;931:		}
LABELV $473
line 932
;932:		g = color[1] * 255;
ADDRLP4 64
CNSTF4 1132396544
ADDRLP4 12+4
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 933
;933:		if ( g > 255 ) {
ADDRLP4 64
INDIRI4
CNSTI4 255
LEI4 $476
line 934
;934:			g = 255;
ADDRLP4 64
CNSTI4 255
ASGNI4
line 935
;935:		}
LABELV $476
line 936
;936:		b = color[2] * 255;
ADDRLP4 68
CNSTF4 1132396544
ADDRLP4 12+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 937
;937:		if ( b > 255 ) {
ADDRLP4 68
INDIRI4
CNSTI4 255
LEI4 $479
line 938
;938:			b = 255;
ADDRLP4 68
CNSTI4 255
ASGNI4
line 939
;939:		}
LABELV $479
line 940
;940:		i = light / 4;
ADDRLP4 72
ADDRLP4 36
INDIRF4
CNSTF4 1082130432
DIVF4
CVFI4 4
ASGNI4
line 941
;941:		if ( i > 255 ) {
ADDRLP4 72
INDIRI4
CNSTI4 255
LEI4 $481
line 942
;942:			i = 255;
ADDRLP4 72
CNSTI4 255
ASGNI4
line 943
;943:		}
LABELV $481
line 944
;944:		ent->s.constantLight = r | ( g << 8 ) | ( b << 16 ) | ( i << 24 );
ADDRFP4 0
INDIRP4
CNSTI4 164
ADDP4
ADDRLP4 60
INDIRI4
ADDRLP4 64
INDIRI4
CNSTI4 8
LSHI4
BORI4
ADDRLP4 68
INDIRI4
CNSTI4 16
LSHI4
BORI4
ADDRLP4 72
INDIRI4
CNSTI4 24
LSHI4
BORI4
ASGNI4
line 945
;945:	}
LABELV $470
line 948
;946:
;947:
;948:	ent->use = Use_BinaryMover;
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
ADDRGP4 Use_BinaryMover
ASGNP4
line 949
;949:	ent->reached = Reached_BinaryMover;
ADDRFP4 0
INDIRP4
CNSTI4 772
ADDP4
ADDRGP4 Reached_BinaryMover
ASGNP4
line 951
;950:
;951:	ent->moverState = MOVER_POS1;
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
CNSTI4 0
ASGNI4
line 952
;952:	ent->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 128
ASGNI4
line 953
;953:	ent->s.eType = ET_MOVER;
ADDRLP4 60
CNSTI4 4
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
ADDRLP4 60
INDIRI4
ASGNI4
line 954
;954:	VectorCopy (ent->pos1, ent->r.currentOrigin);
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 656
ADDP4
INDIRB
ASGNB 12
line 955
;955:	trap_LinkEntity (ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 957
;956:
;957:	ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 958
;958:	VectorCopy( ent->pos1, ent->s.pos.trBase );
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 656
ADDP4
INDIRB
ASGNB 12
line 961
;959:
;960:	// calculate time to reach second position from speed
;961:	VectorSubtract( ent->pos2, ent->pos1, move );
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 72
INDIRP4
CNSTI4 668
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 72
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 76
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
SUBF4
ASGNF4
line 962
;962:	distance = VectorLength( move );
ADDRLP4 0
ARGP4
ADDRLP4 80
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 24
ADDRLP4 80
INDIRF4
ASGNF4
line 963
;963:	if ( ! ent->speed ) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
NEF4 $485
line 964
;964:		ent->speed = 100;
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTF4 1120403456
ASGNF4
line 965
;965:	}
LABELV $485
line 966
;966:	VectorScale( move, ent->speed, ent->s.pos.trDelta );
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
MULF4
ASGNF4
line 967
;967:	ent->s.pos.trDuration = distance * 1000 / ent->speed;
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 20
ADDP4
CNSTF4 1148846080
ADDRLP4 24
INDIRF4
MULF4
ADDRLP4 96
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 968
;968:	if ( ent->s.pos.trDuration <= 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 0
GTI4 $489
line 969
;969:		ent->s.pos.trDuration = 1;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTI4 1
ASGNI4
line 970
;970:	}
LABELV $489
line 971
;971:}
LABELV $460
endproc InitMover 100 12
export InitRotator
proc InitRotator 100 12
line 981
;972:
;973:/*
;974:================
;975:InitRotator
;976:
;977:"pos1", "pos2", and "speed" should be set before calling,
;978:so the movement delta can be calculated
;979:================
;980:*/
;981:void InitRotator( gentity_t *ent ) {
line 991
;982:	vec3_t		move;
;983:	float		angle;
;984:	float		light;
;985:	vec3_t		color;
;986:	qboolean	lightSet, colorSet;
;987:	char		*sound;
;988:
;989:	// if the "model2" key is set, use a seperate model
;990:	// for drawing, but clip against the brushes
;991:	if ( ent->model2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 584
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $492
line 992
;992:		ent->s.modelindex2 = G_ModelIndex( ent->model2 );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 584
ADDP4
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 G_ModelIndex
CALLI4
ASGNI4
ADDRLP4 44
INDIRP4
CNSTI4 176
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 993
;993:	}
LABELV $492
line 996
;994:
;995:	// if the "loopsound" key is set, use a constant looping sound when moving
;996:	if ( G_SpawnString( "noise", "100", &sound ) ) {
ADDRGP4 $465
ARGP4
ADDRGP4 $466
ARGP4
ADDRLP4 40
ARGP4
ADDRLP4 44
ADDRGP4 G_SpawnString
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $494
line 997
;997:		ent->s.loopSound = G_SoundIndex( sound );
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 998
;998:	}
LABELV $494
line 1001
;999:
;1000:	// if the "color" or "light" keys are set, setup constantLight
;1001:	lightSet = G_SpawnFloat( "light", "100", &light );
ADDRGP4 $467
ARGP4
ADDRGP4 $466
ARGP4
ADDRLP4 36
ARGP4
ADDRLP4 48
ADDRGP4 G_SpawnFloat
CALLI4
ASGNI4
ADDRLP4 28
ADDRLP4 48
INDIRI4
ASGNI4
line 1002
;1002:	colorSet = G_SpawnVector( "color", "1 1 1", color );
ADDRGP4 $468
ARGP4
ADDRGP4 $469
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 52
ADDRGP4 G_SpawnVector
CALLI4
ASGNI4
ADDRLP4 32
ADDRLP4 52
INDIRI4
ASGNI4
line 1003
;1003:	if ( lightSet || colorSet ) {
ADDRLP4 56
CNSTI4 0
ASGNI4
ADDRLP4 28
INDIRI4
ADDRLP4 56
INDIRI4
NEI4 $498
ADDRLP4 32
INDIRI4
ADDRLP4 56
INDIRI4
EQI4 $496
LABELV $498
line 1006
;1004:		int		r, g, b, i;
;1005:
;1006:		r = color[0] * 255;
ADDRLP4 60
CNSTF4 1132396544
ADDRLP4 12
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 1007
;1007:		if ( r > 255 ) {
ADDRLP4 60
INDIRI4
CNSTI4 255
LEI4 $499
line 1008
;1008:			r = 255;
ADDRLP4 60
CNSTI4 255
ASGNI4
line 1009
;1009:		}
LABELV $499
line 1010
;1010:		g = color[1] * 255;
ADDRLP4 64
CNSTF4 1132396544
ADDRLP4 12+4
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 1011
;1011:		if ( g > 255 ) {
ADDRLP4 64
INDIRI4
CNSTI4 255
LEI4 $502
line 1012
;1012:			g = 255;
ADDRLP4 64
CNSTI4 255
ASGNI4
line 1013
;1013:		}
LABELV $502
line 1014
;1014:		b = color[2] * 255;
ADDRLP4 68
CNSTF4 1132396544
ADDRLP4 12+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 1015
;1015:		if ( b > 255 ) {
ADDRLP4 68
INDIRI4
CNSTI4 255
LEI4 $505
line 1016
;1016:			b = 255;
ADDRLP4 68
CNSTI4 255
ASGNI4
line 1017
;1017:		}
LABELV $505
line 1018
;1018:		i = light / 4;
ADDRLP4 72
ADDRLP4 36
INDIRF4
CNSTF4 1082130432
DIVF4
CVFI4 4
ASGNI4
line 1019
;1019:		if ( i > 255 ) {
ADDRLP4 72
INDIRI4
CNSTI4 255
LEI4 $507
line 1020
;1020:			i = 255;
ADDRLP4 72
CNSTI4 255
ASGNI4
line 1021
;1021:		}
LABELV $507
line 1022
;1022:		ent->s.constantLight = r | ( g << 8 ) | ( b << 16 ) | ( i << 24 );
ADDRFP4 0
INDIRP4
CNSTI4 164
ADDP4
ADDRLP4 60
INDIRI4
ADDRLP4 64
INDIRI4
CNSTI4 8
LSHI4
BORI4
ADDRLP4 68
INDIRI4
CNSTI4 16
LSHI4
BORI4
ADDRLP4 72
INDIRI4
CNSTI4 24
LSHI4
BORI4
ASGNI4
line 1023
;1023:	}
LABELV $496
line 1026
;1024:
;1025:
;1026:	ent->use = Use_BinaryMover;
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
ADDRGP4 Use_BinaryMover
ASGNP4
line 1027
;1027:	ent->reached = Reached_BinaryMover;
ADDRFP4 0
INDIRP4
CNSTI4 772
ADDP4
ADDRGP4 Reached_BinaryMover
ASGNP4
line 1029
;1028:
;1029:	ent->moverState = ROTATOR_POS1;
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
CNSTI4 4
ASGNI4
line 1030
;1030:	ent->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 128
ASGNI4
line 1031
;1031:	ent->s.eType = ET_MOVER;
ADDRLP4 60
CNSTI4 4
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
ADDRLP4 60
INDIRI4
ASGNI4
line 1032
;1032:	VectorCopy( ent->pos1, ent->r.currentAngles );
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 540
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 656
ADDP4
INDIRB
ASGNB 12
line 1033
;1033:	trap_LinkEntity (ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1035
;1034:
;1035:	ent->s.apos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 0
ASGNI4
line 1036
;1036:	VectorCopy( ent->pos1, ent->s.apos.trBase );
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 656
ADDP4
INDIRB
ASGNB 12
line 1039
;1037:
;1038:	// calculate time to reach second position from speed
;1039:	VectorSubtract( ent->pos2, ent->pos1, move );
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 72
INDIRP4
CNSTI4 668
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 72
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 76
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1040
;1040:	angle = VectorLength( move );
ADDRLP4 0
ARGP4
ADDRLP4 80
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 24
ADDRLP4 80
INDIRF4
ASGNF4
line 1041
;1041:	if ( ! ent->speed ) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
NEF4 $511
line 1042
;1042:		ent->speed = 120;
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTF4 1123024896
ASGNF4
line 1043
;1043:	}
LABELV $511
line 1044
;1044:	VectorScale( move, ent->speed, ent->s.apos.trDelta );
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 0
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
MULF4
ASGNF4
line 1045
;1045:	ent->s.apos.trDuration = angle * 1000 / ent->speed;
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1148846080
ADDRLP4 24
INDIRF4
MULF4
ADDRLP4 96
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 1046
;1046:	if ( ent->s.apos.trDuration <= 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CNSTI4 0
GTI4 $515
line 1047
;1047:		ent->s.apos.trDuration = 1;
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTI4 1
ASGNI4
line 1048
;1048:	}
LABELV $515
line 1049
;1049:}
LABELV $491
endproc InitRotator 100 12
export Blocked_Door
proc Blocked_Door 8 32
line 1068
;1050:
;1051:
;1052:/*
;1053:===============================================================================
;1054:
;1055:DOOR
;1056:
;1057:A use can be triggered either by a touch function, by being shot, or by being
;1058:targeted by another entity.
;1059:
;1060:===============================================================================
;1061:*/
;1062:
;1063:/*
;1064:================
;1065:Blocked_Door
;1066:================
;1067:*/
;1068:void Blocked_Door( gentity_t *ent, gentity_t *other ) {
line 1070
;1069:	// remove anything other than a client
;1070:	if ( !other->client ) {
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $518
line 1072
;1071:		// except CTF flags!!!!
;1072:		if( other->s.eType == ET_ITEM && other->item->giType == IT_TEAM ) {
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
NEI4 $520
ADDRLP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
NEI4 $520
line 1073
;1073:			Team_DroppedFlagThink( other );
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Team_DroppedFlagThink
CALLV
pop
line 1074
;1074:			return;
ADDRGP4 $517
JUMPV
LABELV $520
line 1076
;1075:		}
;1076:		G_TempEntity( other->s.origin, EV_ITEM_POP );
ADDRFP4 4
INDIRP4
CNSTI4 92
ADDP4
ARGP4
CNSTI4 41
ARGI4
ADDRGP4 G_TempEntity
CALLP4
pop
line 1077
;1077:		G_FreeEntity( other );
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1078
;1078:		return;
ADDRGP4 $517
JUMPV
LABELV $518
line 1081
;1079:	}
;1080:
;1081:	if ( ent->damage ) {
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
EQI4 $522
line 1082
;1082:		G_Damage( other, ent, ent, NULL, NULL, ent->damage, 0, MOD_CRUSH );
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
CNSTP4 0
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 22
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 1084
;1083:
;1084:	}
LABELV $522
line 1085
;1085:	if ( ent->spawnflags & 4 ) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $524
line 1086
;1086:		return;		// crushers don't reverse
ADDRGP4 $517
JUMPV
LABELV $524
line 1090
;1087:	}
;1088:
;1089:	// reverse direction
;1090:	Use_BinaryMover( ent, ent, other );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 1091
;1091:}
LABELV $517
endproc Blocked_Door 8 32
proc Touch_DoorTriggerSpectator 44 12
line 1098
;1092:
;1093:/*
;1094:================
;1095:Touch_DoorTriggerSpectator
;1096:================
;1097:*/
;1098:static void Touch_DoorTriggerSpectator( gentity_t *ent, gentity_t *other, trace_t *trace ) {
line 1103
;1099:	int axis;
;1100:	float doorMin, doorMax;
;1101:	vec3_t origin;
;1102:
;1103:	axis = ent->count;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
ASGNI4
line 1105
;1104:	// the constants below relate to constants in Think_SpawnNewDoorTrigger()
;1105:	doorMin = ent->r.absmin[axis] + 100;
ADDRLP4 16
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 504
ADDP4
ADDP4
INDIRF4
CNSTF4 1120403456
ADDF4
ASGNF4
line 1106
;1106:	doorMax = ent->r.absmax[axis] - 100;
ADDRLP4 20
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
ADDP4
INDIRF4
CNSTF4 1120403456
SUBF4
ASGNF4
line 1108
;1107:
;1108:	VectorCopy(other->client->ps.origin, origin);
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 1110
;1109:
;1110:	if (origin[axis] < doorMin || origin[axis] > doorMax) return;
ADDRLP4 24
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
ASGNF4
ADDRLP4 24
INDIRF4
ADDRLP4 16
INDIRF4
LTF4 $529
ADDRLP4 24
INDIRF4
ADDRLP4 20
INDIRF4
LEF4 $527
LABELV $529
ADDRGP4 $526
JUMPV
LABELV $527
line 1112
;1111:
;1112:	if (fabs(origin[axis] - doorMax) < fabs(origin[axis] - doorMin)) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
ADDRLP4 20
INDIRF4
SUBF4
ARGF4
ADDRLP4 28
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
ARGF4
ADDRLP4 32
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
GEF4 $530
line 1113
;1113:		origin[axis] = doorMin - 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
ADDRLP4 16
INDIRF4
CNSTF4 1092616192
SUBF4
ASGNF4
line 1114
;1114:	} else {
ADDRGP4 $531
JUMPV
LABELV $530
line 1115
;1115:		origin[axis] = doorMax + 10;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
ADDP4
ADDRLP4 20
INDIRF4
CNSTF4 1092616192
ADDF4
ASGNF4
line 1116
;1116:	}
LABELV $531
line 1118
;1117:
;1118:	TeleportPlayer(other, origin, tv(10000000.0, 0, 0));
CNSTF4 1259902592
ARGF4
ADDRLP4 36
CNSTF4 0
ASGNF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 36
INDIRF4
ARGF4
ADDRLP4 40
ADDRGP4 tv
CALLP4
ASGNP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 4
ARGP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRGP4 TeleportPlayer
CALLV
pop
line 1119
;1119:}
LABELV $526
endproc Touch_DoorTriggerSpectator 44 12
export Touch_DoorTrigger
proc Touch_DoorTrigger 12 12
line 1126
;1120:
;1121:/*
;1122:================
;1123:Touch_DoorTrigger
;1124:================
;1125:*/
;1126:void Touch_DoorTrigger( gentity_t *ent, gentity_t *other, trace_t *trace ) {
line 1127
;1127:if(ent->owner != other->s.clientNum + 1){
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
CNSTI4 1
ADDI4
EQI4 $533
line 1128
;1128:if(ent->owner != 0){
ADDRFP4 0
INDIRP4
CNSTI4 820
ADDP4
INDIRI4
CNSTI4 0
EQI4 $535
line 1129
;1129:trap_SendServerCommand( other->s.clientNum, va( "cp \"Owned by %s\n\"", ent->ownername ));
ADDRGP4 $537
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 828
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
ADDRGP4 va
CALLP4
ASGNP4
ADDRFP4 4
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_SendServerCommand
CALLV
pop
line 1130
;1130:return;
ADDRGP4 $532
JUMPV
LABELV $535
line 1132
;1131:}	
;1132:}
LABELV $533
line 1133
;1133:if(ent->locked != 0){
ADDRFP4 0
INDIRP4
CNSTI4 824
ADDP4
INDIRI4
CNSTI4 0
EQI4 $538
line 1134
;1134:return;
ADDRGP4 $532
JUMPV
LABELV $538
line 1137
;1135:}	
;1136:
;1137:if(ent->price > 0){
ADDRFP4 0
INDIRP4
CNSTI4 812
ADDP4
INDIRI4
CNSTI4 0
LEI4 $540
line 1139
;1138://trap_SendServerCommand( other->s.clientNum, va( "cp %s_%i\n", ent->message, ent->price ));
;1139:return;
ADDRGP4 $532
JUMPV
LABELV $540
line 1142
;1140:}	
;1141:
;1142:if(ent->armor > 0){
ADDRFP4 0
INDIRP4
CNSTI4 2196
ADDP4
INDIRI4
CNSTI4 0
LEI4 $542
line 1143
;1143:return;
ADDRGP4 $532
JUMPV
LABELV $542
line 1147
;1144:}	
;1145:
;1146:
;1147:	if ( other->client && (other->client->sess.sessionTeam == TEAM_SPECTATOR || other->client->ps.pm_type == PM_SPECTATOR)) {
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $544
ADDRLP4 0
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 3
EQI4 $546
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
NEI4 $544
LABELV $546
line 1149
;1148:		// if the door is not open and not opening
;1149:		if ( ent->parent->moverState != MOVER_1TO2 &&
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 2
EQI4 $545
ADDRLP4 4
INDIRI4
CNSTI4 1
EQI4 $545
ADDRLP4 4
INDIRI4
CNSTI4 6
EQI4 $545
ADDRLP4 4
INDIRI4
CNSTI4 5
EQI4 $545
line 1152
;1150:			ent->parent->moverState != MOVER_POS2 &&
;1151:			ent->parent->moverState != ROTATOR_1TO2 &&
;1152:			ent->parent->moverState != ROTATOR_POS2 ) {
line 1153
;1153:			Touch_DoorTriggerSpectator( ent, other, trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Touch_DoorTriggerSpectator
CALLV
pop
line 1154
;1154:		}
line 1155
;1155:	}
ADDRGP4 $545
JUMPV
LABELV $544
line 1156
;1156:	else if ( ent->parent->moverState != MOVER_1TO2 &&
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 2
EQI4 $549
ADDRLP4 4
INDIRI4
CNSTI4 6
EQI4 $549
line 1157
;1157:		ent->parent->moverState != ROTATOR_1TO2 ) {
line 1158
;1158:		Use_BinaryMover( ent->parent, ent, other );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ARGP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 1159
;1159:	}
LABELV $549
LABELV $545
line 1160
;1160:}
LABELV $532
endproc Touch_DoorTrigger 12 12
export Think_SpawnNewDoorTrigger
proc Think_SpawnNewDoorTrigger 52 12
line 1172
;1161:
;1162:void Think_SpawnNewDoorTrigger( gentity_t *ent ) __attribute__((nonnull));
;1163:void Think_SpawnNewButtonTrigger( gentity_t *ent ) __attribute__((nonnull));
;1164:/*
;1165:======================
;1166:Think_SpawnNewDoorTrigger
;1167:
;1168:All of the parts of a door have been spawned, so create
;1169:a trigger that encloses all of them
;1170:======================
;1171:*/
;1172:void Think_SpawnNewDoorTrigger( gentity_t *ent ) {
line 1178
;1173:	gentity_t		*other;
;1174:	vec3_t		mins, maxs;
;1175:	int			i, best;
;1176:
;1177:	// set all of the slaves as shootable
;1178:	for ( other = ent ; other ; other = other->teamchain ) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRGP4 $555
JUMPV
LABELV $552
line 1179
;1179:		other->takedamage = qtrue;
ADDRLP4 0
INDIRP4
CNSTI4 832
ADDP4
CNSTI4 1
ASGNI4
line 1180
;1180:	}
LABELV $553
line 1178
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 972
ADDP4
INDIRP4
ASGNP4
LABELV $555
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $552
line 1183
;1181:
;1182:	// find the bounds of everything on the team
;1183:	VectorCopy (ent->r.absmin, mins);
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 504
ADDP4
INDIRB
ASGNB 12
line 1184
;1184:	VectorCopy (ent->r.absmax, maxs);
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 516
ADDP4
INDIRB
ASGNB 12
line 1186
;1185:
;1186:	for (other = ent->teamchain ; other ; other=other->teamchain) {
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 972
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $559
JUMPV
LABELV $556
line 1187
;1187:		AddPointToBounds (other->r.absmin, mins, maxs);
ADDRLP4 0
INDIRP4
CNSTI4 504
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 AddPointToBounds
CALLV
pop
line 1188
;1188:		AddPointToBounds (other->r.absmax, mins, maxs);
ADDRLP4 0
INDIRP4
CNSTI4 516
ADDP4
ARGP4
ADDRLP4 8
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 AddPointToBounds
CALLV
pop
line 1189
;1189:	}
LABELV $557
line 1186
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 972
ADDP4
INDIRP4
ASGNP4
LABELV $559
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $556
line 1192
;1190:
;1191:	// find the thinnest axis, which will be the one we expand
;1192:	best = 0;
ADDRLP4 32
CNSTI4 0
ASGNI4
line 1193
;1193:	for ( i = 1 ; i < 3 ; i++ ) {
ADDRLP4 4
CNSTI4 1
ASGNI4
LABELV $560
line 1194
;1194:		if ( maxs[i] - mins[i] < maxs[best] - mins[best] ) {
ADDRLP4 36
CNSTI4 2
ASGNI4
ADDRLP4 40
ADDRLP4 4
INDIRI4
ADDRLP4 36
INDIRI4
LSHI4
ASGNI4
ADDRLP4 44
ADDRLP4 32
INDIRI4
ADDRLP4 36
INDIRI4
LSHI4
ASGNI4
ADDRLP4 40
INDIRI4
ADDRLP4 20
ADDP4
INDIRF4
ADDRLP4 40
INDIRI4
ADDRLP4 8
ADDP4
INDIRF4
SUBF4
ADDRLP4 44
INDIRI4
ADDRLP4 20
ADDP4
INDIRF4
ADDRLP4 44
INDIRI4
ADDRLP4 8
ADDP4
INDIRF4
SUBF4
GEF4 $564
line 1195
;1195:			best = i;
ADDRLP4 32
ADDRLP4 4
INDIRI4
ASGNI4
line 1196
;1196:		}
LABELV $564
line 1197
;1197:	}
LABELV $561
line 1193
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $560
line 1198
;1198:	maxs[best] += 120;
ADDRLP4 36
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
CNSTF4 1123024896
ADDF4
ASGNF4
line 1199
;1199:	mins[best] -= 120;
ADDRLP4 40
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
CNSTF4 1123024896
SUBF4
ASGNF4
line 1202
;1200:
;1201:	// create a trigger with this size
;1202:	other = G_Spawn ();
ADDRLP4 44
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 44
INDIRP4
ASGNP4
line 1203
;1203:	other->classname = "door_trigger";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $566
ASGNP4
line 1204
;1204:	VectorCopy (mins, other->r.mins);
ADDRLP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRLP4 8
INDIRB
ASGNB 12
line 1205
;1205:	VectorCopy (maxs, other->r.maxs);
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 20
INDIRB
ASGNB 12
line 1206
;1206:	other->parent = ent;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1207
;1207:	other->r.contents = CONTENTS_TRIGGER;
ADDRLP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1073741824
ASGNI4
line 1208
;1208:	other->touch = Touch_DoorTrigger;
ADDRLP4 0
INDIRP4
CNSTI4 780
ADDP4
ADDRGP4 Touch_DoorTrigger
ASGNP4
line 1210
;1209:	// remember the thinnest axis
;1210:	other->count = best;
ADDRLP4 0
INDIRP4
CNSTI4 944
ADDP4
ADDRLP4 32
INDIRI4
ASGNI4
line 1211
;1211:	trap_LinkEntity (other);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1213
;1212:
;1213:	MatchTeam( ent, ent->moverState, level.time );
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 48
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 1214
;1214:}
LABELV $551
endproc Think_SpawnNewDoorTrigger 52 12
export Think_MatchTeam
proc Think_MatchTeam 4 12
line 1216
;1215:
;1216:void Think_MatchTeam( gentity_t *ent ) {
line 1217
;1217:	MatchTeam( ent, ent->moverState, level.time );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 MatchTeam
CALLV
pop
line 1218
;1218:}
LABELV $568
endproc Think_MatchTeam 4 12
export SP_func_door
proc SP_func_door 124 12
line 1239
;1219:
;1220:
;1221:/*QUAKED func_door (0 .5 .8) ? START_OPEN x CRUSHER
;1222:TOGGLE		wait in both the start and end states for a trigger event.
;1223:START_OPEN	the door to moves to its destination when spawned, and operate in reverse.  It is used to temporarily or permanently close off an area when triggered (not useful for touch or takedamage doors).
;1224:NOMONSTER	monsters will not trigger this door
;1225:
;1226:"model2"	.md3 model to also draw
;1227:"angle"		determines the opening direction
;1228:"targetname" if set, no touch field will be spawned and a remote button or trigger field activates the door.
;1229:"speed"		movement speed (100 default)
;1230:"wait"		wait before returning (3 default, -1 = never return)
;1231:"lip"		lip remaining at end of move (8 default)
;1232:"dmg"		damage to inflict when blocked (2 default)
;1233:"color"		constantLight color
;1234:"light"		constantLight radius
;1235:"health"	if set, the door must be shot open
;1236:"startsound"  if set, overrides the sound to play when the door starts moving
;1237:"endsound"  if set, overrides the sound to play when the door has stopped moving
;1238:*/
;1239:void SP_func_door (gentity_t *ent) {
line 1249
;1240:	char  *startsound;
;1241:	char  *endsound;
;1242:	vec3_t	abs_movedir;
;1243:	float	distance;
;1244:	vec3_t	size;
;1245:	float	lip;
;1246:	int		i;
;1247:
;1248:	//sounds
;1249:	startsound = endsound = NULL;
ADDRLP4 44
CNSTP4 0
ASGNP4
ADDRLP4 36
ADDRLP4 44
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 44
INDIRP4
ASGNP4
line 1250
;1250:	G_SpawnString("startsound", "sound/movers/doors/dr1_strt.wav", &startsound);
ADDRGP4 $571
ARGP4
ADDRGP4 $572
ARGP4
ADDRLP4 32
ARGP4
ADDRGP4 G_SpawnString
CALLI4
pop
line 1251
;1251:	G_SpawnString("endsound", "sound/movers/doors/dr1_end.wav", &endsound);
ADDRGP4 $573
ARGP4
ADDRGP4 $574
ARGP4
ADDRLP4 36
ARGP4
ADDRGP4 G_SpawnString
CALLI4
pop
line 1253
;1252:
;1253:	ent->sound1to2 = ent->sound2to1 = G_SoundIndex(startsound);
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
ADDRLP4 52
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
line 1254
;1254:	ent->soundPos1 = ent->soundPos2 = G_SoundIndex(endsound);
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 632
ADDP4
ADDRLP4 56
INDIRI4
ASGNI4
ADDRLP4 60
INDIRP4
CNSTI4 620
ADDP4
ADDRLP4 56
INDIRI4
ASGNI4
line 1257
;1255:
;1256:	//nobots/nohumans
;1257:	G_SpawnInt( "nobots", "0", &i);
ADDRGP4 $575
ARGP4
ADDRGP4 $576
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1258
;1258:	if ( i ) {
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $577
line 1259
;1259:		ent->flags |= FL_NO_BOTS;
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRI4
CNSTI4 8192
BORI4
ASGNI4
line 1260
;1260:	}
LABELV $577
line 1261
;1261:	G_SpawnInt( "nohumans", "0", &i );
ADDRGP4 $579
ARGP4
ADDRGP4 $576
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1262
;1262:	if ( i ) {
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $580
line 1263
;1263:		ent->flags |= FL_NO_HUMANS;
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRI4
CNSTI4 16384
BORI4
ASGNI4
line 1264
;1264:	}
LABELV $580
line 1267
;1265:	
;1266:	//blocked
;1267:	ent->blocked = Blocked_Door;
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
ADDRGP4 Blocked_Door
ASGNP4
line 1270
;1268:
;1269:	// default speed of 400
;1270:	if (!ent->speed)
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
NEF4 $582
line 1271
;1271:		ent->speed = 400;
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTF4 1137180672
ASGNF4
LABELV $582
line 1274
;1272:
;1273:	// default wait of 2 seconds
;1274:	if (!ent->wait)
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
CNSTF4 0
NEF4 $584
line 1275
;1275:		ent->wait = 2;
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
CNSTF4 1073741824
ASGNF4
LABELV $584
line 1276
;1276:	ent->wait *= 1000;
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTF4 1148846080
ADDRLP4 64
INDIRP4
INDIRF4
MULF4
ASGNF4
line 1279
;1277:
;1278:	// default lip of 8 units
;1279:	G_SpawnFloat( "lip", "8", &lip );
ADDRGP4 $586
ARGP4
ADDRGP4 $587
ARGP4
ADDRLP4 40
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1282
;1280:
;1281:	// default damage of 2 points
;1282:	G_SpawnInt( "dmg", "2", &ent->damage );
ADDRGP4 $588
ARGP4
ADDRGP4 $589
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1285
;1283:
;1284:	// first position at start
;1285:	VectorCopy( ent->s.origin, ent->pos1 );
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 656
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1288
;1286:
;1287:	// calculate second position
;1288:	if(!ent->sandboxObject){
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $590
line 1289
;1289:	trap_SetBrushModel( ent, ent->model );}
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 580
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
LABELV $590
line 1290
;1290:	G_SetMovedir (ent->s.angles, ent->movedir);
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 128
ADDP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 748
ADDP4
ARGP4
ADDRGP4 G_SetMovedir
CALLV
pop
line 1291
;1291:	abs_movedir[0] = fabs(ent->movedir[0]);
ADDRFP4 0
INDIRP4
CNSTI4 748
ADDP4
INDIRF4
ARGF4
ADDRLP4 76
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 76
INDIRF4
ASGNF4
line 1292
;1292:	abs_movedir[1] = fabs(ent->movedir[1]);
ADDRFP4 0
INDIRP4
CNSTI4 752
ADDP4
INDIRF4
ARGF4
ADDRLP4 80
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 80
INDIRF4
ASGNF4
line 1293
;1293:	abs_movedir[2] = fabs(ent->movedir[2]);
ADDRFP4 0
INDIRP4
CNSTI4 756
ADDP4
INDIRF4
ARGF4
ADDRLP4 84
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 84
INDIRF4
ASGNF4
line 1294
;1294:	VectorSubtract( ent->r.maxs, ent->r.mins, size );
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 88
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 476
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 88
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12+8
ADDRLP4 92
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 484
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1295
;1295:	distance = DotProduct( abs_movedir, size ) - lip;
ADDRLP4 24
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 40
INDIRF4
SUBF4
ASGNF4
line 1296
;1296:	VectorMA( ent->pos1, distance, ent->movedir, ent->pos2 );
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 668
ADDP4
ADDRLP4 96
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 748
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 672
ADDP4
ADDRLP4 100
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
ADDRLP4 100
INDIRP4
CNSTI4 752
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
INDIRP4
CNSTI4 676
ADDP4
ADDRLP4 104
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
ADDRLP4 104
INDIRP4
CNSTI4 756
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
line 1299
;1297:
;1298:	// if "start_open", reverse position 1 and 2
;1299:	if ( ent->spawnflags & 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $600
line 1302
;1300:		vec3_t	temp;
;1301:
;1302:		VectorCopy( ent->pos2, temp );
ADDRLP4 108
ADDRFP4 0
INDIRP4
CNSTI4 668
ADDP4
INDIRB
ASGNB 12
line 1303
;1303:		VectorCopy( ent->s.origin, ent->pos2 );
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
CNSTI4 668
ADDP4
ADDRLP4 120
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1304
;1304:		VectorCopy( temp, ent->pos1 );
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
ADDRLP4 108
INDIRB
ASGNB 12
line 1305
;1305:	}
LABELV $600
line 1307
;1306:
;1307:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1309
;1308:
;1309:	ent->nextthink = level.time + FRAMETIME;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1311
;1310:
;1311:	if ( ! (ent->flags & FL_TEAMSLAVE ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $603
line 1314
;1312:		int health;
;1313:
;1314:		G_SpawnInt( "health", "0", &health );
ADDRGP4 $605
ARGP4
ADDRGP4 $576
ARGP4
ADDRLP4 108
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1315
;1315:		if ( health > 0 ) {
ADDRLP4 108
INDIRI4
CNSTI4 0
LEI4 $606
line 1316
;1316:			ent->takedamage = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 832
ADDP4
CNSTI4 1
ASGNI4
line 1317
;1317:		}
LABELV $606
line 1318
;1318:		if ( ent->targetname || health > 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $610
ADDRLP4 108
INDIRI4
CNSTI4 0
LEI4 $608
LABELV $610
line 1320
;1319:			// non touch/shoot doors
;1320:			ent->think = Think_MatchTeam;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Think_MatchTeam
ASGNP4
line 1321
;1321:		} else {
ADDRGP4 $609
JUMPV
LABELV $608
line 1322
;1322:			ent->think = Think_SpawnNewDoorTrigger;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Think_SpawnNewDoorTrigger
ASGNP4
line 1323
;1323:		}
LABELV $609
line 1324
;1324:	}
LABELV $603
line 1327
;1325:
;1326:
;1327:}
LABELV $570
endproc SP_func_door 124 12
export SP_func_door_rotating
proc SP_func_door_rotating 108 12
line 1348
;1328:
;1329:/*QUAKED func_door_rotating (0 .5 .8) START_OPEN - CRUSHER REVERSE Z_AXIS X_AXIS
;1330:This is the rotating door... just as the name suggests it's a door that rotates
;1331:START_OPEN	the door to moves to its destination when spawned, and operate in reverse.
;1332:REVERSE		if you want the door to open in the other direction, use this switch.
;1333:TOGGLE		wait in both the start and end states for a trigger event.
;1334:X_AXIS		open on the X-axis instead of the Z-axis
;1335:Y_AXIS		open on the Y-axis instead of the Z-axis
;1336:  
;1337:You need to have an origin brush as part of this entity.  The center of that brush will be
;1338:the point around which it is rotated. It will rotate around the Z axis by default.  You can
;1339:check either the Z_AXIS or X_AXIS box to change that.
;1340:
;1341:"model2"	.md3 model to also draw
;1342:"distance"	how many degrees the door will open
;1343:"speed"	 	how fast the door will open (degrees/second)
;1344:"color"		constantLight color
;1345:"light"		constantLight radius
;1346:*/
;1347:
;1348:void SP_func_door_rotating ( gentity_t *ent ) {
line 1354
;1349:	char	*startsound;
;1350:	char	*endsound;
;1351:	int		i;
;1352:
;1353:	//sounds
;1354:	startsound = endsound = NULL;
ADDRLP4 12
CNSTP4 0
ASGNP4
ADDRLP4 8
ADDRLP4 12
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 12
INDIRP4
ASGNP4
line 1355
;1355:	G_SpawnString("startsound", "sound/movers/doors/dr1_strt.wav", &startsound);
ADDRGP4 $571
ARGP4
ADDRGP4 $572
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 G_SpawnString
CALLI4
pop
line 1356
;1356:	G_SpawnString("endsound", "sound/movers/doors/dr1_end.wav", &endsound);
ADDRGP4 $573
ARGP4
ADDRGP4 $574
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 G_SpawnString
CALLI4
pop
line 1358
;1357:
;1358:	ent->sound1to2 = ent->sound2to1 = G_SoundIndex(startsound);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
ADDRLP4 20
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1359
;1359:	ent->soundPos1 = ent->soundPos2 = G_SoundIndex(endsound);
ADDRLP4 8
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 632
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
ADDRLP4 28
INDIRP4
CNSTI4 620
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 1362
;1360:
;1361:	// default damage of 2 points
;1362:	G_SpawnInt( "dmg", "2", &ent->damage );
ADDRGP4 $588
ARGP4
ADDRGP4 $589
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1365
;1363:
;1364:	//blocked
;1365:	ent->blocked = Blocked_Door;
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
ADDRGP4 Blocked_Door
ASGNP4
line 1368
;1366:
;1367:	//nobots/nohumans
;1368:	G_SpawnInt( "nobots", "0", &i);
ADDRGP4 $575
ARGP4
ADDRGP4 $576
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1369
;1369:	if ( i ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $612
line 1370
;1370:		ent->flags |= FL_NO_BOTS;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 8192
BORI4
ASGNI4
line 1371
;1371:	}
LABELV $612
line 1372
;1372:	G_SpawnInt( "nohumans", "0", &i );
ADDRGP4 $579
ARGP4
ADDRGP4 $576
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1373
;1373:	if ( i ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $614
line 1374
;1374:		ent->flags |= FL_NO_HUMANS;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 16384
BORI4
ASGNI4
line 1375
;1375:	}
LABELV $614
line 1378
;1376:
;1377:	// default speed of 120
;1378:	if (!ent->speed)
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
NEF4 $616
line 1379
;1379:		ent->speed = 120;
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTF4 1123024896
ASGNF4
LABELV $616
line 1382
;1380:
;1381:	// if speed is negative, positize it and add reverse flag
;1382:	if ( ent->speed < 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
GEF4 $618
line 1383
;1383:		ent->speed *= -1;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTF4 3212836864
ADDRLP4 32
INDIRP4
INDIRF4
MULF4
ASGNF4
line 1384
;1384:		ent->spawnflags |= 8;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 1385
;1385:	}
LABELV $618
line 1388
;1386:
;1387:	// default of 2 seconds
;1388:	if (!ent->wait)
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
CNSTF4 0
NEF4 $620
line 1389
;1389:		ent->wait = 2;
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
CNSTF4 1073741824
ASGNF4
LABELV $620
line 1390
;1390:	ent->wait *= 1000;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTF4 1148846080
ADDRLP4 32
INDIRP4
INDIRF4
MULF4
ASGNF4
line 1393
;1391:	
;1392:	// set the axis of rotation
;1393:	VectorClear( ent->movedir );
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
CNSTF4 0
ASGNF4
ADDRLP4 36
INDIRP4
CNSTI4 756
ADDP4
ADDRLP4 40
INDIRF4
ASGNF4
ADDRLP4 36
INDIRP4
CNSTI4 752
ADDP4
ADDRLP4 40
INDIRF4
ASGNF4
ADDRLP4 36
INDIRP4
CNSTI4 748
ADDP4
ADDRLP4 40
INDIRF4
ASGNF4
line 1394
;1394:	VectorClear( ent->s.angles );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
CNSTF4 0
ASGNF4
ADDRLP4 44
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 44
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 48
INDIRF4
ASGNF4
ADDRLP4 44
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 48
INDIRF4
ASGNF4
line 1396
;1395:	
;1396:	if ( ent->spawnflags & 16 ) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $622
line 1397
;1397:		ent->movedir[2] = 1.0;
ADDRFP4 0
INDIRP4
CNSTI4 756
ADDP4
CNSTF4 1065353216
ASGNF4
line 1398
;1398:	} else if ( ent->spawnflags & 32 ) {
ADDRGP4 $623
JUMPV
LABELV $622
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $624
line 1399
;1399:		ent->movedir[0] = 1.0;
ADDRFP4 0
INDIRP4
CNSTI4 748
ADDP4
CNSTF4 1065353216
ASGNF4
line 1400
;1400:	} else {
ADDRGP4 $625
JUMPV
LABELV $624
line 1401
;1401:		ent->movedir[1] = 1.0;
ADDRFP4 0
INDIRP4
CNSTI4 752
ADDP4
CNSTF4 1065353216
ASGNF4
line 1402
;1402:	}
LABELV $625
LABELV $623
line 1405
;1403:
;1404:	// reverse direction if necessary
;1405:	if ( ent->spawnflags & 8 )
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $626
line 1406
;1406:		VectorNegate ( ent->movedir, ent->movedir );
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 748
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRF4
NEGF4
ASGNF4
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 752
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
NEGF4
ASGNF4
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 756
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
NEGF4
ASGNF4
LABELV $626
line 1409
;1407:
;1408:	// default distance of 90 degrees.
;1409:	if ( !ent->distance ) {
ADDRFP4 0
INDIRP4
CNSTI4 1044
ADDP4
INDIRF4
CNSTF4 0
NEF4 $628
line 1410
;1410:		ent->distance = 90.0;
ADDRFP4 0
INDIRP4
CNSTI4 1044
ADDP4
CNSTF4 1119092736
ASGNF4
line 1411
;1411:	}
LABELV $628
line 1413
;1412:	
;1413:	VectorCopy( ent->s.angles, ent->pos1 );
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 656
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 128
ADDP4
INDIRB
ASGNB 12
line 1414
;1414:	if(!ent->sandboxObject){
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $630
line 1415
;1415:	trap_SetBrushModel( ent, ent->model );}
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 68
INDIRP4
CNSTI4 580
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
LABELV $630
line 1416
;1416:	VectorMA ( ent->pos1, ent->distance, ent->movedir, ent->pos2 );
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 668
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 748
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 1044
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 672
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 752
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 1044
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 676
ADDP4
ADDRLP4 76
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 756
ADDP4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 1044
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1419
;1417:
;1418:	// if "start_open", reverse position 1 and 2
;1419:	if ( ent->spawnflags & 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $632
line 1422
;1420:		vec3_t	temp;
;1421:
;1422:		VectorCopy( ent->pos2, temp );
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 668
ADDP4
INDIRB
ASGNB 12
line 1423
;1423:		VectorCopy( ent->s.angles, ent->pos2 );
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 668
ADDP4
ADDRLP4 92
INDIRP4
CNSTI4 128
ADDP4
INDIRB
ASGNB 12
line 1424
;1424:		VectorCopy( temp, ent->pos1 );
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
ADDRLP4 80
INDIRB
ASGNB 12
line 1425
;1425:		VectorNegate ( ent->movedir, ent->movedir );
ADDRLP4 96
ADDRFP4 0
INDIRP4
CNSTI4 748
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRF4
NEGF4
ASGNF4
ADDRLP4 100
ADDRFP4 0
INDIRP4
CNSTI4 752
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRF4
NEGF4
ASGNF4
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 756
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRF4
NEGF4
ASGNF4
line 1426
;1426:	}
LABELV $632
line 1429
;1427:	
;1428:	// set origin
;1429:	VectorCopy( ent->s.origin, ent->s.pos.trBase );
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 80
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1430
;1430:	VectorCopy( ent->s.pos.trBase, ent->r.currentOrigin );
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 84
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1432
;1431:
;1432:	InitRotator( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitRotator
CALLV
pop
line 1434
;1433:
;1434:	ent->nextthink = level.time + FRAMETIME;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1436
;1435:
;1436:	if ( ! (ent->flags & FL_TEAMSLAVE ) ) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $635
line 1439
;1437:		int health;
;1438:
;1439:		G_SpawnInt( "health", "0", &health );
ADDRGP4 $605
ARGP4
ADDRGP4 $576
ARGP4
ADDRLP4 88
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1440
;1440:		if ( health ) {
ADDRLP4 88
INDIRI4
CNSTI4 0
EQI4 $637
line 1441
;1441:			ent->takedamage = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 832
ADDP4
CNSTI4 1
ASGNI4
line 1442
;1442:		}
LABELV $637
line 1443
;1443:		if ( ent->targetname || health ) {
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $641
ADDRLP4 88
INDIRI4
CNSTI4 0
EQI4 $639
LABELV $641
line 1445
;1444:			// non touch/shoot doors
;1445:			ent->think = Think_MatchTeam;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Think_MatchTeam
ASGNP4
line 1446
;1446:		} else {
ADDRGP4 $640
JUMPV
LABELV $639
line 1447
;1447:			ent->think = Think_SpawnNewDoorTrigger;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Think_SpawnNewDoorTrigger
ASGNP4
line 1448
;1448:		}
LABELV $640
line 1449
;1449:	}
LABELV $635
line 1450
;1450:}
LABELV $611
endproc SP_func_door_rotating 108 12
export Touch_Plat
proc Touch_Plat 4 0
line 1467
;1451:
;1452:/*
;1453:===============================================================================
;1454:
;1455:PLAT
;1456:
;1457:===============================================================================
;1458:*/
;1459:
;1460:/*
;1461:==============
;1462:Touch_Plat
;1463:
;1464:Don't allow decent if a living player is on it
;1465:===============
;1466:*/
;1467:void Touch_Plat( gentity_t *ent, gentity_t *other, trace_t *trace ) {
line 1468
;1468:	if ( !other->client || other->client->ps.stats[STAT_HEALTH] <= 0 ) {
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $645
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $643
LABELV $645
line 1469
;1469:		return;
ADDRGP4 $642
JUMPV
LABELV $643
line 1473
;1470:	}
;1471:
;1472:	// delay return-to-pos1 by one second
;1473:	if ( ent->moverState == MOVER_POS2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 1
NEI4 $646
line 1474
;1474:		ent->nextthink = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 1475
;1475:	}
LABELV $646
line 1476
;1476:}
LABELV $642
endproc Touch_Plat 4 0
export Touch_PlatCenterTrigger
proc Touch_PlatCenterTrigger 4 12
line 1485
;1477:
;1478:/*
;1479:==============
;1480:Touch_PlatCenterTrigger
;1481:
;1482:If the plat is at the bottom position, start it going up
;1483:===============
;1484:*/
;1485:void Touch_PlatCenterTrigger(gentity_t *ent, gentity_t *other, trace_t *trace ) {
line 1486
;1486:	if ( !other->client ) {
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $650
line 1487
;1487:		return;
ADDRGP4 $649
JUMPV
LABELV $650
line 1490
;1488:	}
;1489:
;1490:	if ( ent->parent->moverState == MOVER_POS1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
NEI4 $652
line 1491
;1491:		Use_BinaryMover( ent->parent, ent, other );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 1492
;1492:	}
LABELV $652
line 1493
;1493:}
LABELV $649
endproc Touch_PlatCenterTrigger 4 12
export SpawnPlatTrigger
proc SpawnPlatTrigger 60 4
line 1505
;1494:
;1495:
;1496:/*
;1497:================
;1498:SpawnPlatTrigger
;1499:
;1500:Spawn a trigger in the middle of the plat's low position
;1501:Elevator cars require that the trigger extend through the entire low position,
;1502:not just sit on top of it.
;1503:================
;1504:*/
;1505:void SpawnPlatTrigger( gentity_t *ent ) {
line 1511
;1506:	gentity_t	*trigger;
;1507:	vec3_t	tmin, tmax;
;1508:
;1509:	// the middle trigger will be a thin trigger just
;1510:	// above the starting position
;1511:	trigger = G_Spawn();
ADDRLP4 28
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 1512
;1512:	trigger->classname = "plat_trigger";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $655
ASGNP4
line 1513
;1513:	trigger->touch = Touch_PlatCenterTrigger;
ADDRLP4 0
INDIRP4
CNSTI4 780
ADDP4
ADDRGP4 Touch_PlatCenterTrigger
ASGNP4
line 1514
;1514:	trigger->r.contents = CONTENTS_TRIGGER;
ADDRLP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1073741824
ASGNI4
line 1515
;1515:	trigger->parent = ent;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1517
;1516:	
;1517:	tmin[0] = ent->pos1[0] + ent->r.mins[0] + 33;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 32
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 476
ADDP4
INDIRF4
ADDF4
CNSTF4 1107558400
ADDF4
ASGNF4
line 1518
;1518:	tmin[1] = ent->pos1[1] + ent->r.mins[1] + 33;
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+4
ADDRLP4 36
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
ADDF4
CNSTF4 1107558400
ADDF4
ASGNF4
line 1519
;1519:	tmin[2] = ent->pos1[2] + ent->r.mins[2];
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+8
ADDRLP4 40
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 484
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1521
;1520:
;1521:	tmax[0] = ent->pos1[0] + ent->r.maxs[0] - 33;
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 44
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
ADDRLP4 44
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDF4
CNSTF4 1107558400
SUBF4
ASGNF4
line 1522
;1522:	tmax[1] = ent->pos1[1] + ent->r.maxs[1] - 33;
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16+4
ADDRLP4 48
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDF4
CNSTF4 1107558400
SUBF4
ASGNF4
line 1523
;1523:	tmax[2] = ent->pos1[2] + ent->r.maxs[2] + 8;
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16+8
ADDRLP4 52
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDF4
CNSTF4 1090519040
ADDF4
ASGNF4
line 1525
;1524:
;1525:	if ( tmax[0] <= tmin[0] ) {
ADDRLP4 16
INDIRF4
ADDRLP4 4
INDIRF4
GTF4 $660
line 1526
;1526:		tmin[0] = ent->pos1[0] + (ent->r.mins[0] + ent->r.maxs[0]) *0.5;
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 56
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRLP4 56
INDIRP4
CNSTI4 476
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1527
;1527:		tmax[0] = tmin[0] + 1;
ADDRLP4 16
ADDRLP4 4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1528
;1528:	}
LABELV $660
line 1529
;1529:	if ( tmax[1] <= tmin[1] ) {
ADDRLP4 16+4
INDIRF4
ADDRLP4 4+4
INDIRF4
GTF4 $662
line 1530
;1530:		tmin[1] = ent->pos1[1] + (ent->r.mins[1] + ent->r.maxs[1]) *0.5;
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+4
ADDRLP4 56
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRLP4 56
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 1531
;1531:		tmax[1] = tmin[1] + 1;
ADDRLP4 16+4
ADDRLP4 4+4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1532
;1532:	}
LABELV $662
line 1534
;1533:	
;1534:	VectorCopy (tmin, trigger->r.mins);
ADDRLP4 0
INDIRP4
CNSTI4 476
ADDP4
ADDRLP4 4
INDIRB
ASGNB 12
line 1535
;1535:	VectorCopy (tmax, trigger->r.maxs);
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 16
INDIRB
ASGNB 12
line 1537
;1536:
;1537:	trap_LinkEntity (trigger);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1538
;1538:}
LABELV $654
endproc SpawnPlatTrigger 60 4
export SP_func_plat
proc SP_func_plat 52 12
line 1552
;1539:
;1540:
;1541:/*QUAKED func_plat (0 .5 .8) ?
;1542:Plats are always drawn in the extended position so they will light correctly.
;1543:
;1544:"lip"		default 8, protrusion above rest position
;1545:"height"	total height of movement, defaults to model height
;1546:"speed"		overrides default 200.
;1547:"dmg"		overrides default 2
;1548:"model2"	.md3 model to also draw
;1549:"color"		constantLight color
;1550:"light"		constantLight radius
;1551:*/
;1552:void SP_func_plat (gentity_t *ent) {
line 1555
;1553:	float		lip, height;
;1554:
;1555:	ent->sound1to2 = ent->sound2to1 = G_SoundIndex("sound/movers/plats/pt1_strt.wav");
ADDRGP4 $670
ARGP4
ADDRLP4 8
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 1556
;1556:	ent->soundPos1 = ent->soundPos2 = G_SoundIndex("sound/movers/plats/pt1_end.wav");
ADDRGP4 $671
ARGP4
ADDRLP4 16
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 632
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
ADDRLP4 20
INDIRP4
CNSTI4 620
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 1558
;1557:
;1558:	VectorClear (ent->s.angles);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
CNSTF4 0
ASGNF4
ADDRLP4 24
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 24
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
ADDRLP4 24
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
line 1560
;1559:
;1560:	G_SpawnFloat( "speed", "200", &ent->speed );
ADDRGP4 $672
ARGP4
ADDRGP4 $673
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1561
;1561:	G_SpawnInt( "dmg", "2", &ent->damage );
ADDRGP4 $588
ARGP4
ADDRGP4 $589
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 1562
;1562:	G_SpawnFloat( "wait", "1", &ent->wait );
ADDRGP4 $674
ARGP4
ADDRGP4 $675
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1563
;1563:	G_SpawnFloat( "lip", "8", &lip );
ADDRGP4 $586
ARGP4
ADDRGP4 $587
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1565
;1564:
;1565:	ent->wait = 1000;
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
CNSTF4 1148846080
ASGNF4
line 1568
;1566:
;1567:	// create second position
;1568:	if(!ent->sandboxObject){
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $676
line 1569
;1569:	trap_SetBrushModel( ent, ent->model );}
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 580
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
LABELV $676
line 1571
;1570:
;1571:	if ( !G_SpawnFloat( "height", "0", &height ) ) {
ADDRGP4 $680
ARGP4
ADDRGP4 $576
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 32
ADDRGP4 G_SpawnFloat
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
NEI4 $678
line 1572
;1572:		height = (ent->r.maxs[2] - ent->r.mins[2]) - lip;
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 36
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 484
ADDP4
INDIRF4
SUBF4
ADDRLP4 4
INDIRF4
SUBF4
ASGNF4
line 1573
;1573:	}
LABELV $678
line 1576
;1574:
;1575:	// pos1 is the rest (bottom) position, pos2 is the top
;1576:	VectorCopy( ent->s.origin, ent->pos2 );
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 668
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1577
;1577:	VectorCopy( ent->pos2, ent->pos1 );
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 656
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 668
ADDP4
INDIRB
ASGNB 12
line 1578
;1578:	ent->pos1[2] -= height;
ADDRLP4 44
ADDRFP4 0
INDIRP4
CNSTI4 664
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
ASGNF4
line 1580
;1579:
;1580:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1584
;1581:
;1582:	// touch function keeps the plat from returning while
;1583:	// a live player is standing on it
;1584:	ent->touch = Touch_Plat;
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
ADDRGP4 Touch_Plat
ASGNP4
line 1586
;1585:
;1586:	ent->blocked = Blocked_Door;
ADDRFP4 0
INDIRP4
CNSTI4 776
ADDP4
ADDRGP4 Blocked_Door
ASGNP4
line 1588
;1587:
;1588:	ent->parent = ent;	// so it can be treated as a door
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 640
ADDP4
ADDRLP4 48
INDIRP4
ASGNP4
line 1591
;1589:
;1590:	// spawn the trigger if one hasn't been custom made
;1591:	if ( !ent->targetname ) {
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $681
line 1592
;1592:		SpawnPlatTrigger(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 SpawnPlatTrigger
CALLV
pop
line 1593
;1593:	}
LABELV $681
line 1594
;1594:}
LABELV $669
endproc SP_func_plat 52 12
export Touch_Button
proc Touch_Button 4 12
line 1611
;1595:
;1596:
;1597:/*
;1598:===============================================================================
;1599:
;1600:BUTTON
;1601:
;1602:===============================================================================
;1603:*/
;1604:
;1605:/*
;1606:==============
;1607:Touch_Button
;1608:
;1609:===============
;1610:*/
;1611:void Touch_Button(gentity_t *ent, gentity_t *other, trace_t *trace ) {
line 1612
;1612:	if ( !other->client ) {
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $684
line 1613
;1613:		return;
ADDRGP4 $683
JUMPV
LABELV $684
line 1616
;1614:	}
;1615:
;1616:	if ( ent->moverState == MOVER_POS1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
CNSTI4 0
NEI4 $686
line 1617
;1617:		Use_BinaryMover( ent, other, other );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Use_BinaryMover
CALLV
pop
line 1618
;1618:	}
LABELV $686
line 1619
;1619:}
LABELV $683
endproc Touch_Button 4 12
export SP_func_button
proc SP_func_button 84 12
line 1636
;1620:
;1621:
;1622:/*QUAKED func_button (0 .5 .8) ?
;1623:When a button is touched, it moves some distance in the direction of it's angle, triggers all of it's targets, waits some time, then returns to it's original position where it can be triggered again.
;1624:
;1625:"model2"	.md3 model to also draw
;1626:"angle"		determines the opening direction
;1627:"target"	all entities with a matching targetname will be used
;1628:"speed"		override the default 40 speed
;1629:"wait"		override the default 1 second wait (-1 = never return)
;1630:"lip"		override the default 4 pixel lip remaining at end of move
;1631:"health"	if set, the button must be killed instead of touched
;1632:"sound"		if set, overrides the sound played when the button is pressed
;1633:"color"		constantLight color
;1634:"light"		constantLight radius
;1635:*/
;1636:void SP_func_button( gentity_t *ent ) {
line 1643
;1637:	char		*sound;
;1638:	vec3_t		abs_movedir;
;1639:	float		distance;
;1640:	vec3_t		size;
;1641:	float		lip;
;1642:
;1643:	sound = NULL;
ADDRLP4 28
CNSTP4 0
ASGNP4
line 1644
;1644:	G_SpawnString("sound", "sound/movers/switches/butn2.wav", &sound);
ADDRGP4 $689
ARGP4
ADDRGP4 $690
ARGP4
ADDRLP4 28
ARGP4
ADDRGP4 G_SpawnString
CALLI4
pop
line 1645
;1645:	ent->sound1to2 = G_SoundIndex(sound);
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
line 1647
;1646:	
;1647:	if ( !ent->speed ) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
NEF4 $691
line 1648
;1648:		ent->speed = 40;
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTF4 1109393408
ASGNF4
line 1649
;1649:	}
LABELV $691
line 1651
;1650:
;1651:	if ( !ent->wait ) {
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
CNSTF4 0
NEF4 $693
line 1652
;1652:		ent->wait = 1;
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
CNSTF4 1065353216
ASGNF4
line 1653
;1653:	}
LABELV $693
line 1654
;1654:	ent->wait *= 1000;
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTF4 1148846080
ADDRLP4 40
INDIRP4
INDIRF4
MULF4
ASGNF4
line 1657
;1655:
;1656:	// first position
;1657:	VectorCopy( ent->s.origin, ent->pos1 );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 656
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1660
;1658:
;1659:	// calculate second position
;1660:	if(!ent->sandboxObject){
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $695
line 1661
;1661:	trap_SetBrushModel( ent, ent->model );}
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 48
INDIRP4
CNSTI4 580
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
LABELV $695
line 1663
;1662:
;1663:	G_SpawnFloat( "lip", "4", &lip );
ADDRGP4 $586
ARGP4
ADDRGP4 $697
ARGP4
ADDRLP4 32
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1665
;1664:
;1665:	G_SetMovedir( ent->s.angles, ent->movedir );
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 128
ADDP4
ARGP4
ADDRLP4 48
INDIRP4
CNSTI4 748
ADDP4
ARGP4
ADDRGP4 G_SetMovedir
CALLV
pop
line 1666
;1666:	abs_movedir[0] = fabs(ent->movedir[0]);
ADDRFP4 0
INDIRP4
CNSTI4 748
ADDP4
INDIRF4
ARGF4
ADDRLP4 52
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 52
INDIRF4
ASGNF4
line 1667
;1667:	abs_movedir[1] = fabs(ent->movedir[1]);
ADDRFP4 0
INDIRP4
CNSTI4 752
ADDP4
INDIRF4
ARGF4
ADDRLP4 56
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 56
INDIRF4
ASGNF4
line 1668
;1668:	abs_movedir[2] = fabs(ent->movedir[2]);
ADDRFP4 0
INDIRP4
CNSTI4 756
ADDP4
INDIRF4
ARGF4
ADDRLP4 60
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 60
INDIRF4
ASGNF4
line 1669
;1669:	VectorSubtract( ent->r.maxs, ent->r.mins, size );
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 64
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 476
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 64
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRLP4 64
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12+8
ADDRLP4 68
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRLP4 68
INDIRP4
CNSTI4 484
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1670
;1670:	distance = abs_movedir[0] * size[0] + abs_movedir[1] * size[1] + abs_movedir[2] * size[2] - lip;
ADDRLP4 24
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ADDRLP4 32
INDIRF4
SUBF4
ASGNF4
line 1671
;1671:	VectorMA (ent->pos1, distance, ent->movedir, ent->pos2);
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 668
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
ADDRLP4 72
INDIRP4
CNSTI4 748
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 672
ADDP4
ADDRLP4 76
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
ADDRLP4 76
INDIRP4
CNSTI4 752
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 676
ADDP4
ADDRLP4 80
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 756
ADDP4
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ASGNF4
line 1673
;1672:
;1673:	if (ent->health) {
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 0
EQI4 $706
line 1675
;1674:		// shootable button
;1675:		ent->takedamage = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 832
ADDP4
CNSTI4 1
ASGNI4
line 1676
;1676:	} else {
ADDRGP4 $707
JUMPV
LABELV $706
line 1678
;1677:		// touchable button
;1678:		ent->touch = Touch_Button;
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
ADDRGP4 Touch_Button
ASGNP4
line 1679
;1679:	}
LABELV $707
line 1681
;1680:
;1681:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1682
;1682:}
LABELV $688
endproc SP_func_button 84 12
export Think_BeginMoving
proc Think_BeginMoving 4 12
line 1706
;1683:
;1684:
;1685:
;1686:/*
;1687:===============================================================================
;1688:
;1689:TRAIN
;1690:
;1691:===============================================================================
;1692:*/
;1693:
;1694:
;1695:#define TRAIN_START_ON		1
;1696:#define TRAIN_TOGGLE		2
;1697:#define TRAIN_BLOCK_STOPS	4
;1698:
;1699:/*
;1700:===============
;1701:Think_BeginMoving
;1702:
;1703:The wait time at a corner has completed, so start moving again
;1704:===============
;1705:*/
;1706:void Think_BeginMoving( gentity_t *ent ) {
line 1708
;1707:	//play sound
;1708:	if ( ent->sound1to2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
CNSTI4 0
EQI4 $709
line 1709
;1709:		G_AddEvent( ent, EV_GENERAL_SOUND, ent->sound1to2 );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 624
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1710
;1710:	}
LABELV $709
line 1711
;1711:	ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1712
;1712:	ent->s.pos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 3
ASGNI4
line 1713
;1713:}
LABELV $708
endproc Think_BeginMoving 4 12
export Reached_Train
proc Reached_Train 56 12
line 1720
;1714:
;1715:/*
;1716:===============
;1717:Reached_Train
;1718:===============
;1719:*/
;1720:void Reached_Train( gentity_t *ent ) {
line 1727
;1721:	gentity_t		*next;
;1722:	float			speed;
;1723:	vec3_t			move;
;1724:	float			length;
;1725:
;1726:	// copy the apropriate values
;1727:	next = ent->nextTrain;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
ASGNP4
line 1728
;1728:	if ( !next || !next->nextTrain ) {
ADDRLP4 28
CNSTU4 0
ASGNU4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 28
INDIRU4
EQU4 $715
ADDRLP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 28
INDIRU4
NEU4 $713
LABELV $715
line 1729
;1729:		return;		// just stop
ADDRGP4 $712
JUMPV
LABELV $713
line 1733
;1730:	}
;1731:
;1732:	// fire all other targets
;1733:	G_UseTargets( next, NULL );
ADDRLP4 0
INDIRP4
ARGP4
CNSTP4 0
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
line 1736
;1734:
;1735:	// set the new trajectory
;1736:	ent->nextTrain = next->nextTrain;
ADDRLP4 32
CNSTI4 648
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ADDRLP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRP4
ASGNP4
line 1737
;1737:	VectorCopy( next->s.origin, ent->pos1 );
ADDRFP4 0
INDIRP4
CNSTI4 656
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1738
;1738:	VectorCopy( next->nextTrain->s.origin, ent->pos2 );
ADDRFP4 0
INDIRP4
CNSTI4 668
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1741
;1739:
;1740:	// if the path_corner has a speed, use that
;1741:	if ( next->speed ) {
ADDRLP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
EQF4 $716
line 1742
;1742:		speed = next->speed;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
ASGNF4
line 1743
;1743:	} else {
ADDRGP4 $717
JUMPV
LABELV $716
line 1745
;1744:		// otherwise use the train's speed
;1745:		speed = ent->speed;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
ASGNF4
line 1746
;1746:	}
LABELV $717
line 1747
;1747:	if ( speed < 1 ) {
ADDRLP4 16
INDIRF4
CNSTF4 1065353216
GEF4 $718
line 1748
;1748:		speed = 1;
ADDRLP4 16
CNSTF4 1065353216
ASGNF4
line 1749
;1749:	}
LABELV $718
line 1752
;1750:
;1751:	// calculate duration
;1752:	VectorSubtract( ent->pos2, ent->pos1, move );
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 36
INDIRP4
CNSTI4 668
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 656
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 36
INDIRP4
CNSTI4 672
ADDP4
INDIRF4
ADDRLP4 36
INDIRP4
CNSTI4 660
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4+8
ADDRLP4 40
INDIRP4
CNSTI4 676
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 664
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1753
;1753:	length = VectorLength( move );
ADDRLP4 4
ARGP4
ADDRLP4 44
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 44
INDIRF4
ASGNF4
line 1755
;1754:
;1755:	ent->s.pos.trDuration = length * 1000 / speed;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTF4 1148846080
ADDRLP4 20
INDIRF4
MULF4
ADDRLP4 16
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 1758
;1756:
;1757:	// Tequila comment: Be sure to send to clients after any fast move case
;1758:	ent->r.svFlags &= ~SVF_NOCLIENT;
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 1761
;1759:
;1760:	// Tequila comment: Fast move case
;1761:	if(ent->s.pos.trDuration<1) {
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CNSTI4 1
GEI4 $722
line 1770
;1762:            // Tequila comment: As trDuration is used later in a division, we need to avoid that case now
;1763:            // With null trDuration,
;1764:            // the calculated rocks bounding box becomes infinite and the engine think for a short time
;1765:            // any entity is riding that mover but not the world entity... In rare case, I found it
;1766:            // can also stuck every map entities after func_door are used.
;1767:            // The desired effect with very very big speed is to have instant move, so any not null duration
;1768:            // lower than a frame duration should be sufficient.
;1769:            // Afaik, the negative case don't have to be supported.
;1770:            ent->s.pos.trDuration=1;
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTI4 1
ASGNI4
line 1773
;1771:
;1772:            // Tequila comment: Don't send entity to clients so it becomes really invisible
;1773:            ent->r.svFlags |= SVF_NOCLIENT;
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 1774
;1774:	}
LABELV $722
line 1777
;1775:
;1776:	// looping sound
;1777:	ent->s.loopSound = next->soundLoop;
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 636
ADDP4
INDIRI4
ASGNI4
line 1780
;1778:
;1779:	// start it going
;1780:	SetMoverState( ent, MOVER_1TO2, level.time );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 2
ARGI4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRGP4 SetMoverState
CALLV
pop
line 1783
;1781:
;1782:	// if there is a "wait" value on the target, don't start moving yet
;1783:	if ( next->wait ) {
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
CNSTF4 0
EQF4 $725
line 1785
;1784:		//play sound
;1785:		if ( ent->soundPos2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
EQI4 $727
line 1786
;1786:			G_AddEvent( ent, EV_GENERAL_SOUND, ent->soundPos2 );
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 52
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1787
;1787:		}
LABELV $727
line 1789
;1788:
;1789:		if ( next->wait > 0 ) {
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
CNSTF4 0
LEF4 $729
line 1790
;1790:		ent->nextthink = level.time + next->wait * 1000;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
CNSTF4 1148846080
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1791
;1791:		}
LABELV $729
line 1792
;1792:		ent->think = Think_BeginMoving;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Think_BeginMoving
ASGNP4
line 1793
;1793:		ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 1794
;1794:	}
LABELV $725
line 1795
;1795:}
LABELV $712
endproc Reached_Train 56 12
export Think_SetupTrainTargets
proc Think_SetupTrainTargets 28 12
line 1805
;1796:
;1797:
;1798:/*
;1799:===============
;1800:Think_SetupTrainTargets
;1801:
;1802:Link all the corners together
;1803:===============
;1804:*/
;1805:void Think_SetupTrainTargets( gentity_t *ent ) {
line 1808
;1806:	gentity_t		*path, *next, *start;
;1807:
;1808:	ent->nextTrain = G_Find( NULL, FOFS(targetname), ent->target );
CNSTP4 0
ARGP4
CNSTI4 724
ARGI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 720
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 648
ADDP4
ADDRLP4 16
INDIRP4
ASGNP4
line 1809
;1809:	if ( !ent->nextTrain ) {
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $733
line 1810
;1810:		if ( !strcmp( ent->classname, "func_train" ) )
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $737
ARGP4
ADDRLP4 20
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $735
line 1811
;1811:			G_Printf( "func_train at %s with an unfound target\n", vtos(ent->r.absmin) );
ADDRFP4 0
INDIRP4
CNSTI4 504
ADDP4
ARGP4
ADDRLP4 24
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $738
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
ADDRGP4 $732
JUMPV
LABELV $735
line 1813
;1812:		else //path_corner
;1813:			G_Printf( "Train corner at %s without a target\n", ent->s.origin );
ADDRGP4 $739
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1814
;1814:		return;
ADDRGP4 $732
JUMPV
LABELV $733
line 1817
;1815:	}
;1816:
;1817:	start = NULL;
ADDRLP4 8
CNSTP4 0
ASGNP4
line 1818
;1818:	for ( path = ent->nextTrain ; path != start ; path = next ) {
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 648
ADDP4
INDIRP4
ASGNP4
ADDRGP4 $743
JUMPV
LABELV $740
line 1819
;1819:		if ( !start ) {
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $744
line 1820
;1820:			start = path;
ADDRLP4 8
ADDRLP4 4
INDIRP4
ASGNP4
line 1821
;1821:		}
LABELV $744
line 1823
;1822:
;1823:		if ( !path->target ) {
ADDRLP4 4
INDIRP4
CNSTI4 720
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $746
line 1824
;1824:                        G_Printf( "Train corner at %s without a target\n",
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 20
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $739
ARGP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1826
;1825:				vtos(path->s.origin) );
;1826:			return;
ADDRGP4 $732
JUMPV
LABELV $746
line 1832
;1827:		}
;1828:
;1829:		// find a path_corner among the targets
;1830:		// there may also be other targets that get fired when the corner
;1831:		// is reached
;1832:		next = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
LABELV $748
line 1833
;1833:		do {
line 1834
;1834:			next = G_Find( next, FOFS(targetname), path->target );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 724
ARGI4
ADDRLP4 4
INDIRP4
CNSTI4 720
ADDP4
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 1835
;1835:			if ( !next ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $751
line 1836
;1836:                                G_Printf( "Train corner at %s without a target path_corner\n",
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 24
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $753
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1838
;1837:					vtos(path->s.origin) );
;1838:				return;
ADDRGP4 $732
JUMPV
LABELV $751
line 1840
;1839:			}
;1840:		} while ( strcmp( next->classname, "path_corner" ) );
LABELV $749
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $754
ARGP4
ADDRLP4 20
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $748
line 1843
;1841:
;1842:		//G_Printf("%s -> %s\n", path->targetname, next->targetname);
;1843:		path->nextTrain = next;
ADDRLP4 4
INDIRP4
CNSTI4 648
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 1844
;1844:	}
LABELV $741
line 1818
ADDRLP4 4
ADDRLP4 0
INDIRP4
ASGNP4
LABELV $743
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRP4
CVPU4 4
NEU4 $740
line 1847
;1845:
;1846:	// start the train moving from the first corner
;1847:	if ( !strcmp( ent->classname, "func_train" ) )
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $737
ARGP4
ADDRLP4 20
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $755
line 1848
;1848:	Reached_Train( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Reached_Train
CALLV
pop
LABELV $755
line 1849
;1849:}
LABELV $732
endproc Think_SetupTrainTargets 28 12
export SP_path_corner
proc SP_path_corner 4 8
line 1859
;1850:
;1851:
;1852:
;1853:/*QUAKED path_corner (.5 .3 0) (-8 -8 -8) (8 8 8)
;1854:Train path corners.
;1855:Target: next path corner and other targets to fire
;1856:"speed" speed to move to the next corner
;1857:"wait" seconds to wait before behining move to next corner
;1858:*/
;1859:void SP_path_corner( gentity_t *self ) {
line 1860
;1860:	if ( !self->targetname ) {
ADDRFP4 0
INDIRP4
CNSTI4 724
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $758
line 1861
;1861:                G_Printf ("path_corner with no targetname at %s\n", vtos(self->s.origin));
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 0
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $760
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1862
;1862:		G_FreeEntity( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1863
;1863:		return;
LABELV $758
line 1866
;1864:	}
;1865:	// path corners don't need to be linked in
;1866:}
LABELV $757
endproc SP_path_corner 4 8
export Use_Train
proc Use_Train 0 4
line 1882
;1867:
;1868:
;1869:
;1870:/*QUAKED func_train (0 .5 .8) ? START_ON TOGGLE BLOCK_STOPS
;1871:A train is a mover that moves between path_corner target points.
;1872:Trains MUST HAVE AN ORIGIN BRUSH.
;1873:The train spawns at the first target it is pointing at.
;1874:"model2"	.md3 model to also draw
;1875:"speed"		default 100
;1876:"dmg"		default	2
;1877:"noise"		looping sound to play when the train is in motion
;1878:"target"	next path corner
;1879:"color"		constantLight color
;1880:"light"		constantLight radius
;1881:*/
;1882:void Use_Train (gentity_t *ent, gentity_t *other, gentity_t *activator) {
line 1883
;1883:	if (ent->s.pos.trType == TR_STATIONARY) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $762
line 1884
;1884:		ent->s.pos.trType = TR_LINEAR_STOP;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 3
ASGNI4
line 1885
;1885:		Think_BeginMoving( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Think_BeginMoving
CALLV
pop
line 1886
;1886:	}
LABELV $762
line 1891
;1887:	//else {
;1888:	//	ent->nextthink = 0;
;1889:	//	ent->s.pos.trType = TR_STATIONARY;
;1890:	//}
;1891:}
LABELV $761
endproc Use_Train 0 4
export SP_func_train
proc SP_func_train 48 12
line 1893
;1892:
;1893:void SP_func_train (gentity_t *self) {
line 1897
;1894:	char *startsound;
;1895:	char *endsound;
;1896:
;1897:	VectorClear (self->s.angles);
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 136
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 132
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 128
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
line 1900
;1898:
;1899:	//sounds
;1900:	startsound = endsound = NULL;
ADDRLP4 16
CNSTP4 0
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
line 1901
;1901:	G_SpawnString("startsound", "", &startsound);
ADDRGP4 $571
ARGP4
ADDRGP4 $765
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_SpawnString
CALLI4
pop
line 1902
;1902:	G_SpawnString("endsound", "", &endsound);
ADDRGP4 $573
ARGP4
ADDRGP4 $765
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 G_SpawnString
CALLI4
pop
line 1904
;1903:
;1904:	if ( strlen( startsound ) > 0 )
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
LEI4 $766
line 1905
;1905:		self->sound1to2 = self->sound2to1 = G_SoundIndex(startsound);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 628
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
ADDRLP4 28
INDIRP4
CNSTI4 624
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
LABELV $766
line 1907
;1906:
;1907:	if ( strlen( endsound ) > 0 )
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 0
LEI4 $768
line 1908
;1908:		self->soundPos1 = self->soundPos2 = G_SoundIndex(endsound);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 632
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 620
ADDP4
ADDRLP4 36
INDIRI4
ASGNI4
LABELV $768
line 1910
;1909:
;1910:	if (self->spawnflags & TRAIN_BLOCK_STOPS) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $770
line 1911
;1911:		self->damage = 0;
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
CNSTI4 0
ASGNI4
line 1912
;1912:	} else {
ADDRGP4 $771
JUMPV
LABELV $770
line 1913
;1913:		if (!self->damage) {
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
NEI4 $772
line 1914
;1914:			self->damage = 2;
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
CNSTI4 2
ASGNI4
line 1915
;1915:		}
LABELV $772
line 1916
;1916:	}
LABELV $771
line 1918
;1917:
;1918:	if ( !self->speed ) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
NEF4 $774
line 1919
;1919:		self->speed = 100;
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTF4 1120403456
ASGNF4
line 1920
;1920:	}
LABELV $774
line 1922
;1921:
;1922:	if ( !self->target ) {
ADDRFP4 0
INDIRP4
CNSTI4 720
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $776
line 1923
;1923:                G_Printf ("func_train without a target at %s\n", vtos(self->r.absmin));
ADDRFP4 0
INDIRP4
CNSTI4 504
ADDP4
ARGP4
ADDRLP4 44
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $778
ARGP4
ADDRLP4 44
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1924
;1924:		G_FreeEntity( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1925
;1925:		return;
ADDRGP4 $764
JUMPV
LABELV $776
line 1927
;1926:	}
;1927:	if(!self->sandboxObject){
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $779
line 1928
;1928:	trap_SetBrushModel( self, self->model );}
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
ARGP4
ADDRLP4 44
INDIRP4
CNSTI4 580
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
LABELV $779
line 1929
;1929:	InitMover( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1931
;1930:
;1931:	self->reached = Reached_Train;
ADDRFP4 0
INDIRP4
CNSTI4 772
ADDP4
ADDRGP4 Reached_Train
ASGNP4
line 1932
;1932:	self->takedamage = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 832
ADDP4
CNSTI4 1
ASGNI4
line 1936
;1933:
;1934:	// start trains on the second frame, to make sure their targets have had
;1935:	// a chance to spawn
;1936:	self->nextthink = level.time + FRAMETIME;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 1937
;1937:	self->think = Think_SetupTrainTargets;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Think_SetupTrainTargets
ASGNP4
line 1938
;1938:	self->use = Use_Train;
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
ADDRGP4 Use_Train
ASGNP4
line 1939
;1939:}
LABELV $764
endproc SP_func_train 48 12
export Use_Static
proc Use_Static 0 8
line 1950
;1940:
;1941:/*
;1942:===============================================================================
;1943:
;1944:STATIC
;1945:
;1946:===============================================================================
;1947:*/
;1948:
;1949:
;1950:void Use_Static(gentity_t* ent, gentity_t* other, gentity_t* activator) {
line 1951
;1951:	G_SetEntityLinked(ent, 0);
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 G_SetEntityLinked
CALLI4
pop
line 1952
;1952:}
LABELV $782
endproc Use_Static 0 8
export SP_func_static
proc SP_func_static 8 8
line 1960
;1953:
;1954:/*QUAKED func_static (0 .5 .8) ? START_UNLINKED
;1955:A bmodel that just sits there, doing nothing.  Can be used for conditional walls and models.
;1956:"model2"	.md3 model to also draw
;1957:"color"		constantLight color
;1958:"light"		constantLight radius
;1959:*/
;1960:void SP_func_static( gentity_t *ent ) {
line 1961
;1961:	if(!ent->sandboxObject){
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $784
line 1962
;1962:	trap_SetBrushModel( ent, ent->model );}
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 580
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
LABELV $784
line 1963
;1963:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 1964
;1964:	VectorCopy( ent->s.origin, ent->s.pos.trBase );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1965
;1965:	VectorCopy( ent->s.origin, ent->r.currentOrigin );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 1967
;1966:
;1967:	if ( ent->spawnflags & 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $786
line 1968
;1968:		trap_UnlinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_UnlinkEntity
CALLV
pop
line 1969
;1969:	}
LABELV $786
line 1971
;1970:
;1971:	ent->use = Use_Static;
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
ADDRGP4 Use_Static
ASGNP4
line 1972
;1972:}
LABELV $783
endproc SP_func_static 8 8
export Think_Breakable
proc Think_Breakable 4 8
line 1983
;1973:
;1974:
;1975:/*
;1976:===============================================================================
;1977:
;1978:BREAKABLE
;1979:
;1980:===============================================================================
;1981:*/
;1982:
;1983:void Think_Breakable( gentity_t *ent ) {
line 1984
;1984:	Break_Breakable( ent, ent->activator );
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
ARGP4
ADDRGP4 Break_Breakable
CALLV
pop
line 1985
;1985:}
LABELV $788
endproc Think_Breakable 4 8
export Break_Breakable
proc Break_Breakable 84 24
line 1988
;1986:
;1987://other is the player that broke the func_breakable
;1988:void Break_Breakable(gentity_t *ent, gentity_t *other) {
line 1991
;1989:	vec3_t size;
;1990:	vec3_t center;
;1991:	int count = 0;
ADDRLP4 24
CNSTI4 0
ASGNI4
line 1992
;1992:	int sound = 0;
ADDRLP4 28
CNSTI4 0
ASGNI4
line 1993
;1993:	int spawnflags = 0;
ADDRLP4 32
CNSTI4 0
ASGNI4
line 1995
;1994:	gentity_t *tmp, *tmp2;
;1995:	int type = EV_EMIT_DEBRIS_LIGHT;
ADDRLP4 44
CNSTI4 84
ASGNI4
line 1997
;1996:
;1997:	if ( other != ent->activator && !strcmp( other->classname, "func_breakable" ) ) {
ADDRLP4 48
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
CVPU4 4
EQU4 $790
ADDRLP4 48
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $792
ARGP4
ADDRLP4 52
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $790
line 2000
;1998:		//if the splash damage from another func_breakable is causing this func_breakable to break
;1999:		//then delay the break to get a nice chain explosion effect
;2000:		ent->activator = other;
ADDRFP4 0
INDIRP4
CNSTI4 968
ADDP4
ADDRFP4 4
INDIRP4
ASGNP4
line 2001
;2001:		ent->think = Think_Breakable;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Think_Breakable
ASGNP4
line 2002
;2002:		ent->nextthink = level.time + 400;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 400
ADDI4
ASGNI4
line 2003
;2003:		return;
ADDRGP4 $789
JUMPV
LABELV $790
line 2007
;2004:	}
;2005:
;2006:	// Get the center of the func_breakable (code donated by Perle)
;2007:	VectorSubtract(ent->r.maxs, ent->r.mins, size);
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 56
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 476
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 56
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0+8
ADDRLP4 60
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
CNSTI4 484
ADDP4
INDIRF4
SUBF4
ASGNF4
line 2008
;2008:    VectorScale(size, 0.5, size);
ADDRLP4 64
CNSTF4 1056964608
ASGNF4
ADDRLP4 0
ADDRLP4 64
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 64
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1056964608
ADDRLP4 0+8
INDIRF4
MULF4
ASGNF4
line 2009
;2009:    VectorAdd(ent->r.mins, size, center);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 68
INDIRP4
CNSTI4 476
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
ADDF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 68
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
ADDRLP4 0+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 12+8
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
INDIRF4
ADDRLP4 0+8
INDIRF4
ADDF4
ASGNF4
line 2012
;2010:
;2011:
;2012:	ent->takedamage = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 832
ADDP4
CNSTI4 0
ASGNI4
line 2013
;2013:	ent->s.eType = ET_INVISIBLE;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 10
ASGNI4
line 2014
;2014:	G_UseTargets( ent, other );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
line 2019
;2015:
;2016:
;2017:
;2018:	//need to store properties of the entity in separate variables because we're going to free the entity
;2019:	if ( ent->count > 0) {
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
LEI4 $804
line 2020
;2020:		count = ent->count;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
ASGNI4
line 2021
;2021:		spawnflags = ent->spawnflags;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
ASGNI4
line 2022
;2022:	}
LABELV $804
line 2024
;2023:
;2024:	if ( ent->soundPos2 )
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
CNSTI4 0
EQI4 $806
line 2025
;2025:		sound = ent->soundPos2;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
INDIRI4
ASGNI4
LABELV $806
line 2028
;2026:
;2027:	//apply radius damage
;2028:	if ( ent->damage )
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
EQI4 $808
line 2029
;2029:		G_RadiusDamage( center, ent, ent->damage, ent->splashRadius, ent, MOD_BREAKABLE_SPLASH );
ADDRLP4 12
ARGP4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 72
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 72
INDIRP4
ARGP4
CNSTI4 37
ARGI4
ADDRGP4 G_RadiusDamage
CALLI4
pop
LABELV $808
line 2033
;2030:
;2031:
;2032:	//free the entity so it disappears
;2033:	G_FreeEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 2037
;2034:
;2035:
;2036:	//spray out debris
;2037:	if ( count > 0 ) {
ADDRLP4 24
INDIRI4
CNSTI4 0
LEI4 $810
line 2038
;2038:		tmp = G_TempEntity( center, PickDebrisType( spawnflags ) );
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 PickDebrisType
CALLI4
ASGNI4
ADDRLP4 12
ARGP4
ADDRLP4 76
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 36
ADDRLP4 80
INDIRP4
ASGNP4
line 2039
;2039:		tmp->s.eventParm = count;
ADDRLP4 36
INDIRP4
CNSTI4 196
ADDP4
ADDRLP4 24
INDIRI4
ASGNI4
line 2040
;2040:	}
LABELV $810
line 2043
;2041:
;2042:	//play sound
;2043:	if ( sound )
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $812
line 2044
;2044:	{
line 2045
;2045:		tmp2 = G_TempEntity( center, EV_GENERAL_SOUND );
ADDRLP4 12
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 76
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 76
INDIRP4
ASGNP4
line 2046
;2046:		tmp2->s.eventParm = sound;
ADDRLP4 40
INDIRP4
CNSTI4 196
ADDP4
ADDRLP4 28
INDIRI4
ASGNI4
line 2047
;2047:	}
LABELV $812
line 2050
;2048:
;2049:	//show explosion effect
;2050:	if (spawnflags & 8192) {
ADDRLP4 32
INDIRI4
CNSTI4 8192
BANDI4
CNSTI4 0
EQI4 $814
line 2051
;2051:		G_TempEntity(center, EV_EXPLOSION);
ADDRLP4 12
ARGP4
CNSTI4 93
ARGI4
ADDRGP4 G_TempEntity
CALLP4
pop
line 2052
;2052:	}
LABELV $814
line 2053
;2053:}
LABELV $789
endproc Break_Breakable 84 24
export Use_Breakable
proc Use_Breakable 0 8
line 2055
;2054:
;2055:void Use_Breakable (gentity_t *ent, gentity_t *other, gentity_t *activator) {
line 2056
;2056:	Break_Breakable( ent, activator );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Break_Breakable
CALLV
pop
line 2057
;2057:}
LABELV $816
endproc Use_Breakable 0 8
export SP_func_breakable
proc SP_func_breakable 20 12
line 2066
;2058:
;2059:/*QUAKED func_breakable (0 .5 .8) ? see PickDebrisType in g_util.c for spawnflags
;2060:A bmodel that just sits there, doing nothing. It is removed when it received a set amount of damage.
;2061:"model2"	.md3 model to also draw
;2062:"color"		constantLight color
;2063:"light"		constantLight radius
;2064:"health"	the amount of damage required before this entity is removed
;2065:*/
;2066:void SP_func_breakable( gentity_t *ent ) {
line 2068
;2067:	char  *noise;
;2068:	if(!ent->sandboxObject){
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $818
line 2069
;2069:	trap_SetBrushModel( ent, ent->model );}
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
CNSTI4 580
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
LABELV $818
line 2070
;2070:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 2071
;2071:	VectorCopy( ent->s.origin, ent->s.pos.trBase );
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 2072
;2072:	VectorCopy( ent->s.origin, ent->r.currentOrigin );
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 2073
;2073:	ent->takedamage = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 832
ADDP4
CNSTI4 1
ASGNI4
line 2074
;2074:	ent->use = Use_Breakable;
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
ADDRGP4 Use_Breakable
ASGNP4
line 2075
;2075:	ent->r.contents = CONTENTS_SOLID; 
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1
ASGNI4
line 2076
;2076:	ent->clipmask = MASK_SOLID;
ADDRFP4 0
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 1
ASGNI4
line 2078
;2077:
;2078:	G_SpawnInt( "dmg", "0", &ent->damage );
ADDRGP4 $588
ARGP4
ADDRGP4 $576
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 2079
;2079:	G_SpawnInt( "radius", "120", &ent->splashRadius );	//120 is default splash radius of a rocket
ADDRGP4 $820
ARGP4
ADDRGP4 $821
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 932
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 2081
;2080:	
;2081:	G_SpawnString("breaksound", "", &noise);
ADDRGP4 $822
ARGP4
ADDRGP4 $765
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_SpawnString
CALLI4
pop
line 2082
;2082:	if (strlen(noise) > 0) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
LEI4 $823
line 2083
;2083:		ent->soundPos2 = G_SoundIndex(noise);
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 632
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 2084
;2084:	}
LABELV $823
line 2085
;2085:}
LABELV $817
endproc SP_func_breakable 20 12
export Use_Rotating
proc Use_Rotating 8 0
line 2110
;2086:
;2087:
;2088:/*
;2089:===============================================================================
;2090:
;2091:ROTATING
;2092:
;2093:===============================================================================
;2094:*/
;2095:
;2096:
;2097:/*QUAKED func_rotating (0 .5 .8) ? START_ON - X_AXIS Y_AXIS
;2098:You need to have an origin brush as part of this entity.  The center of that brush will be
;2099:the point around which it is rotated. You can check the X_AXIS, Y_AXIS or Z_AXIS boxes to 
;2100:determine around which axes the brush will be rotated. If no boxes are checked the brush will
;2101:rotate around the Z axis by default. If the START_OFF spawnflag is set, the func_rotating
;2102:will initially not rotate.
;2103:
;2104:"model2"	.md3 model to also draw
;2105:"speed"		determines how fast it moves; default value is 100.
;2106:"dmg"		damage to inflict when blocked (2 default)
;2107:"color"		constantLight color
;2108:"light"		constantLight radius
;2109:*/
;2110:void Use_Rotating (gentity_t *ent, gentity_t *other, gentity_t *activator) {
line 2112
;2111:
;2112:	if ( ent->s.apos.trTime > 0 ) 
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CNSTI4 0
LEI4 $826
line 2113
;2113:		ent->s.apos.trTime = ent->s.apos.trTime - level.time;	//makes it go
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRGP4 level+32
INDIRI4
SUBI4
ASGNI4
ADDRGP4 $827
JUMPV
LABELV $826
line 2114
;2114:	else {
line 2115
;2115:		if ( level.time == 0 )
ADDRGP4 level+32
INDIRI4
CNSTI4 0
NEI4 $829
line 2116
;2116:			ent->s.apos.trTime = 1;
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
CNSTI4 1
ASGNI4
ADDRGP4 $830
JUMPV
LABELV $829
line 2118
;2117:		else
;2118:			ent->s.apos.trTime = level.time + ent->s.apos.trTime;	//makes it stop
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRGP4 level+32
INDIRI4
ADDRLP4 4
INDIRP4
INDIRI4
ADDI4
ASGNI4
LABELV $830
line 2119
;2119:	}
LABELV $827
line 2120
;2120:}
LABELV $825
endproc Use_Rotating 8 0
export SP_func_rotating
proc SP_func_rotating 32 12
line 2122
;2121:
;2122:void SP_func_rotating (gentity_t *ent) {
line 2123
;2123:	qboolean axisset = qfalse;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2125
;2124:
;2125:	if ( !ent->speed ) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
NEF4 $834
line 2126
;2126:		ent->speed = 100;
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
CNSTF4 1120403456
ASGNF4
line 2127
;2127:	}
LABELV $834
line 2130
;2128:
;2129:	// set the axis of rotation
;2130:	if ( ent->spawnflags & 32 || ent->spawnflags & 64)
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 32
BANDI4
ADDRLP4 8
INDIRI4
NEI4 $838
ADDRLP4 4
INDIRI4
CNSTI4 64
BANDI4
ADDRLP4 8
INDIRI4
EQI4 $836
LABELV $838
line 2131
;2131:		ent->s.apos.trType = TR_ROTATING;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 6
ASGNI4
ADDRGP4 $837
JUMPV
LABELV $836
line 2133
;2132:	else
;2133:	ent->s.apos.trType = TR_LINEAR;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 2
ASGNI4
LABELV $837
line 2135
;2134:	
;2135:	if ( ent->spawnflags & 4 ) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $839
line 2136
;2136:		ent->s.apos.trDelta[2] = ent->speed;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
ASGNF4
line 2137
;2137:		axisset = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 2138
;2138:	}
LABELV $839
line 2140
;2139:	
;2140:	if ( ent->spawnflags & 8 ) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $841
line 2141
;2141:		ent->s.apos.trDelta[0] = ent->speed;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 72
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
ASGNF4
line 2142
;2142:		axisset = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 2143
;2143:	} 
LABELV $841
line 2145
;2144:	
;2145:	if ( ent->spawnflags & 16 || !axisset ) {
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 16
BANDI4
ADDRLP4 12
INDIRI4
NEI4 $845
ADDRLP4 0
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $843
LABELV $845
line 2146
;2146:		ent->s.apos.trDelta[1] = ent->speed;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 76
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
ASGNF4
line 2147
;2147:	}
LABELV $843
line 2149
;2148:
;2149:	if (!ent->damage) {
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
NEI4 $846
line 2150
;2150:		ent->damage = 2;
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
CNSTI4 2
ASGNI4
line 2151
;2151:	}
LABELV $846
line 2152
;2152:	if(!ent->sandboxObject){
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $848
line 2153
;2153:	trap_SetBrushModel( ent, ent->model );}
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 580
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
LABELV $848
line 2154
;2154:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 2156
;2155:
;2156:	VectorCopy( ent->s.origin, ent->s.pos.trBase );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 2157
;2157:	VectorCopy( ent->s.pos.trBase, ent->r.currentOrigin );
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 2158
;2158:	VectorCopy( ent->s.apos.trBase, ent->r.currentAngles );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 540
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 60
ADDP4
INDIRB
ASGNB 12
line 2160
;2159:
;2160:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 2162
;2161:
;2162:	ent->use = Use_Rotating;
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
ADDRGP4 Use_Rotating
ASGNP4
line 2165
;2163:
;2164:	// if START_OFF is set, disable the func_rotating from the start
;2165:	if ( ent->spawnflags & 64 )
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $850
line 2166
;2166:		Use_Rotating( ent, NULL, NULL );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
CNSTP4 0
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRGP4 Use_Rotating
CALLV
pop
LABELV $850
line 2167
;2167:}
LABELV $833
endproc SP_func_rotating 32 12
export SP_func_bobbing
proc SP_func_bobbing 32 12
line 2189
;2168:
;2169:
;2170:/*
;2171:===============================================================================
;2172:
;2173:BOBBING
;2174:
;2175:===============================================================================
;2176:*/
;2177:
;2178:
;2179:/*QUAKED func_bobbing (0 .5 .8) ? X_AXIS Y_AXIS
;2180:Normally bobs on the Z axis
;2181:"model2"	.md3 model to also draw
;2182:"height"	amplitude of bob (32 default)
;2183:"speed"		seconds to complete a bob cycle (4 default)
;2184:"phase"		the 0.0 to 1.0 offset in the cycle to start at
;2185:"dmg"		damage to inflict when blocked (2 default)
;2186:"color"		constantLight color
;2187:"light"		constantLight radius
;2188:*/
;2189:void SP_func_bobbing (gentity_t *ent) {
line 2192
;2190:	float		height;
;2191:	float		phase;
;2192:	qboolean	axisset = qfalse;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 2194
;2193:
;2194:	G_SpawnFloat( "speed", "4", &ent->speed );
ADDRGP4 $672
ARGP4
ADDRGP4 $697
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 2195
;2195:	G_SpawnFloat( "height", "32", &height );
ADDRGP4 $680
ARGP4
ADDRGP4 $853
ARGP4
ADDRLP4 4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 2196
;2196:	G_SpawnInt( "dmg", "2", &ent->damage );
ADDRGP4 $588
ARGP4
ADDRGP4 $589
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 2197
;2197:	G_SpawnFloat( "phase", "0", &phase );
ADDRGP4 $854
ARGP4
ADDRGP4 $576
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 2199
;2198:	
;2199:	if(!ent->sandboxObject){
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $855
line 2200
;2200:	trap_SetBrushModel( ent, ent->model );}
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 580
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
LABELV $855
line 2201
;2201:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 2203
;2202:
;2203:	VectorCopy( ent->s.origin, ent->s.pos.trBase );
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 2204
;2204:	VectorCopy( ent->s.origin, ent->r.currentOrigin );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 2206
;2205:
;2206:	ent->s.pos.trDuration = ent->speed * 1000;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 20
ADDP4
CNSTF4 1148846080
ADDRLP4 20
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 2207
;2207:	ent->s.pos.trTime = ent->s.pos.trDuration * phase;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 20
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 2208
;2208:	ent->s.pos.trType = TR_SINE;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 4
ASGNI4
line 2211
;2209:
;2210:	// set the axis of bobbing
;2211:	if ( ent->spawnflags & 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $857
line 2212
;2212:		ent->s.pos.trDelta[0] = height;
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 2213
;2213:		axisset = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 2214
;2214:	} 
LABELV $857
line 2216
;2215:
;2216:	if ( ent->spawnflags & 2 ) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $859
line 2217
;2217:		ent->s.pos.trDelta[1] = height;
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 2218
;2218:		axisset = qtrue;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 2219
;2219:	} 
LABELV $859
line 2221
;2220:	
;2221:	if ( ( ent->spawnflags & 4 ) || !axisset ) {
ADDRLP4 28
CNSTI4 0
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 4
BANDI4
ADDRLP4 28
INDIRI4
NEI4 $863
ADDRLP4 0
INDIRI4
ADDRLP4 28
INDIRI4
NEI4 $861
LABELV $863
line 2222
;2222:		ent->s.pos.trDelta[2] = height;
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 2223
;2223:	}
LABELV $861
line 2224
;2224:}
LABELV $852
endproc SP_func_bobbing 32 12
export SP_func_pendulum
proc SP_func_pendulum 40 12
line 2246
;2225:
;2226:/*
;2227:===============================================================================
;2228:
;2229:PENDULUM
;2230:
;2231:===============================================================================
;2232:*/
;2233:
;2234:
;2235:/*QUAKED func_pendulum (0 .5 .8) ?
;2236:You need to have an origin brush as part of this entity.
;2237:Pendulums always swing north / south on unrotated models.  Add an angles field to the model to allow rotation in other directions.
;2238:Pendulum frequency is a physical constant based on the length of the beam and gravity.
;2239:"model2"	.md3 model to also draw
;2240:"speed"		the number of degrees each way the pendulum swings, (30 default)
;2241:"phase"		the 0.0 to 1.0 offset in the cycle to start at
;2242:"dmg"		damage to inflict when blocked (2 default)
;2243:"color"		constantLight color
;2244:"light"		constantLight radius
;2245:*/
;2246:void SP_func_pendulum(gentity_t *ent) {
line 2252
;2247:	float		freq;
;2248:	float		length;
;2249:	float		phase;
;2250:	float		speed;
;2251:
;2252:	G_SpawnFloat( "speed", "30", &speed );
ADDRGP4 $672
ARGP4
ADDRGP4 $865
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 2253
;2253:	G_SpawnInt( "dmg", "2", &ent->damage );
ADDRGP4 $588
ARGP4
ADDRGP4 $589
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
ARGP4
ADDRGP4 G_SpawnInt
CALLI4
pop
line 2254
;2254:	G_SpawnFloat( "phase", "0", &phase );
ADDRGP4 $854
ARGP4
ADDRGP4 $576
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 2256
;2255:
;2256:	if(!ent->sandboxObject){
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $866
line 2257
;2257:	trap_SetBrushModel( ent, ent->model );}
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 16
INDIRP4
CNSTI4 580
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_SetBrushModel
CALLV
pop
LABELV $866
line 2260
;2258:
;2259:	// find pendulum length
;2260:	length = fabs( ent->r.mins[2] );
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
INDIRF4
ARGF4
ADDRLP4 16
ADDRGP4 fabs
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 16
INDIRF4
ASGNF4
line 2261
;2261:	if ( length < 8 ) {
ADDRLP4 0
INDIRF4
CNSTF4 1090519040
GEF4 $868
line 2262
;2262:		length = 8;
ADDRLP4 0
CNSTF4 1090519040
ASGNF4
line 2263
;2263:	}
LABELV $868
line 2265
;2264:
;2265:	freq = 1 / ( M_PI * 2 ) * sqrt( g_gravity.value*g_gravityModifier.value / ( 3 * length ) );
ADDRGP4 g_gravity+8
INDIRF4
ADDRGP4 g_gravityModifier+8
INDIRF4
MULF4
CNSTF4 1077936128
ADDRLP4 0
INDIRF4
MULF4
DIVF4
ARGF4
ADDRLP4 20
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 4
CNSTF4 1042479491
ADDRLP4 20
INDIRF4
MULF4
ASGNF4
line 2267
;2266:
;2267:	ent->s.pos.trDuration = ( 1000 / freq );
ADDRFP4 0
INDIRP4
CNSTI4 20
ADDP4
CNSTF4 1148846080
ADDRLP4 4
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 2269
;2268:
;2269:	InitMover( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 InitMover
CALLV
pop
line 2271
;2270:
;2271:	VectorCopy( ent->s.origin, ent->s.pos.trBase );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 2272
;2272:	VectorCopy( ent->s.origin, ent->r.currentOrigin );
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 92
ADDP4
INDIRB
ASGNB 12
line 2274
;2273:
;2274:	VectorCopy( ent->s.angles, ent->s.apos.trBase );
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 60
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 128
ADDP4
INDIRB
ASGNB 12
line 2276
;2275:
;2276:	ent->s.apos.trDuration = 1000 / freq;
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
CNSTF4 1148846080
ADDRLP4 4
INDIRF4
DIVF4
CVFI4 4
ASGNI4
line 2277
;2277:	ent->s.apos.trTime = ent->s.apos.trDuration * phase;
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 2278
;2278:	ent->s.apos.trType = TR_SINE;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
CNSTI4 4
ASGNI4
line 2279
;2279:	ent->s.apos.trDelta[2] = speed;
ADDRFP4 0
INDIRP4
CNSTI4 80
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
line 2280
;2280:}
LABELV $864
endproc SP_func_pendulum 40 12
import PickDebrisType
import G_SetEntityLinked
import IsBot
import Think_SpawnNewButtonTrigger
import G_ExplodeMissile
bss
export pushed_p
align 4
LABELV pushed_p
skip 4
export pushed
align 4
LABELV pushed
skip 131072
import G_admin_namelog_cleanup
import G_admin_cleanup
import G_admin_duration
import G_admin_buffer_end
import G_admin_buffer_begin
import G_admin_buffer_print
import G_admin_print
import G_admin_shuffle
import G_admin_warn
import G_admin_slap
import G_admin_orient
import G_admin_disorient
import G_admin_unlock
import G_admin_lock
import G_admin_namelog
import G_admin_nextmap
import G_admin_restart
import G_admin_rename
import G_admin_spec999
import G_admin_passvote
import G_admin_cancelvote
import G_admin_allready
import G_admin_admintest
import G_admin_help
import G_admin_showbans
import G_admin_mute
import G_admin_map
import G_admin_listplayers
import G_admin_listadmins
import G_admin_putteam
import G_admin_unban
import G_admin_ban
import G_admin_adjustban
import G_admin_kick
import G_admin_setlevel
import G_admin_time
import G_admin_parse_time
import G_admin_level
import G_admin_namelog_update
import G_admin_name_check
import G_admin_permission
import G_admin_readconfig
import G_admin_cmd_check
import G_admin_ban_check
import G_ConfigClientExcellent
import G_checkForMultiKill
import G_CheckForSpree
import G_RunStreakLogic
import G_ReadAltKillSettings
import AU_Cvar_VariableString
import G_ArenaScriptRandom
import G_ArenaScriptAutoFloat
import G_ArenaScriptAutoNonPointChar
import G_ArenaScriptAutoChar
import G_ArenaScriptAutoInt
import G_ArenaScriptFindFloat
import G_ArenaScriptFindChar
import G_ArenaScriptFindInt
import Svcmd_SaveSession_f
import Svcmd_For_f
import Svcmd_SystemCommand_f
import Svcmd_ClientCommand_f
import Svcmd_Editline_f
import Svcmd_Random_f
import Svcmd_Cvar_f
import Svcmd_Operation_f
import Svcmd_Condition_f
import Svcmd_MessageWrapper
import Svcmd_ListIP_f
import Svcmd_Chat_f
import Svcmd_DumpUser_f
import Svcmd_EjectClient_f
import Svcmd_BannerPrint_f
import Svcmd_ReplaceTexture_f
import Svcmd_CenterPrint_f
import Svcmd_TeamMessage_f
import Svcmd_Status_f
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_System
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_RealTime
import trap_Milliseconds
import trap_Error
import trap_Printf
import g_maxNameChanges
import g_minNameChangePeriod
import g_warningExpire
import g_maxWarnings
import g_publicAdminMessages
import g_specChat
import g_adminMaxBan
import g_adminTempBan
import g_adminNameProtect
import g_adminParseSay
import g_adminLog
import g_admin
import g_floodMinTime
import g_floodMaxDemerits
import g_spreeDiv
import g_altExcellent
import g_sprees
import g_lagLightning
import sv_fps
import g_truePing
import g_delagHitscan
import g_blueTeamClientNumbers
import g_redTeamClientNumbers
import g_humanplayers
import g_maxvotes
import g_voteMaxFraglimit
import g_voteMinFraglimit
import g_voteMaxTimelimit
import g_voteMinTimelimit
import g_voteGametypes
import g_voteBan
import g_voteNames
import g_mappools
import g_autonextmap
import g_catchup
import g_persistantpowerups
import g_awardpushing
import g_elimination_ctf_oneway
import g_lms_mode
import g_lms_lives
import g_ffa_gt
import g_regen
import g_vampireMaxHealth
import g_vampire
import g_instantgib
import g_rockets
import g_elimination_lockspectator
import g_eliminationred_holdable
import g_eliminationred_flight
import g_eliminationred_regen
import g_eliminationred_invis
import g_eliminationred_bsuit
import g_eliminationred_haste
import g_eliminationred_quad
import g_eliminationred_antimatter
import g_eliminationred_flame
import g_eliminationred_nail
import g_eliminationred_mine
import g_eliminationred_chain
import g_eliminationred_plasmagun
import g_eliminationred_lightning
import g_eliminationred_railgun
import g_eliminationred_rocket
import g_eliminationred_grenade
import g_eliminationred_shotgun
import g_eliminationred_machinegun
import g_eliminationred_gauntlet
import g_eliminationred_grapple
import g_eliminationred_bfg
import g_eliminationred_startArmor
import g_eliminationred_startHealth
import g_elimination_holdable
import g_elimination_items
import g_elimination_flight
import g_elimination_regen
import g_elimination_invis
import g_elimination_bsuit
import g_elimination_haste
import g_elimination_quad
import g_elimination_antimatter
import g_elimination_flame
import g_elimination_nail
import g_elimination_mine
import g_elimination_chain
import g_elimination_plasmagun
import g_elimination_lightning
import g_elimination_railgun
import g_elimination_rocket
import g_elimination_grenade
import g_elimination_shotgun
import g_elimination_machinegun
import g_elimination_gauntlet
import g_elimination_allgametypes
import g_elimination_activewarmup
import g_elimination_warmup
import g_elimination_roundtime
import g_elimination_grapple
import g_elimination_bfg
import g_elimination_startArmor
import g_elimination_startHealth
import g_elimination_selfdamage
import g_spawnprotect
import g_music
import g_proxMineTimeout
import g_enableBreath
import g_enableDust
import g_blueteam
import g_redteam
import g_singlePlayer
import g_rankings
import pmove_float
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_teamAutoJoin
import g_allowVote
import g_blood
import g_doWarmup
import g_warmup
import g_votecustom
import g_votemaps
import g_motdfile
import g_motd
import g_synchronousClients
import g_weaponTeamRespawn
import g_weaponRespawn
import g_allowSyncCutscene
import g_debugBotspawns
import g_debugVariables
import g_debugScore
import g_debugCameras
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_disableCutscenes
import g_inactivity
import g_respawntime
import g_forcerespawn
import g_quadfactor
import g_knockback
import g_speed
import g_damageModifier
import g_gravityModifier
import g_gravity
import g_needpass
import g_password
import g_friendlyFire
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_voteflags
import g_elimflags
import g_videoflags
import g_dmflags
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import g_gametype
import g_poweruprespawn
import g_megahealthrespawn
import g_holdablerespawn
import g_ammorespawn
import g_healthrespawn
import g_armorrespawn
import g_ammolimit
import g_drowndamage
import g_speedfactor
import g_jumpheight
import g_respawnwait
import g_armorprotect
import g_medkitmodifier
import g_hastefirespeed
import g_autoflagreturn
import g_droppeditemtime
import g_slowhealthregen
import g_fasthealthregen
import g_invultime
import g_invulmove
import g_portalhealth
import g_portaltimeout
import g_flagrespawn
import g_noplayerclip
import g_falldamagebig
import g_falldamagesmall
import g_randomteleport
import g_maxweaponpickup
import g_slimedamage
import g_lavadamage
import g_waterdamage
import g_medkitlimit
import g_kamikazeinf
import g_portalinf
import g_teleporterinf
import g_medkitinf
import g_invulinf
import g_kamikazeinfinf
import g_kill
import g_mapcycleposition
import g_useMapcycle
import g_mapcycle
import info_zombie
import g_randomItems
import g_accelerate
import g_slickmove
import g_overlay
import g_lavatowater
import onandroid
import eliminationrespawn
import eliminationredrespawn
import g_spectatorspeed
import g_regenarmor
import tex_newname
import tex_name
import g_roundmode
import g_scoreboardlock
import g_connectmsg
import g_currentmap
import g_tests
import cl_language
import cl_selectedmod
import g_maxEntities
import g_npcdrop
import g_safe
import g_allowgravitygun
import g_allowphysgun
import g_allowtoolgun
import g_allownoclip
import g_allowitems
import g_allownpc
import g_allowsettings
import g_allowprops
import save8_epsession
import save8_session0_lvl
import save8_session0
import save7_epsession
import save7_session0_lvl
import save7_session0
import save6_epsession
import save6_session0_lvl
import save6_session0
import save5_epsession
import save5_session0_lvl
import save5_session0
import save4_epsession
import save4_session0_lvl
import save4_session0
import save3_epsession
import save3_session0_lvl
import save3_session0
import save2_epsession
import save2_session0_lvl
import save2_session0
import save1_epsession
import save1_session0_lvl
import save1_session0
import save_epsession
import save_session0_lvl
import save_session0
import save8_curmap
import save7_curmap
import save6_curmap
import save5_curmap
import save4_curmap
import save3_curmap
import save2_curmap
import save1_curmap
import save_curmap
import g_skyColorA
import g_skyColorB
import g_skyColorG
import g_skyColorR
import g_skyShader
import g_fogColorA
import g_fogColorB
import g_fogColorG
import g_fogColorR
import g_fogInterval
import g_fogDistance
import g_fogShader
import g_fogModel
import g_teamred_pickupitems
import g_teamred_respawnwait
import g_teamred_infammo
import g_teamred_damage
import g_teamred_firespeed
import g_teamred_gravityModifier
import g_teamred_speed
import g_teamblue_pickupitems
import g_teamblue_respawnwait
import g_teamblue_infammo
import g_teamblue_damage
import g_teamblue_firespeed
import g_teamblue_gravityModifier
import g_teamblue_speed
import g_amweaponcount
import g_ftweaponcount
import g_cgweaponcount
import g_plweaponcount
import g_ngweaponcount
import g_bfgweaponcount
import g_pgweaponcount
import g_rgweaponcount
import g_lgweaponcount
import g_rlweaponcount
import g_glweaponcount
import g_sgweaponcount
import g_mgweaponcount
import g_ftammocount
import g_cgammocount
import g_plammocount
import g_ngammocount
import g_bfgammocount
import g_pgammocount
import g_rgammocount
import g_lgammocount
import g_rlammocount
import g_glammocount
import g_sgammocount
import g_mgammocount
import g_ammoregenhealthmodifier
import g_ammoregengravitymodifier
import g_ammoregenspeedfactor
import g_ammoregendamagefactor
import g_ammoregen_infammo
import g_ammoregenfirespeed
import g_guard_infammo
import g_guardgravitymodifier
import g_guardspeedfactor
import g_guarddamagefactor
import g_guardfirespeed
import g_guardhealthmodifier
import g_doublerhealthmodifier
import g_doubler_infammo
import g_doublergravitymodifier
import g_doublerspeedfactor
import g_doublerdamagefactor
import g_doublerfirespeed
import g_scouthealthmodifier
import g_scout_infammo
import g_scoutgravitymodifier
import g_scoutdamagefactor
import g_scoutfirespeed
import g_scoutspeedfactor
import g_amguided
import g_amhoming
import g_ftguided
import g_fthoming
import g_ngguided
import g_nghoming
import g_bfgguided
import g_bfghoming
import g_pgguided
import g_pghoming
import g_rlguided
import g_rlhoming
import g_glguided
import g_glhoming
import g_amknockback
import g_ambouncemodifier
import g_aminf
import g_amvampire
import g_amgravity
import g_ambounce
import g_amtimeout
import g_amdamage
import g_amsdamage
import g_amspeed
import g_amsradius
import g_amdelay
import g_ftknockback
import g_ftbouncemodifier
import g_ftinf
import g_ftvampire
import g_ftgravity
import g_ftbounce
import g_fttimeout
import g_ftdamage
import g_ftsdamage
import g_ftspeed
import g_ftsradius
import g_ftdelay
import g_cgknockback
import g_cginf
import g_cgvampire
import g_cgspread
import g_cgdamage
import g_cgdelay
import g_plknockback
import g_plinf
import g_plvampire
import g_plgravity
import g_pldamage
import g_plsdamage
import g_plsradius
import g_pltimeout
import g_plspeed
import g_pldelay
import g_ngknockback
import g_ngbouncemodifier
import g_nginf
import g_ngvampire
import g_ngrandom
import g_nggravity
import g_ngbounce
import g_ngcount
import g_ngtimeout
import g_ngdamage
import g_ngspread
import g_ngspeed
import g_ngdelay
import g_bfgknockback
import g_bfgbouncemodifier
import g_bfginf
import g_bfgvampire
import g_bfggravity
import g_bfgbounce
import g_bfgdamage
import g_bfgsdamage
import g_bfgsradius
import g_bfgtimeout
import g_bfgspeed
import g_bfgdelay
import g_pgknockback
import g_pgbouncemodifier
import g_pginf
import g_pgvampire
import g_pggravity
import g_pgbounce
import g_pgtimeout
import g_pgdamage
import g_pgsdamage
import g_pgspeed
import g_pgsradius
import g_pgdelay
import g_rgknockback
import g_rginf
import g_rgvampire
import g_rgdamage
import g_rgdelay
import g_lgknockback
import g_lginf
import g_lgvampire
import g_lgsradius
import g_lgsdamage
import g_lgexplode
import g_lgrange
import g_lgdelay
import g_lgdamage
import g_rlknockback
import g_rlbouncemodifier
import g_rlinf
import g_rlvampire
import g_rlgravity
import g_rlbounce
import g_rldamage
import g_rlsdamage
import g_rlsradius
import g_rltimeout
import g_rlspeed
import g_rldelay
import g_glknockback
import g_glbouncemodifier
import g_glinf
import g_glvampire
import g_glgravity
import g_glbounce
import g_gldamage
import g_glsdamage
import g_glsradius
import g_gltimeout
import g_glspeed
import g_gldelay
import g_sgknockback
import g_sginf
import g_sgvampire
import g_sgcount
import g_sgsradius
import g_sgsdamage
import g_sgexplode
import g_sgspread
import g_sgdamage
import g_sgdelay
import g_mgknockback
import g_mginf
import g_mgvampire
import g_mgsradius
import g_mgsdamage
import g_mgexplode
import g_mgspread
import g_mgdamage
import g_mgdelay
import g_gknockback
import g_grange
import g_gdamage
import g_gdelay
import mod_ghtimeout
import g_ghtimeout
import g_ghspeed
import g_minigame
import g_physdamage
import g_physimpulse
import g_physimpact
import cl_giantcharheight
import cl_giantcharwidth
import cl_bigcharheight
import cl_bigcharwidth
import cl_smallcharheight
import cl_smallcharwidth
import cl_propgapwidth
import cl_propspacewidth
import cl_propheight
import cl_propsmallsizescale
import mod_gravity
import mod_zsround
import mod_zround
import mod_roundmode
import mod_overlay
import mod_slickmove
import mod_accelerate
import mod_teamred_damage
import mod_teamblue_damage
import mod_invulinf
import mod_kamikazeinf
import mod_portalinf
import mod_teleporterinf
import mod_medkitinf
import mod_medkitlimit
import mod_teamblue_firespeed
import mod_teamred_firespeed
import mod_invulmove
import mod_noplayerclip
import mod_flighttime
import mod_regentime
import mod_invistime
import mod_hastetime
import mod_bsuittime
import mod_quadtime
import mod_doublerfirespeed
import mod_guardfirespeed
import mod_poweruptime
import mod_scoutfirespeed
import mod_ammoregenfirespeed
import mod_hastefirespeed
import mod_vampire_max_health
import mod_amdelay
import mod_ftdelay
import mod_cgspread
import mod_cgdelay
import mod_pldelay
import mod_ngdelay
import mod_bfgdelay
import mod_rgdelay
import mod_pgdelay
import mod_lgrange
import mod_lgdelay
import mod_rldelay
import mod_gldelay
import mod_sgcount
import mod_sgspread
import mod_sgdelay
import mod_mgspread
import mod_mgdelay
import mod_gdelay
import mod_jumpheight
import mod_ammolimit
import cmapname
import CustomModRun
import Newmodcommands
import nailgun_think
import bfg_think
import grenade_think
import rocket_think
import plasma_think
import G_SendSwepWeapons
import G_SendWeaponProperties
import g_entities
import level
import Team_ForceGesture
import Team_DD_bonusAtPoints
import Team_RemoveDoubleDominationPoints
import Team_SpawnDoubleDominationPoints
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import Team_Dom_SpawnPoints
import SelectDoubleDominationSpawnPoint
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import AddTeamScore
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import G_LoadMapfileAll_f
import G_LoadMapfile_f
import G_LoadMapfileAll
import G_LoadMapfile
import G_WriteMapfileAll_f
import G_WriteMapfile_f
import G_ClassnameAllowedAll
import G_ClassnameAllowed
import G_GetMapLockArena
import SkippedChar
import G_LoadMapcycle
import G_sendMapcycle
import G_drawMapcycle
import G_drawAllowedMaps
import G_mapIsVoteable
import G_GetMapfile
import G_GetNextMap
import G_GetNextMapCycle
import G_GotoNextMapCycle
import getCustomVote
import VoteParseCustomVotes
import allowedFraglimit
import allowedTimelimit
import allowedGametype
import allowedMap
import getMappage
import custom_vote_info
import ClientLeaving
import CountVotes
import CheckVote
import allowedVote
import PlayerStore_restore
import PlayerStore_store
import PlayerStoreInit
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import SpawnModelsOnVictoryPads
import UpdateTournamentInfo
import G_WriteSessionData
import G_InitWorldSession
import G_SaveClientSessionDataSave
import G_InitSessionData
import G_ReadSessionData
import Svcmd_GameMem_f
import G_TeamFromString
import ShuffleTeams
import CheckObeliskAttack
import Team_CheckDroppedItem
import OnSameTeam
import G_DefaultSwep
import G_CheckSwepAmmo
import G_CheckSwep
import G_RunClient
import ClientEndFrame
import ClientThink
import PrecacheBotAssets
import SetCustomWeapons
import SetSandboxWeapons
import SetUnlimitedWeapons
import SetupCustomBot
import LinkBotSpawnEntity
import DropClientSilently
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_NpcFactionProp
import G_LevelLoadComplete
import CheckTeamVote
import LogExit
import G_Error
import G_Printf
import SendYourTeamMessageToTeam
import SendDominationPointsStatusMessageToAllClients
import SendDDtimetakenMessageToAllClients
import SendEliminationMessageToAllClients
import SendScoreboardMessageToAllClients
import G_LogPrintf
import ExitLevel
import AddTournamentQueue
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import SendCustomVoteCommands
import DominationPointStatusMessage
import DominationPointNamesMessage
import RespawnTimeMessage
import EliminationMessage
import ObeliskHealthMessage
import AttackingTeamMessage
import YourTeamMessage
import DoubleDominationScoreTimeMessage
import DeathmatchScoreboardMessage
import G_SetStats
import MoveClientToIntermission
import G_StartCarExplode
import G_StartKamikaze
import KamikazeShockWave
import KamikazeRadiusDamage
import CarExplodeDamage
import KamikazeDamage
import FireWeapon
import ClientForString
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import SpawnPointIsActive
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import InitClientResp
import InitClientPersistant
import BeginIntermission
import ClientRespawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import LMSpoint
import EndEliminationRound
import DisableWeapons
import EnableWeapons
import RespawnDead
import RespawnAll
import TeamHealthCount
import TeamLivingCount
import TeamCount
import G_PredictPlayerMove
import G_UnTimeShiftClient
import G_UndoTimeShiftFor
import G_DoTimeShiftFor
import G_UnTimeShiftAllClients
import G_TimeShiftAllClients
import G_StoreHistory
import G_ResetHistory
import Laser_Think
import Laser_Gen
import Weapon_HookThink
import Weapon_HookFree
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import G_FindEntityForClientNum
import G_FindEntityForEntityNum
import G_ShowObjects
import G_HideObjects
import G_BounceProp
import G_RunProp
import G_ModProp
import DropPortalDestination
import DropPortalSource
import TeleportPlayer
import lock_touch
import trigger_teleporter_touch
import fire_antimatter
import fire_flame
import fire_prox
import fire_nail
import fire_nails
import fire_grapple
import fire_bfg
import fire_rocket
import fire_grenade
import fire_plasma
import fire_custom
import fire_blaster
import ProximityMine_RemoveAll
import G_RunMissile
import TossClientCubes
import TossClientPersistantPowerups
import TossClientItems
import body_die
import G_InvulnerabilityEffect
import G_RadiusDamage
import G_ExitVehicle
import G_CarDamage
import G_PropDamage
import G_Damage
import CanDamage
import target_finish_use
import target_finish_think
import BuildShaderStateConfig
import AddRemap
import G_SetTargetname
import G_SetTarget
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_GlobalSound
import G_Sound
import G_TempEntity
import G_Spawn
import findradius
import G_InitGentity
import CrosshairPointGravity
import CrosshairPointPhys
import FindEntityForGravitygun
import FindEntityForPhysgun
import VehiclePhys
import botsandbox_check
import G_CalculatePlayerScore
import G_FadeIn
import G_FadeOut
import G_Fade
import G_GetScoringMapName
import G_SetMovedir
import G_UseDeathTargets
import G_UseTargets
import G_PickTarget
import G_ScrFind
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import Throw_Item
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Touch_Item2
import Touch_Item
import Set_Weapon
import Set_Ammo
import Add_Ammo
import ArmorIndex
import Think_Weapon
import FinishSpawningItem
import G_SpawnItem
import SetRespawn
import LaunchBackpack
import LaunchItem
import Drop_Item
import PrecacheItem
import UseHoldableItem
import RespawnItemCtf
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import writeFile_string
import writeFile_int
import readFile_string
import readFile_int
import SanitizeString
import G_ClientIsLagging
import G_ClientNumberFromString
import Cmd_AdminMessage_f
import G_FloodLimited
import G_ClientNumbersFromString
import G_SanitiseString
import G_MatchOnePlayer
import G_DecolorString
import G_SayConcatArgs
import G_SayArgv
import G_SayArgc
import NextCustomRound_f
import G_Say
import ConcatArgs
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector4
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import MiTechEntityList
import BG_TeamName
import BG_GetVehicleSettings
import BG_VehicleCheckClass
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_DefragmentMemory
import BG_Free
import BG_InitMemory
import BG_Alloc
import BG_CanAlloc
import BG_CanItemBeGrabbed
import BG_FindItemForBackpack
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindSwepAmmo
import BG_FindSwep
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import COM_LoadLevelScores
import COM_CalculatePlayerScore
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import vectoyaw
import AngleDifference
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import Q_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import Lerp
import VelocityToAxis
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import Q_snprintf
import Q_vsnprintf
import strtol
import _atoi
import atoi
import strtod
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import ifstrlenru
import strlenru
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $865
byte 1 51
byte 1 48
byte 1 0
align 1
LABELV $854
byte 1 112
byte 1 104
byte 1 97
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $853
byte 1 51
byte 1 50
byte 1 0
align 1
LABELV $822
byte 1 98
byte 1 114
byte 1 101
byte 1 97
byte 1 107
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $821
byte 1 49
byte 1 50
byte 1 48
byte 1 0
align 1
LABELV $820
byte 1 114
byte 1 97
byte 1 100
byte 1 105
byte 1 117
byte 1 115
byte 1 0
align 1
LABELV $792
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 98
byte 1 114
byte 1 101
byte 1 97
byte 1 107
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $778
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 97
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $765
byte 1 0
align 1
LABELV $760
byte 1 112
byte 1 97
byte 1 116
byte 1 104
byte 1 95
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 110
byte 1 111
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 110
byte 1 97
byte 1 109
byte 1 101
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $754
byte 1 112
byte 1 97
byte 1 116
byte 1 104
byte 1 95
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $753
byte 1 84
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 32
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 97
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 32
byte 1 112
byte 1 97
byte 1 116
byte 1 104
byte 1 95
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 10
byte 1 0
align 1
LABELV $739
byte 1 84
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 32
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 111
byte 1 117
byte 1 116
byte 1 32
byte 1 97
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $738
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 119
byte 1 105
byte 1 116
byte 1 104
byte 1 32
byte 1 97
byte 1 110
byte 1 32
byte 1 117
byte 1 110
byte 1 102
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 32
byte 1 116
byte 1 97
byte 1 114
byte 1 103
byte 1 101
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $737
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $697
byte 1 52
byte 1 0
align 1
LABELV $690
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 115
byte 1 119
byte 1 105
byte 1 116
byte 1 99
byte 1 104
byte 1 101
byte 1 115
byte 1 47
byte 1 98
byte 1 117
byte 1 116
byte 1 110
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $689
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $680
byte 1 104
byte 1 101
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 0
align 1
LABELV $675
byte 1 49
byte 1 0
align 1
LABELV $674
byte 1 119
byte 1 97
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $673
byte 1 50
byte 1 48
byte 1 48
byte 1 0
align 1
LABELV $672
byte 1 115
byte 1 112
byte 1 101
byte 1 101
byte 1 100
byte 1 0
align 1
LABELV $671
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 116
byte 1 115
byte 1 47
byte 1 112
byte 1 116
byte 1 49
byte 1 95
byte 1 101
byte 1 110
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $670
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 112
byte 1 108
byte 1 97
byte 1 116
byte 1 115
byte 1 47
byte 1 112
byte 1 116
byte 1 49
byte 1 95
byte 1 115
byte 1 116
byte 1 114
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $655
byte 1 112
byte 1 108
byte 1 97
byte 1 116
byte 1 95
byte 1 116
byte 1 114
byte 1 105
byte 1 103
byte 1 103
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $605
byte 1 104
byte 1 101
byte 1 97
byte 1 108
byte 1 116
byte 1 104
byte 1 0
align 1
LABELV $589
byte 1 50
byte 1 0
align 1
LABELV $588
byte 1 100
byte 1 109
byte 1 103
byte 1 0
align 1
LABELV $587
byte 1 56
byte 1 0
align 1
LABELV $586
byte 1 108
byte 1 105
byte 1 112
byte 1 0
align 1
LABELV $579
byte 1 110
byte 1 111
byte 1 104
byte 1 117
byte 1 109
byte 1 97
byte 1 110
byte 1 115
byte 1 0
align 1
LABELV $576
byte 1 48
byte 1 0
align 1
LABELV $575
byte 1 110
byte 1 111
byte 1 98
byte 1 111
byte 1 116
byte 1 115
byte 1 0
align 1
LABELV $574
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 100
byte 1 111
byte 1 111
byte 1 114
byte 1 115
byte 1 47
byte 1 100
byte 1 114
byte 1 49
byte 1 95
byte 1 101
byte 1 110
byte 1 100
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $573
byte 1 101
byte 1 110
byte 1 100
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $572
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 115
byte 1 47
byte 1 100
byte 1 111
byte 1 111
byte 1 114
byte 1 115
byte 1 47
byte 1 100
byte 1 114
byte 1 49
byte 1 95
byte 1 115
byte 1 116
byte 1 114
byte 1 116
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $571
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $566
byte 1 100
byte 1 111
byte 1 111
byte 1 114
byte 1 95
byte 1 116
byte 1 114
byte 1 105
byte 1 103
byte 1 103
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $537
byte 1 99
byte 1 112
byte 1 32
byte 1 34
byte 1 79
byte 1 119
byte 1 110
byte 1 101
byte 1 100
byte 1 32
byte 1 98
byte 1 121
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 34
byte 1 0
align 1
LABELV $469
byte 1 49
byte 1 32
byte 1 49
byte 1 32
byte 1 49
byte 1 0
align 1
LABELV $468
byte 1 99
byte 1 111
byte 1 108
byte 1 111
byte 1 114
byte 1 0
align 1
LABELV $467
byte 1 108
byte 1 105
byte 1 103
byte 1 104
byte 1 116
byte 1 0
align 1
LABELV $466
byte 1 49
byte 1 48
byte 1 48
byte 1 0
align 1
LABELV $465
byte 1 110
byte 1 111
byte 1 105
byte 1 115
byte 1 101
byte 1 0
align 1
LABELV $405
byte 1 108
byte 1 112
byte 1 32
byte 1 34
byte 1 94
byte 1 50
byte 1 37
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 36
byte 1 34
byte 1 10
byte 1 0
align 1
LABELV $404
byte 1 108
byte 1 112
byte 1 32
byte 1 34
byte 1 37
byte 1 115
byte 1 32
byte 1 112
byte 1 117
byte 1 114
byte 1 99
byte 1 104
byte 1 97
byte 1 115
byte 1 101
byte 1 100
byte 1 34
byte 1 10
byte 1 0
align 1
LABELV $399
byte 1 108
byte 1 112
byte 1 32
byte 1 34
byte 1 94
byte 1 49
byte 1 37
byte 1 115
byte 1 32
byte 1 37
byte 1 105
byte 1 36
byte 1 34
byte 1 10
byte 1 0
align 1
LABELV $398
byte 1 108
byte 1 112
byte 1 32
byte 1 34
byte 1 37
byte 1 105
byte 1 32
byte 1 105
byte 1 115
byte 1 32
byte 1 110
byte 1 111
byte 1 116
byte 1 32
byte 1 101
byte 1 110
byte 1 111
byte 1 117
byte 1 103
byte 1 104
byte 1 34
byte 1 10
byte 1 0
align 1
LABELV $387
byte 1 99
byte 1 112
byte 1 32
byte 1 34
byte 1 79
byte 1 119
byte 1 110
byte 1 101
byte 1 100
byte 1 32
byte 1 98
byte 1 121
byte 1 32
byte 1 37
byte 1 115
byte 1 34
byte 1 10
byte 1 0
align 1
LABELV $377
byte 1 82
byte 1 101
byte 1 97
byte 1 99
byte 1 104
byte 1 101
byte 1 100
byte 1 95
byte 1 66
byte 1 105
byte 1 110
byte 1 97
byte 1 114
byte 1 121
byte 1 77
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 58
byte 1 32
byte 1 98
byte 1 97
byte 1 100
byte 1 32
byte 1 109
byte 1 111
byte 1 118
byte 1 101
byte 1 114
byte 1 83
byte 1 116
byte 1 97
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $199
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 32
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 0
align 1
LABELV $97
byte 1 112
byte 1 117
byte 1 115
byte 1 104
byte 1 101
byte 1 100
byte 1 95
byte 1 112
byte 1 32
byte 1 62
byte 1 32
byte 1 38
byte 1 112
byte 1 117
byte 1 115
byte 1 104
byte 1 101
byte 1 100
byte 1 91
byte 1 77
byte 1 65
byte 1 88
byte 1 95
byte 1 71
byte 1 69
byte 1 78
byte 1 84
byte 1 73
byte 1 84
byte 1 73
byte 1 69
byte 1 83
byte 1 93
byte 1 0
