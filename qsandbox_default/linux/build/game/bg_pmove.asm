data
export pm_stopspeed
align 4
LABELV pm_stopspeed
byte 4 1120403456
export pm_veh00001stopspeed
align 4
LABELV pm_veh00001stopspeed
byte 4 1120403456
export pm_duckScale
align 4
LABELV pm_duckScale
byte 4 1048576000
export pm_swimScale
align 4
LABELV pm_swimScale
byte 4 1056964608
export pm_wadeScale
align 4
LABELV pm_wadeScale
byte 4 1060320051
export pm_ladderScale
align 4
LABELV pm_ladderScale
byte 4 1056964608
export pm_accelerate
align 4
LABELV pm_accelerate
byte 4 1092616192
export pm_airaccelerate
align 4
LABELV pm_airaccelerate
byte 4 1065353216
export pm_veh00001accelerate
align 4
LABELV pm_veh00001accelerate
byte 4 1063675494
export pm_wateraccelerate
align 4
LABELV pm_wateraccelerate
byte 4 1082130432
export pm_flyaccelerate
align 4
LABELV pm_flyaccelerate
byte 4 1090519040
export pm_ladderAccelerate
align 4
LABELV pm_ladderAccelerate
byte 4 1161527296
export pm_friction
align 4
LABELV pm_friction
byte 4 1086324736
export pm_veh00001friction
align 4
LABELV pm_veh00001friction
byte 4 1063675494
export pm_waterfriction
align 4
LABELV pm_waterfriction
byte 4 1065353216
export pm_flightfriction
align 4
LABELV pm_flightfriction
byte 4 1077936128
export pm_spectatorfriction
align 4
LABELV pm_spectatorfriction
byte 4 1084227584
export pm_ladderfriction
align 4
LABELV pm_ladderfriction
byte 4 1161527296
export c_pmove
align 4
LABELV c_pmove
byte 4 0
export PM_AddEvent
code
proc PM_AddEvent 0 12
file "../../../code/game/bg_pmove.c"
line 64
;1:/*
;2:===========================================================================
;3:Copyright (C) 1999-2005 Id Software, Inc.
;4:
;5:This file is part of Quake III Arena source code.
;6:
;7:Quake III Arena source code is free software; you can redistribute it
;8:and/or modify it under the terms of the GNU General Public License as
;9:published by the Free Software Foundation; either version 2 of the License,
;10:or (at your option) any later version.
;11:
;12:Quake III Arena source code is distributed in the hope that it will be
;13:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;14:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;15:GNU General Public License for more details.
;16:
;17:You should have received a copy of the GNU General Public License
;18:along with Quake III Arena source code; if not, write to the Free Software
;19:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;20:===========================================================================
;21:*/
;22://
;23:// bg_pmove.c -- both games player movement code
;24:// takes a playerstate and a usercmd as input and returns a modifed playerstate
;25:
;26:#include "../qcommon/q_shared.h"
;27:#include "bg_public.h"
;28:#include "bg_local.h"
;29:
;30:pmove_t		*pm;
;31:pml_t		pml;
;32:
;33:// movement parameters
;34:float	pm_stopspeed = 100.0f;
;35:float	pm_veh00001stopspeed = 100.0f; //VEHICLE-SYSTEM: stop speed control
;36:float	pm_duckScale = 0.25f;
;37:float	pm_swimScale = 0.50f;
;38:float	pm_wadeScale = 0.70f;
;39:float	pm_ladderScale = 0.50;
;40:
;41:float	pm_accelerate = 10.0f;
;42:float	pm_airaccelerate = 1.0f;
;43:float	pm_veh00001accelerate = 10.0f*0.090; //VEHICLE-SYSTEM: accelerate control
;44:float	pm_wateraccelerate = 4.0f;
;45:float	pm_flyaccelerate = 8.0f;
;46:float	pm_ladderAccelerate = 3000;
;47:
;48:float	pm_friction = 6.0f;
;49:float	pm_veh00001friction = 10.0f*0.090; //VEHICLE-SYSTEM: friction control
;50:float	pm_waterfriction = 1.0f;
;51:float	pm_flightfriction = 3.0f;
;52:float	pm_spectatorfriction = 5.0f;
;53:float	pm_ladderfriction = 3000;
;54:
;55:int		c_pmove = 0;
;56:
;57:
;58:/*
;59:===============
;60:PM_AddEvent
;61:
;62:===============
;63:*/
;64:void PM_AddEvent( int newEvent ) {
line 65
;65:	BG_AddPredictableEventToPlayerstate( newEvent, 0, pm->ps );
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 pm
INDIRP4
INDIRP4
ARGP4
ADDRGP4 BG_AddPredictableEventToPlayerstate
CALLV
pop
line 66
;66:}
LABELV $65
endproc PM_AddEvent 0 12
export PM_AddTouchEnt
proc PM_AddTouchEnt 12 0
line 73
;67:
;68:/*
;69:===============
;70:PM_AddTouchEnt
;71:===============
;72:*/
;73:void PM_AddTouchEnt( int entityNum ) {
line 76
;74:	int		i;
;75:
;76:	if ( entityNum == ENTITYNUM_WORLD ) {
ADDRFP4 0
INDIRI4
CNSTI4 4094
NEI4 $67
line 77
;77:		return;
ADDRGP4 $66
JUMPV
LABELV $67
line 79
;78:	}
;79:	if ( pm->numtouch == MAXTOUCH ) {
ADDRGP4 pm
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CNSTI4 32
NEI4 $69
line 80
;80:		return;
ADDRGP4 $66
JUMPV
LABELV $69
line 84
;81:	}
;82:
;83:	// see if it is already added
;84:	for ( i = 0 ; i < pm->numtouch ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $74
JUMPV
LABELV $71
line 85
;85:		if ( pm->touchents[ i ] == entityNum ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 pm
INDIRP4
CNSTI4 56
ADDP4
ADDP4
INDIRI4
ADDRFP4 0
INDIRI4
NEI4 $75
line 86
;86:			return;
ADDRGP4 $66
JUMPV
LABELV $75
line 88
;87:		}
;88:	}
LABELV $72
line 84
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $74
ADDRLP4 0
INDIRI4
ADDRGP4 pm
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
LTI4 $71
line 91
;89:
;90:	// add it
;91:	pm->touchents[pm->numtouch] = entityNum;
ADDRLP4 4
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 56
ADDP4
ADDP4
ADDRFP4 0
INDIRI4
ASGNI4
line 92
;92:	pm->numtouch++;
ADDRLP4 8
ADDRGP4 pm
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 93
;93:}
LABELV $66
endproc PM_AddTouchEnt 12 0
proc PM_StartTorsoAnim 8 0
line 100
;94:
;95:/*
;96:===================
;97:PM_StartTorsoAnim
;98:===================
;99:*/
;100:static void PM_StartTorsoAnim( int anim ) {
line 101
;101:	if ( pm->ps->pm_type >= PM_DEAD ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
LTI4 $78
line 102
;102:		return;
ADDRGP4 $77
JUMPV
LABELV $78
line 104
;103:	}
;104:	pm->ps->torsoAnim = ( ( pm->ps->torsoAnim & ANIM_TOGGLEBIT ) ^ ANIM_TOGGLEBIT )
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
ASGNP4
ADDRLP4 4
CNSTI4 128
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
BANDI4
ADDRLP4 4
INDIRI4
BXORI4
ADDRFP4 0
INDIRI4
BORI4
ASGNI4
line 106
;105:		| anim;
;106:}
LABELV $77
endproc PM_StartTorsoAnim 8 0
proc PM_StartLegsAnim 8 0
line 107
;107:static void PM_StartLegsAnim( int anim ) {
line 108
;108:	if ( pm->ps->pm_type >= PM_DEAD ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
LTI4 $81
line 109
;109:		return;
ADDRGP4 $80
JUMPV
LABELV $81
line 111
;110:	}
;111:	if ( pm->ps->legsTimer > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 0
LEI4 $83
line 112
;112:		return;		// a high priority animation is running
ADDRGP4 $80
JUMPV
LABELV $83
line 114
;113:	}
;114:	pm->ps->legsAnim = ( ( pm->ps->legsAnim & ANIM_TOGGLEBIT ) ^ ANIM_TOGGLEBIT )
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 4
CNSTI4 128
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
BANDI4
ADDRLP4 4
INDIRI4
BXORI4
ADDRFP4 0
INDIRI4
BORI4
ASGNI4
line 116
;115:		| anim;
;116:}
LABELV $80
endproc PM_StartLegsAnim 8 0
proc PM_ContinueLegsAnim 0 4
line 118
;117:
;118:static void PM_ContinueLegsAnim( int anim ) {
line 119
;119:	if ( ( pm->ps->legsAnim & ~ANIM_TOGGLEBIT ) == anim ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 76
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ADDRFP4 0
INDIRI4
NEI4 $86
line 120
;120:		return;
ADDRGP4 $85
JUMPV
LABELV $86
line 122
;121:	}
;122:	if ( pm->ps->legsTimer > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 0
LEI4 $88
line 123
;123:		return;		// a high priority animation is running
ADDRGP4 $85
JUMPV
LABELV $88
line 125
;124:	}
;125:	PM_StartLegsAnim( anim );
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 PM_StartLegsAnim
CALLV
pop
line 126
;126:}
LABELV $85
endproc PM_ContinueLegsAnim 0 4
proc PM_ContinueTorsoAnim 0 4
line 128
;127:
;128:static void PM_ContinueTorsoAnim( int anim ) {
line 129
;129:	if ( ( pm->ps->torsoAnim & ~ANIM_TOGGLEBIT ) == anim ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 84
ADDP4
INDIRI4
CNSTI4 -129
BANDI4
ADDRFP4 0
INDIRI4
NEI4 $91
line 130
;130:		return;
ADDRGP4 $90
JUMPV
LABELV $91
line 132
;131:	}
;132:	if ( pm->ps->torsoTimer > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
LEI4 $93
line 133
;133:		return;		// a high priority animation is running
ADDRGP4 $90
JUMPV
LABELV $93
line 135
;134:	}
;135:	PM_StartTorsoAnim( anim );
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 136
;136:}
LABELV $90
endproc PM_ContinueTorsoAnim 0 4
proc PM_ForceLegsAnim 0 4
line 138
;137:
;138:static void PM_ForceLegsAnim( int anim ) {
line 139
;139:	pm->ps->legsTimer = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 72
ADDP4
CNSTI4 0
ASGNI4
line 140
;140:	PM_StartLegsAnim( anim );
ADDRFP4 0
INDIRI4
ARGI4
ADDRGP4 PM_StartLegsAnim
CALLV
pop
line 141
;141:}
LABELV $95
endproc PM_ForceLegsAnim 0 4
export PM_ClipVelocity
proc PM_ClipVelocity 32 0
line 151
;142:
;143:
;144:/*
;145:==================
;146:PM_ClipVelocity
;147:
;148:Slide off of the impacting surface
;149:==================
;150:*/
;151:void PM_ClipVelocity( vec3_t in, vec3_t normal, vec3_t out, float overbounce ) {
line 156
;152:	float	backoff;
;153:	float	change;
;154:	int		i;
;155:
;156:	backoff = DotProduct (in, normal);
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
CNSTI4 4
ASGNI4
ADDRLP4 24
CNSTI4 8
ASGNI4
ADDRLP4 8
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 16
INDIRP4
INDIRF4
MULF4
ADDRLP4 12
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 12
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRF4
ADDRLP4 16
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 158
;157:
;158:	if ( backoff < 0 ) {
ADDRLP4 8
INDIRF4
CNSTF4 0
GEF4 $97
line 159
;159:		backoff *= overbounce;
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRFP4 12
INDIRF4
MULF4
ASGNF4
line 160
;160:	} else {
ADDRGP4 $98
JUMPV
LABELV $97
line 161
;161:		backoff /= overbounce;
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRFP4 12
INDIRF4
DIVF4
ASGNF4
line 162
;162:	}
LABELV $98
line 164
;163:
;164:	for ( i=0 ; i<3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $99
line 165
;165:		change = normal[i]*backoff;
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
ADDP4
INDIRF4
ADDRLP4 8
INDIRF4
MULF4
ASGNF4
line 166
;166:		out[i] = in[i] - change;
ADDRLP4 28
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 28
INDIRI4
ADDRFP4 8
INDIRP4
ADDP4
ADDRLP4 28
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ADDRLP4 4
INDIRF4
SUBF4
ASGNF4
line 167
;167:	}
LABELV $100
line 164
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $99
line 168
;168:}
LABELV $96
endproc PM_ClipVelocity 32 0
proc PM_Friction 48 4
line 178
;169:
;170:
;171:/*
;172:==================
;173:PM_Friction
;174:
;175:Handles both ground friction and water friction
;176:==================
;177:*/
;178:static void PM_Friction( void ) {
line 184
;179:	vec3_t	vec;
;180:	float	*vel;
;181:	float	speed, newspeed, control;
;182:	float	drop;
;183:
;184:	vel = pm->ps->velocity;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
line 186
;185:
;186:	VectorCopy( vel, vec );
ADDRLP4 16
ADDRLP4 0
INDIRP4
INDIRB
ASGNB 12
line 187
;187:	if ( pml.walking ) {
ADDRGP4 pml+44
INDIRI4
CNSTI4 0
EQI4 $104
line 188
;188:		vec[2] = 0;	// ignore slope movement
ADDRLP4 16+8
CNSTF4 0
ASGNF4
line 189
;189:	}
LABELV $104
line 191
;190:
;191:	speed = VectorLength(vec);
ADDRLP4 16
ARGP4
ADDRLP4 32
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 8
ADDRLP4 32
INDIRF4
ASGNF4
line 192
;192:	if (speed < 1) {
ADDRLP4 8
INDIRF4
CNSTF4 1065353216
GEF4 $108
line 193
;193:		vel[0] = 0;
ADDRLP4 0
INDIRP4
CNSTF4 0
ASGNF4
line 194
;194:		vel[1] = 0;		// allow sinking underwater
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTF4 0
ASGNF4
line 196
;195:		// FIXME: still have z friction underwater?
;196:		return;
ADDRGP4 $103
JUMPV
LABELV $108
line 199
;197:	}
;198:
;199:	drop = 0;
ADDRLP4 12
CNSTF4 0
ASGNF4
line 202
;200:
;201:	// apply ground friction
;202:	if ( pm->waterlevel <= 1) {
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 1
GTI4 $110
line 203
;203:		if(mod_slickmove != 1 && !pm->ps->stats[STAT_VEHICLE]){  //VEHICLE-SYSTEM: disable player phys for all
ADDRGP4 mod_slickmove
INDIRI4
CNSTI4 1
EQI4 $112
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
NEI4 $112
line 204
;204:			if ( pml.walking && !(pml.groundTrace.surfaceFlags & SURF_SLICK) ) {
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRGP4 pml+44
INDIRI4
ADDRLP4 36
INDIRI4
EQI4 $114
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 2
BANDI4
ADDRLP4 36
INDIRI4
NEI4 $114
line 206
;205:				// if getting knocked back, no friction
;206:				if ( ! (pm->ps->pm_flags & PMF_TIME_KNOCKBACK) ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
NEI4 $119
line 207
;207:					control = speed < pm_stopspeed ? pm_stopspeed : speed;
ADDRLP4 8
INDIRF4
ADDRGP4 pm_stopspeed
INDIRF4
GEF4 $122
ADDRLP4 40
ADDRGP4 pm_stopspeed
INDIRF4
ASGNF4
ADDRGP4 $123
JUMPV
LABELV $122
ADDRLP4 40
ADDRLP4 8
INDIRF4
ASGNF4
LABELV $123
ADDRLP4 28
ADDRLP4 40
INDIRF4
ASGNF4
line 208
;208:					drop += control*pm_friction*pml.frametime;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 28
INDIRF4
ADDRGP4 pm_friction
INDIRF4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 209
;209:				}
LABELV $119
line 210
;210:			}
LABELV $114
line 211
;211:		}
LABELV $112
line 212
;212:		if(BG_VehicleCheckClass(pm->ps->stats[STAT_VEHICLE]) == VCLASS_CAR){ //VEHICLE-SYSTEM: turn vehicle phys
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 1
NEI4 $125
line 213
;213:			if ( pml.walking && !(pml.groundTrace.surfaceFlags & SURF_SLICK) ) {
ADDRLP4 40
CNSTI4 0
ASGNI4
ADDRGP4 pml+44
INDIRI4
ADDRLP4 40
INDIRI4
EQI4 $127
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 2
BANDI4
ADDRLP4 40
INDIRI4
NEI4 $127
line 215
;214:				// if getting knocked back, no friction
;215:				if ( ! (pm->ps->pm_flags & PMF_TIME_KNOCKBACK) ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
NEI4 $132
line 216
;216:					control = speed < pm_veh00001stopspeed ? pm_veh00001stopspeed : speed;
ADDRLP4 8
INDIRF4
ADDRGP4 pm_veh00001stopspeed
INDIRF4
GEF4 $135
ADDRLP4 44
ADDRGP4 pm_veh00001stopspeed
INDIRF4
ASGNF4
ADDRGP4 $136
JUMPV
LABELV $135
ADDRLP4 44
ADDRLP4 8
INDIRF4
ASGNF4
LABELV $136
ADDRLP4 28
ADDRLP4 44
INDIRF4
ASGNF4
line 217
;217:					if ( pm->cmd.upmove > 0 ) {		//VEHICLE-SYSTEM: space break
ADDRGP4 pm
INDIRP4
CNSTI4 31
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $137
line 218
;218:					drop += pm_veh00001stopspeed*pm_veh00001friction*16*pml.frametime;
ADDRLP4 12
ADDRLP4 12
INDIRF4
CNSTF4 1098907648
ADDRGP4 pm_veh00001stopspeed
INDIRF4
ADDRGP4 pm_veh00001friction
INDIRF4
MULF4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 219
;219:					} else {
ADDRGP4 $138
JUMPV
LABELV $137
line 220
;220:					drop += control*pm_veh00001friction*pml.frametime;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 28
INDIRF4
ADDRGP4 pm_veh00001friction
INDIRF4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 221
;221:					}
LABELV $138
line 222
;222:				}
LABELV $132
line 223
;223:			}	
LABELV $127
line 224
;224:		}
LABELV $125
line 225
;225:	}
LABELV $110
line 228
;226:
;227:	// apply water friction even if just wading
;228:	if ( pm->waterlevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 0
EQI4 $141
line 229
;229:		drop += speed*pm_waterfriction*pm->waterlevel*pml.frametime;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 8
INDIRF4
ADDRGP4 pm_waterfriction
INDIRF4
MULF4
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CVIF4 4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 230
;230:	}
LABELV $141
line 233
;231:
;232:	// apply flying friction
;233:	if ( pm->ps->powerups[PW_FLIGHT]) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 336
ADDP4
INDIRI4
CNSTI4 0
EQI4 $144
line 234
;234:		drop += speed*pm_flightfriction*pml.frametime;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 8
INDIRF4
ADDRGP4 pm_flightfriction
INDIRF4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 235
;235:	}
LABELV $144
line 237
;236:
;237:	if ( pm->ps->pm_type == PM_SPECTATOR) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
NEI4 $147
line 238
;238:		drop += speed*pm_spectatorfriction*pml.frametime;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 8
INDIRF4
ADDRGP4 pm_spectatorfriction
INDIRF4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 239
;239:	}
LABELV $147
line 242
;240:
;241:	// apply ladder friction
;242:	if ( pml.ladder ) {
ADDRGP4 pml+108
INDIRI4
CNSTI4 0
EQI4 $150
line 243
;243:		drop += speed*pm_ladderfriction*pml.frametime;
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 8
INDIRF4
ADDRGP4 pm_ladderfriction
INDIRF4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 244
;244:	}
LABELV $150
line 247
;245:
;246:	// scale the velocity
;247:	newspeed = speed - drop;
ADDRLP4 4
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ASGNF4
line 248
;248:	if (newspeed < 0) {
ADDRLP4 4
INDIRF4
CNSTF4 0
GEF4 $154
line 249
;249:		newspeed = 0;
ADDRLP4 4
CNSTF4 0
ASGNF4
line 250
;250:	}
LABELV $154
line 251
;251:	newspeed /= speed;
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
DIVF4
ASGNF4
line 253
;252:
;253:	vel[0] = vel[0] * newspeed;
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 254
;254:	vel[1] = vel[1] * newspeed;
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 255
;255:	vel[2] = vel[2] * newspeed;
ADDRLP4 44
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
ASGNF4
line 256
;256:}
LABELV $103
endproc PM_Friction 48 4
proc PM_Accelerate 64 4
line 268
;257:
;258:
;259:/*
;260:==============
;261:PM_Accelerate
;262:
;263:TODO: bunny hoping
;264:
;265:Handles user intended acceleration
;266:==============
;267:*/
;268:static void PM_Accelerate( vec3_t wishdir, float wishspeed, float accel ) {
line 269
;269:if(mod_accelerate == 1 && !pm->ps->stats[STAT_VEHICLE]) {  //VEHICLE-SYSTEM: disable player accelerate for all
ADDRGP4 mod_accelerate
INDIRI4
CNSTI4 1
NEI4 $157
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
NEI4 $157
line 274
;270:	// q2 style
;271:	int			i;
;272:	float		addspeed, accelspeed, currentspeed;
;273:
;274:	currentspeed = DotProduct (pm->ps->velocity, wishdir);
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
INDIRF4
MULF4
ADDRLP4 16
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 275
;275:	addspeed = wishspeed - currentspeed;
ADDRLP4 8
ADDRFP4 4
INDIRF4
ADDRLP4 12
INDIRF4
SUBF4
ASGNF4
line 276
;276:	if (addspeed <= 0) {
ADDRLP4 8
INDIRF4
CNSTF4 0
GTF4 $159
line 277
;277:		return;
ADDRGP4 $156
JUMPV
LABELV $159
line 279
;278:	}
;279:	accelspeed = accel*pml.frametime*wishspeed;
ADDRLP4 4
ADDRFP4 8
INDIRF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 280
;280:	if (accelspeed > addspeed) {
ADDRLP4 4
INDIRF4
ADDRLP4 8
INDIRF4
LEF4 $162
line 281
;281:		accelspeed = addspeed;
ADDRLP4 4
ADDRLP4 8
INDIRF4
ASGNF4
line 282
;282:	}
LABELV $162
line 284
;283:
;284:	for (i=0 ; i<3 ; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $164
line 285
;285:		pm->ps->velocity[i] += accelspeed*wishdir[i];
ADDRLP4 24
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 28
ADDRLP4 24
INDIRI4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 24
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 286
;286:	}
LABELV $165
line 284
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $164
line 287
;287:} else if (BG_VehicleCheckClass(pm->ps->stats[STAT_VEHICLE]) == VCLASS_CAR) { //VEHICLE-SYSTEM: accelerate for 1
ADDRGP4 $158
JUMPV
LABELV $157
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $168
line 292
;288:	// vehicle
;289:	int			i;
;290:	float		addspeed, accelspeed, currentspeed;
;291:
;292:	currentspeed = DotProduct (pm->ps->velocity, wishdir);
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
INDIRF4
MULF4
ADDRLP4 20
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 20
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 293
;293:	addspeed = wishspeed - currentspeed;
ADDRLP4 12
ADDRFP4 4
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
ASGNF4
line 294
;294:	if (addspeed <= 0) {
ADDRLP4 12
INDIRF4
CNSTF4 0
GTF4 $170
line 295
;295:		return;
ADDRGP4 $156
JUMPV
LABELV $170
line 297
;296:	}
;297:	accelspeed = accel*pml.frametime*wishspeed;
ADDRLP4 8
ADDRFP4 8
INDIRF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 298
;298:	if (accelspeed > addspeed) {
ADDRLP4 8
INDIRF4
ADDRLP4 12
INDIRF4
LEF4 $173
line 299
;299:		accelspeed = addspeed;
ADDRLP4 8
ADDRLP4 12
INDIRF4
ASGNF4
line 300
;300:	}
LABELV $173
line 302
;301:
;302:	for (i=0 ; i<3 ; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $175
line 303
;303:		pm->ps->velocity[i] += (accelspeed*wishdir[i]);
ADDRLP4 28
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 32
ADDRLP4 28
INDIRI4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 304
;304:	}
LABELV $176
line 302
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 3
LTI4 $175
line 305
;305:} else {
ADDRGP4 $169
JUMPV
LABELV $168
line 312
;306:	// proper way (avoids strafe jump maxspeed bug), but feels bad
;307:	vec3_t		wishVelocity;
;308:	vec3_t		pushDir;
;309:	float		pushLen;
;310:	float		canPush;
;311:
;312:	VectorScale( wishdir, wishspeed, wishVelocity );
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 16
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 40
INDIRF4
MULF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 40
INDIRF4
MULF4
ASGNF4
ADDRLP4 16+8
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 313
;313:	VectorSubtract( wishVelocity, pm->ps->velocity, pushDir );
ADDRLP4 44
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRF4
ADDRLP4 44
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 16+4
INDIRF4
ADDRLP4 44
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 16+8
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
SUBF4
ASGNF4
line 314
;314:	pushLen = VectorNormalize( pushDir );
ADDRLP4 4
ARGP4
ADDRLP4 48
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 32
ADDRLP4 48
INDIRF4
ASGNF4
line 316
;315:
;316:	canPush = accel*pml.frametime*wishspeed;
ADDRLP4 28
ADDRFP4 8
INDIRF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDRFP4 4
INDIRF4
MULF4
ASGNF4
line 317
;317:	if (canPush > pushLen) {
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
LEF4 $186
line 318
;318:		canPush = pushLen;
ADDRLP4 28
ADDRLP4 32
INDIRF4
ASGNF4
line 319
;319:	}
LABELV $186
line 321
;320:
;321:	VectorMA( pm->ps->velocity, canPush, pushDir, pm->ps->velocity );
ADDRLP4 52
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRLP4 4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
ADDRLP4 4+4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 60
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
ADDRLP4 4+8
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ADDF4
ASGNF4
line 322
;322:}	
LABELV $169
LABELV $158
line 325
;323:
;324:
;325:}
LABELV $156
endproc PM_Accelerate 64 4
proc PM_CmdScale 44 4
line 338
;326:
;327:
;328:
;329:/*
;330:============
;331:PM_CmdScale
;332:
;333:Returns the scale factor to apply to cmd movements
;334:This allows the clients to use axial -127 to 127 values for all directions
;335:without getting a sqrt(2) distortion in speed.
;336:============
;337:*/
;338:static float PM_CmdScale( usercmd_t *cmd ) {
line 343
;339:	int		max;
;340:	float	total;
;341:	float	scale;
;342:
;343:	max = abs( cmd->forwardmove );
ADDRFP4 0
INDIRP4
CNSTI4 21
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 12
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 344
;344:	if ( abs( cmd->rightmove ) > max ) {
ADDRFP4 0
INDIRP4
CNSTI4 22
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 16
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $191
line 345
;345:		max = abs( cmd->rightmove );
ADDRFP4 0
INDIRP4
CNSTI4 22
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 20
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 20
INDIRI4
ASGNI4
line 346
;346:	}
LABELV $191
line 347
;347:	if ( abs( cmd->upmove ) > max ) {
ADDRFP4 0
INDIRP4
CNSTI4 23
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 20
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $193
line 348
;348:		max = abs( cmd->upmove );
ADDRFP4 0
INDIRP4
CNSTI4 23
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 24
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
ASGNI4
line 349
;349:	}
LABELV $193
line 350
;350:	if ( !max ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $195
line 351
;351:		return 0;
CNSTF4 0
RETF4
ADDRGP4 $190
JUMPV
LABELV $195
line 354
;352:	}
;353:
;354:	total = sqrt( cmd->forwardmove * cmd->forwardmove
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 21
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 32
ADDRLP4 24
INDIRP4
CNSTI4 22
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 36
ADDRLP4 24
INDIRP4
CNSTI4 23
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 28
INDIRI4
ADDRLP4 28
INDIRI4
MULI4
ADDRLP4 32
INDIRI4
ADDRLP4 32
INDIRI4
MULI4
ADDI4
ADDRLP4 36
INDIRI4
ADDRLP4 36
INDIRI4
MULI4
ADDI4
CVIF4 4
ARGF4
ADDRLP4 40
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 40
INDIRF4
ASGNF4
line 356
;355:		+ cmd->rightmove * cmd->rightmove + cmd->upmove * cmd->upmove );
;356:	scale = (float)pm->ps->speed * max / ( 127.0 * total );
ADDRLP4 8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRI4
CVIF4 4
MULF4
CNSTF4 1123942400
ADDRLP4 4
INDIRF4
MULF4
DIVF4
ASGNF4
line 358
;357:
;358:	return scale;
ADDRLP4 8
INDIRF4
RETF4
LABELV $190
endproc PM_CmdScale 44 4
proc PM_SetMovementDir 1096 0
line 370
;359:}
;360:
;361:
;362:/*
;363:================
;364:PM_SetMovementDir
;365:
;366:Determine the rotation of the legs reletive
;367:to the facing dir
;368:================
;369:*/
;370:static void PM_SetMovementDir( void ) {
line 372
;371:	char		var[MAX_TOKEN_CHARS];
;372:	if(!pm->ps->stats[STAT_VEHICLE]) { //VEHICLE-SYSTEM: disable player-move for all
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
NEI4 $198
line 373
;373:	if ( pm->cmd.forwardmove || pm->cmd.rightmove ) {
ADDRLP4 1024
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1028
CNSTI4 0
ASGNI4
ADDRLP4 1024
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1028
INDIRI4
NEI4 $202
ADDRLP4 1024
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1028
INDIRI4
EQI4 $200
LABELV $202
line 374
;374:		if ( pm->cmd.rightmove == 0 && pm->cmd.forwardmove > 0 ) {
ADDRLP4 1032
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1036
CNSTI4 0
ASGNI4
ADDRLP4 1032
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1036
INDIRI4
NEI4 $203
ADDRLP4 1032
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1036
INDIRI4
LEI4 $203
line 375
;375:			pm->ps->movementDir = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 0
ASGNI4
line 376
;376:		} else if ( pm->cmd.rightmove < 0 && pm->cmd.forwardmove > 0 ) {
ADDRGP4 $199
JUMPV
LABELV $203
ADDRLP4 1040
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1044
CNSTI4 0
ASGNI4
ADDRLP4 1040
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1044
INDIRI4
GEI4 $205
ADDRLP4 1040
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1044
INDIRI4
LEI4 $205
line 377
;377:			pm->ps->movementDir = 1;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 1
ASGNI4
line 378
;378:		} else if ( pm->cmd.rightmove < 0 && pm->cmd.forwardmove == 0 ) {
ADDRGP4 $199
JUMPV
LABELV $205
ADDRLP4 1048
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1052
CNSTI4 0
ASGNI4
ADDRLP4 1048
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1052
INDIRI4
GEI4 $207
ADDRLP4 1048
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1052
INDIRI4
NEI4 $207
line 379
;379:			pm->ps->movementDir = 2;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 2
ASGNI4
line 380
;380:		} else if ( pm->cmd.rightmove < 0 && pm->cmd.forwardmove < 0 ) {
ADDRGP4 $199
JUMPV
LABELV $207
ADDRLP4 1056
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1060
CNSTI4 0
ASGNI4
ADDRLP4 1056
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1060
INDIRI4
GEI4 $209
ADDRLP4 1056
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1060
INDIRI4
GEI4 $209
line 381
;381:			pm->ps->movementDir = 3;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 3
ASGNI4
line 382
;382:		} else if ( pm->cmd.rightmove == 0 && pm->cmd.forwardmove < 0 ) {
ADDRGP4 $199
JUMPV
LABELV $209
ADDRLP4 1064
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1068
CNSTI4 0
ASGNI4
ADDRLP4 1064
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1068
INDIRI4
NEI4 $211
ADDRLP4 1064
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1068
INDIRI4
GEI4 $211
line 383
;383:			pm->ps->movementDir = 4;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 4
ASGNI4
line 384
;384:		} else if ( pm->cmd.rightmove > 0 && pm->cmd.forwardmove < 0 ) {
ADDRGP4 $199
JUMPV
LABELV $211
ADDRLP4 1072
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1076
CNSTI4 0
ASGNI4
ADDRLP4 1072
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1076
INDIRI4
LEI4 $213
ADDRLP4 1072
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1076
INDIRI4
GEI4 $213
line 385
;385:			pm->ps->movementDir = 5;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 5
ASGNI4
line 386
;386:		} else if ( pm->cmd.rightmove > 0 && pm->cmd.forwardmove == 0 ) {
ADDRGP4 $199
JUMPV
LABELV $213
ADDRLP4 1080
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1084
CNSTI4 0
ASGNI4
ADDRLP4 1080
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1084
INDIRI4
LEI4 $215
ADDRLP4 1080
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1084
INDIRI4
NEI4 $215
line 387
;387:			pm->ps->movementDir = 6;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 6
ASGNI4
line 388
;388:		} else if ( pm->cmd.rightmove > 0 && pm->cmd.forwardmove > 0 ) {
ADDRGP4 $199
JUMPV
LABELV $215
ADDRLP4 1088
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1092
CNSTI4 0
ASGNI4
ADDRLP4 1088
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1092
INDIRI4
LEI4 $199
ADDRLP4 1088
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1092
INDIRI4
LEI4 $199
line 389
;389:			pm->ps->movementDir = 7;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 7
ASGNI4
line 390
;390:		}
line 391
;391:	} else {
ADDRGP4 $199
JUMPV
LABELV $200
line 395
;392:		// if they aren't actively going directly sideways,
;393:		// change the animation to the diagonal so they
;394:		// don't stop too crooked
;395:		if ( pm->ps->movementDir == 2 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 2
NEI4 $219
line 396
;396:			pm->ps->movementDir = 1;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 1
ASGNI4
line 397
;397:		} else if ( pm->ps->movementDir == 6 ) {
ADDRGP4 $199
JUMPV
LABELV $219
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 6
NEI4 $199
line 398
;398:			pm->ps->movementDir = 7;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 7
ASGNI4
line 399
;399:		}
line 400
;400:	}
line 401
;401:	} else { //VEHICLE-SYSTEM: turn vehicle-move for all
ADDRGP4 $199
JUMPV
LABELV $198
line 402
;402:		if ( pm->cmd.rightmove == 0 && pm->cmd.forwardmove > 0 ) {
ADDRLP4 1024
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1028
CNSTI4 0
ASGNI4
ADDRLP4 1024
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1028
INDIRI4
NEI4 $223
ADDRLP4 1024
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1028
INDIRI4
LEI4 $223
line 403
;403:			pm->ps->movementDir = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 0
ASGNI4
line 404
;404:		} else if ( pm->cmd.rightmove < 0 ) {
ADDRGP4 $224
JUMPV
LABELV $223
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $225
line 406
;405:
;406:		} else if ( pm->cmd.rightmove == 0 && pm->cmd.forwardmove < 0 ) {
ADDRGP4 $226
JUMPV
LABELV $225
ADDRLP4 1032
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 1036
CNSTI4 0
ASGNI4
ADDRLP4 1032
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1036
INDIRI4
NEI4 $227
ADDRLP4 1032
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 1036
INDIRI4
GEI4 $227
line 407
;407:			pm->ps->movementDir = 4;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 4
ASGNI4
line 408
;408:		} else if ( pm->cmd.rightmove > 0 ) {
ADDRGP4 $228
JUMPV
LABELV $227
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LEI4 $229
line 410
;409:
;410:		}
LABELV $229
LABELV $228
LABELV $226
LABELV $224
line 411
;411:	}
LABELV $199
line 412
;412:}
LABELV $197
endproc PM_SetMovementDir 1096 0
proc PM_CheckJump 12 4
line 420
;413:
;414:
;415:/*
;416:=============
;417:PM_CheckJump
;418:=============
;419:*/
;420:static qboolean PM_CheckJump( void ) {
line 422
;421:
;422:	if ( BG_VehicleCheckClass(pm->ps->stats[STAT_VEHICLE]) == VCLASS_CAR ){ //VEHICLE-SYSTEM: disable jump for 1
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $232
line 423
;423:		return qfalse;		// don't allow jump for vehicle
CNSTI4 0
RETI4
ADDRGP4 $231
JUMPV
LABELV $232
line 426
;424:	}
;425:	
;426:	if ( pm->ps->pm_flags & PMF_RESPAWNED ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $234
line 427
;427:		return qfalse;		// don't allow jump until all buttons are up
CNSTI4 0
RETI4
ADDRGP4 $231
JUMPV
LABELV $234
line 430
;428:	}
;429:
;430:	if ( pm->cmd.upmove < 10 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 31
ADDP4
INDIRI1
CVII4 1
CNSTI4 10
GEI4 $236
line 432
;431:		// not holding jump
;432:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $231
JUMPV
LABELV $236
line 437
;433:	}
;434:
;435:
;436:	// must wait for jump to be released
;437:	if ( pm->ps->pm_flags & PMF_JUMP_HELD ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $238
line 439
;438:		// clear upmove so cmdscale doesn't lower running speed
;439:		pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 31
ADDP4
CNSTI1 0
ASGNI1
line 440
;440:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $231
JUMPV
LABELV $238
line 446
;441:	}
;442:
;443:
;444:
;445:
;446:	pml.groundPlane = qfalse;		// jumping away
ADDRGP4 pml+48
CNSTI4 0
ASGNI4
line 447
;447:	pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 448
;448:	pm->ps->pm_flags |= PMF_JUMP_HELD;
ADDRLP4 4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 450
;449:
;450:	pm->ps->groundEntityNum = ENTITYNUM_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 4095
ASGNI4
line 451
;451:	pm->ps->velocity[2] = JUMP_VELOCITY;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ADDRGP4 mod_jumpheight
INDIRI4
CVIF4 4
ASGNF4
line 452
;452:	PM_AddEvent( EV_JUMP );
CNSTI4 14
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 454
;453:
;454:	if ( pm->cmd.forwardmove >= 0 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LTI4 $242
line 455
;455:		PM_ForceLegsAnim( LEGS_JUMP );
CNSTI4 18
ARGI4
ADDRGP4 PM_ForceLegsAnim
CALLV
pop
line 456
;456:		pm->ps->pm_flags &= ~PMF_BACKWARDS_JUMP;
ADDRLP4 8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 457
;457:	} else {
ADDRGP4 $243
JUMPV
LABELV $242
line 458
;458:		PM_ForceLegsAnim( LEGS_JUMPB );
CNSTI4 20
ARGI4
ADDRGP4 PM_ForceLegsAnim
CALLV
pop
line 459
;459:		pm->ps->pm_flags |= PMF_BACKWARDS_JUMP;
ADDRLP4 8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 460
;460:	}
LABELV $243
line 462
;461:
;462:	return qtrue;
CNSTI4 1
RETI4
LABELV $231
endproc PM_CheckJump 12 4
proc PM_CheckWaterJump 56 8
line 470
;463:}
;464:
;465:/*
;466:=============
;467:PM_CheckWaterJump
;468:=============
;469:*/
;470:static qboolean	PM_CheckWaterJump( void ) {
line 475
;471:	vec3_t	spot;
;472:	int		cont;
;473:	vec3_t	flatforward;
;474:
;475:	if (pm->ps->pm_time) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $245
line 476
;476:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $244
JUMPV
LABELV $245
line 480
;477:	}
;478:
;479:	// check for water jump
;480:	if ( pm->waterlevel != 2 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 2
EQI4 $247
line 481
;481:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $244
JUMPV
LABELV $247
line 484
;482:	}
;483:
;484:	flatforward[0] = pml.forward[0];
ADDRLP4 12
ADDRGP4 pml
INDIRF4
ASGNF4
line 485
;485:	flatforward[1] = pml.forward[1];
ADDRLP4 12+4
ADDRGP4 pml+4
INDIRF4
ASGNF4
line 486
;486:	flatforward[2] = 0;
ADDRLP4 12+8
CNSTF4 0
ASGNF4
line 487
;487:	VectorNormalize (flatforward);
ADDRLP4 12
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 489
;488:
;489:	VectorMA (pm->ps->origin, 30, flatforward, spot);
ADDRLP4 28
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 32
CNSTF4 1106247680
ASGNF4
ADDRLP4 0
ADDRLP4 28
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 28
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 32
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 0+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1106247680
ADDRLP4 12+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 490
;490:	spot[2] += 4;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1082130432
ADDF4
ASGNF4
line 491
;491:	cont = pm->pointcontents (spot, pm->ps->clientNum );
ADDRLP4 0
ARGP4
ADDRLP4 36
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
ADDRLP4 36
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 40
INDIRI4
ASGNI4
line 492
;492:	if ( !(cont & CONTENTS_SOLID) ) {
ADDRLP4 24
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $257
line 493
;493:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $244
JUMPV
LABELV $257
line 496
;494:	}
;495:
;496:	spot[2] += 16;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1098907648
ADDF4
ASGNF4
line 497
;497:	cont = pm->pointcontents (spot, pm->ps->clientNum );
ADDRLP4 0
ARGP4
ADDRLP4 44
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 48
ADDRLP4 44
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLI4
ASGNI4
ADDRLP4 24
ADDRLP4 48
INDIRI4
ASGNI4
line 498
;498:	if ( cont & (CONTENTS_SOLID|CONTENTS_PLAYERCLIP|CONTENTS_BODY) ) {
ADDRLP4 24
INDIRI4
CNSTI4 33619969
BANDI4
CNSTI4 0
EQI4 $260
line 499
;499:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $244
JUMPV
LABELV $260
line 503
;500:	}
;501:
;502:	// jump out of water
;503:	VectorScale (pml.forward, 200, pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
CNSTF4 1128792064
ADDRGP4 pml
INDIRF4
MULF4
ASGNF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
CNSTF4 1128792064
ADDRGP4 pml+4
INDIRF4
MULF4
ASGNF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1128792064
ADDRGP4 pml+8
INDIRF4
MULF4
ASGNF4
line 504
;504:	pm->ps->velocity[2] = 350;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
CNSTF4 1135542272
ASGNF4
line 506
;505:
;506:	pm->ps->pm_flags |= PMF_TIME_WATERJUMP;
ADDRLP4 52
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 507
;507:	pm->ps->pm_time = 2000;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
CNSTI4 2000
ASGNI4
line 509
;508:
;509:	return qtrue;
CNSTI4 1
RETI4
LABELV $244
endproc PM_CheckWaterJump 56 8
proc PM_WaterJumpMove 12 4
line 522
;510:}
;511:
;512://============================================================================
;513:
;514:
;515:/*
;516:===================
;517:PM_WaterJumpMove
;518:
;519:Flying out of the water
;520:===================
;521:*/
;522:static void PM_WaterJumpMove( void ) {
line 525
;523:	// waterjump has no control, but falls
;524:
;525:	PM_StepSlideMove( qtrue );
CNSTI4 1
ARGI4
ADDRGP4 PM_StepSlideMove
CALLV
pop
line 527
;526:
;527:	pm->ps->velocity[2] -= pm->ps->gravity * pml.frametime;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pml+36
INDIRF4
MULF4
SUBF4
ASGNF4
line 528
;528:	if (pm->ps->velocity[2] < 0) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
CNSTF4 0
GEF4 $266
line 530
;529:		// cancel as soon as we are falling down again
;530:		pm->ps->pm_flags &= ~PMF_ALL_TIMES;
ADDRLP4 8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -353
BANDI4
ASGNI4
line 531
;531:		pm->ps->pm_time = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
CNSTI4 0
ASGNI4
line 532
;532:	}
LABELV $266
line 533
;533:}
LABELV $264
endproc PM_WaterJumpMove 12 4
proc PM_WaterMove 80 16
line 541
;534:
;535:/*
;536:===================
;537:PM_WaterMove
;538:
;539:===================
;540:*/
;541:static void PM_WaterMove( void ) {
line 549
;542:	int		i;
;543:	vec3_t	wishvel;
;544:	float	wishspeed;
;545:	vec3_t	wishdir;
;546:	float	scale;
;547:	float	vel;
;548:
;549:	if ( PM_CheckWaterJump() ) {
ADDRLP4 40
ADDRGP4 PM_CheckWaterJump
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
EQI4 $269
line 550
;550:		PM_WaterJumpMove();
ADDRGP4 PM_WaterJumpMove
CALLV
pop
line 551
;551:		return;
ADDRGP4 $268
JUMPV
LABELV $269
line 567
;552:	}
;553:#if 0
;554:	// jump = head for surface
;555:	if ( pm->cmd.upmove >= 10 ) {
;556:		if (pm->ps->velocity[2] > -300) {
;557:			if ( pm->watertype == CONTENTS_WATER ) {
;558:				pm->ps->velocity[2] = 100;
;559:			} else if (pm->watertype == CONTENTS_SLIME) {
;560:				pm->ps->velocity[2] = 80;
;561:			} else {
;562:				pm->ps->velocity[2] = 50;
;563:			}
;564:		}
;565:	}
;566:#endif
;567:	PM_Friction ();
ADDRGP4 PM_Friction
CALLV
pop
line 569
;568:
;569:	scale = PM_CmdScale( &pm->cmd );
ADDRGP4 pm
INDIRP4
CNSTI4 8
ADDP4
ARGP4
ADDRLP4 44
ADDRGP4 PM_CmdScale
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 44
INDIRF4
ASGNF4
line 573
;570:	//
;571:	// user intentions
;572:	//
;573:	if ( !scale || BG_VehicleCheckClass(pm->ps->stats[STAT_VEHICLE]) == VCLASS_CAR) { //VEHICLE-SYSTEM: disable water move for 1
ADDRLP4 4
INDIRF4
CNSTF4 0
EQF4 $273
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 1
NEI4 $271
LABELV $273
line 574
;574:		wishvel[0] = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
line 575
;575:		wishvel[1] = 0;
ADDRLP4 8+4
CNSTF4 0
ASGNF4
line 576
;576:		if(!pm->ps->stats[STAT_VEHICLE]){ //VEHICLE-SYSTEM: water slow move for all
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
NEI4 $275
line 577
;577:		wishvel[2] = -30;		// sink towards bottom
ADDRLP4 8+8
CNSTF4 3253731328
ASGNF4
line 578
;578:		} else {
ADDRGP4 $272
JUMPV
LABELV $275
line 579
;579:		wishvel[2] = -2;		// sink towards bottom
ADDRLP4 8+8
CNSTF4 3221225472
ASGNF4
line 580
;580:		}
line 581
;581:	} else {
ADDRGP4 $272
JUMPV
LABELV $271
line 582
;582:		for (i=0 ; i<3 ; i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $279
line 583
;583:			wishvel[i] = scale * pml.forward[i]*pm->cmd.forwardmove + scale * pml.right[i]*pm->cmd.rightmove;
ADDRLP4 52
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 60
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 52
INDIRI4
ADDRLP4 8
ADDP4
ADDRLP4 4
INDIRF4
ADDRLP4 52
INDIRI4
ADDRGP4 pml
ADDP4
INDIRF4
MULF4
ADDRLP4 60
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDRLP4 4
INDIRF4
ADDRLP4 52
INDIRI4
ADDRGP4 pml+12
ADDP4
INDIRF4
MULF4
ADDRLP4 60
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDF4
ASGNF4
LABELV $280
line 582
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $279
line 585
;584:
;585:		wishvel[2] += scale * pm->cmd.upmove;
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pm
INDIRP4
CNSTI4 31
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDF4
ASGNF4
line 586
;586:	}
LABELV $272
line 588
;587:
;588:	VectorCopy (wishvel, wishdir);
ADDRLP4 24
ADDRLP4 8
INDIRB
ASGNB 12
line 589
;589:	wishspeed = VectorNormalize(wishdir);
ADDRLP4 24
ARGP4
ADDRLP4 52
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 52
INDIRF4
ASGNF4
line 591
;590:
;591:	if ( wishspeed > pm->ps->speed * pm_swimScale ) {
ADDRLP4 20
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pm_swimScale
INDIRF4
MULF4
LEF4 $285
line 592
;592:		wishspeed = pm->ps->speed * pm_swimScale;
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pm_swimScale
INDIRF4
MULF4
ASGNF4
line 593
;593:	}
LABELV $285
line 595
;594:
;595:	PM_Accelerate (wishdir, wishspeed, pm_wateraccelerate);
ADDRLP4 24
ARGP4
ADDRLP4 20
INDIRF4
ARGF4
ADDRGP4 pm_wateraccelerate
INDIRF4
ARGF4
ADDRGP4 PM_Accelerate
CALLV
pop
line 598
;596:
;597:	// make sure we can go up slopes easily under water
;598:	if ( pml.groundPlane && DotProduct( pm->ps->velocity, pml.groundTrace.plane.normal ) < 0 ) {
ADDRGP4 pml+48
INDIRI4
CNSTI4 0
EQI4 $287
ADDRLP4 56
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRGP4 pml+52+24
INDIRF4
MULF4
ADDRLP4 56
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRGP4 pml+52+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 56
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRGP4 pml+52+24+8
INDIRF4
MULF4
ADDF4
CNSTF4 0
GEF4 $287
line 599
;599:		vel = VectorLength(pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 60
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 36
ADDRLP4 60
INDIRF4
ASGNF4
line 601
;600:		// slide along the ground plane
;601:		PM_ClipVelocity (pm->ps->velocity, pml.groundTrace.plane.normal,
ADDRLP4 64
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ARGP4
ADDRGP4 pml+52+24
ARGP4
ADDRLP4 64
INDIRP4
ARGP4
CNSTF4 1065361605
ARGF4
ADDRGP4 PM_ClipVelocity
CALLV
pop
line 604
;602:			pm->ps->velocity, OVERCLIP );
;603:
;604:		VectorNormalize(pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 605
;605:		VectorScale(pm->ps->velocity, vel, pm->ps->velocity);
ADDRLP4 68
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
ADDRLP4 72
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
ADDRLP4 76
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
line 606
;606:	}
LABELV $287
line 608
;607:
;608:	PM_SlideMove( qfalse );
CNSTI4 0
ARGI4
ADDRGP4 PM_SlideMove
CALLI4
pop
line 609
;609:}
LABELV $268
endproc PM_WaterMove 80 16
proc PM_NoclipMove 104 12
line 617
;610:
;611:
;612:/*
;613:===============
;614:PM_NoclipMove
;615:===============
;616:*/
;617:static void PM_NoclipMove( void ) {
line 626
;618:	float	speed, drop, friction, control, newspeed;
;619:	int			i;
;620:	vec3_t		wishvel;
;621:	float		fmove, smove;
;622:	vec3_t		wishdir;
;623:	float		wishspeed;
;624:	float		scale;
;625:
;626:	pm->ps->viewheight = DEFAULT_VIEWHEIGHT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 164
ADDP4
CNSTI4 26
ASGNI4
line 630
;627:
;628:	// friction
;629:
;630:	speed = VectorLength (pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 64
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 24
ADDRLP4 64
INDIRF4
ASGNF4
line 631
;631:	if (speed < 1)
ADDRLP4 24
INDIRF4
CNSTF4 1065353216
GEF4 $301
line 632
;632:	{
line 633
;633:		VectorCopy (vec3_origin, pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ADDRGP4 vec3_origin
INDIRB
ASGNB 12
line 634
;634:	}
ADDRGP4 $302
JUMPV
LABELV $301
line 636
;635:	else
;636:	{
line 637
;637:		drop = 0;
ADDRLP4 52
CNSTF4 0
ASGNF4
line 639
;638:
;639:		friction = pm_friction*1.5;	// extra friction
ADDRLP4 56
CNSTF4 1069547520
ADDRGP4 pm_friction
INDIRF4
MULF4
ASGNF4
line 640
;640:		control = speed < pm_stopspeed ? pm_stopspeed : speed;
ADDRLP4 24
INDIRF4
ADDRGP4 pm_stopspeed
INDIRF4
GEF4 $304
ADDRLP4 68
ADDRGP4 pm_stopspeed
INDIRF4
ASGNF4
ADDRGP4 $305
JUMPV
LABELV $304
ADDRLP4 68
ADDRLP4 24
INDIRF4
ASGNF4
LABELV $305
ADDRLP4 60
ADDRLP4 68
INDIRF4
ASGNF4
line 641
;641:		drop += control*friction*pml.frametime;
ADDRLP4 52
ADDRLP4 52
INDIRF4
ADDRLP4 60
INDIRF4
ADDRLP4 56
INDIRF4
MULF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 644
;642:
;643:		// scale the velocity
;644:		newspeed = speed - drop;
ADDRLP4 28
ADDRLP4 24
INDIRF4
ADDRLP4 52
INDIRF4
SUBF4
ASGNF4
line 645
;645:		if (newspeed < 0)
ADDRLP4 28
INDIRF4
CNSTF4 0
GEF4 $307
line 646
;646:			newspeed = 0;
ADDRLP4 28
CNSTF4 0
ASGNF4
LABELV $307
line 647
;647:		newspeed /= speed;
ADDRLP4 28
ADDRLP4 28
INDIRF4
ADDRLP4 24
INDIRF4
DIVF4
ASGNF4
line 649
;648:
;649:		VectorScale (pm->ps->velocity, newspeed, pm->ps->velocity);
ADDRLP4 72
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
ADDRLP4 76
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
ADDRLP4 80
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
line 650
;650:	}
LABELV $302
line 653
;651:
;652:	// accelerate
;653:	scale = PM_CmdScale( &pm->cmd );
ADDRGP4 pm
INDIRP4
CNSTI4 8
ADDP4
ARGP4
ADDRLP4 68
ADDRGP4 PM_CmdScale
CALLF4
ASGNF4
ADDRLP4 48
ADDRLP4 68
INDIRF4
ASGNF4
line 656
;654:	
;655:	// set the movementDir so clients can rotate the legs for strafing
;656:	PM_SetMovementDir();
ADDRGP4 PM_SetMovementDir
CALLV
pop
line 658
;657:
;658:	fmove = pm->cmd.forwardmove;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ASGNF4
line 659
;659:	smove = pm->cmd.rightmove;
ADDRLP4 20
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ASGNF4
line 661
;660:
;661:	for (i=0 ; i<3 ; i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $309
line 662
;662:		wishvel[i] = pml.forward[i]*fmove + pml.right[i]*smove;
ADDRLP4 72
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 72
INDIRI4
ADDRLP4 4
ADDP4
ADDRLP4 72
INDIRI4
ADDRGP4 pml
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 72
INDIRI4
ADDRGP4 pml+12
ADDP4
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
LABELV $310
line 661
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $309
line 663
;663:	wishvel[2] += pm->cmd.upmove;
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
ADDRGP4 pm
INDIRP4
CNSTI4 31
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ADDF4
ASGNF4
line 665
;664:
;665:	VectorCopy (wishvel, wishdir);
ADDRLP4 32
ADDRLP4 4
INDIRB
ASGNB 12
line 666
;666:	wishspeed = VectorNormalize(wishdir);
ADDRLP4 32
ARGP4
ADDRLP4 76
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 44
ADDRLP4 76
INDIRF4
ASGNF4
line 667
;667:	wishspeed *= scale;
ADDRLP4 44
ADDRLP4 44
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ASGNF4
line 669
;668:
;669:	PM_Accelerate( wishdir, wishspeed, pm_accelerate );
ADDRLP4 32
ARGP4
ADDRLP4 44
INDIRF4
ARGF4
ADDRGP4 pm_accelerate
INDIRF4
ARGF4
ADDRGP4 PM_Accelerate
CALLV
pop
line 672
;670:
;671:	// move
;672:	VectorMA (pm->ps->origin, pml.frametime, pm->ps->velocity, pm->ps->origin);
ADDRLP4 80
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 84
ADDRLP4 80
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 88
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 92
ADDRLP4 88
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 88
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 96
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 100
ADDRLP4 96
INDIRP4
CNSTI4 28
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRGP4 pml+36
INDIRF4
MULF4
ADDF4
ASGNF4
line 673
;673:}
LABELV $300
endproc PM_NoclipMove 104 12
proc PM_InvulnerabilityMove 8 0
line 684
;674:
;675:
;676:/*
;677:===================
;678:PM_InvulnerabilityMove
;679:
;680:Only with the invulnerability powerup
;681:===================
;682:*/
;683:static void PM_InvulnerabilityMove( void )
;684:{
line 685
;685:	if (mod_invulmove == 1){
ADDRGP4 mod_invulmove
INDIRI4
CNSTI4 1
NEI4 $319
line 686
;686:	PM_WaterMove();
ADDRGP4 PM_WaterMove
CALLV
pop
line 687
;687:	}
LABELV $319
line 688
;688:	if (mod_invulmove == 2){
ADDRGP4 mod_invulmove
INDIRI4
CNSTI4 2
NEI4 $321
line 689
;689:	PM_NoclipMove();
ADDRGP4 PM_NoclipMove
CALLV
pop
line 690
;690:	}
LABELV $321
line 691
;691:	if (mod_invulmove == 0){
ADDRGP4 mod_invulmove
INDIRI4
CNSTI4 0
NEI4 $323
line 692
;692:	pm->cmd.forwardmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 693
;693:	pm->cmd.rightmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 694
;694:	pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 31
ADDP4
CNSTI1 0
ASGNI1
line 695
;695:	VectorClear(pm->ps->velocity);
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 4
CNSTF4 0
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 4
INDIRF4
ASGNF4
line 696
;696:}
LABELV $323
line 697
;697:}
LABELV $318
endproc PM_InvulnerabilityMove 8 0
proc PM_FlyMove 52 12
line 706
;698:
;699:/*
;700:===================
;701:PM_FlyMove
;702:
;703:Only with the flight powerup
;704:===================
;705:*/
;706:static void PM_FlyMove( void ) {
line 714
;707:	int		i;
;708:	vec3_t	wishvel;
;709:	float	wishspeed;
;710:	vec3_t	wishdir;
;711:	float	scale;
;712:
;713:	// normal slowdown
;714:	PM_Friction ();
ADDRGP4 PM_Friction
CALLV
pop
line 716
;715:
;716:	scale = PM_CmdScale( &pm->cmd );
ADDRGP4 pm
INDIRP4
CNSTI4 8
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 PM_CmdScale
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 36
INDIRF4
ASGNF4
line 720
;717:	//
;718:	// user intentions
;719:	//
;720:	if ( !scale ) {
ADDRLP4 4
INDIRF4
CNSTF4 0
NEF4 $326
line 721
;721:		wishvel[0] = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
line 722
;722:		wishvel[1] = 0;
ADDRLP4 8+4
CNSTF4 0
ASGNF4
line 723
;723:		wishvel[2] = 0;
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 724
;724:	} else {
ADDRGP4 $327
JUMPV
LABELV $326
line 725
;725:		for (i=0 ; i<3 ; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $330
line 726
;726:			wishvel[i] = scale * pml.forward[i]*pm->cmd.forwardmove + scale * pml.right[i]*pm->cmd.rightmove;
ADDRLP4 40
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 48
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 40
INDIRI4
ADDRLP4 8
ADDP4
ADDRLP4 4
INDIRF4
ADDRLP4 40
INDIRI4
ADDRGP4 pml
ADDP4
INDIRF4
MULF4
ADDRLP4 48
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDRLP4 4
INDIRF4
ADDRLP4 40
INDIRI4
ADDRGP4 pml+12
ADDP4
INDIRF4
MULF4
ADDRLP4 48
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDF4
ASGNF4
line 727
;727:		}
LABELV $331
line 725
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $330
line 729
;728:
;729:		wishvel[2] += scale * pm->cmd.upmove;
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pm
INDIRP4
CNSTI4 31
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDF4
ASGNF4
line 730
;730:	}
LABELV $327
line 732
;731:
;732:	VectorCopy (wishvel, wishdir);
ADDRLP4 20
ADDRLP4 8
INDIRB
ASGNB 12
line 733
;733:	wishspeed = VectorNormalize(wishdir);
ADDRLP4 20
ARGP4
ADDRLP4 40
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 32
ADDRLP4 40
INDIRF4
ASGNF4
line 735
;734:
;735:	PM_Accelerate (wishdir, wishspeed, pm_flyaccelerate);
ADDRLP4 20
ARGP4
ADDRLP4 32
INDIRF4
ARGF4
ADDRGP4 pm_flyaccelerate
INDIRF4
ARGF4
ADDRGP4 PM_Accelerate
CALLV
pop
line 737
;736:
;737:	PM_StepSlideMove( qfalse );
CNSTI4 0
ARGI4
ADDRGP4 PM_StepSlideMove
CALLV
pop
line 738
;738:}
LABELV $325
endproc PM_FlyMove 52 12
proc PM_AirMove 80 16
line 747
;739:
;740:
;741:/*
;742:===================
;743:PM_AirMove
;744:
;745:===================
;746:*/
;747:static void PM_AirMove( void ) {
line 756
;748:	int			i;
;749:	vec3_t		wishvel;
;750:	float		fmove, smove;
;751:	vec3_t		wishdir;
;752:	float		wishspeed;
;753:	float		scale;
;754:	usercmd_t	cmd;
;755:
;756:	PM_Friction();
ADDRGP4 PM_Friction
CALLV
pop
line 758
;757:
;758:	if(!pm->ps->stats[STAT_VEHICLE]) { //VEHICLE-SYSTEM: disable air move for all
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
NEI4 $337
line 759
;759:	smove = pm->cmd.rightmove;
ADDRLP4 20
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ASGNF4
line 760
;760:	fmove = pm->cmd.forwardmove;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ASGNF4
line 761
;761:	} else {
ADDRGP4 $338
JUMPV
LABELV $337
line 762
;762:	smove = 0;	
ADDRLP4 20
CNSTF4 0
ASGNF4
line 763
;763:	fmove = 0;	
ADDRLP4 16
CNSTF4 0
ASGNF4
line 764
;764:	}
LABELV $338
line 766
;765:
;766:	cmd = pm->cmd;
ADDRLP4 44
ADDRGP4 pm
INDIRP4
CNSTI4 8
ADDP4
INDIRB
ASGNB 24
line 767
;767:	scale = PM_CmdScale( &cmd );
ADDRLP4 44
ARGP4
ADDRLP4 68
ADDRGP4 PM_CmdScale
CALLF4
ASGNF4
ADDRLP4 40
ADDRLP4 68
INDIRF4
ASGNF4
line 770
;768:
;769:	// set the movementDir so clients can rotate the legs for strafing
;770:	PM_SetMovementDir();
ADDRGP4 PM_SetMovementDir
CALLV
pop
line 773
;771:
;772:	// project moves down to flat plane
;773:	pml.forward[2] = 0;
ADDRGP4 pml+8
CNSTF4 0
ASGNF4
line 774
;774:	pml.right[2] = 0;
ADDRGP4 pml+12+8
CNSTF4 0
ASGNF4
line 775
;775:	VectorNormalize (pml.forward);
ADDRGP4 pml
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 776
;776:	VectorNormalize (pml.right);
ADDRGP4 pml+12
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 778
;777:
;778:	for ( i = 0 ; i < 2 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $343
line 779
;779:		wishvel[i] = pml.forward[i]*fmove + pml.right[i]*smove;
ADDRLP4 72
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 72
INDIRI4
ADDRLP4 4
ADDP4
ADDRLP4 72
INDIRI4
ADDRGP4 pml
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 72
INDIRI4
ADDRGP4 pml+12
ADDP4
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
line 780
;780:	}
LABELV $344
line 778
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LTI4 $343
line 781
;781:	wishvel[2] = 0;
ADDRLP4 4+8
CNSTF4 0
ASGNF4
line 783
;782:
;783:	VectorCopy (wishvel, wishdir);
ADDRLP4 24
ADDRLP4 4
INDIRB
ASGNB 12
line 784
;784:	wishspeed = VectorNormalize(wishdir);
ADDRLP4 24
ARGP4
ADDRLP4 72
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 36
ADDRLP4 72
INDIRF4
ASGNF4
line 785
;785:	wishspeed *= scale;
ADDRLP4 36
ADDRLP4 36
INDIRF4
ADDRLP4 40
INDIRF4
MULF4
ASGNF4
line 788
;786:
;787:	// not on ground, so little effect on velocity
;788:	PM_Accelerate (wishdir, wishspeed, pm_airaccelerate);
ADDRLP4 24
ARGP4
ADDRLP4 36
INDIRF4
ARGF4
ADDRGP4 pm_airaccelerate
INDIRF4
ARGF4
ADDRGP4 PM_Accelerate
CALLV
pop
line 793
;789:
;790:	// we may have a ground plane that is very steep, even
;791:	// though we don't have a groundentity
;792:	// slide along the steep plane
;793:	if ( pml.groundPlane ) {
ADDRGP4 pml+48
INDIRI4
CNSTI4 0
EQI4 $349
line 794
;794:		PM_ClipVelocity (pm->ps->velocity, pml.groundTrace.plane.normal,
ADDRLP4 76
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ARGP4
ADDRGP4 pml+52+24
ARGP4
ADDRLP4 76
INDIRP4
ARGP4
CNSTF4 1065361605
ARGF4
ADDRGP4 PM_ClipVelocity
CALLV
pop
line 796
;795:			pm->ps->velocity, OVERCLIP );
;796:	}
LABELV $349
line 808
;797:
;798:#if 0
;799:	//ZOID:  If we are on the grapple, try stair-stepping
;800:	//this allows a player to use the grapple to pull himself
;801:	//over a ledge
;802:	if (pm->ps->pm_flags & PMF_GRAPPLE_PULL)
;803:		PM_StepSlideMove ( qtrue );
;804:	else
;805:		PM_SlideMove ( qtrue );
;806:#endif
;807:
;808:	PM_StepSlideMove ( qtrue );
CNSTI4 1
ARGI4
ADDRGP4 PM_StepSlideMove
CALLV
pop
line 809
;809:}
LABELV $336
endproc PM_AirMove 80 16
proc PM_GrappleMove 52 4
line 817
;810:
;811:/*
;812:===================
;813:PM_GrappleMove
;814:
;815:===================
;816:*/
;817:static void PM_GrappleMove( void ) {
line 821
;818:	vec3_t vel, v;
;819:	float vlen;
;820:
;821:	VectorScale(pml.forward, -16, v);
ADDRLP4 28
CNSTF4 3246391296
ASGNF4
ADDRLP4 12
ADDRLP4 28
INDIRF4
ADDRGP4 pml
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 28
INDIRF4
ADDRGP4 pml+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+8
CNSTF4 3246391296
ADDRGP4 pml+8
INDIRF4
MULF4
ASGNF4
line 822
;822:	VectorAdd(pm->ps->grapplePoint, v, v);
ADDRLP4 32
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 32
INDIRP4
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 32
INDIRP4
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 12+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDF4
ASGNF4
line 823
;823:	VectorSubtract(v, pm->ps->origin, vel);
ADDRLP4 36
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ADDRLP4 36
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 36
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 12+8
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
line 824
;824:	vlen = VectorLength(vel);
ADDRLP4 0
ARGP4
ADDRLP4 40
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 24
ADDRLP4 40
INDIRF4
ASGNF4
line 825
;825:	VectorNormalize( vel );
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 827
;826:
;827:	if (vlen <= 100)
ADDRLP4 24
INDIRF4
CNSTF4 1120403456
GTF4 $367
line 828
;828:		VectorScale(vel, 10 * vlen, vel);
ADDRLP4 44
CNSTF4 1092616192
ADDRLP4 24
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 44
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 44
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1092616192
ADDRLP4 24
INDIRF4
MULF4
MULF4
ASGNF4
ADDRGP4 $368
JUMPV
LABELV $367
line 830
;829:	else
;830:		VectorScale(vel, 1000, vel);
ADDRLP4 48
CNSTF4 1148846080
ASGNF4
ADDRLP4 0
ADDRLP4 48
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 48
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1148846080
ADDRLP4 0+8
INDIRF4
MULF4
ASGNF4
LABELV $368
line 832
;831:
;832:	VectorCopy(vel, pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 0
INDIRB
ASGNB 12
line 834
;833:
;834:	pml.groundPlane = qfalse;
ADDRGP4 pml+48
CNSTI4 0
ASGNI4
line 835
;835:}
LABELV $354
endproc PM_GrappleMove 52 4
proc PM_WalkMove 140 16
line 843
;836:
;837:/*
;838:===================
;839:PM_WalkMove
;840:
;841:===================
;842:*/
;843:static void PM_WalkMove( void ) {
line 854
;844:	int			i;
;845:	vec3_t		wishvel;
;846:	float		fmove, smove;
;847:	vec3_t		wishdir;
;848:	float		wishspeed;
;849:	float		scale;
;850:	usercmd_t	cmd;
;851:	float		accelerate;
;852:	float		vel;
;853:
;854:	if ( pm->waterlevel > 2 && DotProduct( pml.forward, pml.groundTrace.plane.normal ) > 0 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 2
LEI4 $379
ADDRGP4 pml
INDIRF4
ADDRGP4 pml+52+24
INDIRF4
MULF4
ADDRGP4 pml+4
INDIRF4
ADDRGP4 pml+52+24+4
INDIRF4
MULF4
ADDF4
ADDRGP4 pml+8
INDIRF4
ADDRGP4 pml+52+24+8
INDIRF4
MULF4
ADDF4
CNSTF4 0
LEF4 $379
line 856
;855:		// begin swimming
;856:		PM_WaterMove();
ADDRGP4 PM_WaterMove
CALLV
pop
line 857
;857:		return;
ADDRGP4 $378
JUMPV
LABELV $379
line 861
;858:	}
;859:
;860:
;861:	if ( PM_CheckJump () ) {
ADDRLP4 76
ADDRGP4 PM_CheckJump
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $391
line 863
;862:		// jumped away
;863:		if ( pm->waterlevel > 1 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 1
LEI4 $393
line 864
;864:			PM_WaterMove();
ADDRGP4 PM_WaterMove
CALLV
pop
line 865
;865:		} else {
ADDRGP4 $378
JUMPV
LABELV $393
line 866
;866:			PM_AirMove();
ADDRGP4 PM_AirMove
CALLV
pop
line 867
;867:		}
line 868
;868:		return;
ADDRGP4 $378
JUMPV
LABELV $391
line 871
;869:	}
;870:
;871:	PM_Friction ();
ADDRGP4 PM_Friction
CALLV
pop
line 873
;872:
;873:	fmove = pm->cmd.forwardmove;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ASGNF4
line 874
;874:	if(!pm->ps->stats[STAT_VEHICLE]) { //VEHICLE-SYSTEM: disable strafe for all
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
NEI4 $395
line 875
;875:	smove = pm->cmd.rightmove;
ADDRLP4 20
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CVIF4 4
ASGNF4
line 876
;876:	} else {
ADDRGP4 $396
JUMPV
LABELV $395
line 877
;877:	smove = 0;	
ADDRLP4 20
CNSTF4 0
ASGNF4
line 878
;878:	}
LABELV $396
line 880
;879:
;880:	cmd = pm->cmd;
ADDRLP4 48
ADDRGP4 pm
INDIRP4
CNSTI4 8
ADDP4
INDIRB
ASGNB 24
line 881
;881:	scale = PM_CmdScale( &cmd );
ADDRLP4 48
ARGP4
ADDRLP4 80
ADDRGP4 PM_CmdScale
CALLF4
ASGNF4
ADDRLP4 44
ADDRLP4 80
INDIRF4
ASGNF4
line 884
;882:
;883:	// set the movementDir so clients can rotate the legs for strafing
;884:	PM_SetMovementDir();
ADDRGP4 PM_SetMovementDir
CALLV
pop
line 887
;885:
;886:	// project moves down to flat plane
;887:	pml.forward[2] = 0;
ADDRGP4 pml+8
CNSTF4 0
ASGNF4
line 888
;888:	pml.right[2] = 0;
ADDRGP4 pml+12+8
CNSTF4 0
ASGNF4
line 891
;889:
;890:	// project the forward and right directions onto the ground plane
;891:	PM_ClipVelocity (pml.forward, pml.groundTrace.plane.normal, pml.forward, OVERCLIP );
ADDRLP4 84
ADDRGP4 pml
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRGP4 pml+52+24
ARGP4
ADDRLP4 84
INDIRP4
ARGP4
CNSTF4 1065361605
ARGF4
ADDRGP4 PM_ClipVelocity
CALLV
pop
line 892
;892:	PM_ClipVelocity (pml.right, pml.groundTrace.plane.normal, pml.right, OVERCLIP );
ADDRGP4 pml+12
ARGP4
ADDRGP4 pml+52+24
ARGP4
ADDRGP4 pml+12
ARGP4
CNSTF4 1065361605
ARGF4
ADDRGP4 PM_ClipVelocity
CALLV
pop
line 894
;893:	//
;894:	VectorNormalize (pml.forward);
ADDRGP4 pml
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 895
;895:	VectorNormalize (pml.right);
ADDRGP4 pml+12
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 897
;896:
;897:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $407
line 898
;898:		wishvel[i] = pml.forward[i]*fmove + pml.right[i]*smove;
ADDRLP4 88
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 88
INDIRI4
ADDRLP4 4
ADDP4
ADDRLP4 88
INDIRI4
ADDRGP4 pml
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 88
INDIRI4
ADDRGP4 pml+12
ADDP4
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDF4
ASGNF4
line 899
;899:	}
LABELV $408
line 897
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $407
line 903
;900:	// when going up or down slopes the wish velocity should Not be zero
;901://	wishvel[2] = 0;
;902:
;903:	VectorCopy (wishvel, wishdir);
ADDRLP4 32
ADDRLP4 4
INDIRB
ASGNB 12
line 904
;904:	wishspeed = VectorNormalize(wishdir);
ADDRLP4 32
ARGP4
ADDRLP4 88
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 24
ADDRLP4 88
INDIRF4
ASGNF4
line 905
;905:	wishspeed *= scale;
ADDRLP4 24
ADDRLP4 24
INDIRF4
ADDRLP4 44
INDIRF4
MULF4
ASGNF4
line 908
;906:
;907:	// clamp the speed lower if ducking
;908:	if ( pm->ps->pm_flags & PMF_DUCKED ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $412
line 909
;909:		if ( wishspeed > pm->ps->speed * pm_duckScale ) {
ADDRLP4 24
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pm_duckScale
INDIRF4
MULF4
LEF4 $414
line 910
;910:			wishspeed = pm->ps->speed * pm_duckScale;
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pm_duckScale
INDIRF4
MULF4
ASGNF4
line 913
;911:
;912:			//if player's speed is lowered by target_playerspeed, we can get excessively low movement speeds, so set a mimimum movement speed
;913:			if ( wishspeed < 80 )		//80 is g_speed's default value (320) * pm_duckScale (0.25)
ADDRLP4 24
INDIRF4
CNSTF4 1117782016
GEF4 $416
line 914
;914:				wishspeed = 80;
ADDRLP4 24
CNSTF4 1117782016
ASGNF4
LABELV $416
line 916
;915:
;916:			if ( wishspeed > pm->ps->speed )	//we don't want the crouch movement speed to be higher than the player's normal movement speed
ADDRLP4 24
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
LEF4 $418
line 917
;917:				wishspeed = pm->ps->speed;
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
ASGNF4
LABELV $418
line 918
;918:		}
LABELV $414
line 919
;919:	}
LABELV $412
line 922
;920:
;921:	// clamp the speed lower if wading or walking on the bottom
;922:	if ( pm->waterlevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 0
EQI4 $420
line 925
;923:		float	waterScale;
;924:
;925:		waterScale = pm->waterlevel / 3.0;
ADDRLP4 92
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1077936128
DIVF4
ASGNF4
line 926
;926:		waterScale = 1.0 - ( 1.0 - pm_swimScale ) * waterScale;
ADDRLP4 96
CNSTF4 1065353216
ASGNF4
ADDRLP4 92
ADDRLP4 96
INDIRF4
ADDRLP4 96
INDIRF4
ADDRGP4 pm_swimScale
INDIRF4
SUBF4
ADDRLP4 92
INDIRF4
MULF4
SUBF4
ASGNF4
line 927
;927:		if ( wishspeed > pm->ps->speed * waterScale ) {
ADDRLP4 24
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 92
INDIRF4
MULF4
LEF4 $422
line 928
;928:			wishspeed = pm->ps->speed * waterScale;
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 92
INDIRF4
MULF4
ASGNF4
line 929
;929:		}
LABELV $422
line 930
;930:	}
LABELV $420
line 934
;931:
;932:	// when a player gets hit, they temporarily lose
;933:	// full control, which allows them to be moved a bit
;934:	if ( ( pml.groundTrace.surfaceFlags & SURF_SLICK ) || pm->ps->pm_flags & PMF_TIME_KNOCKBACK || mod_slickmove == 1 ) {
ADDRLP4 92
CNSTI4 0
ASGNI4
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 2
BANDI4
ADDRLP4 92
INDIRI4
NEI4 $429
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 64
BANDI4
ADDRLP4 92
INDIRI4
NEI4 $429
ADDRGP4 mod_slickmove
INDIRI4
CNSTI4 1
NEI4 $424
LABELV $429
line 935
;935:		accelerate = pm_airaccelerate;
ADDRLP4 72
ADDRGP4 pm_airaccelerate
INDIRF4
ASGNF4
line 936
;936:	} else if(BG_VehicleCheckClass(pm->ps->stats[STAT_VEHICLE]) == VCLASS_CAR) { //VEHICLE-SYSTEM: accelerate for 1
ADDRGP4 $425
JUMPV
LABELV $424
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
ADDRLP4 96
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 1
NEI4 $430
line 937
;937:		accelerate = pm_veh00001accelerate;
ADDRLP4 72
ADDRGP4 pm_veh00001accelerate
INDIRF4
ASGNF4
line 938
;938:	} else {
ADDRGP4 $431
JUMPV
LABELV $430
line 939
;939:		accelerate = pm_accelerate;
ADDRLP4 72
ADDRGP4 pm_accelerate
INDIRF4
ASGNF4
line 940
;940:	}
LABELV $431
LABELV $425
line 942
;941:
;942:	PM_Accelerate (wishdir, wishspeed, accelerate);
ADDRLP4 32
ARGP4
ADDRLP4 24
INDIRF4
ARGF4
ADDRLP4 72
INDIRF4
ARGF4
ADDRGP4 PM_Accelerate
CALLV
pop
line 947
;943:
;944:	//Com_Printf("velocity = %1.1f %1.1f %1.1f\n", pm->ps->velocity[0], pm->ps->velocity[1], pm->ps->velocity[2]);
;945:	//Com_Printf("velocity1 = %1.1f\n", VectorLength(pm->ps->velocity));
;946:
;947:	if ( ( pml.groundTrace.surfaceFlags & SURF_SLICK ) || pm->ps->pm_flags & PMF_TIME_KNOCKBACK || mod_slickmove == 1 || BG_VehicleCheckClass(pm->ps->stats[STAT_VEHICLE]) == VCLASS_CAR ) { //VEHICLE-SYSTEM: slick move for 1
ADDRLP4 100
CNSTI4 0
ASGNI4
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 2
BANDI4
ADDRLP4 100
INDIRI4
NEI4 $438
ADDRLP4 104
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 104
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 64
BANDI4
ADDRLP4 100
INDIRI4
NEI4 $438
ADDRGP4 mod_slickmove
INDIRI4
CNSTI4 1
EQI4 $438
ADDRLP4 104
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
ADDRLP4 108
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
CNSTI4 1
NEI4 $432
LABELV $438
line 948
;948:		pm->ps->velocity[2] -= (pm->ps->gravity * pml.frametime);
ADDRLP4 112
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 116
ADDRLP4 112
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRF4
ADDRLP4 112
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pml+36
INDIRF4
MULF4
SUBF4
ASGNF4
line 949
;949:	} else {
LABELV $432
line 952
;950:		// don't reset the z velocity for slopes
;951://		pm->ps->velocity[2] = 0;
;952:	}
LABELV $433
line 954
;953:
;954:	vel = VectorLength(pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 112
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 112
INDIRF4
ASGNF4
line 957
;955:
;956:	// slide along the ground plane
;957:	PM_ClipVelocity (pm->ps->velocity, pml.groundTrace.plane.normal,
ADDRLP4 116
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ARGP4
ADDRGP4 pml+52+24
ARGP4
ADDRLP4 116
INDIRP4
ARGP4
CNSTF4 1065361605
ARGF4
ADDRGP4 PM_ClipVelocity
CALLV
pop
line 961
;958:		pm->ps->velocity, OVERCLIP );
;959:
;960:	// don't decrease velocity when going up or down a slope
;961:	VectorNormalize(pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 962
;962:	VectorScale(pm->ps->velocity, vel, pm->ps->velocity);
ADDRLP4 120
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
ADDRLP4 124
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 124
INDIRP4
ADDRLP4 124
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
ADDRLP4 128
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
line 965
;963:
;964:	// don't do anything if standing still
;965:	if (!pm->ps->velocity[0] && !pm->ps->velocity[1]) {
ADDRLP4 132
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 136
CNSTF4 0
ASGNF4
ADDRLP4 132
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 136
INDIRF4
NEF4 $442
ADDRLP4 132
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 136
INDIRF4
NEF4 $442
line 966
;966:		return;
ADDRGP4 $378
JUMPV
LABELV $442
line 969
;967:	}
;968:
;969:	PM_StepSlideMove( qfalse );
CNSTI4 0
ARGI4
ADDRGP4 PM_StepSlideMove
CALLV
pop
line 973
;970:
;971:	//Com_Printf("velocity2 = %1.1f\n", VectorLength(pm->ps->velocity));
;972:
;973:}
LABELV $378
endproc PM_WalkMove 140 16
proc PM_DeadMove 20 4
line 981
;974:
;975:
;976:/*
;977:==============
;978:PM_DeadMove
;979:==============
;980:*/
;981:static void PM_DeadMove( void ) {
line 984
;982:	float	forward;
;983:
;984:	if ( !pml.walking ) {
ADDRGP4 pml+44
INDIRI4
CNSTI4 0
NEI4 $445
line 985
;985:		return;
ADDRGP4 $444
JUMPV
LABELV $445
line 990
;986:	}
;987:
;988:	// extra friction
;989:
;990:	forward = VectorLength (pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 4
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 4
INDIRF4
ASGNF4
line 991
;991:	forward -= 20;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1101004800
SUBF4
ASGNF4
line 992
;992:	if ( forward <= 0 ) {
ADDRLP4 0
INDIRF4
CNSTF4 0
GTF4 $448
line 993
;993:		VectorClear (pm->ps->velocity);
ADDRLP4 8
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 12
CNSTF4 0
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
ADDRLP4 8
INDIRP4
CNSTI4 32
ADDP4
ADDRLP4 12
INDIRF4
ASGNF4
line 994
;994:	} else {
ADDRGP4 $449
JUMPV
LABELV $448
line 995
;995:		VectorNormalize (pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 996
;996:		VectorScale (pm->ps->velocity, forward, pm->ps->velocity);
ADDRLP4 8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 997
;997:	}
LABELV $449
line 998
;998:}
LABELV $444
endproc PM_DeadMove 20 4
proc PM_FootstepForSurface 0 0
line 1010
;999:
;1000:
;1001://============================================================================
;1002:
;1003:/*
;1004:================
;1005:PM_FootstepForSurface
;1006:
;1007:Returns an event number apropriate for the groundsurface
;1008:================
;1009:*/
;1010:static int PM_FootstepForSurface( void ) {
line 1011
;1011:	if ( pml.groundTrace.surfaceFlags & SURF_NOSTEPS ) {
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 8192
BANDI4
CNSTI4 0
EQI4 $451
line 1012
;1012:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $450
JUMPV
LABELV $451
line 1014
;1013:	}
;1014:	if ( pml.groundTrace.surfaceFlags & SURF_METALSTEPS ) {
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $455
line 1015
;1015:		return EV_FOOTSTEP_METAL;
CNSTI4 2
RETI4
ADDRGP4 $450
JUMPV
LABELV $455
line 1017
;1016:	}
;1017:	if ( pml.groundTrace.surfaceFlags & SURF_FLESH ) {
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $459
line 1018
;1018:		return EV_FOOTSTEP_FLESH;
CNSTI4 102
RETI4
ADDRGP4 $450
JUMPV
LABELV $459
line 1020
;1019:	}
;1020:	return EV_FOOTSTEP;
CNSTI4 1
RETI4
LABELV $450
endproc PM_FootstepForSurface 0 0
proc PM_CrashLand 52 4
line 1031
;1021:}
;1022:
;1023:
;1024:/*
;1025:=================
;1026:PM_CrashLand
;1027:
;1028:Check for hard landings that generate sound events
;1029:=================
;1030:*/
;1031:static void PM_CrashLand( void ) {
line 1039
;1032:	float		delta;
;1033:	float		dist;
;1034:	float		vel, acc;
;1035:	float		t;
;1036:	float		a, b, c, den;
;1037:
;1038:	// decide which landing animation to use
;1039:	if ( pm->ps->pm_flags & PMF_BACKWARDS_JUMP ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $464
line 1040
;1040:		PM_ForceLegsAnim( LEGS_LANDB );
CNSTI4 21
ARGI4
ADDRGP4 PM_ForceLegsAnim
CALLV
pop
line 1041
;1041:	} else {
ADDRGP4 $465
JUMPV
LABELV $464
line 1042
;1042:		PM_ForceLegsAnim( LEGS_LAND );
CNSTI4 19
ARGI4
ADDRGP4 PM_ForceLegsAnim
CALLV
pop
line 1043
;1043:	}
LABELV $465
line 1045
;1044:
;1045:	pm->ps->legsTimer = TIMER_LAND;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 72
ADDP4
CNSTI4 130
ASGNI4
line 1048
;1046:
;1047:	// calculate the exact velocity on landing
;1048:	dist = pm->ps->origin[2] - pml.previous_origin[2];
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRGP4 pml+116+8
INDIRF4
SUBF4
ASGNF4
line 1049
;1049:	vel = pml.previous_velocity[2];
ADDRLP4 8
ADDRGP4 pml+128+8
INDIRF4
ASGNF4
line 1050
;1050:	acc = -pm->ps->gravity;
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
NEGI4
CVIF4 4
ASGNF4
line 1052
;1051:
;1052:	a = acc / 2;
ADDRLP4 16
ADDRLP4 12
INDIRF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 1053
;1053:	b = vel;
ADDRLP4 4
ADDRLP4 8
INDIRF4
ASGNF4
line 1054
;1054:	c = -dist;
ADDRLP4 32
ADDRLP4 24
INDIRF4
NEGF4
ASGNF4
line 1056
;1055:
;1056:	den =  b * b - 4 * a * c;
ADDRLP4 20
ADDRLP4 4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1082130432
ADDRLP4 16
INDIRF4
MULF4
ADDRLP4 32
INDIRF4
MULF4
SUBF4
ASGNF4
line 1057
;1057:	if ( den < 0 ) {
ADDRLP4 20
INDIRF4
CNSTF4 0
GEF4 $470
line 1058
;1058:		return;
ADDRGP4 $463
JUMPV
LABELV $470
line 1060
;1059:	}
;1060:	t = (-b - sqrt( den ) ) / ( 2 * a );
ADDRLP4 20
INDIRF4
ARGF4
ADDRLP4 40
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 4
INDIRF4
NEGF4
ADDRLP4 40
INDIRF4
SUBF4
CNSTF4 1073741824
ADDRLP4 16
INDIRF4
MULF4
DIVF4
ASGNF4
line 1062
;1061:
;1062:	delta = vel + t * acc;
ADDRLP4 0
ADDRLP4 8
INDIRF4
ADDRLP4 28
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ADDF4
ASGNF4
line 1063
;1063:	delta = delta*delta * 0.0001;
ADDRLP4 0
CNSTF4 953267991
ADDRLP4 0
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
MULF4
ASGNF4
line 1066
;1064:
;1065:	// ducking while falling doubles damage
;1066:	if ( pm->ps->pm_flags & PMF_DUCKED ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $472
line 1067
;1067:		delta *= 2;
ADDRLP4 0
CNSTF4 1073741824
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 1068
;1068:	}
LABELV $472
line 1071
;1069:
;1070:	// never take falling damage if completely underwater
;1071:	if ( pm->waterlevel == 3 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 3
NEI4 $474
line 1072
;1072:		return;
ADDRGP4 $463
JUMPV
LABELV $474
line 1076
;1073:	}
;1074:
;1075:	// reduce falling damage if there is standing water
;1076:	if ( pm->waterlevel == 2 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 2
NEI4 $476
line 1077
;1077:		delta *= 0.25;
ADDRLP4 0
CNSTF4 1048576000
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 1078
;1078:	}
LABELV $476
line 1079
;1079:	if ( pm->waterlevel == 1 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 1
NEI4 $478
line 1080
;1080:		delta *= 0.5;
ADDRLP4 0
CNSTF4 1056964608
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
line 1081
;1081:	}
LABELV $478
line 1083
;1082:
;1083:	if ( delta < 1 ) {
ADDRLP4 0
INDIRF4
CNSTF4 1065353216
GEF4 $480
line 1084
;1084:		return;
ADDRGP4 $463
JUMPV
LABELV $480
line 1091
;1085:	}
;1086:
;1087:	// create a local entity event to play the sound
;1088:
;1089:	// SURF_NODAMAGE is used for bounce pads where you don't ever
;1090:	// want to take damage or play a crunch sound
;1091:	if(!pm->ps->stats[STAT_VEHICLE]) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
NEI4 $482
line 1092
;1092:	if ( !(pml.groundTrace.surfaceFlags & SURF_NODAMAGE) )  {
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $483
line 1093
;1093:		if ( delta > 60 ) {
ADDRLP4 0
INDIRF4
CNSTF4 1114636288
LEF4 $488
line 1094
;1094:			PM_AddEvent( EV_FALL_FAR );
CNSTI4 12
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1095
;1095:		} else if ( delta > 40 ) {
ADDRGP4 $483
JUMPV
LABELV $488
ADDRLP4 0
INDIRF4
CNSTF4 1109393408
LEF4 $490
line 1097
;1096:			// this is a pain grunt, so don't play it if dead
;1097:			if ( pm->ps->stats[STAT_HEALTH] > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
LEI4 $483
line 1098
;1098:				PM_AddEvent( EV_FALL_MEDIUM );
CNSTI4 11
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1099
;1099:			}
line 1100
;1100:		} else if ( delta > 7 ) {
ADDRGP4 $483
JUMPV
LABELV $490
ADDRLP4 0
INDIRF4
CNSTF4 1088421888
LEF4 $494
line 1101
;1101:			PM_AddEvent( EV_FALL_SHORT );
CNSTI4 10
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1102
;1102:		} else {
ADDRGP4 $483
JUMPV
LABELV $494
line 1103
;1103:			PM_AddEvent( PM_FootstepForSurface() );
ADDRLP4 48
ADDRGP4 PM_FootstepForSurface
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1104
;1104:		}
line 1105
;1105:	}
line 1106
;1106:	} else {
ADDRGP4 $483
JUMPV
LABELV $482
line 1107
;1107:	if ( !(pml.groundTrace.surfaceFlags & SURF_NODAMAGE) )  {
ADDRGP4 pml+52+44
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $496
line 1108
;1108:	if ( delta > 60 ) {
ADDRLP4 0
INDIRF4
CNSTF4 1114636288
LEF4 $500
line 1109
;1109:		PM_AddEvent( EV_FALL_FAR );
CNSTI4 12
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1110
;1110:	}
LABELV $500
line 1111
;1111:	PM_AddEvent( EV_FALL_MEDIUM );
CNSTI4 11
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1112
;1112:	PM_AddEvent( EV_CRASH25 );
CNSTI4 104
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1113
;1113:	}	
LABELV $496
line 1114
;1114:	}
LABELV $483
line 1117
;1115:
;1116:	// start footstep cycle over
;1117:	pm->ps->bobCycle = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 0
ASGNI4
line 1118
;1118:}
LABELV $463
endproc PM_CrashLand 52 4
proc PM_CorrectAllSolid 36 28
line 1141
;1119:
;1120:/*
;1121:=============
;1122:PM_CheckStuck
;1123:=============
;1124:*/
;1125:/*
;1126:void PM_CheckStuck(void) {
;1127:	trace_t trace;
;1128:
;1129:	pm->trace (&trace, pm->ps->origin, pm->mins, pm->maxs, pm->ps->origin, pm->ps->clientNum, pm->tracemask);
;1130:	if (trace.allsolid) {
;1131:		//int shit = qtrue;
;1132:	}
;1133:}
;1134:*/
;1135:
;1136:/*
;1137:=============
;1138:PM_CorrectAllSolid
;1139:=============
;1140:*/
;1141:static int PM_CorrectAllSolid( trace_t *trace ) {
line 1145
;1142:	int			i, j, k;
;1143:	vec3_t		point;
;1144:
;1145:	if ( pm->debugLevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
EQI4 $503
line 1146
;1146:		Com_Printf("%i:allsolid\n", c_pmove);
ADDRGP4 $505
ARGP4
ADDRGP4 c_pmove
INDIRI4
ARGI4
ADDRGP4 Com_Printf
CALLV
pop
line 1147
;1147:	}
LABELV $503
line 1150
;1148:
;1149:	// jitter around
;1150:	for (i = -1; i <= 1; i++) {
ADDRLP4 20
CNSTI4 -1
ASGNI4
LABELV $506
line 1151
;1151:		for (j = -1; j <= 1; j++) {
ADDRLP4 16
CNSTI4 -1
ASGNI4
LABELV $510
line 1152
;1152:			for (k = -1; k <= 1; k++) {
ADDRLP4 12
CNSTI4 -1
ASGNI4
LABELV $514
line 1153
;1153:				VectorCopy(pm->ps->origin, point);
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 1154
;1154:				point[0] += (float) i;
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1155
;1155:				point[1] += (float) j;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 16
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1156
;1156:				point[2] += (float) k;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1157
;1157:				pm->trace (trace, point, pm->mins, pm->maxs, point, pm->ps->clientNum, pm->tracemask);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 24
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
INDIRP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
INDIRP4
CNSTI4 236
ADDP4
INDIRP4
CALLV
pop
line 1158
;1158:				if ( !trace->allsolid ) {
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $520
line 1159
;1159:					point[0] = pm->ps->origin[0];
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ASGNF4
line 1160
;1160:					point[1] = pm->ps->origin[1];
ADDRLP4 0+4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1161
;1161:					point[2] = pm->ps->origin[2] - 0.25;
ADDRLP4 0+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1048576000
SUBF4
ASGNF4
line 1163
;1162:
;1163:					pm->trace (trace, pm->ps->origin, pm->mins, pm->maxs, point, pm->ps->clientNum, pm->tracemask);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 28
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
INDIRP4
CNSTI4 236
ADDP4
INDIRP4
CALLV
pop
line 1164
;1164:					pml.groundTrace = *trace;
ADDRGP4 pml+52
ADDRFP4 0
INDIRP4
INDIRB
ASGNB 56
line 1165
;1165:					return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $502
JUMPV
LABELV $520
line 1167
;1166:				}
;1167:			}
LABELV $515
line 1152
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 1
LEI4 $514
line 1168
;1168:		}
LABELV $511
line 1151
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 1
LEI4 $510
line 1169
;1169:	}
LABELV $507
line 1150
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 1
LEI4 $506
line 1171
;1170:
;1171:	pm->ps->groundEntityNum = ENTITYNUM_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 4095
ASGNI4
line 1172
;1172:	pml.groundPlane = qfalse;
ADDRGP4 pml+48
CNSTI4 0
ASGNI4
line 1173
;1173:	pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 1175
;1174:
;1175:	return qfalse;
CNSTI4 0
RETI4
LABELV $502
endproc PM_CorrectAllSolid 36 28
proc PM_GroundTraceMissed 80 28
line 1186
;1176:}
;1177:
;1178:
;1179:/*
;1180:=============
;1181:PM_GroundTraceMissed
;1182:
;1183:The ground trace didn't hit a surface, so we are in freefall
;1184:=============
;1185:*/
;1186:static void PM_GroundTraceMissed( void ) {
line 1190
;1187:	trace_t		trace;
;1188:	vec3_t		point;
;1189:
;1190:	if ( pm->ps->groundEntityNum != ENTITYNUM_NONE ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 4095
EQI4 $528
line 1192
;1191:		// we just transitioned into freefall
;1192:		if ( pm->debugLevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
EQI4 $530
line 1193
;1193:			Com_Printf("%i:lift\n", c_pmove);
ADDRGP4 $532
ARGP4
ADDRGP4 c_pmove
INDIRI4
ARGI4
ADDRGP4 Com_Printf
CALLV
pop
line 1194
;1194:		}
LABELV $530
line 1198
;1195:
;1196:		// if they aren't in a jumping animation and the ground is a ways away, force into it
;1197:		// if we didn't do the trace, the player would be backflipping down staircases
;1198:		VectorCopy( pm->ps->origin, point );
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 1199
;1199:		point[2] -= 64;
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1115684864
SUBF4
ASGNF4
line 1201
;1200:
;1201:		pm->trace (&trace, pm->ps->origin, pm->mins, pm->maxs, point, pm->ps->clientNum, pm->tracemask);
ADDRLP4 12
ARGP4
ADDRLP4 68
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 72
ADDRLP4 68
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 68
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 68
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 68
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 68
INDIRP4
CNSTI4 236
ADDP4
INDIRP4
CALLV
pop
line 1202
;1202:		if ( trace.fraction == 1.0 ) {
ADDRLP4 12+8
INDIRF4
CNSTF4 1065353216
NEF4 $534
line 1203
;1203:			if ( pm->cmd.forwardmove >= 0 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LTI4 $537
line 1204
;1204:				PM_ForceLegsAnim( LEGS_JUMP );
CNSTI4 18
ARGI4
ADDRGP4 PM_ForceLegsAnim
CALLV
pop
line 1205
;1205:				pm->ps->pm_flags &= ~PMF_BACKWARDS_JUMP;
ADDRLP4 76
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 1206
;1206:			} else {
ADDRGP4 $538
JUMPV
LABELV $537
line 1207
;1207:				PM_ForceLegsAnim( LEGS_JUMPB );
CNSTI4 20
ARGI4
ADDRGP4 PM_ForceLegsAnim
CALLV
pop
line 1208
;1208:				pm->ps->pm_flags |= PMF_BACKWARDS_JUMP;
ADDRLP4 76
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 1209
;1209:			}
LABELV $538
line 1210
;1210:		}
LABELV $534
line 1211
;1211:	}
LABELV $528
line 1213
;1212:
;1213:	pm->ps->groundEntityNum = ENTITYNUM_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 4095
ASGNI4
line 1214
;1214:	pml.groundPlane = qfalse;
ADDRGP4 pml+48
CNSTI4 0
ASGNI4
line 1215
;1215:	pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 1216
;1216:}
LABELV $527
endproc PM_GroundTraceMissed 80 28
proc PM_GroundTrace 88 28
line 1224
;1217:
;1218:
;1219:/*
;1220:=============
;1221:PM_GroundTrace
;1222:=============
;1223:*/
;1224:static void PM_GroundTrace( void ) {
line 1228
;1225:	vec3_t		point;
;1226:	trace_t		trace;
;1227:
;1228:	point[0] = pm->ps->origin[0];
ADDRLP4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ASGNF4
line 1229
;1229:	point[1] = pm->ps->origin[1];
ADDRLP4 56+4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1230
;1230:	point[2] = pm->ps->origin[2] - 0.25;
ADDRLP4 56+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1048576000
SUBF4
ASGNF4
line 1232
;1231:
;1232:	pm->trace (&trace, pm->ps->origin, pm->mins, pm->maxs, point, pm->ps->clientNum, pm->tracemask);
ADDRLP4 0
ARGP4
ADDRLP4 68
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 72
ADDRLP4 68
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 68
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 68
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 68
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 68
INDIRP4
CNSTI4 236
ADDP4
INDIRP4
CALLV
pop
line 1233
;1233:	pml.groundTrace = trace;
ADDRGP4 pml+52
ADDRLP4 0
INDIRB
ASGNB 56
line 1236
;1234:
;1235:	// do something corrective if the trace starts in a solid...
;1236:	if ( trace.allsolid ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $545
line 1237
;1237:		if ( !PM_CorrectAllSolid(&trace) )
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRGP4 PM_CorrectAllSolid
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $547
line 1238
;1238:			return;
ADDRGP4 $541
JUMPV
LABELV $547
line 1239
;1239:	}
LABELV $545
line 1242
;1240:
;1241:	// if the trace didn't hit anything, we are in free fall
;1242:	if ( trace.fraction == 1.0 ) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
NEF4 $549
line 1243
;1243:		PM_GroundTraceMissed();
ADDRGP4 PM_GroundTraceMissed
CALLV
pop
line 1244
;1244:		pml.groundPlane = qfalse;
ADDRGP4 pml+48
CNSTI4 0
ASGNI4
line 1245
;1245:		pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 1246
;1246:		return;
ADDRGP4 $541
JUMPV
LABELV $549
line 1250
;1247:	}
;1248:
;1249:	// check if getting thrown off the ground
;1250:	if ( pm->ps->velocity[2] > 0 && DotProduct( pm->ps->velocity, trace.plane.normal ) > 10 ) {
ADDRLP4 76
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 76
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ASGNF4
ADDRLP4 80
INDIRF4
CNSTF4 0
LEF4 $554
ADDRLP4 76
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0+24
INDIRF4
MULF4
ADDRLP4 76
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRLP4 0+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 80
INDIRF4
ADDRLP4 0+24+8
INDIRF4
MULF4
ADDF4
CNSTF4 1092616192
LEF4 $554
line 1251
;1251:		if ( pm->debugLevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
EQI4 $561
line 1252
;1252:			Com_Printf("%i:kickoff\n", c_pmove);
ADDRGP4 $563
ARGP4
ADDRGP4 c_pmove
INDIRI4
ARGI4
ADDRGP4 Com_Printf
CALLV
pop
line 1253
;1253:		}
LABELV $561
line 1255
;1254:		// go into jump animation
;1255:		if ( pm->cmd.forwardmove >= 0 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
LTI4 $564
line 1256
;1256:			PM_ForceLegsAnim( LEGS_JUMP );
CNSTI4 18
ARGI4
ADDRGP4 PM_ForceLegsAnim
CALLV
pop
line 1257
;1257:			pm->ps->pm_flags &= ~PMF_BACKWARDS_JUMP;
ADDRLP4 84
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 -9
BANDI4
ASGNI4
line 1258
;1258:		} else {
ADDRGP4 $565
JUMPV
LABELV $564
line 1259
;1259:			PM_ForceLegsAnim( LEGS_JUMPB );
CNSTI4 20
ARGI4
ADDRGP4 PM_ForceLegsAnim
CALLV
pop
line 1260
;1260:			pm->ps->pm_flags |= PMF_BACKWARDS_JUMP;
ADDRLP4 84
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 1261
;1261:		}
LABELV $565
line 1263
;1262:
;1263:		pm->ps->groundEntityNum = ENTITYNUM_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 4095
ASGNI4
line 1264
;1264:		pml.groundPlane = qfalse;
ADDRGP4 pml+48
CNSTI4 0
ASGNI4
line 1265
;1265:		pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 1266
;1266:		return;
ADDRGP4 $541
JUMPV
LABELV $554
line 1270
;1267:	}
;1268:
;1269:	// slopes that are too steep will not be considered onground
;1270:	if ( trace.plane.normal[2] < MIN_WALK_NORMAL ) {
ADDRLP4 0+24+8
INDIRF4
CNSTF4 1060320051
GEF4 $568
line 1271
;1271:		if ( pm->debugLevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
EQI4 $572
line 1272
;1272:			Com_Printf("%i:steep\n", c_pmove);
ADDRGP4 $574
ARGP4
ADDRGP4 c_pmove
INDIRI4
ARGI4
ADDRGP4 Com_Printf
CALLV
pop
line 1273
;1273:		}
LABELV $572
line 1276
;1274:		// FIXME: if they can't slide down the slope, let them
;1275:		// walk (sharp crevices)
;1276:		pm->ps->groundEntityNum = ENTITYNUM_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 68
ADDP4
CNSTI4 4095
ASGNI4
line 1277
;1277:		pml.groundPlane = qtrue;
ADDRGP4 pml+48
CNSTI4 1
ASGNI4
line 1278
;1278:		pml.walking = qfalse;
ADDRGP4 pml+44
CNSTI4 0
ASGNI4
line 1279
;1279:		return;
ADDRGP4 $541
JUMPV
LABELV $568
line 1282
;1280:	}
;1281:
;1282:	pml.groundPlane = qtrue;
ADDRGP4 pml+48
CNSTI4 1
ASGNI4
line 1283
;1283:	pml.walking = qtrue;
ADDRGP4 pml+44
CNSTI4 1
ASGNI4
line 1286
;1284:
;1285:	// hitting solid ground will end a waterjump
;1286:	if (pm->ps->pm_flags & PMF_TIME_WATERJUMP)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $579
line 1287
;1287:	{
line 1288
;1288:		pm->ps->pm_flags &= ~(PMF_TIME_WATERJUMP | PMF_TIME_LAND);
ADDRLP4 84
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 -289
BANDI4
ASGNI4
line 1289
;1289:		pm->ps->pm_time = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
CNSTI4 0
ASGNI4
line 1290
;1290:	}
LABELV $579
line 1292
;1291:
;1292:	if ( pm->ps->groundEntityNum == ENTITYNUM_NONE ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 4095
NEI4 $581
line 1294
;1293:		// just hit the ground
;1294:		if ( pm->debugLevel ) {
ADDRGP4 pm
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 0
EQI4 $583
line 1295
;1295:			Com_Printf("%i:Land\n", c_pmove);
ADDRGP4 $585
ARGP4
ADDRGP4 c_pmove
INDIRI4
ARGI4
ADDRGP4 Com_Printf
CALLV
pop
line 1296
;1296:		}
LABELV $583
line 1298
;1297:
;1298:		PM_CrashLand();
ADDRGP4 PM_CrashLand
CALLV
pop
line 1301
;1299:
;1300:		// don't do landing time if we were just going down a slope
;1301:		if ( pml.previous_velocity[2] < -200 ) {
ADDRGP4 pml+128+8
INDIRF4
CNSTF4 3276275712
GEF4 $586
line 1303
;1302:			// don't allow another jump for a little while
;1303:			pm->ps->pm_flags |= PMF_TIME_LAND;
ADDRLP4 84
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 1304
;1304:			pm->ps->pm_time = 250;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
CNSTI4 250
ASGNI4
line 1305
;1305:		}
LABELV $586
line 1306
;1306:	}
LABELV $581
line 1308
;1307:
;1308:	pm->ps->groundEntityNum = trace.entityNum;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 0+52
INDIRI4
ASGNI4
line 1313
;1309:
;1310:	// don't reset the z velocity for slopes
;1311://	pm->ps->velocity[2] = 0;
;1312:
;1313:	PM_AddTouchEnt( trace.entityNum );
ADDRLP4 0+52
INDIRI4
ARGI4
ADDRGP4 PM_AddTouchEnt
CALLV
pop
line 1314
;1314:}
LABELV $541
endproc PM_GroundTrace 88 28
proc PM_SetWaterLevel 48 8
line 1322
;1315:
;1316:
;1317:/*
;1318:=============
;1319:PM_SetWaterLevel	FIXME: avoid this twice?  certainly if not moving
;1320:=============
;1321:*/
;1322:static void PM_SetWaterLevel( void ) {
line 1331
;1323:	vec3_t		point;
;1324:	int			cont;
;1325:	int			sample1;
;1326:	int			sample2;
;1327:
;1328:	//
;1329:	// get waterlevel, accounting for ducking
;1330:	//
;1331:	pm->waterlevel = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
CNSTI4 0
ASGNI4
line 1332
;1332:	pm->watertype = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 208
ADDP4
CNSTI4 0
ASGNI4
line 1334
;1333:
;1334:	point[0] = pm->ps->origin[0];
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ASGNF4
line 1335
;1335:	point[1] = pm->ps->origin[1];
ADDRLP4 0+4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ASGNF4
line 1336
;1336:	point[2] = pm->ps->origin[2] + MINS_Z + 1;
ADDRLP4 0+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3250585600
ADDF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1337
;1337:	cont = pm->pointcontents( point, pm->ps->clientNum );
ADDRLP4 0
ARGP4
ADDRLP4 24
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 28
INDIRI4
ASGNI4
line 1339
;1338:
;1339:	if ( cont & MASK_WATER ) {
ADDRLP4 12
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $595
line 1340
;1340:		sample2 = pm->ps->viewheight - MINS_Z;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 164
ADDP4
INDIRI4
CNSTI4 -24
SUBI4
ASGNI4
line 1341
;1341:		sample1 = sample2 / 2;
ADDRLP4 20
ADDRLP4 16
INDIRI4
CNSTI4 2
DIVI4
ASGNI4
line 1343
;1342:
;1343:		pm->watertype = cont;
ADDRGP4 pm
INDIRP4
CNSTI4 208
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 1344
;1344:		pm->waterlevel = 1;
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
CNSTI4 1
ASGNI4
line 1345
;1345:		point[2] = pm->ps->origin[2] + MINS_Z + sample1;
ADDRLP4 0+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3250585600
ADDF4
ADDRLP4 20
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1346
;1346:		cont = pm->pointcontents (point, pm->ps->clientNum );
ADDRLP4 0
ARGP4
ADDRLP4 32
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 36
ADDRLP4 32
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 36
INDIRI4
ASGNI4
line 1347
;1347:		if ( cont & MASK_WATER ) {
ADDRLP4 12
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $598
line 1348
;1348:			pm->waterlevel = 2;
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
CNSTI4 2
ASGNI4
line 1349
;1349:			point[2] = pm->ps->origin[2] + MINS_Z + sample2;
ADDRLP4 0+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3250585600
ADDF4
ADDRLP4 16
INDIRI4
CVIF4 4
ADDF4
ASGNF4
line 1350
;1350:			cont = pm->pointcontents (point, pm->ps->clientNum );
ADDRLP4 0
ARGP4
ADDRLP4 40
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 240
ADDP4
INDIRP4
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 44
INDIRI4
ASGNI4
line 1351
;1351:			if ( cont & MASK_WATER ){
ADDRLP4 12
INDIRI4
CNSTI4 56
BANDI4
CNSTI4 0
EQI4 $601
line 1352
;1352:				pm->waterlevel = 3;
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
CNSTI4 3
ASGNI4
line 1353
;1353:			}
LABELV $601
line 1354
;1354:		}
LABELV $598
line 1355
;1355:	}
LABELV $595
line 1357
;1356:
;1357:}
LABELV $592
endproc PM_SetWaterLevel 48 8
proc PM_CheckDuck 76 28
line 1367
;1358:
;1359:/*
;1360:==============
;1361:PM_CheckDuck
;1362:
;1363:Sets mins, maxs, and pm->ps->viewheight
;1364:==============
;1365:*/
;1366:static void PM_CheckDuck (void)
;1367:{
line 1370
;1368:	trace_t	trace;
;1369:
;1370:	if ( pm->ps->powerups[PW_INVULNERABILITY] ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 368
ADDP4
INDIRI4
CNSTI4 0
EQI4 $604
line 1371
;1371:		if ( pm->ps->pm_flags & PMF_INVULEXPAND ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $606
line 1373
;1372:			// invulnerability sphere has a 42 units radius
;1373:			VectorSet( pm->mins, -42, -42, -42 );
ADDRGP4 pm
INDIRP4
CNSTI4 184
ADDP4
CNSTF4 3257401344
ASGNF4
ADDRGP4 pm
INDIRP4
CNSTI4 188
ADDP4
CNSTF4 3257401344
ASGNF4
ADDRGP4 pm
INDIRP4
CNSTI4 192
ADDP4
CNSTF4 3257401344
ASGNF4
line 1374
;1374:			VectorSet( pm->maxs, 42, 42, 42 );
ADDRGP4 pm
INDIRP4
CNSTI4 196
ADDP4
CNSTF4 1109917696
ASGNF4
ADDRGP4 pm
INDIRP4
CNSTI4 200
ADDP4
CNSTF4 1109917696
ASGNF4
ADDRGP4 pm
INDIRP4
CNSTI4 204
ADDP4
CNSTF4 1109917696
ASGNF4
line 1375
;1375:		}
ADDRGP4 $607
JUMPV
LABELV $606
line 1376
;1376:		else {
line 1377
;1377:			VectorSet( pm->mins, -15, -15, MINS_Z );
ADDRGP4 pm
INDIRP4
CNSTI4 184
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRGP4 pm
INDIRP4
CNSTI4 188
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRGP4 pm
INDIRP4
CNSTI4 192
ADDP4
CNSTF4 3250585600
ASGNF4
line 1378
;1378:			VectorSet( pm->maxs, 15, 15, 16 );
ADDRGP4 pm
INDIRP4
CNSTI4 196
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRGP4 pm
INDIRP4
CNSTI4 200
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRGP4 pm
INDIRP4
CNSTI4 204
ADDP4
CNSTF4 1098907648
ASGNF4
line 1379
;1379:		}
LABELV $607
line 1380
;1380:		pm->ps->pm_flags |= PMF_DUCKED;
ADDRLP4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 1381
;1381:		pm->ps->viewheight = CROUCH_VIEWHEIGHT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 164
ADDP4
CNSTI4 12
ASGNI4
line 1382
;1382:		return;
ADDRGP4 $603
JUMPV
LABELV $604
line 1384
;1383:	}
;1384:	pm->ps->pm_flags &= ~PMF_INVULEXPAND;
ADDRLP4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 -16385
BANDI4
ASGNI4
line 1386
;1385:
;1386:	pm->mins[0] = -15;
ADDRGP4 pm
INDIRP4
CNSTI4 184
ADDP4
CNSTF4 3245342720
ASGNF4
line 1387
;1387:	pm->mins[1] = -15;
ADDRGP4 pm
INDIRP4
CNSTI4 188
ADDP4
CNSTF4 3245342720
ASGNF4
line 1388
;1388:	pm->mins[2] = MINS_Z;
ADDRGP4 pm
INDIRP4
CNSTI4 192
ADDP4
CNSTF4 3250585600
ASGNF4
line 1390
;1389:
;1390:	pm->maxs[0] = 15;
ADDRGP4 pm
INDIRP4
CNSTI4 196
ADDP4
CNSTF4 1097859072
ASGNF4
line 1391
;1391:	pm->maxs[1] = 15;
ADDRGP4 pm
INDIRP4
CNSTI4 200
ADDP4
CNSTF4 1097859072
ASGNF4
line 1393
;1392:
;1393:	if (pm->ps->pm_type == PM_DEAD)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $608
line 1394
;1394:	{
line 1395
;1395:		pm->maxs[2] = -8;
ADDRGP4 pm
INDIRP4
CNSTI4 204
ADDP4
CNSTF4 3238002688
ASGNF4
line 1396
;1396:		pm->ps->viewheight = DEAD_VIEWHEIGHT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 164
ADDP4
CNSTI4 -16
ASGNI4
line 1397
;1397:		return;
ADDRGP4 $603
JUMPV
LABELV $608
line 1400
;1398:	}
;1399:
;1400:	if (pm->cmd.upmove < 0)
ADDRGP4 pm
INDIRP4
CNSTI4 31
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $610
line 1401
;1401:	{	// duck
line 1402
;1402:	if (!pm->ps->stats[STAT_VEHICLE]){ //VEHICLE-SYSTEM: disable duck for all
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
NEI4 $611
line 1403
;1403:		pm->ps->pm_flags |= PMF_DUCKED;
ADDRLP4 60
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 1404
;1404:	} else {
line 1406
;1405:
;1406:	}
line 1407
;1407:	}
ADDRGP4 $611
JUMPV
LABELV $610
line 1409
;1408:	else
;1409:	{	// stand up if possible
line 1410
;1410:		if (pm->ps->pm_flags & PMF_DUCKED)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $614
line 1411
;1411:		{
line 1413
;1412:			// try to stand up
;1413:			pm->maxs[2] = 32;
ADDRGP4 pm
INDIRP4
CNSTI4 204
ADDP4
CNSTF4 1107296256
ASGNF4
line 1414
;1414:			pm->trace (&trace, pm->ps->origin, pm->mins, pm->maxs, pm->ps->origin, pm->ps->clientNum, pm->tracemask );
ADDRLP4 0
ARGP4
ADDRLP4 60
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 64
ADDRLP4 60
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 68
ADDRLP4 64
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 64
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 60
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ARGI4
ADDRLP4 60
INDIRP4
CNSTI4 236
ADDP4
INDIRP4
CALLV
pop
line 1415
;1415:			if (!trace.allsolid)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $616
line 1416
;1416:				pm->ps->pm_flags &= ~PMF_DUCKED;
ADDRLP4 72
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
LABELV $616
line 1417
;1417:		}
LABELV $614
line 1418
;1418:	}
LABELV $611
line 1420
;1419:
;1420:	if (pm->ps->pm_flags & PMF_DUCKED)
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $618
line 1421
;1421:	{
line 1422
;1422:		pm->maxs[2] = 16;
ADDRGP4 pm
INDIRP4
CNSTI4 204
ADDP4
CNSTF4 1098907648
ASGNF4
line 1423
;1423:		pm->ps->viewheight = CROUCH_VIEWHEIGHT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 164
ADDP4
CNSTI4 12
ASGNI4
line 1424
;1424:	}
ADDRGP4 $619
JUMPV
LABELV $618
line 1426
;1425:	else
;1426:	{
line 1427
;1427:		pm->maxs[2] = 32;
ADDRGP4 pm
INDIRP4
CNSTI4 204
ADDP4
CNSTF4 1107296256
ASGNF4
line 1428
;1428:		pm->ps->viewheight = DEFAULT_VIEWHEIGHT;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 164
ADDP4
CNSTI4 26
ASGNI4
line 1429
;1429:	}
LABELV $619
line 1431
;1430:	
;1431:	if (pm->ps->stats[STAT_VEHICLE]){ //VEHICLE-SYSTEM: collision for all
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
EQI4 $620
line 1432
;1432:		pm->mins[0] = -25;
ADDRGP4 pm
INDIRP4
CNSTI4 184
ADDP4
CNSTF4 3251109888
ASGNF4
line 1433
;1433:		pm->mins[1] = -25;
ADDRGP4 pm
INDIRP4
CNSTI4 188
ADDP4
CNSTF4 3251109888
ASGNF4
line 1434
;1434:		pm->mins[2] = -15;
ADDRGP4 pm
INDIRP4
CNSTI4 192
ADDP4
CNSTF4 3245342720
ASGNF4
line 1435
;1435:		pm->maxs[0] = 25;
ADDRGP4 pm
INDIRP4
CNSTI4 196
ADDP4
CNSTF4 1103626240
ASGNF4
line 1436
;1436:	    pm->maxs[1] = 25;
ADDRGP4 pm
INDIRP4
CNSTI4 200
ADDP4
CNSTF4 1103626240
ASGNF4
line 1437
;1437:		pm->maxs[2] = 15;
ADDRGP4 pm
INDIRP4
CNSTI4 204
ADDP4
CNSTF4 1097859072
ASGNF4
line 1438
;1438:	}
LABELV $620
line 1439
;1439:}
LABELV $603
endproc PM_CheckDuck 76 28
proc PM_Footsteps 52 4
line 1451
;1440:
;1441:
;1442:
;1443://===================================================================
;1444:
;1445:
;1446:/*
;1447:===============
;1448:PM_Footsteps
;1449:===============
;1450:*/
;1451:static void PM_Footsteps( void ) {
line 1460
;1452:	float		bobmove;
;1453:	int			old;
;1454:	qboolean	footstep;
;1455:
;1456:	//
;1457:	// calculate speed and cycle to be used for
;1458:	// all cyclic walking effects
;1459:	//
;1460:	pm->xyspeed = sqrt( pm->ps->velocity[0] * pm->ps->velocity[0]
ADDRLP4 12
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 12
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 16
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ASGNF4
ADDRLP4 24
ADDRLP4 16
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ASGNF4
ADDRLP4 20
INDIRF4
ADDRLP4 20
INDIRF4
MULF4
ADDRLP4 24
INDIRF4
ADDRLP4 24
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 28
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 28
INDIRF4
ASGNF4
line 1463
;1461:		+  pm->ps->velocity[1] * pm->ps->velocity[1] );
;1462:
;1463:	if ( pm->ps->groundEntityNum == ENTITYNUM_NONE ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
CNSTI4 4095
NEI4 $623
line 1465
;1464:
;1465:		if ( pm->ps->powerups[PW_INVULNERABILITY] ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 368
ADDP4
INDIRI4
CNSTI4 0
EQI4 $625
line 1466
;1466:			PM_ContinueLegsAnim( LEGS_IDLECR );
CNSTI4 23
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 1467
;1467:		}
LABELV $625
line 1469
;1468:		// airborne leaves position in cycle intact, but doesn't advance
;1469:		if ( pm->waterlevel > 1 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 1
LEI4 $622
line 1470
;1470:			PM_ContinueLegsAnim( LEGS_SWIM );
CNSTI4 17
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 1471
;1471:		}
line 1472
;1472:		return;
ADDRGP4 $622
JUMPV
LABELV $623
line 1476
;1473:	}
;1474:
;1475:	// if not trying to move
;1476:	if ( !pm->cmd.forwardmove && !pm->cmd.rightmove ) {
ADDRLP4 32
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 36
CNSTI4 0
ASGNI4
ADDRLP4 32
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
NEI4 $629
ADDRLP4 32
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 36
INDIRI4
NEI4 $629
line 1477
;1477:		if (  pm->xyspeed < 5 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 216
ADDP4
INDIRF4
CNSTF4 1084227584
GEF4 $622
line 1478
;1478:			pm->ps->bobCycle = 0;	// start at beginning of cycle again
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 0
ASGNI4
line 1479
;1479:			if ( pm->ps->pm_flags & PMF_DUCKED ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $633
line 1480
;1480:				PM_ContinueLegsAnim( LEGS_IDLECR );
CNSTI4 23
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 1481
;1481:			} else {
ADDRGP4 $622
JUMPV
LABELV $633
line 1482
;1482:				PM_ContinueLegsAnim( LEGS_IDLE );
CNSTI4 22
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 1483
;1483:			}
line 1484
;1484:		}
line 1485
;1485:		return;
ADDRGP4 $622
JUMPV
LABELV $629
line 1489
;1486:	}
;1487:
;1488:
;1489:	footstep = qfalse;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 1491
;1490:
;1491:	if ( pm->ps->pm_flags & PMF_DUCKED ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $635
line 1492
;1492:		bobmove = 0.5;	// ducked characters bob much faster
ADDRLP4 4
CNSTF4 1056964608
ASGNF4
line 1493
;1493:		if ( pm->ps->pm_flags & PMF_BACKWARDS_RUN ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $637
line 1494
;1494:			PM_ContinueLegsAnim( LEGS_BACKCR );
CNSTI4 32
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 1495
;1495:		}
ADDRGP4 $636
JUMPV
LABELV $637
line 1496
;1496:		else {
line 1497
;1497:			PM_ContinueLegsAnim( LEGS_WALKCR );
CNSTI4 13
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 1498
;1498:		}
line 1510
;1499:		// ducked characters never play footsteps
;1500:	/*
;1501:	} else 	if ( pm->ps->pm_flags & PMF_BACKWARDS_RUN ) {
;1502:		if ( !( pm->cmd.buttons & BUTTON_WALKING ) ) {
;1503:			bobmove = 0.4;	// faster speeds bob faster
;1504:			footstep = qtrue;
;1505:		} else {
;1506:			bobmove = 0.3;
;1507:		}
;1508:		PM_ContinueLegsAnim( LEGS_BACK );
;1509:	*/
;1510:	} else {
ADDRGP4 $636
JUMPV
LABELV $635
line 1511
;1511:		if ( !( pm->cmd.buttons & BUTTON_WALKING ) ) {
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $639
line 1512
;1512:			bobmove = 0.4f;	// faster speeds bob faster
ADDRLP4 4
CNSTF4 1053609165
ASGNF4
line 1513
;1513:			if ( pm->ps->pm_flags & PMF_BACKWARDS_RUN ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $641
line 1514
;1514:				PM_ContinueLegsAnim( LEGS_BACK );
CNSTI4 16
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 1515
;1515:			}
ADDRGP4 $642
JUMPV
LABELV $641
line 1516
;1516:			else {
line 1517
;1517:				PM_ContinueLegsAnim( LEGS_RUN );
CNSTI4 15
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 1518
;1518:			}
LABELV $642
line 1519
;1519:			footstep = qtrue;
ADDRLP4 8
CNSTI4 1
ASGNI4
line 1520
;1520:		} else {
ADDRGP4 $640
JUMPV
LABELV $639
line 1521
;1521:			bobmove = 0.3f;	// walking bobs slow
ADDRLP4 4
CNSTF4 1050253722
ASGNF4
line 1522
;1522:			if ( pm->ps->pm_flags & PMF_BACKWARDS_RUN ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $643
line 1523
;1523:				PM_ContinueLegsAnim( LEGS_BACKWALK );
CNSTI4 33
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 1524
;1524:			}
ADDRGP4 $644
JUMPV
LABELV $643
line 1525
;1525:			else {
line 1526
;1526:				PM_ContinueLegsAnim( LEGS_WALK );
CNSTI4 14
ARGI4
ADDRGP4 PM_ContinueLegsAnim
CALLV
pop
line 1527
;1527:			}
LABELV $644
line 1528
;1528:		}
LABELV $640
line 1529
;1529:	}
LABELV $636
line 1532
;1530:
;1531:	// check for footstep / splash sounds
;1532:	old = pm->ps->bobCycle;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 1533
;1533:	pm->ps->bobCycle = (int)( old + bobmove * pml.msec ) & 255;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRF4
ADDRGP4 pml+40
INDIRI4
CVIF4 4
MULF4
ADDF4
CVFI4 4
CNSTI4 255
BANDI4
ASGNI4
line 1536
;1534:
;1535:	// if we just crossed a cycle boundary, play an apropriate footstep event
;1536:	if ( ( ( old + 64 ) ^ ( pm->ps->bobCycle + 64 ) ) & 128 ) {
ADDRLP4 40
CNSTI4 64
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 40
INDIRI4
ADDI4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRLP4 40
INDIRI4
ADDI4
BXORI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $646
line 1537
;1537:		if ( pm->waterlevel == 0 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 0
NEI4 $648
line 1539
;1538:			// on ground will only play sounds if running
;1539:			if ( footstep && !pm->noFootsteps ) {
ADDRLP4 44
CNSTI4 0
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 44
INDIRI4
EQI4 $649
ADDRGP4 pm
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ADDRLP4 44
INDIRI4
NEI4 $649
line 1540
;1540:				PM_AddEvent( PM_FootstepForSurface() );
ADDRLP4 48
ADDRGP4 PM_FootstepForSurface
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1541
;1541:			}
line 1542
;1542:		} else if ( pm->waterlevel == 1 ) {
ADDRGP4 $649
JUMPV
LABELV $648
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 1
NEI4 $652
line 1544
;1543:			// splashing
;1544:			PM_AddEvent( EV_FOOTSPLASH );
CNSTI4 3
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1545
;1545:		} else if ( pm->waterlevel == 2 ) {
ADDRGP4 $653
JUMPV
LABELV $652
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 2
NEI4 $654
line 1547
;1546:			// wading / swimming at surface
;1547:			PM_AddEvent( EV_SWIM );
CNSTI4 5
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1548
;1548:		} else if ( pm->waterlevel == 3 ) {
ADDRGP4 $655
JUMPV
LABELV $654
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 3
NEI4 $656
line 1551
;1549:			// no sound when completely underwater
;1550:
;1551:		}
LABELV $656
LABELV $655
LABELV $653
LABELV $649
line 1552
;1552:	}
LABELV $646
line 1553
;1553:}
LABELV $622
endproc PM_Footsteps 52 4
proc PM_WaterEvents 16 4
line 1562
;1554:
;1555:/*
;1556:==============
;1557:PM_WaterEvents
;1558:
;1559:Generate sound events for entering and leaving water
;1560:==============
;1561:*/
;1562:static void PM_WaterEvents( void ) {		// FIXME?
line 1566
;1563:	//
;1564:	// if just entered a water volume, play a sound
;1565:	//
;1566:	if (!pml.previous_waterlevel && pm->waterlevel) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 pml+140
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $659
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $659
line 1567
;1567:		PM_AddEvent( EV_WATER_TOUCH );
CNSTI4 15
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1568
;1568:	}
LABELV $659
line 1573
;1569:
;1570:	//
;1571:	// if just completely exited a water volume, play a sound
;1572:	//
;1573:	if (pml.previous_waterlevel && !pm->waterlevel) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 pml+140
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $662
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
NEI4 $662
line 1574
;1574:		PM_AddEvent( EV_WATER_LEAVE );
CNSTI4 16
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1575
;1575:	}
LABELV $662
line 1580
;1576:
;1577:	//
;1578:	// check for head just going under water
;1579:	//
;1580:	if (pml.previous_waterlevel != 3 && pm->waterlevel == 3) {
ADDRLP4 8
CNSTI4 3
ASGNI4
ADDRGP4 pml+140
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $665
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $665
line 1581
;1581:		PM_AddEvent( EV_WATER_UNDER );
CNSTI4 17
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1582
;1582:	}
LABELV $665
line 1587
;1583:
;1584:	//
;1585:	// check for head just coming out of water
;1586:	//
;1587:	if (pml.previous_waterlevel == 3 && pm->waterlevel != 3) {
ADDRLP4 12
CNSTI4 3
ASGNI4
ADDRGP4 pml+140
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $668
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $668
line 1588
;1588:		PM_AddEvent( EV_WATER_CLEAR );
CNSTI4 18
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1589
;1589:	}
LABELV $668
line 1590
;1590:}
LABELV $658
endproc PM_WaterEvents 16 4
proc PM_BeginWeaponChange 28 12
line 1598
;1591:
;1592:
;1593:/*
;1594:===============
;1595:PM_BeginWeaponChange
;1596:===============
;1597:*/
;1598:static void PM_BeginWeaponChange( int weapon ) {
line 1600
;1599:	gitem_t	*item;
;1600:	if(BG_VehicleCheckClass(pm->ps->stats[STAT_VEHICLE]) == VCLASS_CAR){ //VEHICLE-SYSTEM: weapon lock for 1
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
ADDRLP4 4
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 1
NEI4 $672
line 1601
;1601:	if(!BG_GetVehicleSettings(pm->ps->stats[STAT_VEHICLE], VSET_WEAPON)){
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 8
ADDRGP4 BG_GetVehicleSettings
CALLF4
ASGNF4
ADDRLP4 8
INDIRF4
CNSTF4 0
NEF4 $674
line 1602
;1602:	return;	
ADDRGP4 $671
JUMPV
LABELV $674
line 1604
;1603:	}
;1604:	}
LABELV $672
line 1605
;1605:	pm->ps->generic2 = pm->cmd.weapon;
ADDRLP4 8
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
INDIRP4
CNSTI4 444
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
INDIRU1
CVUI4 1
ASGNI4
line 1606
;1606:	if ( weapon <= WP_NONE || weapon >= WP_NUM_WEAPONS ) {
ADDRLP4 12
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
LEI4 $678
ADDRLP4 12
INDIRI4
CNSTI4 16
LTI4 $676
LABELV $678
line 1607
;1607:	item = BG_FindSwep(weapon);
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_FindSwep
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
ASGNP4
line 1609
;1608:	#ifdef QAGAME
;1609:	if(G_CheckSwep(pm->ps->clientNum, weapon, 0)){
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRFP4 0
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 20
ADDRGP4 G_CheckSwep
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $671
line 1610
;1610:		if ( pm->ps->weaponstate == WEAPON_DROPPING ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $681
line 1611
;1611:		return;
ADDRGP4 $671
JUMPV
LABELV $681
line 1614
;1612:		}
;1613:
;1614:        if(pm->pmove_flags & DF_INSTANT_WEAPON_CHANGE)
ADDRGP4 pm
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $683
line 1615
;1615:        {
line 1616
;1616:                pm->ps->weaponstate = WEAPON_DROPPING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 1617
;1617:        } else
ADDRGP4 $671
JUMPV
LABELV $683
line 1618
;1618:        {
line 1619
;1619:            PM_AddEvent( EV_CHANGE_WEAPON );
CNSTI4 22
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1620
;1620:            pm->ps->weaponstate = WEAPON_DROPPING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 1621
;1621:            pm->ps->weaponTime += 200;
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 1622
;1622:            PM_StartTorsoAnim( TORSO_DROP );
CNSTI4 9
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 1623
;1623:        }
line 1624
;1624:	} else {
line 1625
;1625:	return;
line 1628
;1626:	}
;1627:	#endif
;1628:	return;
ADDRGP4 $671
JUMPV
LABELV $676
line 1631
;1629:	}
;1630:
;1631:	if ( !( pm->ps->stats[STAT_WEAPONS] & ( 1 << weapon ) ) ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $685
line 1632
;1632:		return;
ADDRGP4 $671
JUMPV
LABELV $685
line 1635
;1633:	}
;1634:
;1635:	if ( pm->ps->weaponstate == WEAPON_DROPPING ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $687
line 1636
;1636:		return;
ADDRGP4 $671
JUMPV
LABELV $687
line 1639
;1637:	}
;1638:
;1639:        if(pm->pmove_flags & DF_INSTANT_WEAPON_CHANGE)
ADDRGP4 pm
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $689
line 1640
;1640:        {
line 1641
;1641:                pm->ps->weaponstate = WEAPON_DROPPING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 1642
;1642:        } else
ADDRGP4 $690
JUMPV
LABELV $689
line 1643
;1643:        {
line 1644
;1644:            PM_AddEvent( EV_CHANGE_WEAPON );
CNSTI4 22
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1645
;1645:            pm->ps->weaponstate = WEAPON_DROPPING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 2
ASGNI4
line 1646
;1646:            pm->ps->weaponTime += 200;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 1647
;1647:            PM_StartTorsoAnim( TORSO_DROP );
CNSTI4 9
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 1648
;1648:        }
LABELV $690
line 1649
;1649:}
LABELV $671
endproc PM_BeginWeaponChange 28 12
proc PM_FinishWeaponChange 28 12
line 1657
;1650:
;1651:
;1652:/*
;1653:===============
;1654:PM_FinishWeaponChange
;1655:===============
;1656:*/
;1657:static void PM_FinishWeaponChange( void ) {
line 1661
;1658:	gitem_t	*item;
;1659:	int		weapon;
;1660:
;1661:	weapon = pm->cmd.weapon;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRU1
CVUI4 1
ASGNI4
line 1662
;1662:	if(BG_VehicleCheckClass(pm->ps->stats[STAT_VEHICLE]) == VCLASS_CAR){ //VEHICLE-SYSTEM: weapon lock for 1
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 1
NEI4 $692
line 1663
;1663:	if(!BG_GetVehicleSettings(pm->ps->stats[STAT_VEHICLE], VSET_WEAPON)){
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 12
ADDRGP4 BG_GetVehicleSettings
CALLF4
ASGNF4
ADDRLP4 12
INDIRF4
CNSTF4 0
NEF4 $694
line 1664
;1664:	return;	
ADDRGP4 $691
JUMPV
LABELV $694
line 1666
;1665:	}
;1666:	}
LABELV $692
line 1667
;1667:	if ( weapon < WP_NONE || weapon >= WP_NUM_WEAPONS ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
LTI4 $698
ADDRLP4 0
INDIRI4
CNSTI4 16
LTI4 $696
LABELV $698
line 1668
;1668:	item = BG_FindSwep(weapon);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_FindSwep
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 16
INDIRP4
ASGNP4
line 1670
;1669:	#ifdef QAGAME
;1670:	if(G_CheckSwep(pm->ps->clientNum, weapon, 1)){
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRLP4 20
ADDRGP4 G_CheckSwep
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $691
line 1671
;1671:	pm->ps->weapon = item->giTag;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
line 1672
;1672:	pm->ps->weaponstate = WEAPON_RAISING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 1
ASGNI4
line 1673
;1673:        if(! (pm->pmove_flags & DF_INSTANT_WEAPON_CHANGE))
ADDRGP4 pm
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
NEI4 $691
line 1674
;1674:        {
line 1675
;1675:                pm->ps->weaponTime += 500;
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 1676
;1676:                PM_StartTorsoAnim( TORSO_RAISE );
CNSTI4 10
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 1677
;1677:        }
line 1678
;1678:	} else {
line 1679
;1679:	return;
line 1682
;1680:	}
;1681:	#endif
;1682:	return;
ADDRGP4 $691
JUMPV
LABELV $696
line 1685
;1683:	}
;1684:
;1685:	if ( !( pm->ps->stats[STAT_WEAPONS] & ( 1 << weapon ) ) ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 1
ADDRLP4 0
INDIRI4
LSHI4
BANDI4
CNSTI4 0
NEI4 $703
line 1686
;1686:		weapon = WP_NONE;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1687
;1687:	}
LABELV $703
line 1689
;1688:
;1689:	pm->ps->weapon = weapon;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1691
;1690:	#ifdef QAGAME
;1691:	G_DefaultSwep(pm->ps->clientNum, weapon);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 G_DefaultSwep
CALLV
pop
line 1693
;1692:	#endif
;1693:	pm->ps->weaponstate = WEAPON_RAISING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 1
ASGNI4
line 1694
;1694:        if(! (pm->pmove_flags & DF_INSTANT_WEAPON_CHANGE))
ADDRGP4 pm
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
NEI4 $705
line 1695
;1695:        {
line 1696
;1696:                pm->ps->weaponTime += 500;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 1697
;1697:                PM_StartTorsoAnim( TORSO_RAISE );
CNSTI4 10
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 1698
;1698:        }
LABELV $705
line 1699
;1699:}
LABELV $691
endproc PM_FinishWeaponChange 28 12
proc PM_TorsoAnimation 0 4
line 1708
;1700:
;1701:
;1702:/*
;1703:==============
;1704:PM_TorsoAnimation
;1705:
;1706:==============
;1707:*/
;1708:static void PM_TorsoAnimation( void ) {
line 1709
;1709:	if ( pm->ps->weaponstate == WEAPON_READY ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 0
NEI4 $708
line 1710
;1710:		if ( pm->ps->weapon == WP_GAUNTLET ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
NEI4 $710
line 1711
;1711:			PM_ContinueTorsoAnim( TORSO_STAND2 );
CNSTI4 12
ARGI4
ADDRGP4 PM_ContinueTorsoAnim
CALLV
pop
line 1712
;1712:		} else {
ADDRGP4 $707
JUMPV
LABELV $710
line 1713
;1713:			PM_ContinueTorsoAnim( TORSO_STAND );
CNSTI4 11
ARGI4
ADDRGP4 PM_ContinueTorsoAnim
CALLV
pop
line 1714
;1714:		}
line 1715
;1715:		return;
LABELV $708
line 1717
;1716:	}
;1717:}
LABELV $707
endproc PM_TorsoAnimation 0 4
proc PM_Weapon 60 12
line 1730
;1718:
;1719:
;1720:/*
;1721:==============
;1722:PM_Weapon
;1723:
;1724:Generates weapon events and modifes the weapon counter
;1725:
;1726:Elimination TODO:
;1727:Make this thing stop during warmup (done)
;1728:==============
;1729:*/
;1730:static void PM_Weapon( void ) {
line 1735
;1731:	int		addTime;
;1732:	int		giTag;
;1733:
;1734:	// don't allow attack until all buttons are up
;1735:	if ( pm->ps->pm_flags & PMF_RESPAWNED ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $713
line 1736
;1736:		return;
ADDRGP4 $712
JUMPV
LABELV $713
line 1740
;1737:	}
;1738:
;1739:	// ignore if spectator
;1740:	if ( pm->ps->persistant[PERS_TEAM] == TEAM_SPECTATOR || pm->ps->pm_type == PM_SPECTATOR) {
ADDRLP4 8
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 3
EQI4 $717
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
NEI4 $715
LABELV $717
line 1741
;1741:		return;
ADDRGP4 $712
JUMPV
LABELV $715
line 1745
;1742:	}
;1743:
;1744:	// check for dead player
;1745:	if ( pm->ps->stats[STAT_HEALTH] <= 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $718
line 1746
;1746:		pm->ps->weapon = WP_NONE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
CNSTI4 0
ASGNI4
line 1747
;1747:		return;
ADDRGP4 $712
JUMPV
LABELV $718
line 1751
;1748:	}
;1749:
;1750:	// check for item using
;1751:	if ( pm->cmd.buttons & BUTTON_USE_HOLDABLE ) {
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $720
line 1753
;1752:
;1753:		if ( ! ( pm->ps->pm_flags & PMF_USE_ITEM_HELD ) ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $721
line 1754
;1754:            giTag = GetPlayerHoldable(pm->ps->stats[STAT_HOLDABLE_ITEM]);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ARGI4
ADDRLP4 12
ADDRGP4 GetPlayerHoldable
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
ASGNI4
line 1755
;1755:			if ( giTag == HI_MEDKIT
ADDRLP4 4
INDIRI4
CNSTI4 2
NEI4 $724
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRGP4 mod_medkitlimit
INDIRI4
LTI4 $724
line 1756
;1756:				&& pm->ps->stats[STAT_HEALTH] >= mod_medkitlimit ) {
line 1758
;1757:				// don't use medkit if at max health
;1758:			} else {
ADDRGP4 $712
JUMPV
LABELV $724
line 1759
;1759:				pm->ps->pm_flags |= PMF_USE_ITEM_HELD;
ADDRLP4 16
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 1024
BORI4
ASGNI4
line 1760
;1760:				PM_AddEvent( EV_USE_ITEM0 + giTag );
ADDRLP4 4
INDIRI4
CNSTI4 24
ADDI4
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1761
;1761:				if ( giTag == HI_MEDKIT ){
ADDRLP4 4
INDIRI4
CNSTI4 2
NEI4 $726
line 1762
;1762:					if(mod_medkitinf == 0)
ADDRGP4 mod_medkitinf
INDIRI4
CNSTI4 0
NEI4 $728
line 1763
;1763:					pm->ps->stats[STAT_HOLDABLE_ITEM] &= ~(1 << giTag);
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 4
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
LABELV $728
line 1764
;1764:					if(mod_medkitinf == 2)
ADDRGP4 mod_medkitinf
INDIRI4
CNSTI4 2
NEI4 $730
line 1765
;1765:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_TELEPORTER);
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
LABELV $730
line 1766
;1766:					if(mod_medkitinf == 3)
ADDRGP4 mod_medkitinf
INDIRI4
CNSTI4 3
NEI4 $732
line 1767
;1767:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_MEDKIT);
ADDRLP4 28
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 4
BORI4
ASGNI4
LABELV $732
line 1768
;1768:					if(mod_medkitinf == 4)
ADDRGP4 mod_medkitinf
INDIRI4
CNSTI4 4
NEI4 $734
line 1769
;1769:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_KAMIKAZE);
ADDRLP4 32
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
LABELV $734
line 1770
;1770:					if(mod_medkitinf == 5)
ADDRGP4 mod_medkitinf
INDIRI4
CNSTI4 5
NEI4 $736
line 1771
;1771:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_INVULNERABILITY);
ADDRLP4 36
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
LABELV $736
line 1772
;1772:					if(mod_medkitinf == 6)
ADDRGP4 mod_medkitinf
INDIRI4
CNSTI4 6
NEI4 $712
line 1773
;1773:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_PORTAL);
ADDRLP4 40
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 1774
;1774:				}
ADDRGP4 $712
JUMPV
LABELV $726
line 1775
;1775:				else if ( giTag == HI_TELEPORTER ){
ADDRLP4 4
INDIRI4
CNSTI4 1
NEI4 $740
line 1776
;1776:					if(mod_teleporterinf == 0)
ADDRGP4 mod_teleporterinf
INDIRI4
CNSTI4 0
NEI4 $742
line 1777
;1777:					pm->ps->stats[STAT_HOLDABLE_ITEM] &= ~(1 << giTag);
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 4
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
LABELV $742
line 1778
;1778:					if(mod_teleporterinf == 2)
ADDRGP4 mod_teleporterinf
INDIRI4
CNSTI4 2
NEI4 $744
line 1779
;1779:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_TELEPORTER);
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
LABELV $744
line 1780
;1780:					if(mod_teleporterinf == 3)
ADDRGP4 mod_teleporterinf
INDIRI4
CNSTI4 3
NEI4 $746
line 1781
;1781:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_MEDKIT);
ADDRLP4 28
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 4
BORI4
ASGNI4
LABELV $746
line 1782
;1782:					if(mod_teleporterinf == 4)
ADDRGP4 mod_teleporterinf
INDIRI4
CNSTI4 4
NEI4 $748
line 1783
;1783:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_KAMIKAZE);
ADDRLP4 32
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
LABELV $748
line 1784
;1784:					if(mod_teleporterinf == 5)
ADDRGP4 mod_teleporterinf
INDIRI4
CNSTI4 5
NEI4 $750
line 1785
;1785:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_INVULNERABILITY);
ADDRLP4 36
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
LABELV $750
line 1786
;1786:					if(mod_teleporterinf == 6)
ADDRGP4 mod_teleporterinf
INDIRI4
CNSTI4 6
NEI4 $712
line 1787
;1787:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_PORTAL);
ADDRLP4 40
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 1788
;1788:				}
ADDRGP4 $712
JUMPV
LABELV $740
line 1789
;1789:				else if ( giTag == HI_PORTAL ){
ADDRLP4 4
INDIRI4
CNSTI4 4
NEI4 $754
line 1790
;1790:					if(mod_portalinf == 0)
ADDRGP4 mod_portalinf
INDIRI4
CNSTI4 0
NEI4 $756
line 1791
;1791:					pm->ps->stats[STAT_HOLDABLE_ITEM] &= ~(1 << giTag);
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 4
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
LABELV $756
line 1792
;1792:					if(mod_portalinf == 2)
ADDRGP4 mod_portalinf
INDIRI4
CNSTI4 2
NEI4 $758
line 1793
;1793:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_TELEPORTER);
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
LABELV $758
line 1794
;1794:					if(mod_portalinf == 3)
ADDRGP4 mod_portalinf
INDIRI4
CNSTI4 3
NEI4 $760
line 1795
;1795:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_MEDKIT);
ADDRLP4 28
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 4
BORI4
ASGNI4
LABELV $760
line 1796
;1796:					if(mod_portalinf == 4)
ADDRGP4 mod_portalinf
INDIRI4
CNSTI4 4
NEI4 $762
line 1797
;1797:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_KAMIKAZE);
ADDRLP4 32
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
LABELV $762
line 1798
;1798:					if(mod_portalinf == 5)
ADDRGP4 mod_portalinf
INDIRI4
CNSTI4 5
NEI4 $764
line 1799
;1799:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_INVULNERABILITY);
ADDRLP4 36
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
LABELV $764
line 1800
;1800:					if(mod_portalinf == 6)
ADDRGP4 mod_portalinf
INDIRI4
CNSTI4 6
NEI4 $712
line 1801
;1801:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_PORTAL);
ADDRLP4 40
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 1802
;1802:				}
ADDRGP4 $712
JUMPV
LABELV $754
line 1803
;1803:				else if ( giTag == HI_INVULNERABILITY ){
ADDRLP4 4
INDIRI4
CNSTI4 5
NEI4 $768
line 1804
;1804:					if(mod_invulinf == 0)
ADDRGP4 mod_invulinf
INDIRI4
CNSTI4 0
NEI4 $770
line 1805
;1805:					pm->ps->stats[STAT_HOLDABLE_ITEM] &= ~(1 << giTag);
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 4
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
LABELV $770
line 1806
;1806:					if(mod_invulinf == 2)
ADDRGP4 mod_invulinf
INDIRI4
CNSTI4 2
NEI4 $772
line 1807
;1807:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_TELEPORTER);
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
LABELV $772
line 1808
;1808:					if(mod_invulinf == 3)
ADDRGP4 mod_invulinf
INDIRI4
CNSTI4 3
NEI4 $774
line 1809
;1809:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_MEDKIT);
ADDRLP4 28
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 4
BORI4
ASGNI4
LABELV $774
line 1810
;1810:					if(mod_invulinf == 4)
ADDRGP4 mod_invulinf
INDIRI4
CNSTI4 4
NEI4 $776
line 1811
;1811:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_KAMIKAZE);
ADDRLP4 32
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
LABELV $776
line 1812
;1812:					if(mod_invulinf == 5)
ADDRGP4 mod_invulinf
INDIRI4
CNSTI4 5
NEI4 $778
line 1813
;1813:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_INVULNERABILITY);
ADDRLP4 36
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
LABELV $778
line 1814
;1814:					if(mod_invulinf == 6)
ADDRGP4 mod_invulinf
INDIRI4
CNSTI4 6
NEI4 $712
line 1815
;1815:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_PORTAL);
ADDRLP4 40
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 1816
;1816:				}
ADDRGP4 $712
JUMPV
LABELV $768
line 1817
;1817:				else if ( giTag == HI_KAMIKAZE ){
ADDRLP4 4
INDIRI4
CNSTI4 3
NEI4 $712
line 1818
;1818:					if(mod_kamikazeinf == 0)
ADDRGP4 mod_kamikazeinf
INDIRI4
CNSTI4 0
NEI4 $784
line 1819
;1819:					pm->ps->stats[STAT_HOLDABLE_ITEM] &= ~(1 << giTag);
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
ADDRLP4 4
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
LABELV $784
line 1820
;1820:					if(mod_kamikazeinf == 2)
ADDRGP4 mod_kamikazeinf
INDIRI4
CNSTI4 2
NEI4 $786
line 1821
;1821:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_TELEPORTER);
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
LABELV $786
line 1822
;1822:					if(mod_kamikazeinf == 3)
ADDRGP4 mod_kamikazeinf
INDIRI4
CNSTI4 3
NEI4 $788
line 1823
;1823:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_MEDKIT);
ADDRLP4 28
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 4
BORI4
ASGNI4
LABELV $788
line 1824
;1824:					if(mod_kamikazeinf == 4)
ADDRGP4 mod_kamikazeinf
INDIRI4
CNSTI4 4
NEI4 $790
line 1825
;1825:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_KAMIKAZE);
ADDRLP4 32
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
LABELV $790
line 1826
;1826:					if(mod_kamikazeinf == 5)
ADDRGP4 mod_kamikazeinf
INDIRI4
CNSTI4 5
NEI4 $792
line 1827
;1827:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_INVULNERABILITY);
ADDRLP4 36
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
LABELV $792
line 1828
;1828:					if(mod_kamikazeinf == 6)
ADDRGP4 mod_kamikazeinf
INDIRI4
CNSTI4 6
NEI4 $712
line 1829
;1829:					pm->ps->stats[STAT_HOLDABLE_ITEM] |= (1 << HI_PORTAL);
ADDRLP4 40
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 1830
;1830:				}
line 1831
;1831:			}
line 1832
;1832:			return;
ADDRGP4 $712
JUMPV
line 1834
;1833:		}
;1834:	} else {
LABELV $720
line 1835
;1835:		pm->ps->pm_flags &= ~PMF_USE_ITEM_HELD;
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 -1025
BANDI4
ASGNI4
line 1836
;1836:	}
LABELV $721
line 1840
;1837:
;1838:
;1839:	// make weapon function
;1840:	if ( pm->ps->weaponTime > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $796
line 1841
;1841:		pm->ps->weaponTime -= pml.msec;
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRGP4 pml+40
INDIRI4
SUBI4
ASGNI4
line 1842
;1842:	}
LABELV $796
line 1847
;1843:
;1844:	// check for weapon change
;1845:	// can't change if weapon is firing, but can change
;1846:	// again if lowering or raising
;1847:	if ( pm->ps->weaponTime <= 0 || pm->ps->weaponstate != WEAPON_FIRING ) {
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $801
ADDRLP4 12
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 3
EQI4 $799
LABELV $801
line 1848
;1848:		if ( pm->ps->generic2 != pm->cmd.weapon ) {
ADDRLP4 16
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRU1
CVUI4 1
EQI4 $802
line 1849
;1849:			PM_BeginWeaponChange( pm->cmd.weapon );
ADDRGP4 pm
INDIRP4
CNSTI4 28
ADDP4
INDIRU1
CVUI4 1
ARGI4
ADDRGP4 PM_BeginWeaponChange
CALLV
pop
line 1850
;1850:		}		
LABELV $802
line 1851
;1851:	}
LABELV $799
line 1853
;1852:
;1853:	if ( pm->ps->weaponTime > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
LEI4 $804
line 1854
;1854:		return;
ADDRGP4 $712
JUMPV
LABELV $804
line 1858
;1855:	}
;1856:
;1857:	// change weapon if time
;1858:	if ( pm->ps->weaponstate == WEAPON_DROPPING ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 2
NEI4 $806
line 1859
;1859:		PM_FinishWeaponChange();
ADDRGP4 PM_FinishWeaponChange
CALLV
pop
line 1860
;1860:		return;
ADDRGP4 $712
JUMPV
LABELV $806
line 1863
;1861:	}
;1862:
;1863:	if ( pm->ps->weaponstate == WEAPON_RAISING ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CNSTI4 1
NEI4 $808
line 1864
;1864:		pm->ps->weaponstate = WEAPON_READY;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 1865
;1865:		if ( pm->ps->weapon == WP_GAUNTLET ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
NEI4 $810
line 1866
;1866:			PM_StartTorsoAnim( TORSO_STAND2 );
CNSTI4 12
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 1867
;1867:		} else {
ADDRGP4 $712
JUMPV
LABELV $810
line 1868
;1868:			PM_StartTorsoAnim( TORSO_STAND );
CNSTI4 11
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 1869
;1869:		}
line 1870
;1870:		return;
ADDRGP4 $712
JUMPV
LABELV $808
line 1874
;1871:	}
;1872:
;1873:	// check for fire
;1874:	if ( ! (pm->cmd.buttons & BUTTON_ATTACK) ) {
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $812
line 1875
;1875:		pm->ps->weaponTime = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
CNSTI4 0
ASGNI4
line 1876
;1876:		pm->ps->weaponstate = WEAPON_READY;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 1877
;1877:		return;
ADDRGP4 $712
JUMPV
LABELV $812
line 1880
;1878:	}
;1879:	
;1880:	if(BG_VehicleCheckClass(pm->ps->stats[STAT_VEHICLE]) == VCLASS_CAR){ //VEHICLE-SYSTEM: weapon lock for 1
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 1
NEI4 $814
line 1881
;1881:	if(!BG_GetVehicleSettings(pm->ps->stats[STAT_VEHICLE], VSET_WEAPON)){
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
CNSTI4 2
ARGI4
ADDRLP4 20
ADDRGP4 BG_GetVehicleSettings
CALLF4
ASGNF4
ADDRLP4 20
INDIRF4
CNSTF4 0
NEF4 $816
line 1882
;1882:	return;	
ADDRGP4 $712
JUMPV
LABELV $816
line 1884
;1883:	}
;1884:	}
LABELV $814
line 1887
;1885:
;1886:	// start the animation even if out of ammo
;1887:	if ( pm->ps->weapon == WP_GAUNTLET ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 1
NEI4 $818
line 1889
;1888:		// the guantlet only "fires" when it actually hits something
;1889:		if ( !pm->gauntletHit ) {
ADDRGP4 pm
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 0
NEI4 $820
line 1890
;1890:			pm->ps->weaponTime = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
CNSTI4 0
ASGNI4
line 1891
;1891:			pm->ps->weaponstate = WEAPON_READY;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 0
ASGNI4
line 1892
;1892:			return;
ADDRGP4 $712
JUMPV
LABELV $820
line 1894
;1893:		}
;1894:		PM_StartTorsoAnim( TORSO_ATTACK2 );
CNSTI4 8
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 1895
;1895:	} else {
ADDRGP4 $819
JUMPV
LABELV $818
line 1896
;1896:		PM_StartTorsoAnim( TORSO_ATTACK );
CNSTI4 7
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 1897
;1897:	}
LABELV $819
line 1899
;1898:
;1899:	pm->ps->weaponstate = WEAPON_FIRING;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 148
ADDP4
CNSTI4 3
ASGNI4
line 1901
;1900:
;1901:if( pm->ps->stats[STAT_SWEP] <= 15 ){
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 15
GTI4 $822
line 1903
;1902:	// check for out of ammo
;1903:		if ( ! pm->ps->ammo[ pm->ps->weapon ] ) {
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $823
line 1904
;1904:			PM_AddEvent( EV_NOAMMO );
CNSTI4 21
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1905
;1905:			pm->ps->weaponTime += 500;
ADDRLP4 24
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 1906
;1906:			return;
ADDRGP4 $712
JUMPV
line 1908
;1907:		}
;1908:	} else {
LABELV $822
line 1910
;1909:#ifdef 	QAGAME
;1910:		if(!G_CheckSwepAmmo(pm->ps->clientNum, pm->ps->stats[STAT_SWEP])){
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 G_CheckSwepAmmo
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $826
line 1911
;1911:			PM_AddEvent( EV_NOAMMO );
CNSTI4 21
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1912
;1912:			pm->ps->weaponTime += 500;
ADDRLP4 28
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 1913
;1913:		return;
ADDRGP4 $712
JUMPV
LABELV $826
line 1922
;1914:		}
;1915:#else
;1916:		if(!pm->ps->stats[STAT_SWEPAMMO]){
;1917:			PM_AddEvent( EV_NOAMMO );
;1918:			pm->ps->weaponTime += 500;
;1919:		return;
;1920:		}
;1921:#endif
;1922:}
LABELV $823
line 1924
;1923:
;1924:if ( !(pm->ps->ammo[ pm->ps->weapon ] == -1 || pm->ps->ammo[ pm->ps->weapon ] >=9999)) {
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 20
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 -1
EQI4 $828
ADDRLP4 24
INDIRI4
CNSTI4 9999
GEI4 $828
line 1927
;1925:
;1926:
;1927:if( pm->ps->stats[STAT_SWEP] >= 16 ){
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 16
LTI4 $830
line 1929
;1928:
;1929:} else {
ADDRGP4 $831
JUMPV
LABELV $830
line 1930
;1930:if(pm->ps->ammo[ pm->ps->weapon ] >= 1 ){ pm->ps->ammo[ pm->ps->weapon ]-= 1; }
ADDRLP4 28
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
CNSTI4 1
LTI4 $832
ADDRLP4 32
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 32
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 32
INDIRP4
CNSTI4 376
ADDP4
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $832
line 1931
;1931:}
LABELV $831
line 1933
;1932:
;1933:}
LABELV $828
line 1934
;1934:if( !(pm->ps->stats[STAT_SWEPAMMO] == -1 || pm->ps->stats[STAT_SWEPAMMO] >=9999) ){ 
ADDRLP4 28
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 -1
EQI4 $834
ADDRLP4 28
INDIRI4
CNSTI4 9999
GEI4 $834
line 1935
;1935:if( pm->ps->stats[STAT_SWEP] >= 16 ){
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 16
LTI4 $836
line 1936
;1936:if(pm->s->generic3 >= 1 ){ pm->s->generic3 -= 1; }
ADDRGP4 pm
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 1
LTI4 $838
ADDRLP4 32
ADDRGP4 pm
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CNSTI4 224
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $838
line 1937
;1937:if(pm->ps->stats[STAT_SWEPAMMO] >= 1 ){ pm->ps->stats[STAT_SWEPAMMO] -= 1; }
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 1
LTI4 $840
ADDRLP4 32
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 228
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $840
line 1939
;1938:#ifdef 	QAGAME
;1939:if(G_CheckSwepAmmo(pm->ps->clientNum, pm->ps->stats[STAT_SWEP]) >= 1 ){ 
ADDRLP4 32
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 32
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 G_CheckSwepAmmo
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 1
LTI4 $837
line 1940
;1940:PM_Add_SwepAmmo(pm->ps->clientNum, pm->ps->stats[STAT_SWEP], -1); 
ADDRLP4 40
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
ARGI4
CNSTI4 -1
ARGI4
ADDRGP4 PM_Add_SwepAmmo
CALLI4
pop
line 1941
;1941:}
line 1943
;1942:#endif
;1943:} else {
LABELV $836
line 1945
;1944:
;1945:}
LABELV $837
line 1946
;1946:}
LABELV $834
line 1950
;1947:
;1948:
;1949:// fire weapon
;1950:PM_AddEvent( EV_FIRE_WEAPON );
CNSTI4 23
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 1951
;1951:	switch( pm->ps->stats[STAT_SWEP] ) {
ADDRLP4 32
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 1
LTI4 $844
ADDRLP4 32
INDIRI4
CNSTI4 18
GTI4 $844
ADDRLP4 32
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $865-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $865
address $847
address $848
address $849
address $850
address $851
address $852
address $853
address $854
address $855
address $856
address $857
address $858
address $859
address $860
address $861
address $862
address $863
address $864
code
LABELV $844
LABELV $847
line 1954
;1952:	default:
;1953:	case WP_GAUNTLET:
;1954:		addTime = mod_gdelay;
ADDRLP4 0
ADDRGP4 mod_gdelay
INDIRI4
ASGNI4
line 1955
;1955:		break;
ADDRGP4 $845
JUMPV
LABELV $848
line 1957
;1956:	case WP_MACHINEGUN:
;1957:		addTime = mod_mgdelay;
ADDRLP4 0
ADDRGP4 mod_mgdelay
INDIRI4
ASGNI4
line 1958
;1958:		break;
ADDRGP4 $845
JUMPV
LABELV $849
line 1960
;1959:	case WP_SHOTGUN:
;1960:		addTime = mod_sgdelay;
ADDRLP4 0
ADDRGP4 mod_sgdelay
INDIRI4
ASGNI4
line 1961
;1961:		break;
ADDRGP4 $845
JUMPV
LABELV $850
line 1963
;1962:	case WP_GRENADE_LAUNCHER:
;1963:		addTime = mod_gldelay;
ADDRLP4 0
ADDRGP4 mod_gldelay
INDIRI4
ASGNI4
line 1964
;1964:		break;
ADDRGP4 $845
JUMPV
LABELV $851
line 1966
;1965:	case WP_ROCKET_LAUNCHER:
;1966:		addTime = mod_rldelay;
ADDRLP4 0
ADDRGP4 mod_rldelay
INDIRI4
ASGNI4
line 1967
;1967:		break;
ADDRGP4 $845
JUMPV
LABELV $852
line 1969
;1968:	case WP_LIGHTNING:
;1969:		addTime = mod_lgdelay;
ADDRLP4 0
ADDRGP4 mod_lgdelay
INDIRI4
ASGNI4
line 1970
;1970:		break;
ADDRGP4 $845
JUMPV
LABELV $853
line 1972
;1971:	case WP_RAILGUN:
;1972:		addTime = mod_rgdelay;
ADDRLP4 0
ADDRGP4 mod_rgdelay
INDIRI4
ASGNI4
line 1973
;1973:		break;
ADDRGP4 $845
JUMPV
LABELV $854
line 1975
;1974:	case WP_PLASMAGUN:
;1975:		addTime = mod_pgdelay;
ADDRLP4 0
ADDRGP4 mod_pgdelay
INDIRI4
ASGNI4
line 1976
;1976:		break;
ADDRGP4 $845
JUMPV
LABELV $855
line 1978
;1977:	case WP_BFG:
;1978:		addTime = mod_bfgdelay;
ADDRLP4 0
ADDRGP4 mod_bfgdelay
INDIRI4
ASGNI4
line 1979
;1979:		break;
ADDRGP4 $845
JUMPV
LABELV $856
line 1981
;1980:	case WP_GRAPPLING_HOOK:
;1981:		addTime = 1000;
ADDRLP4 0
CNSTI4 1000
ASGNI4
line 1982
;1982:		break;
ADDRGP4 $845
JUMPV
LABELV $857
line 1984
;1983:	case WP_NAILGUN:
;1984:		addTime = mod_ngdelay;
ADDRLP4 0
ADDRGP4 mod_ngdelay
INDIRI4
ASGNI4
line 1985
;1985:		break;
ADDRGP4 $845
JUMPV
LABELV $858
line 1987
;1986:	case WP_PROX_LAUNCHER:
;1987:		addTime = mod_pldelay;
ADDRLP4 0
ADDRGP4 mod_pldelay
INDIRI4
ASGNI4
line 1988
;1988:		break;
ADDRGP4 $845
JUMPV
LABELV $859
line 1990
;1989:	case WP_CHAINGUN:
;1990:		addTime = mod_cgdelay;
ADDRLP4 0
ADDRGP4 mod_cgdelay
INDIRI4
ASGNI4
line 1991
;1991:		break;
ADDRGP4 $845
JUMPV
LABELV $860
line 1993
;1992:	case WP_FLAMETHROWER:
;1993:		addTime = mod_ftdelay;
ADDRLP4 0
ADDRGP4 mod_ftdelay
INDIRI4
ASGNI4
line 1994
;1994:		break;
ADDRGP4 $845
JUMPV
LABELV $861
line 1996
;1995:	case WP_ANTIMATTER:
;1996:		addTime = mod_amdelay;
ADDRLP4 0
ADDRGP4 mod_amdelay
INDIRI4
ASGNI4
line 1997
;1997:		break;
ADDRGP4 $845
JUMPV
LABELV $862
line 1999
;1998:	case WP_TOOLGUN:
;1999:		addTime = 200;
ADDRLP4 0
CNSTI4 200
ASGNI4
line 2000
;2000:		break;
ADDRGP4 $845
JUMPV
LABELV $863
line 2002
;2001:	case WP_PHYSGUN:
;2002:		addTime = 100;
ADDRLP4 0
CNSTI4 100
ASGNI4
line 2003
;2003:		break;
ADDRGP4 $845
JUMPV
LABELV $864
line 2005
;2004:	case WP_GRAVITYGUN:
;2005:		addTime = 100;
ADDRLP4 0
CNSTI4 100
ASGNI4
line 2006
;2006:		break;
LABELV $845
line 2009
;2007:	}
;2008:
;2009:	if( bg_itemlist[pm->ps->stats[STAT_PERSISTANT_POWERUP]].giTag == PW_SCOUT ) {
CNSTI4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+44
ADDP4
INDIRI4
CNSTI4 10
NEI4 $867
line 2010
;2010:		addTime *= mod_scoutfirespeed;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 mod_scoutfirespeed
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 2011
;2011:	}
ADDRGP4 $868
JUMPV
LABELV $867
line 2012
;2012:	else if( bg_itemlist[pm->ps->stats[STAT_PERSISTANT_POWERUP]].giTag == PW_GUARD ) {
CNSTI4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+44
ADDP4
INDIRI4
CNSTI4 11
NEI4 $870
line 2013
;2013:		addTime *= mod_guardfirespeed;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 mod_guardfirespeed
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 2014
;2014:	}
ADDRGP4 $871
JUMPV
LABELV $870
line 2015
;2015:	else if( bg_itemlist[pm->ps->stats[STAT_PERSISTANT_POWERUP]].giTag == PW_AMMOREGEN ) {
CNSTI4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+44
ADDP4
INDIRI4
CNSTI4 13
NEI4 $873
line 2016
;2016:		addTime *= mod_ammoregenfirespeed;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 mod_ammoregenfirespeed
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 2017
;2017:	}
ADDRGP4 $874
JUMPV
LABELV $873
line 2018
;2018:	else if( bg_itemlist[pm->ps->stats[STAT_PERSISTANT_POWERUP]].giTag == PW_DOUBLER ) {
CNSTI4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+44
ADDP4
INDIRI4
CNSTI4 12
NEI4 $876
line 2019
;2019:		addTime *= mod_doublerfirespeed;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 mod_doublerfirespeed
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 2020
;2020:	}
ADDRGP4 $877
JUMPV
LABELV $876
line 2021
;2021:	else if( bg_itemlist[pm->ps->stats[STAT_PERSISTANT_POWERUP]].giTag == PW_GUARD ) {
CNSTI4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+44
ADDP4
INDIRI4
CNSTI4 11
NEI4 $879
line 2022
;2022:		addTime *= mod_guardfirespeed;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 mod_guardfirespeed
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 2023
;2023:	}
LABELV $879
LABELV $877
LABELV $874
LABELV $871
LABELV $868
line 2024
;2024:	if ( pm->ps->powerups[PW_HASTE] ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 324
ADDP4
INDIRI4
CNSTI4 0
EQI4 $882
line 2025
;2025:		addTime *= mod_hastefirespeed;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 mod_hastefirespeed
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 2026
;2026:	}
LABELV $882
line 2027
;2027:	if ( pm->ps->persistant[PERS_TEAM] == TEAM_BLUE ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 2
NEI4 $884
line 2028
;2028:		addTime *= mod_teamblue_firespeed;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 mod_teamblue_firespeed
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 2029
;2029:	}
LABELV $884
line 2030
;2030:	if ( pm->ps->persistant[PERS_TEAM] == TEAM_RED ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
CNSTI4 1
NEI4 $886
line 2031
;2031:		addTime *= mod_teamred_firespeed;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 mod_teamred_firespeed
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 2032
;2032:	}
LABELV $886
line 2034
;2033:
;2034:if(!BG_VehicleCheckClass(pm->ps->stats[STAT_VEHICLE])){
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
ADDRLP4 40
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $888
line 2035
;2035:	pm->ps->weaponTime += addTime;
ADDRLP4 44
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 2036
;2036:} else {
ADDRGP4 $889
JUMPV
LABELV $888
line 2037
;2037:	pm->ps->weaponTime += addTime * BG_GetVehicleSettings(BG_VehicleCheckClass(pm->ps->stats[STAT_VEHICLE]), VSET_WEAPONRATE);
ADDRLP4 44
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
ARGI4
CNSTI4 3
ARGI4
ADDRLP4 52
ADDRGP4 BG_GetVehicleSettings
CALLF4
ASGNF4
ADDRLP4 56
ADDRLP4 44
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 2038
;2038:}
LABELV $889
line 2039
;2039:}
LABELV $712
endproc PM_Weapon 60 12
proc PM_Animate 4 4
line 2047
;2040:
;2041:/*
;2042:================
;2043:PM_Animate
;2044:================
;2045:*/
;2046:
;2047:static void PM_Animate( void ) {
line 2048
;2048:	if ( pm->cmd.buttons & BUTTON_GESTURE ) {
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $891
line 2049
;2049:		if(!pm->ps->stats[STAT_VEHICLE]){ //VEHICLE-SYSTEM: disable gesture for all
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
NEI4 $893
line 2050
;2050:		if(g_gametype.integer != GT_SINGLE){
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 2
EQI4 $895
line 2051
;2051:		if ( pm->ps->torsoTimer == 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
NEI4 $896
line 2052
;2052:			PM_StartTorsoAnim( TORSO_GESTURE );
CNSTI4 6
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 2053
;2053:			pm->ps->torsoTimer = TIMER_GESTURE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 2294
ASGNI4
line 2054
;2054:			PM_AddEvent( EV_TAUNT );
CNSTI4 77
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 2055
;2055:		}
line 2056
;2056:		} else {
ADDRGP4 $896
JUMPV
LABELV $895
line 2057
;2057:		if ( pm->ps->torsoTimer == 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
NEI4 $900
line 2058
;2058:			PM_StartTorsoAnim( TORSO_ATTACK2 );
CNSTI4 8
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 2059
;2059:			pm->ps->torsoTimer = 600;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 600
ASGNI4
line 2060
;2060:		}
LABELV $900
line 2061
;2061:		}
LABELV $896
line 2062
;2062:		} 
LABELV $893
line 2063
;2063:		if( BG_VehicleCheckClass(pm->ps->stats[STAT_VEHICLE]) == VCLASS_CAR ) { //VEHICLE-SYSTEM: horn for 1
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 BG_VehicleCheckClass
CALLI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 1
NEI4 $892
line 2064
;2064:			if ( pm->ps->torsoTimer == 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
NEI4 $892
line 2065
;2065:		    pm->ps->torsoTimer = 300;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 300
ASGNI4
line 2066
;2066:			PM_AddEvent( EV_HORN );
CNSTI4 103
ARGI4
ADDRGP4 PM_AddEvent
CALLV
pop
line 2067
;2067:			}
line 2068
;2068:		}
line 2069
;2069:	} else if ( pm->cmd.buttons & BUTTON_GETFLAG ) {
ADDRGP4 $892
JUMPV
LABELV $891
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $906
line 2070
;2070:		if ( pm->ps->torsoTimer == 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
NEI4 $907
line 2071
;2071:			PM_StartTorsoAnim( TORSO_GETFLAG );
CNSTI4 25
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 2072
;2072:			pm->ps->torsoTimer = 600;	//TIMER_GESTURE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 600
ASGNI4
line 2073
;2073:		}
line 2074
;2074:	} else if ( pm->cmd.buttons & BUTTON_GUARDBASE ) {
ADDRGP4 $907
JUMPV
LABELV $906
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $910
line 2075
;2075:		if ( pm->ps->torsoTimer == 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
NEI4 $911
line 2076
;2076:			PM_StartTorsoAnim( TORSO_GUARDBASE );
CNSTI4 26
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 2077
;2077:			pm->ps->torsoTimer = 600;	//TIMER_GESTURE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 600
ASGNI4
line 2078
;2078:		}
line 2079
;2079:	} else if ( pm->cmd.buttons & BUTTON_PATROL ) {
ADDRGP4 $911
JUMPV
LABELV $910
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $914
line 2080
;2080:		if ( pm->ps->torsoTimer == 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
NEI4 $915
line 2081
;2081:			PM_StartTorsoAnim( TORSO_PATROL );
CNSTI4 27
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 2082
;2082:			pm->ps->torsoTimer = 600;	//TIMER_GESTURE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 600
ASGNI4
line 2083
;2083:		}
line 2084
;2084:	} else if ( pm->cmd.buttons & BUTTON_FOLLOWME ) {
ADDRGP4 $915
JUMPV
LABELV $914
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $918
line 2085
;2085:		if ( pm->ps->torsoTimer == 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
NEI4 $919
line 2086
;2086:			PM_StartTorsoAnim( TORSO_FOLLOWME );
CNSTI4 28
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 2087
;2087:			pm->ps->torsoTimer = 600;	//TIMER_GESTURE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 600
ASGNI4
line 2088
;2088:		}
line 2089
;2089:	} else if ( pm->cmd.buttons & BUTTON_AFFIRMATIVE ) {
ADDRGP4 $919
JUMPV
LABELV $918
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $922
line 2090
;2090:		if ( pm->ps->torsoTimer == 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
NEI4 $923
line 2091
;2091:			PM_StartTorsoAnim( TORSO_AFFIRMATIVE);
CNSTI4 29
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 2092
;2092:			pm->ps->torsoTimer = 600;	//TIMER_GESTURE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 600
ASGNI4
line 2093
;2093:		}
line 2094
;2094:	} else if ( pm->cmd.buttons & BUTTON_NEGATIVE ) {
ADDRGP4 $923
JUMPV
LABELV $922
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $926
line 2095
;2095:		if ( pm->ps->torsoTimer == 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
NEI4 $928
line 2096
;2096:			PM_StartTorsoAnim( TORSO_ATTACK2 );
CNSTI4 8
ARGI4
ADDRGP4 PM_StartTorsoAnim
CALLV
pop
line 2097
;2097:			pm->ps->torsoTimer = 600;	//TIMER_GESTURE;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 600
ASGNI4
line 2098
;2098:		}
LABELV $928
line 2099
;2099:	}
LABELV $926
LABELV $923
LABELV $919
LABELV $915
LABELV $911
LABELV $907
LABELV $892
line 2100
;2100:}
LABELV $890
endproc PM_Animate 4 4
proc PM_DropTimers 4 0
line 2108
;2101:
;2102:
;2103:/*
;2104:================
;2105:PM_DropTimers
;2106:================
;2107:*/
;2108:static void PM_DropTimers( void ) {
line 2110
;2109:	// drop misc timing counter
;2110:	if ( pm->ps->pm_time ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
EQI4 $931
line 2111
;2111:		if ( pml.msec >= pm->ps->pm_time ) {
ADDRGP4 pml+40
INDIRI4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
LTI4 $933
line 2112
;2112:			pm->ps->pm_flags &= ~PMF_ALL_TIMES;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 -353
BANDI4
ASGNI4
line 2113
;2113:			pm->ps->pm_time = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
CNSTI4 0
ASGNI4
line 2114
;2114:		} else {
ADDRGP4 $934
JUMPV
LABELV $933
line 2115
;2115:			pm->ps->pm_time -= pml.msec;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRGP4 pml+40
INDIRI4
SUBI4
ASGNI4
line 2116
;2116:		}
LABELV $934
line 2117
;2117:	}
LABELV $931
line 2120
;2118:
;2119:	// drop animation counter
;2120:	if ( pm->ps->legsTimer > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 0
LEI4 $937
line 2121
;2121:		pm->ps->legsTimer -= pml.msec;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRGP4 pml+40
INDIRI4
SUBI4
ASGNI4
line 2122
;2122:		if ( pm->ps->legsTimer < 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 72
ADDP4
INDIRI4
CNSTI4 0
GEI4 $940
line 2123
;2123:			pm->ps->legsTimer = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 72
ADDP4
CNSTI4 0
ASGNI4
line 2124
;2124:		}
LABELV $940
line 2125
;2125:	}
LABELV $937
line 2127
;2126:
;2127:	if ( pm->ps->torsoTimer > 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
LEI4 $942
line 2128
;2128:		pm->ps->torsoTimer -= pml.msec;
ADDRLP4 0
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRGP4 pml+40
INDIRI4
SUBI4
ASGNI4
line 2129
;2129:		if ( pm->ps->torsoTimer < 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
INDIRI4
CNSTI4 0
GEI4 $945
line 2130
;2130:			pm->ps->torsoTimer = 0;
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 80
ADDP4
CNSTI4 0
ASGNI4
line 2131
;2131:		}
LABELV $945
line 2132
;2132:	}
LABELV $942
line 2133
;2133:}
LABELV $930
endproc PM_DropTimers 4 0
export PM_UpdateViewAngles
proc PM_UpdateViewAngles 24 0
line 2143
;2134:
;2135:/*
;2136:================
;2137:PM_UpdateViewAngles
;2138:
;2139:This can be used as another entry point when only the viewangles
;2140:are being updated isntead of a full move
;2141:================
;2142:*/
;2143:void PM_UpdateViewAngles( playerState_t *ps, const usercmd_t *cmd ) {
line 2147
;2144:	short		temp;
;2145:	int		i;
;2146:
;2147:	if ( ps->pm_type == PM_CUTSCENE ) {		//prevent player from looking around
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 7
NEI4 $948
line 2149
;2148:      // set the delta angle
;2149:      for (i=0 ; i<3 ; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $950
line 2152
;2150:         int      cmdAngle;
;2151:
;2152:         cmdAngle = ANGLE2SHORT(pm->ps->viewangles[i]);
ADDRLP4 8
CNSTF4 1199570944
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
ADDP4
INDIRF4
MULF4
CNSTF4 1135869952
DIVF4
CVFI4 4
CNSTI4 65535
BANDI4
ASGNI4
line 2153
;2153:         pm->ps->delta_angles[i] = cmdAngle - pm->cmd.angles[i];
ADDRLP4 12
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 16
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 12
INDIRI4
ADDRLP4 16
INDIRP4
INDIRP4
CNSTI4 56
ADDP4
ADDP4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 2154
;2154:      }
LABELV $951
line 2149
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $950
line 2155
;2155:      return;
ADDRGP4 $947
JUMPV
LABELV $948
line 2158
;2156:   }
;2157:
;2158:	if ( ps->pm_type == PM_INTERMISSION || ps->pm_type == PM_SPINTERMISSION) {
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 5
EQI4 $956
ADDRLP4 8
INDIRI4
CNSTI4 6
NEI4 $954
LABELV $956
line 2159
;2159:		return;		// no view changes at all
ADDRGP4 $947
JUMPV
LABELV $954
line 2162
;2160:	}
;2161:
;2162:	if ( ps->pm_type != PM_SPECTATOR && ps->stats[STAT_HEALTH] <= 0 ) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
EQI4 $957
ADDRLP4 12
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $957
line 2163
;2163:		return;		// no view changes at all
ADDRGP4 $947
JUMPV
LABELV $957
line 2167
;2164:	}
;2165:
;2166:	// circularly clamp the angles with deltas
;2167:	for (i=0 ; i<3 ; i++) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $959
line 2168
;2168:		temp = cmd->angles[i] + ps->delta_angles[i];
ADDRLP4 16
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 4
ADDRLP4 16
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
ADDRLP4 16
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDP4
INDIRI4
ADDI4
CVII2 4
ASGNI2
line 2169
;2169:		if ( i == PITCH ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $963
line 2171
;2170:			// don't let the player look up or down more than 90 degrees
;2171:			if ( temp > 16000 ) {
ADDRLP4 4
INDIRI2
CVII4 2
CNSTI4 16000
LEI4 $965
line 2172
;2172:				ps->delta_angles[i] = 16000 - cmd->angles[i];
ADDRLP4 20
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 20
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDP4
CNSTI4 16000
ADDRLP4 20
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 2173
;2173:				temp = 16000;
ADDRLP4 4
CNSTI2 16000
ASGNI2
line 2174
;2174:			} else if ( temp < -16000 ) {
ADDRGP4 $966
JUMPV
LABELV $965
ADDRLP4 4
INDIRI2
CVII4 2
CNSTI4 -16000
GEI4 $967
line 2175
;2175:				ps->delta_angles[i] = -16000 - cmd->angles[i];
ADDRLP4 20
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 20
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDP4
CNSTI4 -16000
ADDRLP4 20
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 4
ADDP4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 2176
;2176:				temp = -16000;
ADDRLP4 4
CNSTI2 -16000
ASGNI2
line 2177
;2177:			}
LABELV $967
LABELV $966
line 2178
;2178:		}
LABELV $963
line 2179
;2179:		ps->viewangles[i] = SHORT2ANGLE(temp);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDP4
CNSTF4 1001652224
ADDRLP4 4
INDIRI2
CVII4 2
CVIF4 4
MULF4
ASGNF4
line 2180
;2180:	}
LABELV $960
line 2167
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $959
line 2182
;2181:
;2182:}
LABELV $947
endproc PM_UpdateViewAngles 24 0
proc PM_LadderMove 72 16
line 2194
;2183:
;2184:
;2185:/*
;2186:===================
;2187:PM_LadderMove()
;2188:by: Calrathan [Arthur Tomlin]
;2189:
;2190:Right now all I know is that this works for VERTICAL ladders. 
;2191:Ladders with angles on them (urban2 for AQ2) haven't been tested.
;2192:===================
;2193:*/
;2194:static void PM_LadderMove( void ) {
line 2202
;2195:	int i;
;2196:	vec3_t wishvel;
;2197:	float wishspeed;
;2198:	vec3_t wishdir;
;2199:	float scale;
;2200:	float vel;
;2201:
;2202:	PM_Friction ();
ADDRGP4 PM_Friction
CALLV
pop
line 2204
;2203:
;2204:	scale = PM_CmdScale( &pm->cmd );
ADDRGP4 pm
INDIRP4
CNSTI4 8
ADDP4
ARGP4
ADDRLP4 40
ADDRGP4 PM_CmdScale
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 40
INDIRF4
ASGNF4
line 2207
;2205:
;2206:	// user intentions [what the user is attempting to do]
;2207:	if ( !scale ) { 
ADDRLP4 4
INDIRF4
CNSTF4 0
NEF4 $970
line 2208
;2208:		wishvel[0] = 0;
ADDRLP4 8
CNSTF4 0
ASGNF4
line 2209
;2209:		wishvel[1] = 0;
ADDRLP4 8+4
CNSTF4 0
ASGNF4
line 2210
;2210:		wishvel[2] = 0;
ADDRLP4 8+8
CNSTF4 0
ASGNF4
line 2211
;2211:	}
ADDRGP4 $971
JUMPV
LABELV $970
line 2212
;2212:	else {   // if they're trying to move... lets calculate it
line 2213
;2213:		for (i=0 ; i<3 ; i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $974
line 2214
;2214:			wishvel[i] = scale * pml.forward[i]*pm->cmd.forwardmove +
ADDRLP4 44
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 52
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 44
INDIRI4
ADDRLP4 8
ADDP4
ADDRLP4 4
INDIRF4
ADDRLP4 44
INDIRI4
ADDRGP4 pml
ADDP4
INDIRF4
MULF4
ADDRLP4 52
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDRLP4 4
INDIRF4
ADDRLP4 44
INDIRI4
ADDRGP4 pml+12
ADDP4
INDIRF4
MULF4
ADDRLP4 52
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDF4
ASGNF4
LABELV $975
line 2213
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $974
line 2216
;2215:				     scale * pml.right[i]*pm->cmd.rightmove; 
;2216:		wishvel[2] += scale * pm->cmd.upmove;
ADDRLP4 8+8
ADDRLP4 8+8
INDIRF4
ADDRLP4 4
INDIRF4
ADDRGP4 pm
INDIRP4
CNSTI4 31
ADDP4
INDIRI1
CVII4 1
CVIF4 4
MULF4
ADDF4
ASGNF4
line 2217
;2217:	}
LABELV $971
line 2219
;2218:
;2219:	VectorCopy (wishvel, wishdir);
ADDRLP4 24
ADDRLP4 8
INDIRB
ASGNB 12
line 2220
;2220:	wishspeed = VectorNormalize(wishdir);
ADDRLP4 24
ARGP4
ADDRLP4 44
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 20
ADDRLP4 44
INDIRF4
ASGNF4
line 2222
;2221:
;2222:	if ( wishspeed > pm->ps->speed * pm_ladderScale ) {
ADDRLP4 20
INDIRF4
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pm_ladderScale
INDIRF4
MULF4
LEF4 $980
line 2223
;2223:		wishspeed = pm->ps->speed * pm_ladderScale;
ADDRLP4 20
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 pm_ladderScale
INDIRF4
MULF4
ASGNF4
line 2224
;2224:	}
LABELV $980
line 2226
;2225:
;2226:	PM_Accelerate (wishdir, wishspeed, pm_ladderAccelerate);
ADDRLP4 24
ARGP4
ADDRLP4 20
INDIRF4
ARGF4
ADDRGP4 pm_ladderAccelerate
INDIRF4
ARGF4
ADDRGP4 PM_Accelerate
CALLV
pop
line 2229
;2227:
;2228:	// This SHOULD help us with sloped ladders, but it remains untested.
;2229:	if ( pml.groundPlane && DotProduct( pm->ps->velocity,
ADDRGP4 pml+48
INDIRI4
CNSTI4 0
EQI4 $982
ADDRLP4 48
ADDRGP4 pm
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRGP4 pml+52+24
INDIRF4
MULF4
ADDRLP4 48
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ADDRGP4 pml+52+24+4
INDIRF4
MULF4
ADDF4
ADDRLP4 48
INDIRP4
CNSTI4 40
ADDP4
INDIRF4
ADDRGP4 pml+52+24+8
INDIRF4
MULF4
ADDF4
CNSTF4 0
GEF4 $982
line 2231
;2230:		pml.groundTrace.plane.normal ) < 0 ) {
;2231:		vel = VectorLength(pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 52
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 36
ADDRLP4 52
INDIRF4
ASGNF4
line 2233
;2232:		// slide along the ground plane [the ladder section under our feet] 
;2233:		PM_ClipVelocity (pm->ps->velocity, pml.groundTrace.plane.normal, 
ADDRLP4 56
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ARGP4
ADDRGP4 pml+52+24
ARGP4
ADDRLP4 56
INDIRP4
ARGP4
CNSTF4 1065361605
ARGF4
ADDRGP4 PM_ClipVelocity
CALLV
pop
line 2236
;2234:			pm->ps->velocity, OVERCLIP );
;2235:
;2236:		VectorNormalize(pm->ps->velocity);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2237
;2237:		VectorScale(pm->ps->velocity, vel, pm->ps->velocity);
ADDRLP4 60
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
ADDRLP4 64
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
ADDRLP4 68
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
line 2238
;2238:	}
LABELV $982
line 2240
;2239:
;2240:	PM_SlideMove( qfalse ); // move without gravity
CNSTI4 0
ARGI4
ADDRGP4 PM_SlideMove
CALLI4
pop
line 2241
;2241:}
LABELV $969
endproc PM_LadderMove 72 16
export CheckLadder
proc CheckLadder 96 28
line 2250
;2242:
;2243:
;2244:/*
;2245:=============
;2246:CheckLadder [ ARTHUR TOMLIN ]
;2247:=============
;2248:*/
;2249:void CheckLadder( void )
;2250:{
line 2253
;2251:	vec3_t flatforward,spot;
;2252:	trace_t trace;
;2253:	pml.ladder = qfalse;
ADDRGP4 pml+108
CNSTI4 0
ASGNI4
line 2255
;2254:	// check for ladder
;2255:	flatforward[0] = pml.forward[0];
ADDRLP4 0
ADDRGP4 pml
INDIRF4
ASGNF4
line 2256
;2256:	flatforward[1] = pml.forward[1];
ADDRLP4 0+4
ADDRGP4 pml+4
INDIRF4
ASGNF4
line 2257
;2257:	flatforward[2] = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 2258
;2258:	VectorNormalize (flatforward);
ADDRLP4 0
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 2259
;2259:	VectorMA (pm->ps->origin, 1, flatforward, spot);
ADDRLP4 80
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 84
CNSTF4 1065353216
ASGNF4
ADDRLP4 12
ADDRLP4 80
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 84
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 80
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 84
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 12+8
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 1065353216
ADDRLP4 0+8
INDIRF4
MULF4
ADDF4
ASGNF4
line 2260
;2260:	pm->trace (&trace, pm->ps->origin, pm->mins, pm->maxs, spot,
ADDRLP4 24
ARGP4
ADDRLP4 88
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 92
ADDRLP4 88
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 88
INDIRP4
CNSTI4 184
ADDP4
ARGP4
ADDRLP4 88
INDIRP4
CNSTI4 196
ADDP4
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 92
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ARGI4
CNSTI4 33619969
ARGI4
ADDRLP4 88
INDIRP4
CNSTI4 236
ADDP4
INDIRP4
CALLV
pop
line 2263
;2261:		pm->ps->clientNum, MASK_PLAYERSOLID);
;2262:
;2263:	if ((trace.fraction < 1) && (trace.surfaceFlags & SURF_LADDER))
ADDRLP4 24+8
INDIRF4
CNSTF4 1065353216
GEF4 $1004
ADDRLP4 24+44
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $1004
line 2264
;2264:		pml.ladder = qtrue;
ADDRGP4 pml+108
CNSTI4 1
ASGNI4
LABELV $1004
line 2266
;2265:
;2266:}
LABELV $995
endproc CheckLadder 96 28
export PmoveSingle
proc PmoveSingle 64 16
line 2278
;2267:
;2268:
;2269:
;2270:/*
;2271:================
;2272:PmoveSingle
;2273:
;2274:================
;2275:*/
;2276:void trap_SnapVector( float *v );
;2277:
;2278:void PmoveSingle (pmove_t *pmove) {
line 2279
;2279:	pm = pmove;
ADDRGP4 pm
ADDRFP4 0
INDIRP4
ASGNP4
line 2283
;2280:
;2281:	// this counter lets us debug movement problems with a journal
;2282:	// by setting a conditional breakpoint fot the previous frame
;2283:	c_pmove++;
ADDRLP4 0
ADDRGP4 c_pmove
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2286
;2284:
;2285:	// clear results
;2286:	pm->numtouch = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 52
ADDP4
CNSTI4 0
ASGNI4
line 2287
;2287:	pm->watertype = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 208
ADDP4
CNSTI4 0
ASGNI4
line 2288
;2288:	pm->waterlevel = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
CNSTI4 0
ASGNI4
line 2290
;2289:
;2290:	if ( pm->ps->stats[STAT_HEALTH] <= 0 ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $1010
line 2291
;2291:		pm->tracemask &= ~CONTENTS_BODY;	// corpses can fly through bodies
ADDRLP4 4
ADDRGP4 pm
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -33554433
BANDI4
ASGNI4
line 2292
;2292:	}
LABELV $1010
line 2293
;2293:	if ( mod_noplayerclip == 1 ) {
ADDRGP4 mod_noplayerclip
INDIRI4
CNSTI4 1
NEI4 $1012
line 2294
;2294:		pm->tracemask &= ~CONTENTS_PLAYERCLIP;	// corpses can fly through bodies
ADDRLP4 4
ADDRGP4 pm
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -65537
BANDI4
ASGNI4
line 2295
;2295:	}
LABELV $1012
line 2299
;2296:
;2297:	// make sure walking button is clear if they are running, to avoid
;2298:	// proxy no-footsteps cheats
;2299:	if ( abs( pm->cmd.forwardmove ) > 64 || abs( pm->cmd.rightmove ) > 64 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 4
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 64
GTI4 $1016
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRLP4 8
ADDRGP4 abs
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 64
LEI4 $1014
LABELV $1016
line 2300
;2300:		pm->cmd.buttons &= ~BUTTON_WALKING;
ADDRLP4 12
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 -17
BANDI4
ASGNI4
line 2301
;2301:	}
LABELV $1014
line 2304
;2302:
;2303:	// set the talk balloon flag
;2304:	if ( pm->cmd.buttons & BUTTON_TALK ) {
ADDRGP4 pm
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1017
line 2305
;2305:		pm->ps->eFlags |= EF_TALK;
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 4096
BORI4
ASGNI4
line 2306
;2306:	} else {
ADDRGP4 $1018
JUMPV
LABELV $1017
line 2307
;2307:		pm->ps->eFlags &= ~EF_TALK;
ADDRLP4 12
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 -4097
BANDI4
ASGNI4
line 2308
;2308:	}
LABELV $1018
line 2311
;2309:
;2310:	// set the firing flag for continuous beam weapons
;2311:	if ( !(pm->ps->pm_flags & PMF_RESPAWNED) && pm->ps->pm_type != PM_INTERMISSION && pm->ps->pm_type != PM_CUTSCENE
ADDRLP4 12
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 12
INDIRP4
INDIRP4
ASGNP4
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 512
BANDI4
ADDRLP4 20
INDIRI4
NEI4 $1019
ADDRLP4 24
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 5
EQI4 $1019
ADDRLP4 24
INDIRI4
CNSTI4 7
EQI4 $1019
ADDRLP4 12
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 1
BANDI4
ADDRLP4 20
INDIRI4
EQI4 $1019
ADDRLP4 16
INDIRP4
CNSTI4 144
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $1021
ADDRLP4 16
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
EQI4 $1019
LABELV $1021
line 2312
;2312:		&& ( pm->cmd.buttons & BUTTON_ATTACK ) && (pm->ps->ammo[ pm->ps->weapon ] || pm->ps->stats[STAT_SWEPAMMO]) ) {
line 2313
;2313:		pm->ps->eFlags |= EF_FIRING;
ADDRLP4 28
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 2314
;2314:	} else {
ADDRGP4 $1020
JUMPV
LABELV $1019
line 2315
;2315:		pm->ps->eFlags &= ~EF_FIRING;
ADDRLP4 28
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 -257
BANDI4
ASGNI4
line 2316
;2316:	}
LABELV $1020
line 2319
;2317:
;2318:	// clear the respawned flag if attack and use are cleared
;2319:	if ( pm->ps->stats[STAT_HEALTH] > 0 &&
ADDRLP4 28
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRLP4 28
INDIRP4
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
ADDRLP4 32
INDIRI4
LEI4 $1022
ADDRLP4 28
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 5
BANDI4
ADDRLP4 32
INDIRI4
NEI4 $1022
line 2320
;2320:		!( pm->cmd.buttons & (BUTTON_ATTACK | BUTTON_USE_HOLDABLE) ) ) {
line 2321
;2321:		pm->ps->pm_flags &= ~PMF_RESPAWNED;
ADDRLP4 36
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 -513
BANDI4
ASGNI4
line 2322
;2322:	}
LABELV $1022
line 2327
;2323:
;2324:	// if talk button is down, dissallow all other input
;2325:	// this is to prevent any possible intercept proxy from
;2326:	// adding fake talk balloons
;2327:	if ( pmove->cmd.buttons & BUTTON_TALK ) {
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1024
line 2330
;2328:		// keep the talk button set tho for when the cmd.serverTime > 66 msec
;2329:		// and the same cmd is used multiple times in Pmove
;2330:		pmove->cmd.buttons = BUTTON_TALK;
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
CNSTI4 2
ASGNI4
line 2331
;2331:		pmove->cmd.forwardmove = 0;
ADDRFP4 0
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 2332
;2332:		pmove->cmd.rightmove = 0;
ADDRFP4 0
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 2333
;2333:		pmove->cmd.upmove = 0;
ADDRFP4 0
INDIRP4
CNSTI4 31
ADDP4
CNSTI1 0
ASGNI1
line 2334
;2334:	}
LABELV $1024
line 2337
;2335:
;2336:	// clear all pmove local vars
;2337:	memset (&pml, 0, sizeof(pml));
ADDRGP4 pml
ARGP4
CNSTI4 0
ARGI4
CNSTI4 144
ARGI4
ADDRGP4 memset
CALLP4
pop
line 2340
;2338:
;2339:	// determine the time
;2340:	pml.msec = pmove->cmd.serverTime - pm->ps->commandTime;
ADDRGP4 pml+40
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDRGP4 pm
INDIRP4
INDIRP4
INDIRI4
SUBI4
ASGNI4
line 2341
;2341:	if ( pml.msec < 1 ) {
ADDRGP4 pml+40
INDIRI4
CNSTI4 1
GEI4 $1027
line 2342
;2342:		pml.msec = 1;
ADDRGP4 pml+40
CNSTI4 1
ASGNI4
line 2343
;2343:	} else if ( pml.msec > 200 ) {
ADDRGP4 $1028
JUMPV
LABELV $1027
ADDRGP4 pml+40
INDIRI4
CNSTI4 200
LEI4 $1031
line 2344
;2344:		pml.msec = 200;
ADDRGP4 pml+40
CNSTI4 200
ASGNI4
line 2345
;2345:	}
LABELV $1031
LABELV $1028
line 2346
;2346:	pm->ps->commandTime = pmove->cmd.serverTime;
ADDRGP4 pm
INDIRP4
INDIRP4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 2349
;2347:
;2348:	// save old org in case we get stuck
;2349:	VectorCopy (pm->ps->origin, pml.previous_origin);
ADDRGP4 pml+116
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRB
ASGNB 12
line 2352
;2350:
;2351:	// save old velocity for crashlanding
;2352:	VectorCopy (pm->ps->velocity, pml.previous_velocity);
ADDRGP4 pml+128
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
INDIRB
ASGNB 12
line 2354
;2353:
;2354:	pml.frametime = pml.msec * 0.001;
ADDRGP4 pml+36
CNSTF4 981668463
ADDRGP4 pml+40
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 2357
;2355:
;2356:	// update the viewangles
;2357:	PM_UpdateViewAngles( pm->ps, &pm->cmd );
ADDRLP4 36
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRP4
ARGP4
ADDRLP4 36
INDIRP4
CNSTI4 8
ADDP4
ARGP4
ADDRGP4 PM_UpdateViewAngles
CALLV
pop
line 2359
;2358:
;2359:	AngleVectors (pm->ps->viewangles, pml.forward, pml.right, pml.up);
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRGP4 pml
ARGP4
ADDRGP4 pml+12
ARGP4
ADDRGP4 pml+24
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 2361
;2360:
;2361:	if ( pm->cmd.upmove < 10 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 31
ADDP4
INDIRI1
CVII4 1
CNSTI4 10
GEI4 $1041
line 2363
;2362:		// not holding jump
;2363:		pm->ps->pm_flags &= ~PMF_JUMP_HELD;
ADDRLP4 40
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 -3
BANDI4
ASGNI4
line 2364
;2364:	}
LABELV $1041
line 2367
;2365:
;2366:	// decide if backpedaling animations should be used
;2367:	if ( pm->cmd.forwardmove < 0 ) {
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
CNSTI4 0
GEI4 $1043
line 2368
;2368:		pm->ps->pm_flags |= PMF_BACKWARDS_RUN;
ADDRLP4 40
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
line 2369
;2369:	} else if ( pm->cmd.forwardmove > 0 || ( pm->cmd.forwardmove == 0 && pm->cmd.rightmove ) ) {
ADDRGP4 $1044
JUMPV
LABELV $1043
ADDRLP4 40
ADDRGP4 pm
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 29
ADDP4
INDIRI1
CVII4 1
ASGNI4
ADDRLP4 48
CNSTI4 0
ASGNI4
ADDRLP4 44
INDIRI4
ADDRLP4 48
INDIRI4
GTI4 $1047
ADDRLP4 44
INDIRI4
ADDRLP4 48
INDIRI4
NEI4 $1045
ADDRLP4 40
INDIRP4
CNSTI4 30
ADDP4
INDIRI1
CVII4 1
ADDRLP4 48
INDIRI4
EQI4 $1045
LABELV $1047
line 2370
;2370:		pm->ps->pm_flags &= ~PMF_BACKWARDS_RUN;
ADDRLP4 52
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 -17
BANDI4
ASGNI4
line 2371
;2371:	}
LABELV $1045
LABELV $1044
line 2373
;2372:
;2373:	if ( pm->ps->pm_type >= PM_DEAD ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
LTI4 $1048
line 2374
;2374:		pm->cmd.forwardmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 29
ADDP4
CNSTI1 0
ASGNI1
line 2375
;2375:		pm->cmd.rightmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 30
ADDP4
CNSTI1 0
ASGNI1
line 2376
;2376:		pm->cmd.upmove = 0;
ADDRGP4 pm
INDIRP4
CNSTI4 31
ADDP4
CNSTI1 0
ASGNI1
line 2377
;2377:	}
LABELV $1048
line 2379
;2378:
;2379:	if ( pm->ps->pm_type == PM_SPECTATOR ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
NEI4 $1050
line 2380
;2380:		PM_CheckDuck ();
ADDRGP4 PM_CheckDuck
CALLV
pop
line 2381
;2381:		PM_FlyMove ();
ADDRGP4 PM_FlyMove
CALLV
pop
line 2382
;2382:		PM_DropTimers ();
ADDRGP4 PM_DropTimers
CALLV
pop
line 2383
;2383:		return;
ADDRGP4 $1009
JUMPV
LABELV $1050
line 2386
;2384:	}
;2385:
;2386:	if ( pm->ps->pm_type == PM_NOCLIP ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $1052
line 2387
;2387:		PM_NoclipMove ();
ADDRGP4 PM_NoclipMove
CALLV
pop
line 2388
;2388:		PM_DropTimers ();
ADDRGP4 PM_DropTimers
CALLV
pop
line 2389
;2389:		PM_Weapon();
ADDRGP4 PM_Weapon
CALLV
pop
line 2390
;2390:		PM_Animate();
ADDRGP4 PM_Animate
CALLV
pop
line 2391
;2391:		PM_CheckDuck ();
ADDRGP4 PM_CheckDuck
CALLV
pop
line 2392
;2392:		PM_GroundTrace();
ADDRGP4 PM_GroundTrace
CALLV
pop
line 2393
;2393:		PM_TorsoAnimation();
ADDRGP4 PM_TorsoAnimation
CALLV
pop
line 2394
;2394:		return;
ADDRGP4 $1009
JUMPV
LABELV $1052
line 2397
;2395:	}
;2396:
;2397:	if (pm->ps->pm_type == PM_FREEZE || pm->ps->pm_type == PM_CUTSCENE) {
ADDRLP4 52
CNSTI4 4
ASGNI4
ADDRLP4 56
ADDRGP4 pm
INDIRP4
INDIRP4
ADDRLP4 52
INDIRI4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 56
INDIRI4
ADDRLP4 52
INDIRI4
EQI4 $1056
ADDRLP4 56
INDIRI4
CNSTI4 7
NEI4 $1054
LABELV $1056
line 2398
;2398:		PM_CheckDuck();	//to make the player stand up, otherwise he'll be in a crouched position
ADDRGP4 PM_CheckDuck
CALLV
pop
line 2399
;2399:		return;		// no movement at all
ADDRGP4 $1009
JUMPV
LABELV $1054
line 2402
;2400:	}
;2401:
;2402:	if ( pm->ps->pm_type == PM_INTERMISSION || pm->ps->pm_type == PM_SPINTERMISSION) {
ADDRLP4 60
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 5
EQI4 $1059
ADDRLP4 60
INDIRI4
CNSTI4 6
NEI4 $1057
LABELV $1059
line 2403
;2403:		return;		// no movement at all
ADDRGP4 $1009
JUMPV
LABELV $1057
line 2407
;2404:	}
;2405:
;2406:	// set watertype, and waterlevel
;2407:	PM_SetWaterLevel();
ADDRGP4 PM_SetWaterLevel
CALLV
pop
line 2408
;2408:	pml.previous_waterlevel = pmove->waterlevel;
ADDRGP4 pml+140
ADDRFP4 0
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
ASGNI4
line 2411
;2409:
;2410:	// set mins, maxs, and viewheight
;2411:	PM_CheckDuck ();
ADDRGP4 PM_CheckDuck
CALLV
pop
line 2414
;2412:
;2413:	// set groundentity
;2414:	PM_GroundTrace();
ADDRGP4 PM_GroundTrace
CALLV
pop
line 2416
;2415:
;2416:	if ( pm->ps->pm_type == PM_DEAD ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $1061
line 2417
;2417:		PM_DeadMove ();
ADDRGP4 PM_DeadMove
CALLV
pop
line 2418
;2418:	}
LABELV $1061
line 2420
;2419:
;2420:	PM_DropTimers();
ADDRGP4 PM_DropTimers
CALLV
pop
line 2421
;2421:	CheckLadder();  // ARTHUR TOMLIN check and see if they're on a ladder
ADDRGP4 CheckLadder
CALLV
pop
line 2423
;2422:
;2423:	if ( pm->ps->powerups[PW_INVULNERABILITY] ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 368
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1063
line 2424
;2424:		PM_InvulnerabilityMove();
ADDRGP4 PM_InvulnerabilityMove
CALLV
pop
line 2425
;2425:	} else
ADDRGP4 $1064
JUMPV
LABELV $1063
line 2426
;2426:	if ( pm->ps->powerups[PW_FLIGHT] ) {
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 336
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1065
line 2428
;2427:		// flight powerup doesn't allow jump and has different friction
;2428:		PM_FlyMove();
ADDRGP4 PM_FlyMove
CALLV
pop
line 2429
;2429:	} else if (pm->ps->pm_flags & PMF_GRAPPLE_PULL) {
ADDRGP4 $1066
JUMPV
LABELV $1065
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $1067
line 2430
;2430:		PM_GrappleMove();
ADDRGP4 PM_GrappleMove
CALLV
pop
line 2432
;2431:		// We can wiggle a bit
;2432:		PM_AirMove();
ADDRGP4 PM_AirMove
CALLV
pop
line 2433
;2433:	} else if (pm->ps->pm_flags & PMF_TIME_WATERJUMP) {
ADDRGP4 $1068
JUMPV
LABELV $1067
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $1069
line 2434
;2434:		PM_WaterJumpMove();
ADDRGP4 PM_WaterJumpMove
CALLV
pop
line 2435
;2435:	} else if ( pm->waterlevel > 1 ) {
ADDRGP4 $1070
JUMPV
LABELV $1069
ADDRGP4 pm
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 1
LEI4 $1071
line 2437
;2436:		// swimming
;2437:		PM_WaterMove();
ADDRGP4 PM_WaterMove
CALLV
pop
line 2438
;2438:	} else if (pml.ladder) {	
ADDRGP4 $1072
JUMPV
LABELV $1071
ADDRGP4 pml+108
INDIRI4
CNSTI4 0
EQI4 $1073
line 2439
;2439:		PM_LadderMove();
ADDRGP4 PM_LadderMove
CALLV
pop
line 2440
;2440:	} else if ( pml.walking ) {
ADDRGP4 $1074
JUMPV
LABELV $1073
ADDRGP4 pml+44
INDIRI4
CNSTI4 0
EQI4 $1076
line 2442
;2441:		// walking on ground
;2442:		PM_WalkMove();
ADDRGP4 PM_WalkMove
CALLV
pop
line 2443
;2443:	} else {
ADDRGP4 $1077
JUMPV
LABELV $1076
line 2445
;2444:		// airborne
;2445:		PM_AirMove();
ADDRGP4 PM_AirMove
CALLV
pop
line 2446
;2446:	}
LABELV $1077
LABELV $1074
LABELV $1072
LABELV $1070
LABELV $1068
LABELV $1066
LABELV $1064
line 2448
;2447:
;2448:	PM_Animate();
ADDRGP4 PM_Animate
CALLV
pop
line 2451
;2449:
;2450:	// set groundentity, watertype, and waterlevel
;2451:	PM_GroundTrace();
ADDRGP4 PM_GroundTrace
CALLV
pop
line 2452
;2452:	PM_SetWaterLevel();
ADDRGP4 PM_SetWaterLevel
CALLV
pop
line 2455
;2453:
;2454:	// weapons
;2455:	if(!(pm->ps->pm_flags & PMF_ELIMWARMUP))
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 32768
BANDI4
CNSTI4 0
NEI4 $1079
line 2456
;2456:	PM_Weapon();
ADDRGP4 PM_Weapon
CALLV
pop
LABELV $1079
line 2459
;2457:
;2458:	// torso animation
;2459:	PM_TorsoAnimation();
ADDRGP4 PM_TorsoAnimation
CALLV
pop
line 2462
;2460:
;2461:	// footstep events / legs animations
;2462:	if(!pm->ps->stats[STAT_VEHICLE]) {	//VEHICLE-SYSTEM: footsteps lock for all
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 232
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1081
line 2463
;2463:	PM_Footsteps();
ADDRGP4 PM_Footsteps
CALLV
pop
line 2464
;2464:	}
LABELV $1081
line 2467
;2465:
;2466:	// entering / leaving water splashes
;2467:	PM_WaterEvents();
ADDRGP4 PM_WaterEvents
CALLV
pop
line 2471
;2468:
;2469:	// snap some parts of playerstate to save network bandwidth
;2470:        //But only if pmove_float is not enabled
;2471:        if(!(pm->pmove_float))
ADDRGP4 pm
INDIRP4
CNSTI4 228
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1083
line 2472
;2472:            trap_SnapVector( pm->ps->velocity );
ADDRGP4 pm
INDIRP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRGP4 trap_SnapVector
CALLV
pop
LABELV $1083
line 2473
;2473:}
LABELV $1009
endproc PmoveSingle 64 16
export Pmove
proc Pmove 16 4
line 2483
;2474:
;2475:
;2476:/*
;2477:================
;2478:Pmove
;2479:
;2480:Can be called by either the server or the client
;2481:================
;2482:*/
;2483:void Pmove (pmove_t *pmove) {
line 2486
;2484:	int			finalTime;
;2485:
;2486:	finalTime = pmove->cmd.serverTime;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 2488
;2487:
;2488:	if ( finalTime < pmove->ps->commandTime ) {
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
INDIRP4
INDIRI4
GEI4 $1086
line 2489
;2489:		return;	// should not happen
ADDRGP4 $1085
JUMPV
LABELV $1086
line 2492
;2490:	}
;2491:
;2492:	if ( finalTime > pmove->ps->commandTime + 1000 ) {
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
INDIRP4
INDIRI4
CNSTI4 1000
ADDI4
LEI4 $1088
line 2493
;2493:		pmove->ps->commandTime = finalTime - 1000;
ADDRFP4 0
INDIRP4
INDIRP4
ADDRLP4 0
INDIRI4
CNSTI4 1000
SUBI4
ASGNI4
line 2494
;2494:	}
LABELV $1088
line 2496
;2495:
;2496:	pmove->ps->pmove_framecount = (pmove->ps->pmove_framecount+1) & ((1<<PS_PMOVEFRAMECOUNTBITS)-1);
ADDRLP4 4
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 460
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 63
BANDI4
ASGNI4
ADDRGP4 $1091
JUMPV
LABELV $1090
line 2500
;2497:
;2498:	// chop the move up if it is too long, to prevent framerate
;2499:	// dependent behavior
;2500:	while ( pmove->ps->commandTime != finalTime ) {
line 2503
;2501:		int		msec;
;2502:
;2503:		msec = finalTime - pmove->ps->commandTime;
ADDRLP4 8
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
INDIRP4
INDIRI4
SUBI4
ASGNI4
line 2505
;2504:
;2505:		if ( pmove->pmove_fixed ) {
ADDRFP4 0
INDIRP4
CNSTI4 220
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1093
line 2506
;2506:			if ( msec > pmove->pmove_msec ) {
ADDRLP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
LEI4 $1094
line 2507
;2507:				msec = pmove->pmove_msec;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
ASGNI4
line 2508
;2508:			}
line 2509
;2509:		}
ADDRGP4 $1094
JUMPV
LABELV $1093
line 2510
;2510:		else {
line 2511
;2511:			if ( msec > 66 ) {
ADDRLP4 8
INDIRI4
CNSTI4 66
LEI4 $1097
line 2512
;2512:				msec = 66;
ADDRLP4 8
CNSTI4 66
ASGNI4
line 2513
;2513:			}
LABELV $1097
line 2514
;2514:		}
LABELV $1094
line 2515
;2515:		pmove->cmd.serverTime = pmove->ps->commandTime + msec;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
ADDRLP4 12
INDIRP4
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 2516
;2516:		PmoveSingle( pmove );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 PmoveSingle
CALLV
pop
line 2518
;2517:
;2518:		if ( pmove->ps->pm_flags & PMF_JUMP_HELD ) {
ADDRFP4 0
INDIRP4
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1099
line 2519
;2519:			pmove->cmd.upmove = 20;
ADDRFP4 0
INDIRP4
CNSTI4 31
ADDP4
CNSTI1 20
ASGNI1
line 2520
;2520:		}
LABELV $1099
line 2521
;2521:	}
LABELV $1091
line 2500
ADDRFP4 0
INDIRP4
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
NEI4 $1090
line 2525
;2522:
;2523:	//PM_CheckStuck();
;2524:
;2525:}
LABELV $1085
endproc Pmove 16 4
import PM_Add_SwepAmmo
import GetPlayerHoldable
import PM_StepSlideMove
import PM_SlideMove
bss
export pml
align 4
LABELV pml
skip 144
export pm
align 4
LABELV pm
skip 4
import G_admin_namelog_cleanup
import G_admin_cleanup
import G_admin_duration
import G_admin_buffer_end
import G_admin_buffer_begin
import G_admin_buffer_print
import G_admin_print
import G_admin_shuffle
import G_admin_warn
import G_admin_slap
import G_admin_orient
import G_admin_disorient
import G_admin_unlock
import G_admin_lock
import G_admin_namelog
import G_admin_nextmap
import G_admin_restart
import G_admin_rename
import G_admin_spec999
import G_admin_passvote
import G_admin_cancelvote
import G_admin_allready
import G_admin_admintest
import G_admin_help
import G_admin_showbans
import G_admin_mute
import G_admin_map
import G_admin_listplayers
import G_admin_listadmins
import G_admin_putteam
import G_admin_unban
import G_admin_ban
import G_admin_adjustban
import G_admin_kick
import G_admin_setlevel
import G_admin_time
import G_admin_parse_time
import G_admin_level
import G_admin_namelog_update
import G_admin_name_check
import G_admin_permission
import G_admin_readconfig
import G_admin_cmd_check
import G_admin_ban_check
import G_ConfigClientExcellent
import G_checkForMultiKill
import G_CheckForSpree
import G_RunStreakLogic
import G_ReadAltKillSettings
import AU_Cvar_VariableString
import G_ArenaScriptRandom
import G_ArenaScriptAutoFloat
import G_ArenaScriptAutoNonPointChar
import G_ArenaScriptAutoChar
import G_ArenaScriptAutoInt
import G_ArenaScriptFindFloat
import G_ArenaScriptFindChar
import G_ArenaScriptFindInt
import Svcmd_SaveSession_f
import Svcmd_For_f
import Svcmd_SystemCommand_f
import Svcmd_ClientCommand_f
import Svcmd_Editline_f
import Svcmd_Random_f
import Svcmd_Cvar_f
import Svcmd_Operation_f
import Svcmd_Condition_f
import Svcmd_MessageWrapper
import Svcmd_ListIP_f
import Svcmd_Chat_f
import Svcmd_DumpUser_f
import Svcmd_EjectClient_f
import Svcmd_BannerPrint_f
import Svcmd_ReplaceTexture_f
import Svcmd_CenterPrint_f
import Svcmd_TeamMessage_f
import Svcmd_Status_f
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_System
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_RealTime
import trap_Milliseconds
import trap_Error
import trap_Printf
import g_maxNameChanges
import g_minNameChangePeriod
import g_warningExpire
import g_maxWarnings
import g_publicAdminMessages
import g_specChat
import g_adminMaxBan
import g_adminTempBan
import g_adminNameProtect
import g_adminParseSay
import g_adminLog
import g_admin
import g_floodMinTime
import g_floodMaxDemerits
import g_spreeDiv
import g_altExcellent
import g_sprees
import g_lagLightning
import sv_fps
import g_truePing
import g_delagHitscan
import g_blueTeamClientNumbers
import g_redTeamClientNumbers
import g_humanplayers
import g_maxvotes
import g_voteMaxFraglimit
import g_voteMinFraglimit
import g_voteMaxTimelimit
import g_voteMinTimelimit
import g_voteGametypes
import g_voteBan
import g_voteNames
import g_mappools
import g_autonextmap
import g_catchup
import g_persistantpowerups
import g_awardpushing
import g_elimination_ctf_oneway
import g_lms_mode
import g_lms_lives
import g_ffa_gt
import g_regen
import g_vampireMaxHealth
import g_vampire
import g_instantgib
import g_rockets
import g_elimination_lockspectator
import g_eliminationred_holdable
import g_eliminationred_flight
import g_eliminationred_regen
import g_eliminationred_invis
import g_eliminationred_bsuit
import g_eliminationred_haste
import g_eliminationred_quad
import g_eliminationred_antimatter
import g_eliminationred_flame
import g_eliminationred_nail
import g_eliminationred_mine
import g_eliminationred_chain
import g_eliminationred_plasmagun
import g_eliminationred_lightning
import g_eliminationred_railgun
import g_eliminationred_rocket
import g_eliminationred_grenade
import g_eliminationred_shotgun
import g_eliminationred_machinegun
import g_eliminationred_gauntlet
import g_eliminationred_grapple
import g_eliminationred_bfg
import g_eliminationred_startArmor
import g_eliminationred_startHealth
import g_elimination_holdable
import g_elimination_items
import g_elimination_flight
import g_elimination_regen
import g_elimination_invis
import g_elimination_bsuit
import g_elimination_haste
import g_elimination_quad
import g_elimination_antimatter
import g_elimination_flame
import g_elimination_nail
import g_elimination_mine
import g_elimination_chain
import g_elimination_plasmagun
import g_elimination_lightning
import g_elimination_railgun
import g_elimination_rocket
import g_elimination_grenade
import g_elimination_shotgun
import g_elimination_machinegun
import g_elimination_gauntlet
import g_elimination_allgametypes
import g_elimination_activewarmup
import g_elimination_warmup
import g_elimination_roundtime
import g_elimination_grapple
import g_elimination_bfg
import g_elimination_startArmor
import g_elimination_startHealth
import g_elimination_selfdamage
import g_spawnprotect
import g_music
import g_proxMineTimeout
import g_enableBreath
import g_enableDust
import g_blueteam
import g_redteam
import g_singlePlayer
import g_rankings
import pmove_float
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_teamAutoJoin
import g_allowVote
import g_blood
import g_doWarmup
import g_warmup
import g_votecustom
import g_votemaps
import g_motdfile
import g_motd
import g_synchronousClients
import g_weaponTeamRespawn
import g_weaponRespawn
import g_allowSyncCutscene
import g_debugBotspawns
import g_debugVariables
import g_debugScore
import g_debugCameras
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_disableCutscenes
import g_inactivity
import g_respawntime
import g_forcerespawn
import g_quadfactor
import g_knockback
import g_speed
import g_damageModifier
import g_gravityModifier
import g_gravity
import g_needpass
import g_password
import g_friendlyFire
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_voteflags
import g_elimflags
import g_videoflags
import g_dmflags
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import g_gametype
import g_poweruprespawn
import g_megahealthrespawn
import g_holdablerespawn
import g_ammorespawn
import g_healthrespawn
import g_armorrespawn
import g_ammolimit
import g_drowndamage
import g_speedfactor
import g_jumpheight
import g_respawnwait
import g_armorprotect
import g_medkitmodifier
import g_hastefirespeed
import g_autoflagreturn
import g_droppeditemtime
import g_slowhealthregen
import g_fasthealthregen
import g_invultime
import g_invulmove
import g_portalhealth
import g_portaltimeout
import g_flagrespawn
import g_noplayerclip
import g_falldamagebig
import g_falldamagesmall
import g_randomteleport
import g_maxweaponpickup
import g_slimedamage
import g_lavadamage
import g_waterdamage
import g_medkitlimit
import g_kamikazeinf
import g_portalinf
import g_teleporterinf
import g_medkitinf
import g_invulinf
import g_kamikazeinfinf
import g_kill
import g_mapcycleposition
import g_useMapcycle
import g_mapcycle
import info_zombie
import g_randomItems
import g_accelerate
import g_slickmove
import g_overlay
import g_lavatowater
import onandroid
import eliminationrespawn
import eliminationredrespawn
import g_spectatorspeed
import g_regenarmor
import tex_newname
import tex_name
import g_roundmode
import g_scoreboardlock
import g_connectmsg
import g_currentmap
import g_tests
import cl_language
import cl_selectedmod
import g_maxEntities
import g_npcdrop
import g_safe
import g_allowgravitygun
import g_allowphysgun
import g_allowtoolgun
import g_allownoclip
import g_allowitems
import g_allownpc
import g_allowsettings
import g_allowprops
import save8_epsession
import save8_session0_lvl
import save8_session0
import save7_epsession
import save7_session0_lvl
import save7_session0
import save6_epsession
import save6_session0_lvl
import save6_session0
import save5_epsession
import save5_session0_lvl
import save5_session0
import save4_epsession
import save4_session0_lvl
import save4_session0
import save3_epsession
import save3_session0_lvl
import save3_session0
import save2_epsession
import save2_session0_lvl
import save2_session0
import save1_epsession
import save1_session0_lvl
import save1_session0
import save_epsession
import save_session0_lvl
import save_session0
import save8_curmap
import save7_curmap
import save6_curmap
import save5_curmap
import save4_curmap
import save3_curmap
import save2_curmap
import save1_curmap
import save_curmap
import g_skyColorA
import g_skyColorB
import g_skyColorG
import g_skyColorR
import g_skyShader
import g_fogColorA
import g_fogColorB
import g_fogColorG
import g_fogColorR
import g_fogInterval
import g_fogDistance
import g_fogShader
import g_fogModel
import g_teamred_pickupitems
import g_teamred_respawnwait
import g_teamred_infammo
import g_teamred_damage
import g_teamred_firespeed
import g_teamred_gravityModifier
import g_teamred_speed
import g_teamblue_pickupitems
import g_teamblue_respawnwait
import g_teamblue_infammo
import g_teamblue_damage
import g_teamblue_firespeed
import g_teamblue_gravityModifier
import g_teamblue_speed
import g_amweaponcount
import g_ftweaponcount
import g_cgweaponcount
import g_plweaponcount
import g_ngweaponcount
import g_bfgweaponcount
import g_pgweaponcount
import g_rgweaponcount
import g_lgweaponcount
import g_rlweaponcount
import g_glweaponcount
import g_sgweaponcount
import g_mgweaponcount
import g_ftammocount
import g_cgammocount
import g_plammocount
import g_ngammocount
import g_bfgammocount
import g_pgammocount
import g_rgammocount
import g_lgammocount
import g_rlammocount
import g_glammocount
import g_sgammocount
import g_mgammocount
import g_ammoregenhealthmodifier
import g_ammoregengravitymodifier
import g_ammoregenspeedfactor
import g_ammoregendamagefactor
import g_ammoregen_infammo
import g_ammoregenfirespeed
import g_guard_infammo
import g_guardgravitymodifier
import g_guardspeedfactor
import g_guarddamagefactor
import g_guardfirespeed
import g_guardhealthmodifier
import g_doublerhealthmodifier
import g_doubler_infammo
import g_doublergravitymodifier
import g_doublerspeedfactor
import g_doublerdamagefactor
import g_doublerfirespeed
import g_scouthealthmodifier
import g_scout_infammo
import g_scoutgravitymodifier
import g_scoutdamagefactor
import g_scoutfirespeed
import g_scoutspeedfactor
import g_amguided
import g_amhoming
import g_ftguided
import g_fthoming
import g_ngguided
import g_nghoming
import g_bfgguided
import g_bfghoming
import g_pgguided
import g_pghoming
import g_rlguided
import g_rlhoming
import g_glguided
import g_glhoming
import g_amknockback
import g_ambouncemodifier
import g_aminf
import g_amvampire
import g_amgravity
import g_ambounce
import g_amtimeout
import g_amdamage
import g_amsdamage
import g_amspeed
import g_amsradius
import g_amdelay
import g_ftknockback
import g_ftbouncemodifier
import g_ftinf
import g_ftvampire
import g_ftgravity
import g_ftbounce
import g_fttimeout
import g_ftdamage
import g_ftsdamage
import g_ftspeed
import g_ftsradius
import g_ftdelay
import g_cgknockback
import g_cginf
import g_cgvampire
import g_cgspread
import g_cgdamage
import g_cgdelay
import g_plknockback
import g_plinf
import g_plvampire
import g_plgravity
import g_pldamage
import g_plsdamage
import g_plsradius
import g_pltimeout
import g_plspeed
import g_pldelay
import g_ngknockback
import g_ngbouncemodifier
import g_nginf
import g_ngvampire
import g_ngrandom
import g_nggravity
import g_ngbounce
import g_ngcount
import g_ngtimeout
import g_ngdamage
import g_ngspread
import g_ngspeed
import g_ngdelay
import g_bfgknockback
import g_bfgbouncemodifier
import g_bfginf
import g_bfgvampire
import g_bfggravity
import g_bfgbounce
import g_bfgdamage
import g_bfgsdamage
import g_bfgsradius
import g_bfgtimeout
import g_bfgspeed
import g_bfgdelay
import g_pgknockback
import g_pgbouncemodifier
import g_pginf
import g_pgvampire
import g_pggravity
import g_pgbounce
import g_pgtimeout
import g_pgdamage
import g_pgsdamage
import g_pgspeed
import g_pgsradius
import g_pgdelay
import g_rgknockback
import g_rginf
import g_rgvampire
import g_rgdamage
import g_rgdelay
import g_lgknockback
import g_lginf
import g_lgvampire
import g_lgsradius
import g_lgsdamage
import g_lgexplode
import g_lgrange
import g_lgdelay
import g_lgdamage
import g_rlknockback
import g_rlbouncemodifier
import g_rlinf
import g_rlvampire
import g_rlgravity
import g_rlbounce
import g_rldamage
import g_rlsdamage
import g_rlsradius
import g_rltimeout
import g_rlspeed
import g_rldelay
import g_glknockback
import g_glbouncemodifier
import g_glinf
import g_glvampire
import g_glgravity
import g_glbounce
import g_gldamage
import g_glsdamage
import g_glsradius
import g_gltimeout
import g_glspeed
import g_gldelay
import g_sgknockback
import g_sginf
import g_sgvampire
import g_sgcount
import g_sgsradius
import g_sgsdamage
import g_sgexplode
import g_sgspread
import g_sgdamage
import g_sgdelay
import g_mgknockback
import g_mginf
import g_mgvampire
import g_mgsradius
import g_mgsdamage
import g_mgexplode
import g_mgspread
import g_mgdamage
import g_mgdelay
import g_gknockback
import g_grange
import g_gdamage
import g_gdelay
import mod_ghtimeout
import g_ghtimeout
import g_ghspeed
import g_minigame
import g_physdamage
import g_physimpulse
import g_physimpact
import cl_giantcharheight
import cl_giantcharwidth
import cl_bigcharheight
import cl_bigcharwidth
import cl_smallcharheight
import cl_smallcharwidth
import cl_propgapwidth
import cl_propspacewidth
import cl_propheight
import cl_propsmallsizescale
import mod_gravity
import mod_zsround
import mod_zround
import mod_roundmode
import mod_overlay
import mod_slickmove
import mod_accelerate
import mod_teamred_damage
import mod_teamblue_damage
import mod_invulinf
import mod_kamikazeinf
import mod_portalinf
import mod_teleporterinf
import mod_medkitinf
import mod_medkitlimit
import mod_teamblue_firespeed
import mod_teamred_firespeed
import mod_invulmove
import mod_noplayerclip
import mod_flighttime
import mod_regentime
import mod_invistime
import mod_hastetime
import mod_bsuittime
import mod_quadtime
import mod_doublerfirespeed
import mod_guardfirespeed
import mod_poweruptime
import mod_scoutfirespeed
import mod_ammoregenfirespeed
import mod_hastefirespeed
import mod_vampire_max_health
import mod_amdelay
import mod_ftdelay
import mod_cgspread
import mod_cgdelay
import mod_pldelay
import mod_ngdelay
import mod_bfgdelay
import mod_rgdelay
import mod_pgdelay
import mod_lgrange
import mod_lgdelay
import mod_rldelay
import mod_gldelay
import mod_sgcount
import mod_sgspread
import mod_sgdelay
import mod_mgspread
import mod_mgdelay
import mod_gdelay
import mod_jumpheight
import mod_ammolimit
import cmapname
import CustomModRun
import Newmodcommands
import nailgun_think
import bfg_think
import grenade_think
import rocket_think
import plasma_think
import G_SendSwepWeapons
import G_SendWeaponProperties
import g_entities
import level
import Team_ForceGesture
import Team_DD_bonusAtPoints
import Team_RemoveDoubleDominationPoints
import Team_SpawnDoubleDominationPoints
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import Team_Dom_SpawnPoints
import SelectDoubleDominationSpawnPoint
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import AddTeamScore
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import G_LoadMapfileAll_f
import G_LoadMapfile_f
import G_LoadMapfileAll
import G_LoadMapfile
import G_WriteMapfileAll_f
import G_WriteMapfile_f
import G_ClassnameAllowedAll
import G_ClassnameAllowed
import G_GetMapLockArena
import SkippedChar
import G_LoadMapcycle
import G_sendMapcycle
import G_drawMapcycle
import G_drawAllowedMaps
import G_mapIsVoteable
import G_GetMapfile
import G_GetNextMap
import G_GetNextMapCycle
import G_GotoNextMapCycle
import getCustomVote
import VoteParseCustomVotes
import allowedFraglimit
import allowedTimelimit
import allowedGametype
import allowedMap
import getMappage
import custom_vote_info
import ClientLeaving
import CountVotes
import CheckVote
import allowedVote
import PlayerStore_restore
import PlayerStore_store
import PlayerStoreInit
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import SpawnModelsOnVictoryPads
import UpdateTournamentInfo
import G_WriteSessionData
import G_InitWorldSession
import G_SaveClientSessionDataSave
import G_InitSessionData
import G_ReadSessionData
import Svcmd_GameMem_f
import G_TeamFromString
import ShuffleTeams
import CheckObeliskAttack
import Team_CheckDroppedItem
import OnSameTeam
import G_DefaultSwep
import G_CheckSwepAmmo
import G_CheckSwep
import G_RunClient
import ClientEndFrame
import ClientThink
import PrecacheBotAssets
import SetCustomWeapons
import SetSandboxWeapons
import SetUnlimitedWeapons
import SetupCustomBot
import LinkBotSpawnEntity
import DropClientSilently
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_NpcFactionProp
import G_LevelLoadComplete
import CheckTeamVote
import LogExit
import G_Error
import G_Printf
import SendYourTeamMessageToTeam
import SendDominationPointsStatusMessageToAllClients
import SendDDtimetakenMessageToAllClients
import SendEliminationMessageToAllClients
import SendScoreboardMessageToAllClients
import G_LogPrintf
import ExitLevel
import AddTournamentQueue
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import SendCustomVoteCommands
import DominationPointStatusMessage
import DominationPointNamesMessage
import RespawnTimeMessage
import EliminationMessage
import ObeliskHealthMessage
import AttackingTeamMessage
import YourTeamMessage
import DoubleDominationScoreTimeMessage
import DeathmatchScoreboardMessage
import G_SetStats
import MoveClientToIntermission
import G_StartCarExplode
import G_StartKamikaze
import KamikazeShockWave
import KamikazeRadiusDamage
import CarExplodeDamage
import KamikazeDamage
import FireWeapon
import ClientForString
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import SpawnPointIsActive
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import InitClientResp
import InitClientPersistant
import BeginIntermission
import ClientRespawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import LMSpoint
import EndEliminationRound
import DisableWeapons
import EnableWeapons
import RespawnDead
import RespawnAll
import TeamHealthCount
import TeamLivingCount
import TeamCount
import G_PredictPlayerMove
import G_UnTimeShiftClient
import G_UndoTimeShiftFor
import G_DoTimeShiftFor
import G_UnTimeShiftAllClients
import G_TimeShiftAllClients
import G_StoreHistory
import G_ResetHistory
import Laser_Think
import Laser_Gen
import Weapon_HookThink
import Weapon_HookFree
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import G_FindEntityForClientNum
import G_FindEntityForEntityNum
import G_ShowObjects
import G_HideObjects
import G_BounceProp
import G_RunProp
import G_ModProp
import DropPortalDestination
import DropPortalSource
import TeleportPlayer
import lock_touch
import trigger_teleporter_touch
import Break_Breakable
import Touch_DoorTrigger
import G_RunMover
import fire_antimatter
import fire_flame
import fire_prox
import fire_nail
import fire_nails
import fire_grapple
import fire_bfg
import fire_rocket
import fire_grenade
import fire_plasma
import fire_custom
import fire_blaster
import ProximityMine_RemoveAll
import G_RunMissile
import TossClientCubes
import TossClientPersistantPowerups
import TossClientItems
import body_die
import G_InvulnerabilityEffect
import G_RadiusDamage
import G_ExitVehicle
import G_CarDamage
import G_PropDamage
import G_Damage
import CanDamage
import target_finish_use
import target_finish_think
import BuildShaderStateConfig
import AddRemap
import G_SetTargetname
import G_SetTarget
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_GlobalSound
import G_Sound
import G_TempEntity
import G_Spawn
import findradius
import G_InitGentity
import CrosshairPointGravity
import CrosshairPointPhys
import FindEntityForGravitygun
import FindEntityForPhysgun
import VehiclePhys
import botsandbox_check
import G_CalculatePlayerScore
import G_FadeIn
import G_FadeOut
import G_Fade
import G_GetScoringMapName
import G_SetMovedir
import G_UseDeathTargets
import G_UseTargets
import G_PickTarget
import G_ScrFind
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import Throw_Item
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Touch_Item2
import Touch_Item
import Set_Weapon
import Set_Ammo
import Add_Ammo
import ArmorIndex
import Think_Weapon
import FinishSpawningItem
import G_SpawnItem
import SetRespawn
import LaunchBackpack
import LaunchItem
import Drop_Item
import PrecacheItem
import UseHoldableItem
import RespawnItemCtf
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import writeFile_string
import writeFile_int
import readFile_string
import readFile_int
import SanitizeString
import G_ClientIsLagging
import G_ClientNumberFromString
import Cmd_AdminMessage_f
import G_FloodLimited
import G_ClientNumbersFromString
import G_SanitiseString
import G_MatchOnePlayer
import G_DecolorString
import G_SayConcatArgs
import G_SayArgv
import G_SayArgc
import NextCustomRound_f
import G_Say
import ConcatArgs
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector4
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import MiTechEntityList
import BG_TeamName
import BG_GetVehicleSettings
import BG_VehicleCheckClass
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_DefragmentMemory
import BG_Free
import BG_InitMemory
import BG_Alloc
import BG_CanAlloc
import BG_CanItemBeGrabbed
import BG_FindItemForBackpack
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindSwepAmmo
import BG_FindSwep
import BG_FindItem
import bg_numItems
import bg_itemlist
import COM_LoadLevelScores
import COM_CalculatePlayerScore
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import vectoyaw
import AngleDifference
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import Q_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import Lerp
import VelocityToAxis
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import Q_snprintf
import Q_vsnprintf
import strtol
import _atoi
import atoi
import strtod
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import ifstrlenru
import strlenru
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $585
byte 1 37
byte 1 105
byte 1 58
byte 1 76
byte 1 97
byte 1 110
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $574
byte 1 37
byte 1 105
byte 1 58
byte 1 115
byte 1 116
byte 1 101
byte 1 101
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $563
byte 1 37
byte 1 105
byte 1 58
byte 1 107
byte 1 105
byte 1 99
byte 1 107
byte 1 111
byte 1 102
byte 1 102
byte 1 10
byte 1 0
align 1
LABELV $532
byte 1 37
byte 1 105
byte 1 58
byte 1 108
byte 1 105
byte 1 102
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $505
byte 1 37
byte 1 105
byte 1 58
byte 1 97
byte 1 108
byte 1 108
byte 1 115
byte 1 111
byte 1 108
byte 1 105
byte 1 100
byte 1 10
byte 1 0
