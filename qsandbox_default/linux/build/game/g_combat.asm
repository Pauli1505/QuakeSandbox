export ScorePlum
code
proc ScorePlum 16 8
file "../../../code/game/g_combat.c"
line 33
;1:/*
;2:===========================================================================
;3:Copyright (C) 1999-2005 Id Software, Inc.
;4:
;5:This file is part of Quake III Arena source code.
;6:
;7:Quake III Arena source code is free software; you can redistribute it
;8:and/or modify it under the terms of the GNU General Public License as
;9:published by the Free Software Foundation; either version 2 of the License,
;10:or (at your option) any later version.
;11:
;12:Quake III Arena source code is distributed in the hope that it will be
;13:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;14:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;15:GNU General Public License for more details.
;16:
;17:You should have received a copy of the GNU General Public License
;18:along with Quake III Arena source code; if not, write to the Free Software
;19:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;20:===========================================================================
;21:*/
;22://
;23:// g_combat.c
;24:
;25:#include "g_local.h"
;26:
;27:/*
;28:============
;29:ScorePlum
;30:============
;31:*/
;32:void ScorePlum( gentity_t *ent, vec3_t origin, int score, int dmgf )
;33:{
line 35
;34:	gentity_t *plum;
;35:	plum = G_TempEntity( origin, EV_SCOREPLUM );
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 66
ARGI4
ADDRLP4 4
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 36
;36:	plum->r.singleClient = ent->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 468
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 37
;37:	plum->s.otherEntityNum = ent->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 38
;38:        if (dmgf == 10 || dmgf == 11) {
ADDRLP4 8
ADDRFP4 12
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 10
EQI4 $67
ADDRLP4 8
INDIRI4
CNSTI4 11
NEI4 $65
LABELV $67
line 39
;39:                plum->r.svFlags |= SVF_BROADCAST;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 40
;40:        } else {
ADDRGP4 $66
JUMPV
LABELV $65
line 41
;41:                plum->r.svFlags |= SVF_SINGLECLIENT;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 42
;42:        }
LABELV $66
line 43
;43:	plum->s.time = score;
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 44
;44:    plum->s.weapon = dmgf;
ADDRLP4 0
INDIRP4
CNSTI4 204
ADDP4
ADDRFP4 12
INDIRI4
ASGNI4
line 45
;45:}
LABELV $64
endproc ScorePlum 16 8
export AddScore
proc AddScore 24 20
line 54
;46:
;47:/*
;48:============
;49:AddScore
;50:
;51:Adds score to both the client and his team
;52:============
;53:*/
;54:void AddScore( gentity_t *ent, vec3_t origin, int score ) {
line 57
;55:        int i;
;56:
;57:	if ( !ent->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $69
line 58
;58:		return;
ADDRGP4 $68
JUMPV
LABELV $69
line 61
;59:	}
;60:	// no scoring during pre-match warmup
;61:	if ( level.warmupTime ) {
ADDRGP4 level+16
INDIRI4
CNSTI4 0
EQI4 $71
line 62
;62:		return;
ADDRGP4 $68
JUMPV
LABELV $71
line 66
;63:	}
;64:
;65:        //No scoring during intermission
;66:        if ( level.intermissiontime ) {
ADDRGP4 level+9912
INDIRI4
CNSTI4 0
EQI4 $74
line 67
;67:            return;
ADDRGP4 $68
JUMPV
LABELV $74
line 70
;68:        }
;69:	// show score plum
;70:        if( level.numNonSpectatorClients<3 && score < 0 && (g_gametype.integer<GT_TEAM || g_ffa_gt==1)) {
ADDRGP4 level+76
INDIRI4
CNSTI4 3
GEI4 $77
ADDRFP4 8
INDIRI4
CNSTI4 0
GEI4 $77
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
LTI4 $81
ADDRGP4 g_ffa_gt
INDIRI4
CNSTI4 1
NEI4 $77
LABELV $81
line 71
;71:            for ( i = 0 ; i < level.maxclients ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $85
JUMPV
LABELV $82
line 72
;72:                if ( level.clients[ i ].pers.connected != CON_CONNECTED )
CNSTI4 2324
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 level
INDIRP4
ADDP4
CNSTI4 472
ADDP4
INDIRI4
CNSTI4 2
EQI4 $87
line 73
;73:                    continue; //Client was not connected
ADDRGP4 $83
JUMPV
LABELV $87
line 75
;74:
;75:                if (level.clients[i].sess.sessionTeam == TEAM_SPECTATOR)
CNSTI4 2324
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 level
INDIRP4
ADDP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 3
NEI4 $89
line 76
;76:                    continue; //Don't give anything to spectators
ADDRGP4 $83
JUMPV
LABELV $89
line 78
;77:
;78:                if (g_entities+i == ent)
CNSTI4 2492
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
NEU4 $91
line 79
;79:                    continue; //Don't award dead one
ADDRGP4 $83
JUMPV
LABELV $91
line 81
;80:
;81:                level.clients[i].ps.persistant[PERS_SCORE] -= score;
ADDRLP4 4
CNSTI4 2324
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 level
INDIRP4
ADDP4
CNSTI4 248
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ADDRFP4 8
INDIRI4
SUBI4
ASGNI4
line 83
;82:                //ScorePlum(ent, origin, -score, 0);
;83:            }
LABELV $83
line 71
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $85
ADDRLP4 0
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $82
line 84
;84:        }
ADDRGP4 $78
JUMPV
LABELV $77
line 85
;85:        else {
line 88
;86:            //ScorePlum(ent, origin, score, 0);
;87:            //
;88:			if(score == 1){
ADDRFP4 8
INDIRI4
CNSTI4 1
NEI4 $93
line 89
;89:            ent->client->ps.persistant[PERS_SCORE] += score;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 248
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ASGNI4
line 90
;90:            if ( g_gametype.integer == GT_TEAM ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
NEI4 $95
line 91
;91:                int team = ent->client->ps.persistant[PERS_TEAM];
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 260
ADDP4
INDIRI4
ASGNI4
line 92
;92:                    level.teamScores[ team ] += score;
ADDRLP4 12
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 level+44
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ASGNI4
line 93
;93:					G_LogPrintf("TeamScore: add 1\n" );
ADDRGP4 $99
ARGP4
ADDRGP4 G_LogPrintf
CALLV
pop
line 94
;94:                    G_LogPrintf("TeamScore: %i %i: Team %d now has %d points\n",
ADDRGP4 $100
ARGP4
ADDRLP4 16
ADDRLP4 8
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 20
INDIRI4
ADDRGP4 level+44
ADDP4
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ADDRGP4 level+44
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_LogPrintf
CALLV
pop
line 96
;95:                        team, level.teamScores[ team ], team, level.teamScores[ team ] );
;96:            }
LABELV $95
line 97
;97:			}
LABELV $93
line 98
;98:        }
LABELV $78
line 99
;99:        G_LogPrintf("PlayerScore: %i %i: %s now has %d points\n",
ADDRGP4 $103
ARGP4
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
INDIRI4
ARGI4
ADDRLP4 8
ADDRLP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
CNSTI4 516
ADDP4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 G_LogPrintf
CALLV
pop
line 101
;100:		ent->s.number, ent->client->ps.persistant[PERS_SCORE], ent->client->pers.netname, ent->client->ps.persistant[PERS_SCORE] );
;101:	CalculateRanks();
ADDRGP4 CalculateRanks
CALLV
pop
line 102
;102:}
LABELV $68
endproc AddScore 24 20
export TossClientItems
proc TossClientItems 28 12
line 111
;103:
;104:/*
;105:=================
;106:TossClientItems
;107:
;108:Toss the weapon and powerups for the killed player
;109:=================
;110:*/
;111:void TossClientItems( gentity_t *self ) {
line 119
;112:	gitem_t		*item;
;113:	int			weapon;
;114:	float		angle;
;115:	int			i;
;116:	gentity_t	*drop;
;117:
;118:	// drop the weapon if not a gauntlet or machinegun
;119:	weapon = self->s.weapon;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
ASGNI4
line 121
;120:
;121:        if(!g_npcdrop.integer){
ADDRGP4 g_npcdrop+12
INDIRI4
CNSTI4 0
NEI4 $105
line 122
;122:		if(self->singlebot >= 1){
ADDRFP4 0
INDIRP4
CNSTI4 1028
ADDP4
INDIRI4
CNSTI4 1
LTI4 $108
line 123
;123:        return;
ADDRGP4 $104
JUMPV
LABELV $108
line 125
;124:		}
;125:		}
LABELV $105
line 128
;126:
;127:	//Never drop in elimination or last man standing mode!
;128:	if( g_gametype.integer == GT_ELIMINATION || g_gametype.integer == GT_LMS)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $114
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 11
NEI4 $110
LABELV $114
line 129
;129:		return;
ADDRGP4 $104
JUMPV
LABELV $110
line 131
;130:
;131:if(!self->singlebot){
ADDRFP4 0
INDIRP4
CNSTI4 1028
ADDP4
INDIRI4
CNSTI4 0
NEI4 $115
line 132
;132:if(g_gametype.integer != GT_SINGLE){
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 2
EQI4 $117
line 133
;133:	if (g_instantgib.integer || g_rockets.integer || g_gametype.integer == GT_CTF_ELIMINATION || g_elimination_allgametypes.integer || weapon == WP_GAUNTLET){
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 g_instantgib+12
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $129
ADDRGP4 g_rockets+12
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $129
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
EQI4 $129
ADDRGP4 g_elimination_allgametypes+12
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $129
ADDRLP4 16
INDIRI4
CNSTI4 1
NEI4 $120
LABELV $129
line 135
;134:	//Nothing!
;135:	}
ADDRGP4 $121
JUMPV
LABELV $120
line 137
;136:	else
;137:	if ( self->client->ps.ammo[ weapon ] ) {
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $130
line 139
;138:		// find the item type for this weapon
;139:		item = BG_FindItemForWeapon( weapon );
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
ASGNP4
line 142
;140:
;141:		// spawn the item
;142:		Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 143
;143:	}
LABELV $130
LABELV $121
line 144
;144:}
LABELV $117
line 145
;145:if(g_gametype.integer == GT_SINGLE){
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 2
NEI4 $132
line 147
;146:	//the player drops a backpack in single player
;147:	item = BG_FindItemForBackpack(); 
ADDRLP4 20
ADDRGP4 BG_FindItemForBackpack
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 148
;148:	Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 149
;149:}
LABELV $132
line 150
;150:}
LABELV $115
line 151
;151:if(self->singlebot){
ADDRFP4 0
INDIRP4
CNSTI4 1028
ADDP4
INDIRI4
CNSTI4 0
EQI4 $135
line 152
;152:	if (g_instantgib.integer || g_rockets.integer || g_gametype.integer == GT_CTF_ELIMINATION || g_elimination_allgametypes.integer || weapon == WP_GAUNTLET){
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 g_instantgib+12
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $146
ADDRGP4 g_rockets+12
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $146
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
EQI4 $146
ADDRGP4 g_elimination_allgametypes+12
INDIRI4
ADDRLP4 20
INDIRI4
NEI4 $146
ADDRLP4 16
INDIRI4
CNSTI4 1
NEI4 $137
LABELV $146
line 154
;153:	//Nothing!
;154:	}
ADDRGP4 $138
JUMPV
LABELV $137
line 156
;155:	else
;156:	if ( self->client->ps.ammo[ weapon ] ) {
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
CNSTI4 0
EQI4 $147
line 158
;157:		// find the item type for this weapon
;158:		item = BG_FindItemForWeapon( weapon );
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 24
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
ASGNP4
line 161
;159:
;160:		// spawn the item
;161:		Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 162
;162:	}
LABELV $147
LABELV $138
line 163
;163:}
LABELV $135
line 167
;164:
;165:	// drop all the powerups if not in teamplay
;166:
;167:		angle = 45;
ADDRLP4 12
CNSTF4 1110704128
ASGNF4
line 168
;168:		for ( i = 1 ; i < PW_NUM_POWERUPS ; i++ ) {
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $149
line 169
;169:			if ( self->client->ps.powerups[ i ] > level.time ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $153
line 170
;170:				item = BG_FindItemForPowerup( i );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 20
ADDRGP4 BG_FindItemForPowerup
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 171
;171:				if ( !item ) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $156
line 172
;172:					continue;
ADDRGP4 $150
JUMPV
LABELV $156
line 174
;173:				}
;174:				drop = Drop_Item( self, item, angle );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 24
ADDRGP4 Drop_Item
CALLP4
ASGNP4
ADDRLP4 8
ADDRLP4 24
INDIRP4
ASGNP4
line 176
;175:				// decide how many seconds it has left
;176:				drop->count = ( self->client->ps.powerups[ i ] - level.time ) / 1000;
ADDRLP4 8
INDIRP4
CNSTI4 944
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
SUBI4
CNSTI4 1000
DIVI4
ASGNI4
line 177
;177:				if ( drop->count < 1 ) {
ADDRLP4 8
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 1
GEI4 $159
line 178
;178:					drop->count = 1;
ADDRLP4 8
INDIRP4
CNSTI4 944
ADDP4
CNSTI4 1
ASGNI4
line 179
;179:				}
LABELV $159
line 180
;180:				angle += 45;
ADDRLP4 12
ADDRLP4 12
INDIRF4
CNSTF4 1110704128
ADDF4
ASGNF4
line 181
;181:			}
LABELV $153
line 182
;182:		}
LABELV $150
line 168
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 15
LTI4 $149
line 183
;183:	if(!self->singlebot){
ADDRFP4 0
INDIRP4
CNSTI4 1028
ADDP4
INDIRI4
CNSTI4 0
NEI4 $161
line 184
;184:	if(g_gametype.integer != GT_SINGLE){
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 2
EQI4 $163
line 185
;185:	if(self->client->ps.stats[STAT_HOLDABLE_ITEM] & (1 << HI_TELEPORTER)) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $166
line 186
;186:	item = BG_FindItem( "Personal Teleporter" );
ADDRGP4 $168
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 187
;187:	Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 188
;188:	}
LABELV $166
line 189
;189:	if(self->client->ps.stats[STAT_HOLDABLE_ITEM] & (1 << HI_MEDKIT)) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $169
line 190
;190:	item = BG_FindItem( "Medkit" );
ADDRGP4 $171
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 191
;191:	Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 192
;192:	}
LABELV $169
line 193
;193:	if(self->client->ps.stats[STAT_HOLDABLE_ITEM] & (1 << HI_KAMIKAZE)) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $172
line 194
;194:	item = BG_FindItem( "Kamikaze" );
ADDRGP4 $174
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 195
;195:	Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 196
;196:	}
LABELV $172
line 197
;197:	if(self->client->ps.stats[STAT_HOLDABLE_ITEM] & (1 << HI_INVULNERABILITY)) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $175
line 198
;198:	item = BG_FindItem( "Invulnerability" );
ADDRGP4 $177
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 199
;199:	Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 200
;200:	}
LABELV $175
line 201
;201:	if(self->client->ps.stats[STAT_HOLDABLE_ITEM] & (1 << HI_PORTAL)) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $178
line 202
;202:	item = BG_FindItem( "Portal" );
ADDRGP4 $180
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 203
;203:	Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 204
;204:	}
LABELV $178
line 205
;205:	}
LABELV $163
line 206
;206:	}
LABELV $161
line 207
;207:	if(self->singlebot){
ADDRFP4 0
INDIRP4
CNSTI4 1028
ADDP4
INDIRI4
CNSTI4 0
EQI4 $181
line 208
;208:	if(self->client->ps.stats[STAT_HOLDABLE_ITEM] & (1 << HI_TELEPORTER)) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $183
line 209
;209:	item = BG_FindItem( "Personal Teleporter" );
ADDRGP4 $168
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 210
;210:	Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 211
;211:	}
LABELV $183
line 212
;212:	if(self->client->ps.stats[STAT_HOLDABLE_ITEM] & (1 << HI_MEDKIT)) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $185
line 213
;213:	item = BG_FindItem( "Medkit" );
ADDRGP4 $171
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 214
;214:	Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 215
;215:	}
LABELV $185
line 216
;216:	if(self->client->ps.stats[STAT_HOLDABLE_ITEM] & (1 << HI_KAMIKAZE)) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $187
line 217
;217:	item = BG_FindItem( "Kamikaze" );
ADDRGP4 $174
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 218
;218:	Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 219
;219:	}
LABELV $187
line 220
;220:	if(self->client->ps.stats[STAT_HOLDABLE_ITEM] & (1 << HI_INVULNERABILITY)) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $189
line 221
;221:	item = BG_FindItem( "Invulnerability" );
ADDRGP4 $177
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 222
;222:	Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 223
;223:	}
LABELV $189
line 224
;224:	if(self->client->ps.stats[STAT_HOLDABLE_ITEM] & (1 << HI_PORTAL)) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $191
line 225
;225:	item = BG_FindItem( "Portal" );
ADDRGP4 $180
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 20
INDIRP4
ASGNP4
line 226
;226:	Drop_Item( self, item, 0 );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
CNSTF4 0
ARGF4
ADDRGP4 Drop_Item
CALLP4
pop
line 227
;227:	}
LABELV $191
line 228
;228:	}
LABELV $181
line 230
;229:
;230:}
LABELV $104
endproc TossClientItems 28 12
export TossClientCubes
proc TossClientCubes 64 16
line 239
;231:
;232:/*
;233:=================
;234:TossClientCubes
;235:=================
;236:*/
;237:extern gentity_t	*neutralObelisk;
;238:
;239:void TossClientCubes( gentity_t *self ) {
line 246
;240:	gitem_t		*item;
;241:	gentity_t	*drop;
;242:	vec3_t		velocity;
;243:	vec3_t		angles;
;244:	vec3_t		origin;
;245:
;246:	self->client->ps.generic1 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 440
ADDP4
CNSTI4 0
ASGNI4
line 250
;247:
;248:	// this should never happen but we should never
;249:	// get the server to crash due to skull being spawned in
;250:	if (!G_EntitiesFree()) {
ADDRLP4 44
ADDRGP4 G_EntitiesFree
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
NEI4 $194
line 251
;251:		return;
ADDRGP4 $193
JUMPV
LABELV $194
line 254
;252:	}
;253:
;254:	if( self->client->sess.sessionTeam == TEAM_RED ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 1
NEI4 $196
line 255
;255:		item = BG_FindItem( "Red Cube" );
ADDRGP4 $198
ARGP4
ADDRLP4 48
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 48
INDIRP4
ASGNP4
line 256
;256:	}
ADDRGP4 $197
JUMPV
LABELV $196
line 257
;257:	else {
line 258
;258:		item = BG_FindItem( "Blue Cube" );
ADDRGP4 $199
ARGP4
ADDRLP4 48
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 40
ADDRLP4 48
INDIRP4
ASGNP4
line 259
;259:	}
LABELV $197
line 261
;260:
;261:	angles[YAW] = (float)(level.time % 360);
ADDRLP4 16+4
ADDRGP4 level+32
INDIRI4
CNSTI4 360
MODI4
CVIF4 4
ASGNF4
line 262
;262:	angles[PITCH] = 0;	// always forward
ADDRLP4 16
CNSTF4 0
ASGNF4
line 263
;263:	angles[ROLL] = 0;
ADDRLP4 16+8
CNSTF4 0
ASGNF4
line 265
;264:
;265:	AngleVectors( angles, velocity, NULL, NULL );
ADDRLP4 16
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 48
CNSTP4 0
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 266
;266:	VectorScale( velocity, 150, velocity );
ADDRLP4 52
CNSTF4 1125515264
ASGNF4
ADDRLP4 0
ADDRLP4 52
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 52
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1125515264
ADDRLP4 0+8
INDIRF4
MULF4
ASGNF4
line 267
;267:	velocity[2] += 200 + crandom() * 50;
ADDRLP4 56
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1112014848
CNSTF4 1073741824
ADDRLP4 56
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1128792064
ADDF4
ADDF4
ASGNF4
line 269
;268:
;269:	if( neutralObelisk ) {
ADDRGP4 neutralObelisk
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $208
line 270
;270:		VectorCopy( neutralObelisk->s.pos.trBase, origin );
ADDRLP4 28
ADDRGP4 neutralObelisk
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 271
;271:		origin[2] += 44;
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
CNSTF4 1110441984
ADDF4
ASGNF4
line 272
;272:	} else {
ADDRGP4 $209
JUMPV
LABELV $208
line 273
;273:		VectorClear( origin ) ;
ADDRLP4 60
CNSTF4 0
ASGNF4
ADDRLP4 28+8
ADDRLP4 60
INDIRF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 60
INDIRF4
ASGNF4
ADDRLP4 28
ADDRLP4 60
INDIRF4
ASGNF4
line 274
;274:	}
LABELV $209
line 276
;275:
;276:	drop = LaunchItem( item, origin, velocity );
ADDRLP4 40
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 60
ADDRGP4 LaunchItem
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 60
INDIRP4
ASGNP4
line 278
;277:
;278:	drop->nextthink = level.time + g_cubeTimeout.integer * 1000;
ADDRLP4 12
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDRGP4 g_cubeTimeout+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 279
;279:	drop->think = G_FreeEntity;
ADDRLP4 12
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 280
;280:	drop->spawnflags = self->client->sess.sessionTeam;
ADDRLP4 12
INDIRP4
CNSTI4 568
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
ASGNI4
line 281
;281:}
LABELV $193
endproc TossClientCubes 64 16
export TossClientPersistantPowerups
proc TossClientPersistantPowerups 12 4
line 288
;282:
;283:/*
;284:=================
;285:TossClientPersistantPowerups
;286:=================
;287:*/
;288:void TossClientPersistantPowerups( gentity_t *ent ) {
line 291
;289:	gentity_t	*powerup;
;290:
;291:	if( !ent->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $216
line 292
;292:		return;
ADDRGP4 $215
JUMPV
LABELV $216
line 295
;293:	}
;294:
;295:	if( !ent->client->persistantPowerup ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1360
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $218
line 296
;296:		return;
ADDRGP4 $215
JUMPV
LABELV $218
line 299
;297:	}
;298:
;299:	powerup = ent->client->persistantPowerup;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1360
ADDP4
INDIRP4
ASGNP4
line 301
;300:
;301:	powerup->r.svFlags &= ~SVF_NOCLIENT;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 302
;302:	powerup->s.eFlags &= ~EF_NODRAW;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 303
;303:	powerup->r.contents = CONTENTS_TRIGGER;
ADDRLP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1073741824
ASGNI4
line 304
;304:	trap_LinkEntity( powerup );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 306
;305:
;306:	ent->client->ps.stats[STAT_PERSISTANT_POWERUP] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 192
ADDP4
CNSTI4 0
ASGNI4
line 307
;307:	ent->client->persistantPowerup = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1360
ADDP4
CNSTP4 0
ASGNP4
line 308
;308:}
LABELV $215
endproc TossClientPersistantPowerups 12 4
export LookAtKiller
proc LookAtKiller 40 4
line 316
;309:
;310:
;311:/*
;312:==================
;313:LookAtKiller
;314:==================
;315:*/
;316:void LookAtKiller( gentity_t *self, gentity_t *inflictor, gentity_t *attacker ) {
line 320
;317:	vec3_t		dir;
;318:	//vec3_t		angles;
;319:
;320:	if ( attacker && attacker != self ) {
ADDRLP4 12
ADDRFP4 8
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 12
INDIRU4
CNSTU4 0
EQU4 $221
ADDRLP4 12
INDIRU4
ADDRFP4 0
INDIRP4
CVPU4 4
EQU4 $221
line 321
;321:		VectorSubtract (attacker->s.pos.trBase, self->s.pos.trBase, dir);
ADDRLP4 16
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 20
CNSTI4 24
ASGNI4
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28
CNSTI4 28
ASGNI4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 32
CNSTI4 32
ASGNI4
ADDRLP4 0+8
ADDRFP4 8
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 322
;322:	} else if ( inflictor && inflictor != self ) {
ADDRGP4 $222
JUMPV
LABELV $221
ADDRLP4 16
ADDRFP4 4
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 16
INDIRU4
CNSTU4 0
EQU4 $225
ADDRLP4 16
INDIRU4
ADDRFP4 0
INDIRP4
CVPU4 4
EQU4 $225
line 323
;323:		VectorSubtract (inflictor->s.pos.trBase, self->s.pos.trBase, dir);
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 24
CNSTI4 24
ASGNI4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 32
CNSTI4 28
ASGNI4
ADDRLP4 0+4
ADDRLP4 20
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 36
CNSTI4 32
ASGNI4
ADDRLP4 0+8
ADDRFP4 4
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 324
;324:	} else {
ADDRGP4 $226
JUMPV
LABELV $225
line 325
;325:		self->client->ps.stats[STAT_DEAD_YAW] = self->s.angles[YAW];
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 132
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 326
;326:		return;
ADDRGP4 $220
JUMPV
LABELV $226
LABELV $222
line 329
;327:	}
;328:
;329:	self->client->ps.stats[STAT_DEAD_YAW] = vectoyaw ( dir );
ADDRLP4 0
ARGP4
ADDRLP4 20
ADDRGP4 vectoyaw
CALLF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 204
ADDP4
ADDRLP4 20
INDIRF4
CVFI4 4
ASGNI4
line 331
;330:
;331:	/*angles[YAW] =*/ vectoyaw ( dir );
ADDRLP4 0
ARGP4
ADDRGP4 vectoyaw
CALLF4
pop
line 334
;332:	//angles[PITCH] = 0;
;333:	//angles[ROLL] = 0;
;334:}
LABELV $220
endproc LookAtKiller 40 4
export GibEntity
proc GibEntity 12 12
line 341
;335:
;336:/*
;337:==================
;338:GibEntity
;339:==================
;340:*/
;341:void GibEntity( gentity_t *self, int killer ) {
line 346
;342:	gentity_t *ent;
;343:	int i;
;344:
;345:	//if this entity still has kamikaze
;346:	if (self->s.eFlags & EF_KAMIKAZE) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $230
line 348
;347:		// check if there is a kamikaze timer around for this owner
;348:		for (i = 0; i < MAX_GENTITIES; i++) {
ADDRLP4 4
CNSTI4 0
ASGNI4
LABELV $232
line 349
;349:			ent = &g_entities[i];
ADDRLP4 0
CNSTI4 2492
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 350
;350:			if (!ent->inuse)
ADDRLP4 0
INDIRP4
CNSTI4 560
ADDP4
INDIRI4
CNSTI4 0
NEI4 $236
line 351
;351:				continue;
ADDRGP4 $233
JUMPV
LABELV $236
line 352
;352:			if (ent->activator != self)
ADDRLP4 0
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CVPU4 4
EQU4 $238
line 353
;353:				continue;
ADDRGP4 $233
JUMPV
LABELV $238
line 354
;354:			if (strcmp(ent->classname, "kamikaze timer"))
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $242
ARGP4
ADDRLP4 8
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $240
line 355
;355:				continue;
ADDRGP4 $233
JUMPV
LABELV $240
line 356
;356:			G_FreeEntity(ent);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 357
;357:			break;
ADDRGP4 $234
JUMPV
LABELV $233
line 348
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 4096
LTI4 $232
LABELV $234
line 359
;358:		}
;359:	}
LABELV $230
line 360
;360:	G_AddEvent( self, EV_GIB_PLAYER, killer );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 65
ARGI4
ADDRFP4 4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 361
;361:	self->takedamage = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 832
ADDP4
CNSTI4 0
ASGNI4
line 362
;362:	self->s.eType = ET_INVISIBLE;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 10
ASGNI4
line 363
;363:	self->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 0
ASGNI4
line 364
;364:}
LABELV $229
endproc GibEntity 12 12
export body_die
proc body_die 0 8
line 371
;365:
;366:/*
;367:==================
;368:body_die
;369:==================
;370:*/
;371:void body_die( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int meansOfDeath ) {
line 372
;372:	if ( self->health > GIB_HEALTH ) {
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 -66
LEI4 $244
line 373
;373:		return;
ADDRGP4 $243
JUMPV
LABELV $244
line 375
;374:	}
;375:	if ( !g_blood.integer ) {
ADDRGP4 g_blood+12
INDIRI4
CNSTI4 0
NEI4 $246
line 376
;376:		self->health = GIB_HEALTH+1;
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
CNSTI4 -65
ASGNI4
line 377
;377:		return;
ADDRGP4 $243
JUMPV
LABELV $246
line 380
;378:	}
;379:
;380:	GibEntity( self, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 GibEntity
CALLV
pop
line 381
;381:}
LABELV $243
endproc body_die 0 8
data
export modNames
align 4
LABELV modNames
address $249
address $250
address $251
address $252
address $253
address $254
address $255
address $256
address $257
address $258
address $259
address $260
address $261
address $262
address $263
address $264
address $265
address $266
address $267
address $268
address $269
address $270
address $271
address $272
address $273
address $274
address $275
address $276
address $277
address $278
address $279
address $280
address $281
address $282
address $283
address $284
address $285
address $286
export Kamikaze_DeathActivate
code
proc Kamikaze_DeathActivate 0 4
line 431
;382:
;383:
;384:// these are just for logging, the client prints its own messages
;385:char	*modNames[] = {
;386:	"MOD_UNKNOWN",
;387:	"MOD_SHOTGUN",
;388:	"MOD_GAUNTLET",
;389:	"MOD_MACHINEGUN",
;390:	"MOD_GRENADE",
;391:	"MOD_GRENADE_SPLASH",
;392:	"MOD_ROCKET",
;393:	"MOD_ROCKET_SPLASH",
;394:	"MOD_PLASMA",
;395:	"MOD_PLASMA_SPLASH",
;396:	"MOD_RAILGUN",
;397:	"MOD_LIGHTNING",
;398:	"MOD_BFG",
;399:	"MOD_BFG_SPLASH",
;400:	"MOD_FLAME",
;401:	"MOD_FLAME_SPLASH",
;402:	"MOD_ANTIMATTER",
;403:	"MOD_ANTIMATTER_SPLASH",
;404:	"MOD_TOOLGUN",
;405:	"MOD_WATER",
;406:	"MOD_SLIME",
;407:	"MOD_LAVA",
;408:	"MOD_CRUSH",
;409:	"MOD_TELEFRAG",
;410:	"MOD_FALLING",
;411:	"MOD_SUICIDE",
;412:	"MOD_TARGET_LASER",
;413:	"MOD_TRIGGER_HURT",
;414:	"MOD_NAIL",
;415:	"MOD_CHAINGUN",
;416:	"MOD_PROXIMITY_MINE",
;417:	"MOD_KAMIKAZE",
;418:	"MOD_JUICED",
;419:	"MOD_GRAPPLE",
;420:	"MOD_CAR",
;421:	"MOD_CAREXPLODE",
;422:	"MOD_PROP",
;423:	"MOD_BREAKABLE_SPLASH"
;424:};
;425:
;426:/*
;427:==================
;428:Kamikaze_DeathActivate
;429:==================
;430:*/
;431:void Kamikaze_DeathActivate( gentity_t *ent ) {
line 432
;432:	G_StartKamikaze(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_StartKamikaze
CALLV
pop
line 433
;433:	G_FreeEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 434
;434:}
LABELV $287
endproc Kamikaze_DeathActivate 0 4
export Kamikaze_DeathTimer
proc Kamikaze_DeathTimer 16 0
line 441
;435:
;436:/*
;437:==================
;438:Kamikaze_DeathTimer
;439:==================
;440:*/
;441:void Kamikaze_DeathTimer( gentity_t *self ) {
line 444
;442:	gentity_t *ent;
;443:
;444:	ent = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 445
;445:	ent->classname = "kamikaze timer";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $242
ASGNP4
line 446
;446:	VectorCopy(self->s.pos.trBase, ent->s.pos.trBase);
ADDRLP4 8
CNSTI4 24
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 8
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 447
;447:	ent->r.svFlags |= SVF_NOCLIENT;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 448
;448:	ent->think = Kamikaze_DeathActivate;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Kamikaze_DeathActivate
ASGNP4
line 449
;449:	ent->nextthink = level.time + 50;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 451
;450:
;451:	ent->activator = self;
ADDRLP4 0
INDIRP4
CNSTI4 968
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 452
;452:}
LABELV $288
endproc Kamikaze_DeathTimer 16 0
export CheckAlmostCapture
proc CheckAlmostCapture 56 12
line 460
;453:
;454:
;455:/*
;456:==================
;457:CheckAlmostCapture
;458:==================
;459:*/
;460:void CheckAlmostCapture( gentity_t *self, gentity_t *attacker ) {
line 466
;461:	gentity_t	*ent;
;462:	vec3_t		dir;
;463:	char		*classname;
;464:
;465:	// if this player was carrying a flag
;466:	if ( self->client->ps.powerups[PW_REDFLAG] ||
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
ADDRLP4 24
CNSTI4 0
ASGNI4
ADDRLP4 20
INDIRP4
CNSTI4 340
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $294
ADDRLP4 20
INDIRP4
CNSTI4 344
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
NEI4 $294
ADDRLP4 20
INDIRP4
CNSTI4 348
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
EQI4 $291
LABELV $294
line 468
;467:		self->client->ps.powerups[PW_BLUEFLAG] ||
;468:		self->client->ps.powerups[PW_NEUTRALFLAG] ) {
line 470
;469:		// get the goal flag this player should have been going for
;470:		if ( g_gametype.integer == GT_CTF || g_gametype.integer == GT_CTF_ELIMINATION) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 5
EQI4 $299
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
NEI4 $295
LABELV $299
line 471
;471:			if ( self->client->sess.sessionTeam == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 2
NEI4 $300
line 472
;472:				classname = "team_CTF_blueflag";
ADDRLP4 4
ADDRGP4 $302
ASGNP4
line 473
;473:			}
ADDRGP4 $296
JUMPV
LABELV $300
line 474
;474:			else {
line 475
;475:				classname = "team_CTF_redflag";
ADDRLP4 4
ADDRGP4 $303
ASGNP4
line 476
;476:			}
line 477
;477:		}
ADDRGP4 $296
JUMPV
LABELV $295
line 478
;478:		else {
line 479
;479:			if ( self->client->sess.sessionTeam == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 2
NEI4 $304
line 480
;480:				classname = "team_CTF_redflag";
ADDRLP4 4
ADDRGP4 $303
ASGNP4
line 481
;481:			}
ADDRGP4 $305
JUMPV
LABELV $304
line 482
;482:			else {
line 483
;483:				classname = "team_CTF_blueflag";
ADDRLP4 4
ADDRGP4 $302
ASGNP4
line 484
;484:			}
LABELV $305
line 485
;485:		}
LABELV $296
line 486
;486:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
LABELV $306
line 488
;487:		do
;488:		{
line 489
;489:			ent = G_Find(ent, FOFS(classname), classname);
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 564
ARGI4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 490
;490:		} while (ent && (ent->flags & FL_DROPPED_ITEM));
LABELV $307
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $309
ADDRLP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $306
LABELV $309
line 492
;491:		// if we found the destination flag and it's not picked up
;492:		if (ent && !(ent->r.svFlags & SVF_NOCLIENT) ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $310
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $310
line 494
;493:			// if the player was *very* close
;494:			VectorSubtract( self->client->ps.origin, ent->s.origin, dir );
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
ASGNP4
ADDRLP4 8
ADDRLP4 36
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8+4
ADDRLP4 36
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 8+8
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ASGNF4
line 495
;495:			if ( VectorLength(dir) < 200 ) {
ADDRLP4 8
ARGP4
ADDRLP4 44
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 44
INDIRF4
CNSTF4 1128792064
GEF4 $314
line 496
;496:				self->client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_HOLYSHIT;
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 4
BXORI4
ASGNI4
line 497
;497:				if ( attacker->client ) {
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $316
line 498
;498:					attacker->client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_HOLYSHIT;
ADDRLP4 52
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
CNSTI4 4
BXORI4
ASGNI4
line 499
;499:				}
LABELV $316
line 500
;500:			}
LABELV $314
line 501
;501:		}
LABELV $310
line 502
;502:	}
LABELV $291
line 503
;503:}
LABELV $290
endproc CheckAlmostCapture 56 12
export CheckAlmostScored
proc CheckAlmostScored 44 12
line 510
;504:
;505:/*
;506:==================
;507:CheckAlmostScored
;508:==================
;509:*/
;510:void CheckAlmostScored( gentity_t *self, gentity_t *attacker ) {
line 516
;511:	gentity_t	*ent;
;512:	vec3_t		dir;
;513:	char		*classname;
;514:
;515:	// if the player was carrying cubes
;516:	if ( self->client->ps.generic1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
CNSTI4 0
EQI4 $319
line 517
;517:		if ( self->client->sess.sessionTeam == TEAM_BLUE ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 2
NEI4 $321
line 518
;518:			classname = "team_redobelisk";
ADDRLP4 16
ADDRGP4 $323
ASGNP4
line 519
;519:		}
ADDRGP4 $322
JUMPV
LABELV $321
line 520
;520:		else {
line 521
;521:			classname = "team_blueobelisk";
ADDRLP4 16
ADDRGP4 $324
ASGNP4
line 522
;522:		}
LABELV $322
line 523
;523:		ent = G_Find(NULL, FOFS(classname), classname);
CNSTP4 0
ARGP4
CNSTI4 564
ARGI4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 525
;524:		// if we found the destination obelisk
;525:		if ( ent ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $325
line 527
;526:			// if the player was *very* close
;527:			VectorSubtract( self->client->ps.origin, ent->s.origin, dir );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
ASGNP4
ADDRLP4 28
ADDRLP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 24
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 24
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDRLP4 28
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
SUBF4
ASGNF4
line 528
;528:			if ( VectorLength(dir) < 200 ) {
ADDRLP4 4
ARGP4
ADDRLP4 32
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 32
INDIRF4
CNSTF4 1128792064
GEF4 $329
line 529
;529:				self->client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_HOLYSHIT;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 4
BXORI4
ASGNI4
line 530
;530:				if ( attacker->client ) {
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $331
line 531
;531:					attacker->client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_HOLYSHIT;
ADDRLP4 40
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 4
BXORI4
ASGNI4
line 532
;532:				}
LABELV $331
line 533
;533:			}
LABELV $329
line 534
;534:		}
LABELV $325
line 535
;535:	}
LABELV $319
line 536
;536:}
LABELV $318
endproc CheckAlmostScored 44 12
bss
align 4
LABELV $492
skip 4
export player_die
code
proc player_die 108 12
line 543
;537:
;538:/*
;539:==================
;540:player_die
;541:==================
;542:*/
;543:void player_die( gentity_t *self, gentity_t *inflictor, gentity_t *attacker, int damage, int meansOfDeath ) {
line 551
;544:	gentity_t	*ent;
;545:	int			anim;
;546:	int			contents;
;547:	int			killer;
;548:	int			i,counter2;
;549:	char		*killerName, *obit;
;550:
;551:	if ( self->client->ps.pm_type == PM_DEAD ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
NEI4 $334
line 552
;552:		return;
ADDRGP4 $333
JUMPV
LABELV $334
line 555
;553:	}
;554:
;555:	if ( level.intermissiontime ) {
ADDRGP4 level+9912
INDIRI4
CNSTI4 0
EQI4 $336
line 556
;556:		return;
ADDRGP4 $333
JUMPV
LABELV $336
line 559
;557:	}
;558:	
;559:	self->client->noclip = 0;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1232
ADDP4
CNSTI4 0
ASGNI4
line 562
;560:
;561:	//if we're in SP mode and player killed a bot, award score for the kill
;562:	if(g_gametype.integer == GT_SINGLE){
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 2
NEI4 $339
line 563
;563:	if ( self->singlebot == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 1028
ADDP4
INDIRI4
CNSTI4 1
NEI4 $342
line 564
;564:		if ( self->botspawn && self->botspawn->health && attacker->client ) {
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
INDIRP4
ASGNP4
ADDRLP4 36
CNSTU4 0
ASGNU4
ADDRLP4 32
INDIRP4
CVPU4 4
ADDRLP4 36
INDIRU4
EQU4 $344
ADDRLP4 32
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 0
EQI4 $344
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 36
INDIRU4
EQU4 $344
line 565
;565:			AddScore( attacker, self->r.currentOrigin, self->botspawn->health );
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 528
ADDP4
ARGP4
ADDRLP4 40
INDIRP4
CNSTI4 644
ADDP4
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 566
;566:			self->s.time = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 567
;567:		}
LABELV $344
line 568
;568:	}		
LABELV $342
line 569
;569:	}
LABELV $339
line 571
;570:			
;571:	self->client->pers.oldmoney = self->client->pers.oldmoney;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1028
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
ASGNI4
line 575
;572:
;573://unlagged - backward reconciliation #2
;574:	// make sure the body shows up in the client's current position
;575:	G_UnTimeShiftClient( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_UnTimeShiftClient
CALLV
pop
line 578
;576://unlagged - backward reconciliation #2
;577:    //KK-OAX Here is where we run the streak logic.
;578:    G_RunStreakLogic( attacker, self );
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunStreakLogic
CALLV
pop
line 581
;579:
;580:	// check for an almost capture
;581:	CheckAlmostCapture( self, attacker );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CheckAlmostCapture
CALLV
pop
line 583
;582:	// check for a player that almost brought in cubes
;583:	CheckAlmostScored( self, attacker );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 CheckAlmostScored
CALLV
pop
line 585
;584:
;585:	if (self->client && self->client->hook) {
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
ADDRLP4 40
CNSTU4 0
ASGNU4
ADDRLP4 36
INDIRP4
CVPU4 4
ADDRLP4 40
INDIRU4
EQU4 $347
ADDRLP4 36
INDIRP4
CNSTI4 1344
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 40
INDIRU4
EQU4 $347
line 586
;586:		Weapon_HookFree(self->client->hook);
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1344
ADDP4
INDIRP4
ARGP4
ADDRGP4 Weapon_HookFree
CALLV
pop
line 587
;587:	}
LABELV $347
line 588
;588:	if ((self->client->ps.eFlags & EF_TICKING) && self->activator) {
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $349
ADDRLP4 44
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $349
line 589
;589:		self->client->ps.eFlags &= ~EF_TICKING;
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 -3
BANDI4
ASGNI4
line 590
;590:		self->activator->think = G_FreeEntity;
ADDRFP4 0
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 591
;591:		self->activator->nextthink = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 592
;592:	}
LABELV $349
line 593
;593:	self->client->ps.pm_type = PM_DEAD;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 595
;594:
;595:	if ( attacker ) {
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $352
line 596
;596:		killer = attacker->s.number;
ADDRLP4 8
ADDRFP4 8
INDIRP4
INDIRI4
ASGNI4
line 597
;597:		if ( attacker->client ) {
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $354
line 598
;598:			killerName = attacker->client->pers.netname;
ADDRLP4 16
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 516
ADDP4
ASGNP4
line 599
;599:		} else {
ADDRGP4 $353
JUMPV
LABELV $354
line 600
;600:			killerName = "<non-client>";
ADDRLP4 16
ADDRGP4 $356
ASGNP4
line 601
;601:		}
line 602
;602:	} else {
ADDRGP4 $353
JUMPV
LABELV $352
line 603
;603:		killer = ENTITYNUM_WORLD;
ADDRLP4 8
CNSTI4 4094
ASGNI4
line 604
;604:		killerName = "<world>";
ADDRLP4 16
ADDRGP4 $357
ASGNP4
line 605
;605:	}
LABELV $353
line 607
;606:
;607:	if ( killer < 0 || killer >= MAX_CLIENTS ) {
ADDRLP4 8
INDIRI4
CNSTI4 0
LTI4 $360
ADDRLP4 8
INDIRI4
CNSTI4 256
LTI4 $358
LABELV $360
line 608
;608:		killer = ENTITYNUM_WORLD;
ADDRLP4 8
CNSTI4 4094
ASGNI4
line 609
;609:		killerName = "<world>";
ADDRLP4 16
ADDRGP4 $357
ASGNP4
line 610
;610:	}
LABELV $358
line 612
;611:
;612:	if ( meansOfDeath < 0 || meansOfDeath >= sizeof( modNames ) / sizeof( modNames[0] ) ) {
ADDRLP4 52
ADDRFP4 16
INDIRI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
LTI4 $363
ADDRLP4 52
INDIRI4
CVIU4 4
CNSTU4 38
LTU4 $361
LABELV $363
line 613
;613:		obit = "<bad obituary>";
ADDRLP4 24
ADDRGP4 $364
ASGNP4
line 614
;614:	} else {
ADDRGP4 $362
JUMPV
LABELV $361
line 615
;615:		obit = modNames[meansOfDeath];
ADDRLP4 24
ADDRFP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 modNames
ADDP4
INDIRP4
ASGNP4
line 616
;616:	}
LABELV $362
line 621
;617:
;618:	//G_Printf("Kill: %i %i %i: %s killed %s by %s\n", killer, self->s.number, meansOfDeath, killerName, self->client->pers.netname, obit );
;619:
;620:	// broadcast the death event to everyone
;621:	ent = G_TempEntity( self->r.currentOrigin, EV_OBITUARY );
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ARGP4
CNSTI4 61
ARGI4
ADDRLP4 56
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 56
INDIRP4
ASGNP4
line 622
;622:	ent->s.eventParm = meansOfDeath;
ADDRLP4 4
INDIRP4
CNSTI4 196
ADDP4
ADDRFP4 16
INDIRI4
ASGNI4
line 623
;623:	ent->s.otherEntityNum = self->s.number;
ADDRLP4 4
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 624
;624:	ent->s.otherEntityNum2 = killer;
ADDRLP4 4
INDIRP4
CNSTI4 156
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 626
;625:        //Sago: Hmmm... generic? Can I transmit anything I like? Like if it is a team kill? Let's try
;626:        ent->s.generic1 = OnSameTeam (self, attacker);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 60
INDIRI4
ASGNI4
line 627
;627:        if( !((g_gametype.integer==GT_ELIMINATION || g_gametype.integer==GT_CTF_ELIMINATION) && level.time < level.roundStartTime) )
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $372
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
NEI4 $371
LABELV $372
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+10000
INDIRI4
LTI4 $365
LABELV $371
line 628
;628:            ent->r.svFlags = SVF_BROADCAST;	// send to everyone (if not an elimination gametype during active warmup)
ADDRLP4 4
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 32
ASGNI4
ADDRGP4 $366
JUMPV
LABELV $365
line 630
;629:        else
;630:            ent->r.svFlags = SVF_NOCLIENT;
ADDRLP4 4
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 1
ASGNI4
LABELV $366
line 632
;631:
;632:	self->enemy = attacker;
ADDRFP4 0
INDIRP4
CNSTI4 964
ADDP4
ADDRFP4 8
INDIRP4
ASGNP4
line 634
;633:
;634:	self->client->ps.persistant[PERS_KILLED]++;
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 280
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 636
;635:
;636:	if (attacker) {
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $373
line 637
;637:		attacker->client->lastkilled_client = self->s.number;
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1304
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 639
;638:
;639:		if ( attacker == self || OnSameTeam (self, attacker ) ) {
ADDRLP4 68
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CVPU4 4
ADDRLP4 72
INDIRP4
CVPU4 4
EQU4 $377
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 76
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $375
LABELV $377
line 640
;640:			if(g_gametype.integer!=GT_LMS && !((g_gametype.integer==GT_ELIMINATION || g_gametype.integer==GT_CTF_ELIMINATION) && level.time < level.roundStartTime))
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 11
EQI4 $378
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $386
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
NEI4 $385
LABELV $386
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+10000
INDIRI4
LTI4 $378
LABELV $385
line 641
;641:                            if( (g_gametype.integer <GT_TEAM && g_ffa_gt!=1 && self->client->ps.persistant[PERS_SCORE]>0) || level.numNonSpectatorClients<3) //Cannot get negative scores by suicide
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
GEI4 $393
ADDRGP4 g_ffa_gt
INDIRI4
CNSTI4 1
EQI4 $393
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
CNSTI4 0
GTI4 $391
LABELV $393
ADDRGP4 level+76
INDIRI4
CNSTI4 3
GEI4 $387
LABELV $391
line 642
;642:                                AddScore( attacker, self->r.currentOrigin, -1 );
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRGP4 AddScore
CALLV
pop
LABELV $387
LABELV $378
line 643
;643:								G_LogPrintf( "Score: Non LMS Elim 1!\n" );
ADDRGP4 $394
ARGP4
ADDRGP4 G_LogPrintf
CALLV
pop
line 644
;644:		} else {
ADDRGP4 $374
JUMPV
LABELV $375
line 645
;645:			if(g_gametype.integer != GT_LMS){
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 11
EQI4 $395
line 646
;646:				AddScore( attacker, self->r.currentOrigin, 1 );
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 AddScore
CALLV
pop
line 647
;647:				attacker->client->pers.oldmoney += 1;
ADDRLP4 80
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1028
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 648
;648:				G_LogPrintf( "Score: Non LMS 1!\n" );
ADDRGP4 $398
ARGP4
ADDRGP4 G_LogPrintf
CALLV
pop
line 649
;649:			}
LABELV $395
line 651
;650:
;651:			if( meansOfDeath == MOD_GAUNTLET ) {
ADDRFP4 16
INDIRI4
CNSTI4 2
NEI4 $399
line 653
;652:
;653:				attacker->client->pers.oldmoney += 1;
ADDRLP4 80
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1028
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 656
;654:				
;655:				// play humiliation on player
;656:				attacker->client->ps.persistant[PERS_GAUNTLET_FRAG_COUNT]++;
ADDRLP4 84
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 300
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 659
;657:
;658:				// add the sprite over the player's head
;659:				attacker->client->ps.eFlags &= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 88
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 660
;660:				attacker->client->ps.eFlags |= EF_AWARD_GAUNTLET;
ADDRLP4 92
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRI4
CNSTI4 64
BORI4
ASGNI4
line 661
;661:				attacker->client->rewardTime = level.time + REWARD_SPRITE_TIME;
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1328
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 664
;662:
;663:				// also play humiliation on target
;664:				self->client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_GAUNTLETREWARD;
ADDRLP4 96
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRI4
CNSTI4 2
BXORI4
ASGNI4
line 665
;665:			}
LABELV $399
line 669
;666:
;667:			// check for two kills in a short amount of time
;668:			// if this is close enough to the last kill, give a reward sound
;669:			if ( level.time - attacker->client->lastKillTime < CARNAGE_REWARD_TIME ) {
ADDRGP4 level+32
INDIRI4
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1336
ADDP4
INDIRI4
SUBI4
CNSTI4 3000
GEI4 $402
line 672
;670:				// KK-OAX
;671:				// Check if Multikills are enabled
;672:				if( g_altExcellent.integer ) {
ADDRGP4 g_altExcellent+12
INDIRI4
CNSTI4 0
EQI4 $405
line 673
;673:				    attacker->client->pers.multiKillCount++;
ADDRLP4 80
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 916
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 674
;674:				    G_checkForMultiKill( attacker );
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 G_checkForMultiKill
CALLV
pop
line 675
;675:				} // play excellent on player
LABELV $405
line 676
;676:				attacker->client->ps.persistant[PERS_EXCELLENT_COUNT]++;
ADDRLP4 80
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 288
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 677
;677:				attacker->client->pers.oldmoney += 1;
ADDRLP4 84
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1028
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 679
;678:				// add the sprite over the player's head
;679:				attacker->client->ps.eFlags &= ~(EF_AWARD_IMPRESSIVE | EF_AWARD_EXCELLENT | EF_AWARD_GAUNTLET | EF_AWARD_ASSIST | EF_AWARD_DEFEND | EF_AWARD_CAP );
ADDRLP4 88
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRI4
CNSTI4 -231497
BANDI4
ASGNI4
line 680
;680:				attacker->client->ps.eFlags |= EF_AWARD_EXCELLENT;
ADDRLP4 92
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
line 681
;681:				attacker->client->rewardTime = level.time + REWARD_SPRITE_TIME;
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1328
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 682
;682:			} else {
ADDRGP4 $403
JUMPV
LABELV $402
line 685
;683:			    //KK-OAX Clear multikill count
;684:			    //Must be 1 so the correct number of kills are displayed to the clients.
;685:			    attacker->client->pers.multiKillCount = 1;
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 916
ADDP4
CNSTI4 1
ASGNI4
line 686
;686:			}
LABELV $403
line 687
;687:			attacker->client->lastKillTime = level.time;
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1336
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 688
;688:		}
line 689
;689:	} else {
ADDRGP4 $374
JUMPV
LABELV $373
line 690
;690:		if(g_gametype.integer!=GT_LMS && !((g_gametype.integer==GT_ELIMINATION || g_gametype.integer==GT_CTF_ELIMINATION) && level.time < level.roundStartTime))
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 11
EQI4 $410
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $418
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
NEI4 $417
LABELV $418
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+10000
INDIRI4
LTI4 $410
LABELV $417
line 691
;691:                    if(self->client->ps.persistant[PERS_SCORE]>0 || level.numNonSpectatorClients<3) //Cannot get negative scores by suicide
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 248
ADDP4
INDIRI4
CNSTI4 0
GTI4 $422
ADDRGP4 level+76
INDIRI4
CNSTI4 3
GEI4 $419
LABELV $422
line 692
;692:			AddScore( self, self->r.currentOrigin, -1 );
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
ARGP4
ADDRLP4 68
INDIRP4
CNSTI4 528
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRGP4 AddScore
CALLV
pop
LABELV $419
LABELV $410
line 693
;693:	}
LABELV $374
line 696
;694:
;695:	// Add team bonuses
;696:	Team_FragBonuses(self, inflictor, attacker);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Team_FragBonuses
CALLV
pop
line 699
;697:
;698:	// if I committed suicide, the flag does not fall, it returns.
;699:	if (meansOfDeath == MOD_SUICIDE) {
ADDRFP4 16
INDIRI4
CNSTI4 25
NEI4 $423
line 700
;700:		if ( self->client->ps.powerups[PW_NEUTRALFLAG] ) {		// only happens in One Flag CTF
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 348
ADDP4
INDIRI4
CNSTI4 0
EQI4 $425
line 701
;701:			Team_ReturnFlag( TEAM_FREE );
CNSTI4 0
ARGI4
ADDRGP4 Team_ReturnFlag
CALLV
pop
line 702
;702:			self->client->ps.powerups[PW_NEUTRALFLAG] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 348
ADDP4
CNSTI4 0
ASGNI4
line 703
;703:		}
ADDRGP4 $426
JUMPV
LABELV $425
line 704
;704:		else if ( self->client->ps.powerups[PW_REDFLAG] ) {		// only happens in standard CTF
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 340
ADDP4
INDIRI4
CNSTI4 0
EQI4 $427
line 705
;705:			Team_ReturnFlag( TEAM_RED );
CNSTI4 1
ARGI4
ADDRGP4 Team_ReturnFlag
CALLV
pop
line 706
;706:			self->client->ps.powerups[PW_REDFLAG] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 340
ADDP4
CNSTI4 0
ASGNI4
line 707
;707:		}
ADDRGP4 $428
JUMPV
LABELV $427
line 708
;708:		else if ( self->client->ps.powerups[PW_BLUEFLAG] ) {	// only happens in standard CTF
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 344
ADDP4
INDIRI4
CNSTI4 0
EQI4 $429
line 709
;709:			Team_ReturnFlag( TEAM_BLUE );
CNSTI4 2
ARGI4
ADDRGP4 Team_ReturnFlag
CALLV
pop
line 710
;710:			self->client->ps.powerups[PW_BLUEFLAG] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 344
ADDP4
CNSTI4 0
ASGNI4
line 711
;711:		}
LABELV $429
LABELV $428
LABELV $426
line 712
;712:	}
LABELV $423
line 713
;713:        TossClientPersistantPowerups( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 TossClientPersistantPowerups
CALLV
pop
line 714
;714:        if( g_gametype.integer == GT_HARVESTER ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 8
NEI4 $431
line 715
;715:                TossClientCubes( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 TossClientCubes
CALLV
pop
line 716
;716:        }
LABELV $431
line 718
;717:	// if client is in a nodrop area, don't drop anything (but return CTF flags!)
;718:	TossClientItems( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 TossClientItems
CALLV
pop
line 721
;719:
;720:
;721:	Cmd_Score_f( self );		// show scores
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Cmd_Score_f
CALLV
pop
line 724
;722:	// send updated scores to any clients that are following this one,
;723:	// or they would get stale scoreboards
;724:	for ( i = 0 ; i < level.maxclients ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $437
JUMPV
LABELV $434
line 727
;725:		gclient_t	*client;
;726:
;727:		client = &level.clients[i];
ADDRLP4 68
CNSTI4 2324
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 level
INDIRP4
ADDP4
ASGNP4
line 728
;728:		if ( client->pers.connected != CON_CONNECTED ) {
ADDRLP4 68
INDIRP4
CNSTI4 472
ADDP4
INDIRI4
CNSTI4 2
EQI4 $439
line 729
;729:			continue;
ADDRGP4 $435
JUMPV
LABELV $439
line 731
;730:		}
;731:		if ( client->sess.sessionTeam != TEAM_SPECTATOR ) {
ADDRLP4 68
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 3
EQI4 $441
line 732
;732:			continue;
ADDRGP4 $435
JUMPV
LABELV $441
line 734
;733:		}
;734:		if ( client->sess.spectatorClient == self->s.number ) {
ADDRLP4 68
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
NEI4 $443
line 735
;735:			Cmd_Score_f( g_entities + i );
CNSTI4 2492
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRGP4 Cmd_Score_f
CALLV
pop
line 736
;736:		}
LABELV $443
line 737
;737:	}
LABELV $435
line 724
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $437
ADDRLP4 0
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $434
line 739
;738:
;739:	self->takedamage = qtrue;	// can still be gibbed
ADDRFP4 0
INDIRP4
CNSTI4 832
ADDP4
CNSTI4 1
ASGNI4
line 741
;740:
;741:	for(i = 1 ; i < WEAPONS_NUM-15 ; i++){
ADDRLP4 0
CNSTI4 1
ASGNI4
LABELV $445
line 742
;742:		self->swep_list[i+15] = 0; 
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 2352
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 743
;743:	}
LABELV $446
line 741
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 4
LTI4 $445
line 744
;744:	self->s.weapon = WP_NONE;
ADDRFP4 0
INDIRP4
CNSTI4 204
ADDP4
CNSTI4 0
ASGNI4
line 745
;745:	self->s.powerups = 0;
ADDRFP4 0
INDIRP4
CNSTI4 200
ADDP4
CNSTI4 0
ASGNI4
line 746
;746:	self->r.contents = CONTENTS_CORPSE;
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 67108864
ASGNI4
line 748
;747:
;748:	self->s.angles[0] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
CNSTF4 0
ASGNF4
line 749
;749:	self->s.angles[2] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 0
ASGNF4
line 750
;750:	LookAtKiller (self, inflictor, attacker);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 LookAtKiller
CALLV
pop
line 752
;751:
;752:	VectorCopy( self->s.angles, self->client->ps.viewangles );
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 128
ADDP4
INDIRB
ASGNB 12
line 754
;753:
;754:	self->s.loopSound = 0;
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
CNSTI4 0
ASGNI4
line 756
;755:
;756:	self->r.maxs[2] = -8;
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
CNSTF4 3238002688
ASGNF4
line 760
;757:
;758:	// don't allow respawn until the death anim is done
;759:	// g_forcerespawn may force spawning at some later time
;760:	self->client->respawnTime = level.time + g_respawnwait.integer +i;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_respawnwait+12
INDIRI4
ADDI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 761
;761:		if(self->client->sess.sessionTeam == TEAM_BLUE){
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 2
NEI4 $451
line 762
;762:		self->client->respawnTime = level.time + g_teamblue_respawnwait.integer +i;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_teamblue_respawnwait+12
INDIRI4
ADDI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 763
;763:		}
LABELV $451
line 764
;764:		if(self->client->sess.sessionTeam == TEAM_RED){
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 1
NEI4 $455
line 765
;765:		self->client->respawnTime = level.time + g_teamred_respawnwait.integer +i;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_teamred_respawnwait+12
INDIRI4
ADDI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 766
;766:		}
LABELV $455
line 767
;767:        if(g_respawntime.integer>0) {
ADDRGP4 g_respawntime+12
INDIRI4
CNSTI4 0
LEI4 $459
line 768
;768:            for(i=0; self->client->respawnTime > i*g_respawntime.integer*1000;i++);
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $465
JUMPV
LABELV $462
LABELV $463
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $465
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
INDIRI4
CNSTI4 1000
ADDRLP4 0
INDIRI4
ADDRGP4 g_respawntime+12
INDIRI4
MULI4
MULI4
GTI4 $462
line 770
;769:
;770:            self->client->respawnTime = i*g_respawntime.integer*1000;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
CNSTI4 1000
ADDRLP4 0
INDIRI4
ADDRGP4 g_respawntime+12
INDIRI4
MULI4
MULI4
ASGNI4
line 771
;771:if(ent->singlebot){
ADDRLP4 4
INDIRP4
CNSTI4 1028
ADDP4
INDIRI4
CNSTI4 0
EQI4 $468
line 772
;772:	self->client->respawnTime = level.time + 5000;	//keep bot bodies around slightly longer
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 5000
ADDI4
ASGNI4
line 773
;773:}
LABELV $468
line 774
;774:        }
LABELV $459
line 778
;775:        //For testing:
;776:        //G_Printf("Respawntime: %i\n",self->client->respawnTime);
;777:	//However during warm up, we should respawn quicker!
;778:	if(g_gametype.integer == GT_ELIMINATION || g_gametype.integer == GT_CTF_ELIMINATION || g_gametype.integer == GT_LMS)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $477
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
EQI4 $477
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 11
NEI4 $471
LABELV $477
line 779
;779:		if(level.time<=level.roundStartTime && level.time>level.roundStartTime-1000*g_elimination_activewarmup.integer)
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+10000
INDIRI4
GTI4 $478
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+10000
INDIRI4
CNSTI4 1000
ADDRGP4 g_elimination_activewarmup+12
INDIRI4
MULI4
SUBI4
LEI4 $478
line 780
;780:			self->client->respawnTime = level.time + rand()%800;
ADDRLP4 72
ADDRGP4 rand
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRLP4 72
INDIRI4
CNSTI4 800
MODI4
ADDI4
ASGNI4
LABELV $478
LABELV $471
line 782
;781:
;782:        RespawnTimeMessage(self,self->client->respawnTime);
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
INDIRI4
ARGI4
ADDRGP4 RespawnTimeMessage
CALLV
pop
line 786
;783:
;784:
;785:	// remove powerups
;786:	memset( self->client->ps.powerups, 0, sizeof(self->client->ps.powerups) );
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ARGP4
CNSTI4 0
ARGI4
CNSTI4 64
ARGI4
ADDRGP4 memset
CALLP4
pop
line 789
;787:
;788:	// never gib in a nodrop
;789:	contents = trap_PointContents( self->r.currentOrigin, -1 );
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 80
ADDRGP4 trap_PointContents
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 80
INDIRI4
ASGNI4
line 791
;790:
;791:	if ( (self->health <= GIB_HEALTH && !(contents & CONTENTS_NODROP) && g_blood.integer) || meansOfDeath == MOD_SUICIDE) {
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 -66
GTI4 $491
ADDRLP4 12
INDIRI4
CVIU4 4
CNSTU4 2147483648
BANDU4
CNSTU4 0
NEU4 $491
ADDRGP4 g_blood+12
INDIRI4
CNSTI4 0
NEI4 $489
LABELV $491
ADDRFP4 16
INDIRI4
CNSTI4 25
NEI4 $486
LABELV $489
line 793
;792:		// gib death
;793:		GibEntity( self, killer );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 GibEntity
CALLV
pop
line 794
;794:	} else {
ADDRGP4 $487
JUMPV
LABELV $486
line 798
;795:		// normal death
;796:		static int i;
;797:
;798:		switch ( i ) {
ADDRLP4 84
ADDRGP4 $492
INDIRI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $495
ADDRLP4 84
INDIRI4
CNSTI4 1
EQI4 $496
ADDRLP4 84
INDIRI4
CNSTI4 2
EQI4 $497
ADDRGP4 $493
JUMPV
LABELV $495
line 800
;799:		case 0:
;800:			anim = BOTH_DEATH1;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 801
;801:			break;
ADDRGP4 $494
JUMPV
LABELV $496
line 803
;802:		case 1:
;803:			anim = BOTH_DEATH2;
ADDRLP4 20
CNSTI4 2
ASGNI4
line 804
;804:			break;
ADDRGP4 $494
JUMPV
LABELV $497
LABELV $493
line 807
;805:		case 2:
;806:		default:
;807:			anim = BOTH_DEATH3;
ADDRLP4 20
CNSTI4 4
ASGNI4
line 808
;808:			break;
LABELV $494
line 813
;809:		}
;810:
;811:		// for the no-blood option, we need to prevent the health
;812:		// from going to gib level
;813:		if ( self->health <= GIB_HEALTH ) {
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 -66
GTI4 $498
line 814
;814:			self->health = GIB_HEALTH+1;
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
CNSTI4 -65
ASGNI4
line 815
;815:		}
LABELV $498
line 817
;816:
;817:		self->client->ps.legsAnim =
ADDRLP4 88
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 76
ADDP4
ASGNP4
ADDRLP4 92
CNSTI4 128
ASGNI4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRI4
ADDRLP4 92
INDIRI4
BANDI4
ADDRLP4 92
INDIRI4
BXORI4
ADDRLP4 20
INDIRI4
BORI4
ASGNI4
line 819
;818:			( ( self->client->ps.legsAnim & ANIM_TOGGLEBIT ) ^ ANIM_TOGGLEBIT ) | anim;
;819:		self->client->ps.torsoAnim =
ADDRLP4 96
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 84
ADDP4
ASGNP4
ADDRLP4 100
CNSTI4 128
ASGNI4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRI4
ADDRLP4 100
INDIRI4
BANDI4
ADDRLP4 100
INDIRI4
BXORI4
ADDRLP4 20
INDIRI4
BORI4
ASGNI4
line 822
;820:			( ( self->client->ps.torsoAnim & ANIM_TOGGLEBIT ) ^ ANIM_TOGGLEBIT ) | anim;
;821:
;822:		G_AddEvent( self, EV_DEATH1 + i, killer );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 $492
INDIRI4
CNSTI4 58
ADDI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 825
;823:
;824:		// the body can still be gibbed
;825:		self->die = body_die;
ADDRFP4 0
INDIRP4
CNSTI4 792
ADDP4
ADDRGP4 body_die
ASGNP4
line 828
;826:
;827:		// globally cycle through the different death animations
;828:		i = ( i + 1 ) % 3;
ADDRLP4 104
ADDRGP4 $492
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
CNSTI4 3
MODI4
ASGNI4
line 830
;829:
;830:		if (self->s.eFlags & EF_KAMIKAZE) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $500
line 831
;831:			Kamikaze_DeathTimer( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Kamikaze_DeathTimer
CALLV
pop
line 832
;832:		}
LABELV $500
line 833
;833:	}
LABELV $487
line 835
;834:
;835:	trap_LinkEntity (self);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 838
;836:
;837:	// Fire trigger_death and trigger_frag target entities and the deathtarget for the related target_botspawn 
;838:	G_UseTriggerFragAndDeathEntities ( self, attacker );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 G_UseTriggerFragAndDeathEntities
CALLI4
pop
line 841
;839:	
;840:	// Trigger deathtarget and drop loot
;841:	if ( self->botspawn ) {
ADDRFP4 0
INDIRP4
CNSTI4 644
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $502
line 842
;842:		G_UseDeathTargets(self->botspawn, self);
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 644
ADDP4
INDIRP4
ARGP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRGP4 G_UseDeathTargets
CALLV
pop
line 843
;843:		G_DropLoot(self->botspawn, self);
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 644
ADDP4
INDIRP4
ARGP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRGP4 G_DropLoot
CALLI4
pop
line 844
;844:	}
LABELV $502
line 846
;845:
;846:	if(g_gametype.integer == GT_SINGLE){
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 2
NEI4 $504
line 847
;847:	if ( !IsBot( self ) )
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 84
ADDRGP4 IsBot
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
NEI4 $507
line 848
;848:		G_FadeOut( 1.0, self-g_entities );
CNSTF4 1065353216
ARGF4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 g_entities
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 2492
DIVI4
ARGI4
ADDRGP4 G_FadeOut
CALLV
pop
LABELV $507
line 849
;849:	}
LABELV $504
line 850
;850:}
LABELV $333
endproc player_die 108 12
export CheckArmor
proc CheckArmor 20 4
line 859
;851:
;852:
;853:/*
;854:================
;855:CheckArmor
;856:================
;857:*/
;858:int CheckArmor (gentity_t *ent, int damage, int dflags)
;859:{
line 864
;860:	gclient_t	*client;
;861:	int			save;
;862:	int			count;
;863:
;864:	if (!damage)
ADDRFP4 4
INDIRI4
CNSTI4 0
NEI4 $510
line 865
;865:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $509
JUMPV
LABELV $510
line 867
;866:
;867:	client = ent->client;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
line 869
;868:
;869:	if (!client)
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $512
line 870
;870:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $509
JUMPV
LABELV $512
line 872
;871:
;872:	if (dflags & DAMAGE_NO_ARMOR)
ADDRFP4 8
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $514
line 873
;873:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $509
JUMPV
LABELV $514
line 876
;874:
;875:	// armor
;876:	count = client->ps.stats[STAT_ARMOR];
ADDRLP4 8
ADDRLP4 4
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ASGNI4
line 877
;877:	save = ceil( damage * g_armorprotect.value );
ADDRFP4 4
INDIRI4
CVIF4 4
ADDRGP4 g_armorprotect+8
INDIRF4
MULF4
ARGF4
ADDRLP4 12
ADDRGP4 ceil
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 12
INDIRF4
CVFI4 4
ASGNI4
line 878
;878:	if (save >= count)
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $517
line 879
;879:		save = count;
ADDRLP4 0
ADDRLP4 8
INDIRI4
ASGNI4
LABELV $517
line 881
;880:
;881:	if (!save)
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $519
line 882
;882:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $509
JUMPV
LABELV $519
line 884
;883:
;884:	client->ps.stats[STAT_ARMOR] -= save;
ADDRLP4 16
ADDRLP4 4
INDIRP4
CNSTI4 200
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
SUBI4
ASGNI4
line 886
;885:
;886:	return save;
ADDRLP4 0
INDIRI4
RETI4
LABELV $509
endproc CheckArmor 20 4
export RaySphereIntersections
proc RaySphereIntersections 96 4
line 894
;887:}
;888:
;889:/*
;890:================
;891:RaySphereIntersections
;892:================
;893:*/
;894:int RaySphereIntersections( vec3_t origin, float radius, vec3_t point, vec3_t dir, vec3_t intersections[2] ) {
line 903
;895:	float b, c, d, t;
;896:
;897:	//	| origin - (point + t * dir) | = radius
;898:	//	a = dir[0]^2 + dir[1]^2 + dir[2]^2;
;899:	//	b = 2 * (dir[0] * (point[0] - origin[0]) + dir[1] * (point[1] - origin[1]) + dir[2] * (point[2] - origin[2]));
;900:	//	c = (point[0] - origin[0])^2 + (point[1] - origin[1])^2 + (point[2] - origin[2])^2 - radius^2;
;901:
;902:	// normalize dir so a = 1
;903:	VectorNormalize(dir);
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 904
;904:	b = 2 * (dir[0] * (point[0] - origin[0]) + dir[1] * (point[1] - origin[1]) + dir[2] * (point[2] - origin[2]));
ADDRLP4 16
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 20
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
CNSTI4 4
ASGNI4
ADDRLP4 32
CNSTI4 8
ASGNI4
ADDRLP4 4
CNSTF4 1073741824
ADDRLP4 16
INDIRP4
INDIRF4
ADDRLP4 20
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
INDIRF4
SUBF4
MULF4
ADDRLP4 16
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
ADDRLP4 16
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
ADDRLP4 20
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
SUBF4
MULF4
ADDF4
MULF4
ASGNF4
line 905
;905:	c = (point[0] - origin[0]) * (point[0] - origin[0]) +
ADDRLP4 36
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 40
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 48
CNSTI4 4
ASGNI4
ADDRLP4 52
ADDRLP4 36
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 56
CNSTI4 8
ASGNI4
ADDRLP4 60
ADDRLP4 36
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 64
ADDRFP4 4
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 44
INDIRF4
ADDRLP4 44
INDIRF4
MULF4
ADDRLP4 52
INDIRF4
ADDRLP4 52
INDIRF4
MULF4
ADDF4
ADDRLP4 60
INDIRF4
ADDRLP4 60
INDIRF4
MULF4
ADDF4
ADDRLP4 64
INDIRF4
ADDRLP4 64
INDIRF4
MULF4
SUBF4
ASGNF4
line 910
;906:		(point[1] - origin[1]) * (point[1] - origin[1]) +
;907:		(point[2] - origin[2]) * (point[2] - origin[2]) -
;908:		radius * radius;
;909:
;910:	d = b * b - 4 * c;
ADDRLP4 8
ADDRLP4 4
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
CNSTF4 1082130432
ADDRLP4 12
INDIRF4
MULF4
SUBF4
ASGNF4
line 911
;911:	if (d > 0) {
ADDRLP4 8
INDIRF4
CNSTF4 0
LEF4 $522
line 912
;912:		t = (- b + sqrt(d)) / 2;
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 72
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 4
INDIRF4
NEGF4
ADDRLP4 72
INDIRF4
ADDF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 913
;913:		VectorMA(point, t, dir, intersections[0]);
ADDRFP4 16
INDIRP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRFP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
CNSTI4 4
ASGNI4
ADDRFP4 16
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
ADDRFP4 8
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 80
CNSTI4 8
ASGNI4
ADDRFP4 16
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
ADDRFP4 8
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 914
;914:		t = (- b - sqrt(d)) / 2;
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 84
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 4
INDIRF4
NEGF4
ADDRLP4 84
INDIRF4
SUBF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 915
;915:		VectorMA(point, t, dir, intersections[1]);
ADDRFP4 16
INDIRP4
CNSTI4 12
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRFP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 88
CNSTI4 4
ASGNI4
ADDRFP4 16
INDIRP4
CNSTI4 16
ADDP4
ADDRFP4 8
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 92
CNSTI4 8
ASGNI4
ADDRFP4 16
INDIRP4
CNSTI4 20
ADDP4
ADDRFP4 8
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
ADDRLP4 92
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 916
;916:		return 2;
CNSTI4 2
RETI4
ADDRGP4 $521
JUMPV
LABELV $522
line 918
;917:	}
;918:	else if (d == 0) {
ADDRLP4 8
INDIRF4
CNSTF4 0
NEF4 $524
line 919
;919:		t = (- b ) / 2;
ADDRLP4 0
ADDRLP4 4
INDIRF4
NEGF4
CNSTF4 1073741824
DIVF4
ASGNF4
line 920
;920:		VectorMA(point, t, dir, intersections[0]);
ADDRFP4 16
INDIRP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRFP4 12
INDIRP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 72
CNSTI4 4
ASGNI4
ADDRFP4 16
INDIRP4
ADDRLP4 72
INDIRI4
ADDP4
ADDRFP4 8
INDIRP4
ADDRLP4 72
INDIRI4
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
ADDRLP4 72
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
CNSTI4 8
ASGNI4
ADDRFP4 16
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
ADDRFP4 8
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRF4
ADDRFP4 12
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
ASGNF4
line 921
;921:		return 1;
CNSTI4 1
RETI4
ADDRGP4 $521
JUMPV
LABELV $524
line 923
;922:	}
;923:	return 0;
CNSTI4 0
RETI4
LABELV $521
endproc RaySphereIntersections 96 4
export G_InvulnerabilityEffect
proc G_InvulnerabilityEffect 64 20
line 931
;924:}
;925:
;926:/*
;927:================
;928:G_InvulnerabilityEffect
;929:================
;930:*/
;931:int G_InvulnerabilityEffect( gentity_t *targ, vec3_t dir, vec3_t point, vec3_t impactpoint, vec3_t bouncedir ) {
line 936
;932:	gentity_t	*impact;
;933:	vec3_t		intersections[2], vec;
;934:	int			n;
;935:
;936:	if ( !targ->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $527
line 937
;937:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $526
JUMPV
LABELV $527
line 939
;938:	}
;939:	VectorCopy(dir, vec);
ADDRLP4 0
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 940
;940:	VectorInverse(vec);
ADDRLP4 0
ARGP4
ADDRGP4 VectorInverse
CALLV
pop
line 942
;941:	// sphere model radius = 42 units
;942:	n = RaySphereIntersections( targ->client->ps.origin, 42, point, vec, intersections);
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTF4 1109917696
ARGF4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 12
ARGP4
ADDRLP4 44
ADDRGP4 RaySphereIntersections
CALLI4
ASGNI4
ADDRLP4 40
ADDRLP4 44
INDIRI4
ASGNI4
line 943
;943:	if (n > 0) {
ADDRLP4 40
INDIRI4
CNSTI4 0
LEI4 $529
line 944
;944:		impact = G_TempEntity( targ->client->ps.origin, EV_INVUL_IMPACT );
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 72
ARGI4
ADDRLP4 48
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 36
ADDRLP4 48
INDIRP4
ASGNP4
line 945
;945:		VectorSubtract(intersections[0], targ->client->ps.origin, vec);
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRF4
ADDRLP4 52
INDIRP4
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 52
INDIRP4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 12+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
line 946
;946:		vectoangles(vec, impact->s.angles);
ADDRLP4 0
ARGP4
ADDRLP4 36
INDIRP4
CNSTI4 128
ADDP4
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 947
;947:		impact->s.angles[0] += 90;
ADDRLP4 56
ADDRLP4 36
INDIRP4
CNSTI4 128
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
CNSTF4 1119092736
ADDF4
ASGNF4
line 948
;948:		if (impact->s.angles[0] > 360)
ADDRLP4 36
INDIRP4
CNSTI4 128
ADDP4
INDIRF4
CNSTF4 1135869952
LEF4 $535
line 949
;949:			impact->s.angles[0] -= 360;
ADDRLP4 60
ADDRLP4 36
INDIRP4
CNSTI4 128
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
CNSTF4 1135869952
SUBF4
ASGNF4
LABELV $535
line 950
;950:		if ( impactpoint ) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $537
line 951
;951:			VectorCopy( intersections[0], impactpoint );
ADDRFP4 12
INDIRP4
ADDRLP4 12
INDIRB
ASGNB 12
line 952
;952:		}
LABELV $537
line 953
;953:		if ( bouncedir ) {
ADDRFP4 16
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $539
line 954
;954:			VectorCopy( vec, bouncedir );
ADDRFP4 16
INDIRP4
ADDRLP4 0
INDIRB
ASGNB 12
line 955
;955:			VectorNormalize( bouncedir );
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 956
;956:		}
LABELV $539
line 957
;957:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $526
JUMPV
LABELV $529
line 959
;958:	}
;959:	else {
line 960
;960:		return qfalse;
CNSTI4 0
RETI4
LABELV $526
endproc G_InvulnerabilityEffect 64 20
proc catchup_damage 8 0
line 967
;961:	}
;962:}
;963:
;964:/*
;965:catchup_damage
;966:*/
;967:static int catchup_damage(int damage, int attacker_points, int target_points) {
line 969
;968:    int newdamage;
;969:    if(g_catchup.integer <= 0 )
ADDRGP4 g_catchup+12
INDIRI4
CNSTI4 0
GTI4 $542
line 970
;970:        return damage;
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $541
JUMPV
LABELV $542
line 972
;971:    //Reduce damage
;972:    if(attacker_points<=target_points+5)
ADDRFP4 4
INDIRI4
ADDRFP4 8
INDIRI4
CNSTI4 5
ADDI4
GTI4 $545
line 973
;973:        return damage; //Never reduce damage if only 5 points ahead.
ADDRFP4 0
INDIRI4
RETI4
ADDRGP4 $541
JUMPV
LABELV $545
line 975
;974:
;975:    newdamage=damage-((attacker_points-target_points-5) * (g_catchup.integer*damage))/100;
ADDRLP4 4
ADDRFP4 0
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRI4
ADDRFP4 8
INDIRI4
SUBI4
CNSTI4 5
SUBI4
ADDRGP4 g_catchup+12
INDIRI4
ADDRLP4 4
INDIRI4
MULI4
MULI4
CNSTI4 100
DIVI4
SUBI4
ASGNI4
line 976
;976:    if(newdamage<damage/2)
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRI4
CNSTI4 2
DIVI4
GEI4 $548
line 977
;977:        return damage/2;
ADDRFP4 0
INDIRI4
CNSTI4 2
DIVI4
RETI4
ADDRGP4 $541
JUMPV
LABELV $548
line 978
;978:    return newdamage;
ADDRLP4 0
INDIRI4
RETI4
LABELV $541
endproc catchup_damage 8 0
export angle45hook
proc angle45hook 4 0
line 1005
;979:}
;980:
;981:/*
;982:============
;983:T_Damage
;984:
;985:targ		entity that is being damaged
;986:inflictor	entity that is causing the damage
;987:attacker	entity that caused the inflictor to damage targ
;988:	example: targ=monster, inflictor=rocket, attacker=player
;989:
;990:dir			direction of the attack for knockback
;991:point		point at which the damage is being inflicted, used for headshots
;992:damage		amount of damage being inflicted
;993:knockback	force to be applied against targ as a result of the damage
;994:
;995:inflictor, attacker, dir, and point can be NULL for environmental effects
;996:
;997:dflags		these flags are used to control how T_Damage works
;998:	DAMAGE_RADIUS			damage was indirect (from a nearby explosion)
;999:	DAMAGE_NO_ARMOR			armor does not protect from this damage
;1000:	DAMAGE_NO_KNOCKBACK		do not affect velocity, just view angles
;1001:	DAMAGE_NO_PROTECTION	kills godmode, armor, everything
;1002:============
;1003:*/
;1004:
;1005:double angle45hook(double value, double src_min, double src_max) {
line 1006
;1006:    return -(90.0 * (value - src_min) / (src_max - src_min));
ADDRLP4 0
ADDRFP4 4
INDIRF4
ASGNF4
CNSTF4 1119092736
ADDRFP4 0
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
MULF4
ADDRFP4 8
INDIRF4
ADDRLP4 0
INDIRF4
SUBF4
DIVF4
NEGF4
RETF4
LABELV $550
endproc angle45hook 4 0
export engine10hook
proc engine10hook 4 0
line 1009
;1007:}
;1008:
;1009:int engine10hook(int value, int src_min, int src_max) {
line 1010
;1010:    return 10 * (value - src_min) / (src_max - src_min);
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
CNSTI4 10
ADDRFP4 0
INDIRI4
ADDRLP4 0
INDIRI4
SUBI4
MULI4
ADDRFP4 8
INDIRI4
ADDRLP4 0
INDIRI4
SUBI4
DIVI4
RETI4
LABELV $551
endproc engine10hook 4 0
export VehiclePhys
proc VehiclePhys 84 12
line 1013
;1011:}
;1012:
;1013:void VehiclePhys( gentity_t *self ) {
line 1015
;1014:	
;1015:	if(!self->parent || !self || !self->parent->client->vehiclenum || self->parent->health <= 0 || self->health <= 0){
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ASGNP4
ADDRLP4 8
CNSTU4 0
ASGNU4
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRU4
EQU4 $558
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 8
INDIRU4
EQU4 $558
ADDRLP4 12
CNSTI4 0
ASGNI4
ADDRLP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $558
ADDRLP4 16
CNSTI4 808
ASGNI4
ADDRLP4 4
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
LEI4 $558
ADDRLP4 0
INDIRP4
ADDRLP4 16
INDIRI4
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
GTI4 $553
LABELV $558
line 1016
;1016:	self->think = 0;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
CNSTP4 0
ASGNP4
line 1017
;1017:	self->nextthink = 0;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 0
ASGNI4
line 1018
;1018:	self->r.contents = CONTENTS_SOLID;
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1
ASGNI4
line 1019
;1019:	self->sb_coll = 0;
ADDRFP4 0
INDIRP4
CNSTI4 892
ADDP4
CNSTI4 0
ASGNI4
line 1020
;1020:	self->s.pos.trType = TR_GRAVITY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 1021
;1021:	self->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1022
;1022:	self->physicsObject = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
CNSTI4 1
ASGNI4
line 1023
;1023:	ClientUserinfoChanged( self->parent->s.clientNum );
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ARGI4
ADDRGP4 ClientUserinfoChanged
CALLV
pop
line 1024
;1024:	VectorSet( self->parent->r.mins, -15, -15, -24 );
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 476
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 480
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 484
ADDP4
CNSTF4 3250585600
ASGNF4
line 1025
;1025:	VectorSet( self->parent->r.maxs, 15, 15, 32 );
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 488
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 492
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 496
ADDP4
CNSTF4 1107296256
ASGNF4
line 1026
;1026:	VectorSet( self->parent->client->ps.origin, self->r.currentOrigin[0], self->r.currentOrigin[1], self->r.currentOrigin[2] + 40);
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 528
ADDP4
INDIRF4
ASGNF4
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 532
ADDP4
INDIRF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 28
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 536
ADDP4
INDIRF4
CNSTF4 1109393408
ADDF4
ASGNF4
line 1027
;1027:	self->parent->client->vehiclenum = 0;
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
CNSTI4 0
ASGNI4
line 1028
;1028:	self->s.generic3 = 0;
ADDRFP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 0
ASGNI4
line 1029
;1029:	self->s.generic1 = 0; 		//smooth vehicles
ADDRFP4 0
INDIRP4
CNSTI4 216
ADDP4
CNSTI4 0
ASGNI4
line 1030
;1030:	self->parent->client->ps.gravity = (g_gravity.value*g_gravityModifier.value);
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 48
ADDP4
ADDRGP4 g_gravity+8
INDIRF4
ADDRGP4 g_gravityModifier+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 1031
;1031:	return;
ADDRGP4 $552
JUMPV
LABELV $553
line 1034
;1032:	}
;1033:	
;1034:	self->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 1035
;1035:	self->physicsObject = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 604
ADDP4
CNSTI4 0
ASGNI4
line 1036
;1036:	self->sb_phys = 1;
ADDRFP4 0
INDIRP4
CNSTI4 888
ADDP4
CNSTI4 1
ASGNI4
line 1038
;1037:	
;1038:	self->r.contents = CONTENTS_TRIGGER;
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1073741824
ASGNI4
line 1039
;1039:	self->sb_coll = 1;
ADDRFP4 0
INDIRP4
CNSTI4 892
ADDP4
CNSTI4 1
ASGNI4
line 1041
;1040:
;1041:	trap_UnlinkEntity( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_UnlinkEntity
CALLV
pop
line 1043
;1042:	
;1043:	VectorCopy(self->parent->s.origin, self->s.origin);
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
CNSTI4 92
ASGNI4
ADDRLP4 20
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ADDRLP4 24
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 1044
;1044:	VectorCopy(self->parent->s.pos.trBase, self->s.pos.trBase);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
CNSTI4 24
ASGNI4
ADDRLP4 28
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 1045
;1045:	if (VectorLength(self->parent->client->ps.velocity) > 5) {
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 32
ADDP4
ARGP4
ADDRLP4 36
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 36
INDIRF4
CNSTF4 1084227584
LEF4 $562
line 1046
;1046:	self->s.apos.trBase[1] = self->parent->s.apos.trBase[1];
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
CNSTI4 64
ASGNI4
ADDRLP4 40
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRF4
ASGNF4
line 1047
;1047:	}
LABELV $562
line 1051
;1048:	/*if(BG_VehicleCheckClass(self->parent->client->ps.stats[STAT_VEHICLE]) == VCLASS_CAR){ //VEHICLE-SYSTEM: turn vehicle fake phys
;1049:	self->s.apos.trBase[0] = angle45hook(self->parent->client->ps.velocity[2], 0, 900); //900 is car speed
;1050:	}*/
;1051:	if(engine10hook(sqrt(self->parent->client->ps.velocity[0] * self->parent->client->ps.velocity[0] + self->parent->client->ps.velocity[1] * self->parent->client->ps.velocity[1]), 0, 900) <= 10){ //900 is car speed
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ASGNF4
ADDRLP4 48
ADDRLP4 40
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ASGNF4
ADDRLP4 44
INDIRF4
ADDRLP4 44
INDIRF4
MULF4
ADDRLP4 48
INDIRF4
ADDRLP4 48
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 52
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 52
INDIRF4
CVFI4 4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 900
ARGI4
ADDRLP4 56
ADDRGP4 engine10hook
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 10
GTI4 $564
line 1052
;1052:	self->s.generic3 = engine10hook(sqrt(self->parent->client->ps.velocity[0] * self->parent->client->ps.velocity[0] + self->parent->client->ps.velocity[1] * self->parent->client->ps.velocity[1]), 0, 900); //900 is car speed
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
ADDRLP4 60
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
ADDRLP4 68
ADDRLP4 64
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ASGNF4
ADDRLP4 72
ADDRLP4 64
INDIRP4
CNSTI4 36
ADDP4
INDIRF4
ASGNF4
ADDRLP4 68
INDIRF4
ADDRLP4 68
INDIRF4
MULF4
ADDRLP4 72
INDIRF4
ADDRLP4 72
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 76
ADDRGP4 sqrt
CALLF4
ASGNF4
ADDRLP4 76
INDIRF4
CVFI4 4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 900
ARGI4
ADDRLP4 80
ADDRGP4 engine10hook
CALLI4
ASGNI4
ADDRLP4 60
INDIRP4
CNSTI4 224
ADDP4
ADDRLP4 80
INDIRI4
ASGNI4
line 1053
;1053:	}
LABELV $564
line 1054
;1054:	VectorCopy(self->parent->r.currentOrigin, self->r.currentOrigin);
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
CNSTI4 528
ASGNI4
ADDRLP4 60
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
ADDRLP4 60
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 1055
;1055:	self->parent->client->ps.stats[STAT_VEHICLEHP] = self->health; //VEHICLE-SYSTEM: vehicle's hp instead player
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 236
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ASGNI4
line 1056
;1056:	self->s.generic1 = self->parent->s.clientNum+1; 		//smooth vehicles
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1058
;1057:	
;1058:	trap_LinkEntity( self );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1060
;1059:	
;1060:	self->think = VehiclePhys;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 VehiclePhys
ASGNP4
line 1061
;1061:	self->nextthink = level.time + 1;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1063
;1062:	
;1063:}
LABELV $552
endproc VehiclePhys 84 12
export G_Damage
proc G_Damage 220 24
line 1066
;1064:
;1065:void G_Damage( gentity_t *targ, gentity_t *inflictor, gentity_t *attacker,
;1066:			   vec3_t dir, vec3_t point, int damage, int dflags, int mod ) {
line 1069
;1067:	gclient_t	*client;
;1068:	int			take;
;1069:	int			asave = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 1078
;1070:	int			knockback;
;1071:	int			max;
;1072:	int			i;
;1073:	vec3_t		bouncedir, impactpoint;
;1074:	gentity_t 	*act;
;1075:	gentity_t 	*vehicle;
;1076:
;1077:	//in entityplus bots cannot harm other bots (unless it's a telefrag)
;1078:	if ( !G_NpcFactionProp(NP_HARM, attacker) && attacker->singlebot >= 1 && targ->singlebot == attacker->singlebot && attacker && mod != MOD_TELEFRAG )
CNSTI4 9
ARGI4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 G_NpcFactionProp
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
NEI4 $568
ADDRLP4 60
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 64
CNSTI4 1028
ASGNI4
ADDRLP4 68
ADDRLP4 60
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 1
LTI4 $568
ADDRFP4 0
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRI4
ADDRLP4 68
INDIRI4
NEI4 $568
ADDRLP4 60
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $568
ADDRFP4 28
INDIRI4
CNSTI4 23
EQI4 $568
line 1079
;1079:		return;
ADDRGP4 $567
JUMPV
LABELV $568
line 1081
;1080:
;1081:	if(g_gametype.integer == GT_SANDBOX){
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 0
NEI4 $570
line 1082
;1082:		if(mod == MOD_TOOLGUN){
ADDRFP4 28
INDIRI4
CNSTI4 18
NEI4 $573
line 1083
;1083:			return;
ADDRGP4 $567
JUMPV
LABELV $573
line 1085
;1084:		}
;1085:	}
LABELV $570
line 1087
;1086:	
;1087:	if(mod == MOD_GAUNTLET){
ADDRFP4 28
INDIRI4
CNSTI4 2
NEI4 $575
line 1088
;1088:		if(targ->vehicle && !attacker->client->vehiclenum){
ADDRLP4 72
CNSTI4 0
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 1052
ADDP4
INDIRI4
ADDRLP4 72
INDIRI4
EQI4 $577
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
INDIRI4
ADDRLP4 72
INDIRI4
NEI4 $577
line 1089
;1089:		attacker->client->vehiclenum = targ->s.number;
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1090
;1090:		targ->parent = attacker;
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 8
INDIRP4
ASGNP4
line 1091
;1091:		ClientUserinfoChanged( attacker->s.clientNum );
ADDRFP4 8
INDIRP4
CNSTI4 180
ADDP4
INDIRI4
ARGI4
ADDRGP4 ClientUserinfoChanged
CALLV
pop
line 1092
;1092:		VectorCopy(targ->s.origin, attacker->s.origin);
ADDRLP4 76
CNSTI4 92
ASGNI4
ADDRFP4 8
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 1093
;1093:		VectorCopy(targ->s.pos.trBase, attacker->s.pos.trBase);
ADDRLP4 80
CNSTI4 24
ASGNI4
ADDRFP4 8
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 1094
;1094:		attacker->s.apos.trBase[1] = targ->s.apos.trBase[1];
ADDRLP4 84
CNSTI4 64
ASGNI4
ADDRFP4 8
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 84
INDIRI4
ADDP4
INDIRF4
ASGNF4
line 1095
;1095:		VectorCopy(targ->r.currentOrigin, attacker->r.currentOrigin);
ADDRLP4 88
CNSTI4 528
ASGNI4
ADDRFP4 8
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRB
ASGNB 12
line 1096
;1096:		VectorSet( attacker->r.mins, -25, -25, -15 );
ADDRFP4 8
INDIRP4
CNSTI4 476
ADDP4
CNSTF4 3251109888
ASGNF4
ADDRFP4 8
INDIRP4
CNSTI4 480
ADDP4
CNSTF4 3251109888
ASGNF4
ADDRFP4 8
INDIRP4
CNSTI4 484
ADDP4
CNSTF4 3245342720
ASGNF4
line 1097
;1097:		VectorSet( attacker->r.maxs, 25, 25, 15 );
ADDRFP4 8
INDIRP4
CNSTI4 488
ADDP4
CNSTF4 1103626240
ASGNF4
ADDRFP4 8
INDIRP4
CNSTI4 492
ADDP4
CNSTF4 1103626240
ASGNF4
ADDRFP4 8
INDIRP4
CNSTI4 496
ADDP4
CNSTF4 1097859072
ASGNF4
line 1098
;1098:		targ->think = VehiclePhys;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 VehiclePhys
ASGNP4
line 1099
;1099:		targ->nextthink = level.time + 1;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1100
;1100:		return;
ADDRGP4 $567
JUMPV
LABELV $577
line 1102
;1101:		}
;1102:		if(attacker->client->vehiclenum){
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
INDIRI4
CNSTI4 0
EQI4 $580
line 1103
;1103:		return;	
ADDRGP4 $567
JUMPV
LABELV $580
line 1105
;1104:		}
;1105:	}
LABELV $575
line 1107
;1106:	
;1107:	if (targ->damagetarget){
ADDRFP4 0
INDIRP4
CNSTI4 2104
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $582
line 1108
;1108:	act = G_PickTarget( targ->damagetarget );
ADDRFP4 0
INDIRP4
CNSTI4 2104
ADDP4
INDIRP4
ARGP4
ADDRLP4 72
ADDRGP4 G_PickTarget
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 72
INDIRP4
ASGNP4
line 1109
;1109:	if ( act && act->use ) {
ADDRLP4 76
ADDRLP4 16
INDIRP4
ASGNP4
ADDRLP4 80
CNSTU4 0
ASGNU4
ADDRLP4 76
INDIRP4
CVPU4 4
ADDRLP4 80
INDIRU4
EQU4 $584
ADDRLP4 76
INDIRP4
CNSTI4 784
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 80
INDIRU4
EQU4 $584
line 1110
;1110:		act->use( act, attacker, attacker );
ADDRLP4 84
ADDRLP4 16
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
ADDRLP4 88
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 84
INDIRP4
CNSTI4 784
ADDP4
INDIRP4
CALLV
pop
line 1111
;1111:	}
LABELV $584
line 1112
;1112:	}
LABELV $582
line 1114
;1113:
;1114:	if (!targ->takedamage) {
ADDRFP4 0
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
CNSTI4 0
NEI4 $586
line 1115
;1115:		return;
ADDRGP4 $567
JUMPV
LABELV $586
line 1118
;1116:	}
;1117:	
;1118:	if (targ->client->vehiclenum){ //VEHICLE-SYSTEM: damage vehicle instead player
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
INDIRI4
CNSTI4 0
EQI4 $588
line 1119
;1119: 		targ = G_FindEntityForEntityNum(targ->client->vehiclenum);
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1248
ADDP4
INDIRI4
ARGI4
ADDRLP4 72
ADDRGP4 G_FindEntityForEntityNum
CALLP4
ASGNP4
ADDRFP4 0
ADDRLP4 72
INDIRP4
ASGNP4
line 1120
;1120:	}
LABELV $588
line 1124
;1121:
;1122:	// the intermission has allready been qualified for, so don't
;1123:	// allow any extra scoring
;1124:	if ( level.intermissionQueued ) {
ADDRGP4 level+9908
INDIRI4
CNSTI4 0
EQI4 $590
line 1125
;1125:		return;
ADDRGP4 $567
JUMPV
LABELV $590
line 1127
;1126:	}
;1127:	if ( targ->client && mod != MOD_JUICED) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $593
ADDRFP4 28
INDIRI4
CNSTI4 32
EQI4 $593
line 1128
;1128:		if ( targ->client->invulnerabilityTime > level.time) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1432
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $595
line 1129
;1129:			if ( dir && point ) {
ADDRLP4 72
CNSTU4 0
ASGNU4
ADDRFP4 12
INDIRP4
CVPU4 4
ADDRLP4 72
INDIRU4
EQU4 $567
ADDRFP4 16
INDIRP4
CVPU4 4
ADDRLP4 72
INDIRU4
EQU4 $567
line 1130
;1130:				G_InvulnerabilityEffect( targ, dir, point, impactpoint, bouncedir );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 12
INDIRP4
ARGP4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRGP4 G_InvulnerabilityEffect
CALLI4
pop
line 1131
;1131:			}
line 1132
;1132:			return;
ADDRGP4 $567
JUMPV
LABELV $595
line 1134
;1133:		}
;1134:	}
LABELV $593
line 1136
;1135:        //Sago: This was moved up
;1136:        client = targ->client;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
line 1140
;1137:
;1138:        //Sago: See if the client was sent flying
;1139:        //Check if damage is by somebody who is not a player!
;1140:        if( (!attacker || (attacker->s.eType != ET_PLAYER && attacker->s.eType != ET_GENERAL)) && client && client->lastSentFlying>-1 && ( mod==MOD_FALLING || mod==MOD_LAVA || mod==MOD_SLIME || mod==MOD_TRIGGER_HURT || mod==MOD_SUICIDE) )  {
ADDRLP4 72
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $602
ADDRLP4 76
ADDRLP4 72
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 1
EQI4 $600
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $600
LABELV $602
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $600
ADDRLP4 4
INDIRP4
CNSTI4 1448
ADDP4
INDIRI4
CNSTI4 -1
LEI4 $600
ADDRLP4 84
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 24
EQI4 $606
ADDRLP4 84
INDIRI4
CNSTI4 21
EQI4 $606
ADDRLP4 84
INDIRI4
CNSTI4 20
EQI4 $606
ADDRLP4 84
INDIRI4
CNSTI4 27
EQI4 $606
ADDRLP4 84
INDIRI4
CNSTI4 25
NEI4 $600
LABELV $606
line 1141
;1141:            if( client->lastSentFlyingTime+5000<level.time) {
ADDRLP4 4
INDIRP4
CNSTI4 1452
ADDP4
INDIRI4
CNSTI4 5000
ADDI4
ADDRGP4 level+32
INDIRI4
GEI4 $607
line 1142
;1142:                client->lastSentFlying = -1; //More than 5 seconds, not a kill!
ADDRLP4 4
INDIRP4
CNSTI4 1448
ADDP4
CNSTI4 -1
ASGNI4
line 1143
;1143:            } else {
ADDRGP4 $608
JUMPV
LABELV $607
line 1145
;1144:                //G_Printf("LastSentFlying %i\n",client->lastSentFlying);
;1145:                attacker = &g_entities[client->lastSentFlying];
ADDRFP4 8
CNSTI4 2492
ADDRLP4 4
INDIRP4
CNSTI4 1448
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1146
;1146:            }
LABELV $608
line 1147
;1147:        }
LABELV $600
line 1149
;1148:
;1149:	if ( !inflictor ) {
ADDRFP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $610
line 1150
;1150:		inflictor = &g_entities[ENTITYNUM_WORLD];
ADDRFP4 4
ADDRGP4 g_entities+10202248
ASGNP4
line 1151
;1151:	}
LABELV $610
line 1152
;1152:	if ( !attacker ) {
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $613
line 1153
;1153:		attacker = &g_entities[ENTITYNUM_WORLD];
ADDRFP4 8
ADDRGP4 g_entities+10202248
ASGNP4
line 1154
;1154:	}
LABELV $613
line 1157
;1155:
;1156:		// shootable doors / buttons don't actually have any health
;1157:	if ( targ->s.eType == ET_MOVER) {
ADDRLP4 88
CNSTI4 4
ASGNI4
ADDRFP4 0
INDIRP4
ADDRLP4 88
INDIRI4
ADDP4
INDIRI4
ADDRLP4 88
INDIRI4
NEI4 $616
line 1158
;1158:		if (strcmp(targ->classname, "func_breakable") && targ->use && (targ->moverState == MOVER_POS1 || targ->moverState == ROTATOR_POS1)) {
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $620
ARGP4
ADDRLP4 92
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 96
CNSTI4 0
ASGNI4
ADDRLP4 92
INDIRI4
ADDRLP4 96
INDIRI4
EQI4 $618
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 784
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $618
ADDRLP4 104
ADDRLP4 100
INDIRP4
CNSTI4 616
ADDP4
INDIRI4
ASGNI4
ADDRLP4 104
INDIRI4
ADDRLP4 96
INDIRI4
EQI4 $621
ADDRLP4 104
INDIRI4
CNSTI4 4
NEI4 $618
LABELV $621
line 1159
;1159:			targ->use(targ, inflictor, attacker);
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 108
INDIRP4
CNSTI4 784
ADDP4
INDIRP4
CALLV
pop
line 1160
;1160:			}
LABELV $618
line 1161
;1161:		if (!strcmp(targ->classname, "func_train") && targ->health > 0) {
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $624
ARGP4
ADDRLP4 108
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 112
CNSTI4 0
ASGNI4
ADDRLP4 108
INDIRI4
ADDRLP4 112
INDIRI4
NEI4 $622
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRLP4 112
INDIRI4
LEI4 $622
line 1162
;1162:			G_UseTargets(targ, attacker);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
line 1163
;1163:		} else {	// entity is a func_breakable
ADDRGP4 $623
JUMPV
LABELV $622
line 1164
;1164:			if ( (targ->spawnflags & 1024) && attacker == attacker )
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $625
ADDRLP4 116
ADDRFP4 8
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 116
INDIRU4
ADDRLP4 116
INDIRU4
NEU4 $625
line 1165
;1165:			return;
ADDRGP4 $567
JUMPV
LABELV $625
line 1166
;1166:			if ( (targ->spawnflags & 2048) && IsBot(attacker) )
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $627
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 120
ADDRGP4 IsBot
CALLI4
ASGNI4
ADDRLP4 120
INDIRI4
CNSTI4 0
EQI4 $627
line 1167
;1167:				return;
ADDRGP4 $567
JUMPV
LABELV $627
line 1168
;1168:			if ( (targ->spawnflags & 4096) && strstr(attacker->classname, "shooter_") )
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $629
ADDRFP4 8
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $631
ARGP4
ADDRLP4 124
ADDRGP4 strstr
CALLP4
ASGNP4
ADDRLP4 124
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $629
line 1169
;1169:				return;
ADDRGP4 $567
JUMPV
LABELV $629
line 1171
;1170:			
;1171:				}
LABELV $623
line 1172
;1172:	}
LABELV $616
line 1173
;1173:	if( g_gametype.integer == GT_OBELISK && CheckObeliskAttack( targ, attacker ) ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 7
NEI4 $632
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 92
ADDRGP4 CheckObeliskAttack
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
EQI4 $632
line 1174
;1174:		return;
ADDRGP4 $567
JUMPV
LABELV $632
line 1177
;1175:	}
;1176:
;1177:if ( attacker && attacker->singlebot){
ADDRLP4 96
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $635
ADDRLP4 96
INDIRP4
CNSTI4 1028
ADDP4
INDIRI4
CNSTI4 0
EQI4 $635
line 1178
;1178:		float skill = trap_Cvar_VariableValue( "g_spSkill" );
ADDRGP4 $637
ARGP4
ADDRLP4 108
ADDRGP4 trap_Cvar_VariableValue
CALLF4
ASGNF4
ADDRLP4 100
ADDRLP4 108
INDIRF4
ASGNF4
line 1179
;1179:		int orgdmg = damage;
ADDRLP4 104
ADDRFP4 20
INDIRI4
ASGNI4
line 1181
;1180:
;1181:		if ( attacker->botspawn && attacker->botspawn->skill )
ADDRLP4 112
ADDRFP4 8
INDIRP4
CNSTI4 644
ADDP4
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $638
ADDRLP4 112
INDIRP4
CNSTI4 2180
ADDP4
INDIRF4
CNSTF4 0
EQF4 $638
line 1182
;1182:			skill += attacker->botspawn->skill;
ADDRLP4 100
ADDRLP4 100
INDIRF4
ADDRFP4 8
INDIRP4
CNSTI4 644
ADDP4
INDIRP4
CNSTI4 2180
ADDP4
INDIRF4
ADDF4
ASGNF4
LABELV $638
line 1184
;1183:
;1184:		if (skill < 1)
ADDRLP4 100
INDIRF4
CNSTF4 1065353216
GEF4 $640
line 1185
;1185:			skill = 1;	//relative skill level should not drop below 1 but is allowed to rise above 5
ADDRLP4 100
CNSTF4 1065353216
ASGNF4
LABELV $640
line 1187
;1186:		
;1187:		damage *= ( ( 0.1 * skill  ) - 0.05 ); //damage is always rounded down.
ADDRFP4 20
ADDRFP4 20
INDIRI4
CVIF4 4
CNSTF4 1036831949
ADDRLP4 100
INDIRF4
MULF4
CNSTF4 1028443341
SUBF4
MULF4
CVFI4 4
ASGNI4
line 1189
;1188:		
;1189:		if ( damage < 1 )
ADDRFP4 20
INDIRI4
CNSTI4 1
GEI4 $642
line 1190
;1190:			damage = 1;	//make sure bot does at least -some- damage
ADDRFP4 20
CNSTI4 1
ASGNI4
LABELV $642
line 1191
;1191:}
LABELV $635
line 1199
;1192:
;1193:	/*if ( client ) {
;1194:		if ( client->noclip ) {
;1195:			return;
;1196:		}
;1197:	}*/
;1198:
;1199:	if ( !dir ) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $644
line 1200
;1200:		dflags |= DAMAGE_NO_KNOCKBACK;
ADDRFP4 24
ADDRFP4 24
INDIRI4
CNSTI4 4
BORI4
ASGNI4
line 1201
;1201:	} else {
ADDRGP4 $645
JUMPV
LABELV $644
line 1202
;1202:		VectorNormalize(dir);
ADDRFP4 12
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1203
;1203:	}
LABELV $645
line 1205
;1204:
;1205:	knockback = damage+1;
ADDRLP4 0
ADDRFP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1207
;1206:
;1207:	if ( mod == MOD_CAR )
ADDRFP4 28
INDIRI4
CNSTI4 34
NEI4 $646
line 1208
;1208:	knockback *= 1.00;
ADDRLP4 0
CNSTF4 1065353216
ADDRLP4 0
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
LABELV $646
line 1209
;1209:	if ( mod == MOD_PROP )
ADDRFP4 28
INDIRI4
CNSTI4 36
NEI4 $648
line 1210
;1210:	knockback *= 1.00;
ADDRLP4 0
CNSTF4 1065353216
ADDRLP4 0
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
LABELV $648
line 1211
;1211:	if ( mod == MOD_GAUNTLET )
ADDRFP4 28
INDIRI4
CNSTI4 2
NEI4 $650
line 1212
;1212:	knockback *= g_gknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_gknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $650
line 1213
;1213:	if ( mod == MOD_MACHINEGUN )
ADDRFP4 28
INDIRI4
CNSTI4 3
NEI4 $653
line 1214
;1214:	knockback *= g_mgknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_mgknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $653
line 1215
;1215:	if ( mod == MOD_SHOTGUN )
ADDRFP4 28
INDIRI4
CNSTI4 1
NEI4 $656
line 1216
;1216:	knockback *= g_sgknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_sgknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $656
line 1217
;1217:	if ( mod == MOD_GRENADE )
ADDRFP4 28
INDIRI4
CNSTI4 4
NEI4 $659
line 1218
;1218:	knockback *= g_glknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_glknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $659
line 1219
;1219:	if ( mod == MOD_GRENADE_SPLASH )
ADDRFP4 28
INDIRI4
CNSTI4 5
NEI4 $662
line 1220
;1220:	knockback *= g_glknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_glknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $662
line 1221
;1221:	if ( mod == MOD_ROCKET )
ADDRFP4 28
INDIRI4
CNSTI4 6
NEI4 $665
line 1222
;1222:	knockback *= g_rlknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_rlknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $665
line 1223
;1223:	if ( mod == MOD_ROCKET_SPLASH )
ADDRFP4 28
INDIRI4
CNSTI4 7
NEI4 $668
line 1224
;1224:	knockback *= g_rlknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_rlknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $668
line 1225
;1225:	if ( mod == MOD_PLASMA )
ADDRFP4 28
INDIRI4
CNSTI4 8
NEI4 $671
line 1226
;1226:	knockback *= g_pgknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_pgknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $671
line 1227
;1227:	if ( mod == MOD_PLASMA_SPLASH )
ADDRFP4 28
INDIRI4
CNSTI4 9
NEI4 $674
line 1228
;1228:	knockback *= g_pgknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_pgknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $674
line 1229
;1229:	if ( mod == MOD_RAILGUN )
ADDRFP4 28
INDIRI4
CNSTI4 10
NEI4 $677
line 1230
;1230:	knockback *= g_rgknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_rgknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $677
line 1231
;1231:	if ( mod == MOD_LIGHTNING )
ADDRFP4 28
INDIRI4
CNSTI4 11
NEI4 $680
line 1232
;1232:	knockback *= g_lgknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_lgknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $680
line 1233
;1233:	if ( mod == MOD_BFG )
ADDRFP4 28
INDIRI4
CNSTI4 12
NEI4 $683
line 1234
;1234:	knockback *= g_bfgknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_bfgknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $683
line 1235
;1235:	if ( mod == MOD_BFG_SPLASH )
ADDRFP4 28
INDIRI4
CNSTI4 13
NEI4 $686
line 1236
;1236:	knockback *= g_bfgknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_bfgknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $686
line 1237
;1237:	if ( mod == MOD_NAIL )
ADDRFP4 28
INDIRI4
CNSTI4 28
NEI4 $689
line 1238
;1238:	knockback *= g_ngknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_ngknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $689
line 1239
;1239:	if ( mod == MOD_CHAINGUN )
ADDRFP4 28
INDIRI4
CNSTI4 29
NEI4 $692
line 1240
;1240:	knockback *= g_cgknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_cgknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $692
line 1241
;1241:	if ( mod == MOD_PROXIMITY_MINE )
ADDRFP4 28
INDIRI4
CNSTI4 30
NEI4 $695
line 1242
;1242:	knockback *= g_plknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_plknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $695
line 1243
;1243:	if ( mod == MOD_FLAME )
ADDRFP4 28
INDIRI4
CNSTI4 14
NEI4 $698
line 1244
;1244:	knockback *= g_ftknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_ftknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $698
line 1245
;1245:	if ( mod == MOD_FLAME_SPLASH )
ADDRFP4 28
INDIRI4
CNSTI4 15
NEI4 $701
line 1246
;1246:	knockback *= g_ftknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_ftknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $701
line 1247
;1247:	if ( mod == MOD_ANTIMATTER )
ADDRFP4 28
INDIRI4
CNSTI4 16
NEI4 $704
line 1248
;1248:	knockback *= g_amknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_amknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $704
line 1249
;1249:	if ( mod == MOD_ANTIMATTER_SPLASH )
ADDRFP4 28
INDIRI4
CNSTI4 17
NEI4 $707
line 1250
;1250:	knockback *= g_amknockback.value;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRGP4 g_amknockback+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
LABELV $707
line 1251
;1251:	if ( mod == MOD_TARGET_LASER )
ADDRFP4 28
INDIRI4
CNSTI4 26
NEI4 $710
line 1252
;1252:	knockback = attacker->msdamage;
ADDRLP4 0
ADDRFP4 8
INDIRP4
CNSTI4 2272
ADDP4
INDIRI4
ASGNI4
LABELV $710
line 1254
;1253:
;1254:	if ( targ->flags & FL_NO_KNOCKBACK ) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $712
line 1255
;1255:		knockback = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1256
;1256:	}
LABELV $712
line 1257
;1257:	if ( dflags & DAMAGE_NO_KNOCKBACK ) {
ADDRFP4 24
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $714
line 1258
;1258:		knockback = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1259
;1259:	}
LABELV $714
line 1262
;1260:
;1261:	// figure momentum add, even if the damage won't be taken
;1262:	if ( knockback && targ->client || knockback && targ->sandboxObject ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $719
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $718
LABELV $719
ADDRLP4 100
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 100
INDIRI4
EQI4 $716
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
ADDRLP4 100
INDIRI4
EQI4 $716
LABELV $718
line 1266
;1263:		vec3_t	kvel;
;1264:		float	mass;
;1265:
;1266:		mass = 200;
ADDRLP4 116
CNSTF4 1128792064
ASGNF4
line 1268
;1267:
;1268:		VectorScale (dir, g_knockback.value * (float)knockback / mass, kvel);
ADDRLP4 120
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 124
ADDRLP4 0
INDIRI4
CVIF4 4
ASGNF4
ADDRLP4 128
ADDRLP4 116
INDIRF4
ASGNF4
ADDRLP4 104
ADDRLP4 120
INDIRP4
INDIRF4
ADDRGP4 g_knockback+8
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
ADDRLP4 128
INDIRF4
DIVF4
MULF4
ASGNF4
ADDRLP4 104+4
ADDRLP4 120
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 g_knockback+8
INDIRF4
ADDRLP4 124
INDIRF4
MULF4
ADDRLP4 128
INDIRF4
DIVF4
MULF4
ASGNF4
ADDRLP4 104+8
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 g_knockback+8
INDIRF4
ADDRLP4 0
INDIRI4
CVIF4 4
MULF4
ADDRLP4 116
INDIRF4
DIVF4
MULF4
ASGNF4
line 1269
;1269:		if(targ->client){
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $725
line 1270
;1270:		VectorAdd (targ->client->ps.velocity, kvel, targ->client->ps.velocity);
ADDRLP4 132
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 32
ADDP4
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRF4
ADDRLP4 104
INDIRF4
ADDF4
ASGNF4
ADDRLP4 136
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 136
INDIRP4
ADDRLP4 136
INDIRP4
INDIRF4
ADDRLP4 104+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRF4
ADDRLP4 104+8
INDIRF4
ADDF4
ASGNF4
line 1271
;1271:		}
LABELV $725
line 1272
;1272:		if(targ->sandboxObject){
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $729
line 1273
;1273:		G_EnablePropPhysics( targ );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_EnablePropPhysics
CALLI4
pop
line 1274
;1274:		targ->lastPlayer = attacker;
ADDRFP4 0
INDIRP4
CNSTI4 2488
ADDP4
ADDRFP4 8
INDIRP4
ASGNP4
line 1275
;1275:		VectorAdd (targ->s.pos.trDelta, kvel, targ->s.pos.trDelta);
ADDRLP4 132
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRF4
ADDRLP4 104
INDIRF4
ADDF4
ASGNF4
ADDRLP4 136
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 136
INDIRP4
ADDRLP4 136
INDIRP4
INDIRF4
ADDRLP4 104+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 140
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRF4
ADDRLP4 104+8
INDIRF4
ADDF4
ASGNF4
line 1276
;1276:		}
LABELV $729
line 1280
;1277:
;1278:		// set the timer so that the other client can't cancel
;1279:		// out the movement immediately
;1280:		if(!targ->sandboxObject){
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
NEI4 $733
line 1281
;1281:		if ( !targ->client->ps.pm_time ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 16
ADDP4
INDIRI4
CNSTI4 0
NEI4 $735
line 1284
;1282:			int		t;
;1283:
;1284:			t = knockback * 2;
ADDRLP4 132
ADDRLP4 0
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 1285
;1285:			if ( t < 50 ) {
ADDRLP4 132
INDIRI4
CNSTI4 50
GEI4 $737
line 1286
;1286:				t = 50;
ADDRLP4 132
CNSTI4 50
ASGNI4
line 1287
;1287:			}
LABELV $737
line 1288
;1288:			if ( t > 200 ) {
ADDRLP4 132
INDIRI4
CNSTI4 200
LEI4 $739
line 1289
;1289:				t = 200;
ADDRLP4 132
CNSTI4 200
ASGNI4
line 1290
;1290:			}
LABELV $739
line 1291
;1291:			targ->client->ps.pm_time = t;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 132
INDIRI4
ASGNI4
line 1292
;1292:			targ->client->ps.pm_flags |= PMF_TIME_KNOCKBACK;
ADDRLP4 136
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 136
INDIRP4
ADDRLP4 136
INDIRP4
INDIRI4
CNSTI4 64
BORI4
ASGNI4
line 1293
;1293:		}
LABELV $735
line 1295
;1294:                //Remeber the last person to hurt the player
;1295:                if( !g_awardpushing.integer || targ==attacker || OnSameTeam (targ, attacker)) {
ADDRGP4 g_awardpushing+12
INDIRI4
CNSTI4 0
EQI4 $745
ADDRLP4 132
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 136
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 132
INDIRP4
CVPU4 4
ADDRLP4 136
INDIRP4
CVPU4 4
EQU4 $745
ADDRLP4 132
INDIRP4
ARGP4
ADDRLP4 136
INDIRP4
ARGP4
ADDRLP4 140
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 140
INDIRI4
CNSTI4 0
EQI4 $741
LABELV $745
line 1296
;1296:                    targ->client->lastSentFlying = -1;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1448
ADDP4
CNSTI4 -1
ASGNI4
line 1297
;1297:                } else {
ADDRGP4 $742
JUMPV
LABELV $741
line 1298
;1298:                    targ->client->lastSentFlying = attacker->s.number;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1448
ADDP4
ADDRFP4 8
INDIRP4
INDIRI4
ASGNI4
line 1299
;1299:                    targ->client->lastSentFlyingTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1452
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1300
;1300:                }
LABELV $742
line 1301
;1301:				}
LABELV $733
line 1302
;1302:	}
LABELV $716
line 1304
;1303:	
;1304:	if (targ->sandboxObject) {
ADDRFP4 0
INDIRP4
CNSTI4 840
ADDP4
INDIRI4
CNSTI4 0
EQI4 $747
line 1305
;1305:	if (!targ->takedamage2) {
ADDRFP4 0
INDIRP4
CNSTI4 836
ADDP4
INDIRI4
CNSTI4 0
NEI4 $749
line 1306
;1306:		return;
ADDRGP4 $567
JUMPV
LABELV $749
line 1308
;1307:	}
;1308:	}
LABELV $747
line 1311
;1309:
;1310:	// check for completely getting out of the damage
;1311:	if ( !(dflags & DAMAGE_NO_PROTECTION) ) {
ADDRFP4 24
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $751
line 1315
;1312:
;1313:		// if TF_NO_FRIENDLY_FIRE is set, don't do damage to the target
;1314:		// if the attacker was on the same team
;1315:		if ( mod != MOD_JUICED && mod != MOD_CRUSH && targ != attacker && !(dflags & DAMAGE_NO_TEAM_PROTECTION) && OnSameTeam (targ, attacker)  ) {
ADDRLP4 104
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 32
EQI4 $753
ADDRLP4 104
INDIRI4
CNSTI4 22
EQI4 $753
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CVPU4 4
ADDRLP4 112
INDIRP4
CVPU4 4
EQU4 $753
ADDRFP4 24
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
NEI4 $753
ADDRLP4 108
INDIRP4
ARGP4
ADDRLP4 112
INDIRP4
ARGP4
ADDRLP4 116
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 116
INDIRI4
CNSTI4 0
EQI4 $753
line 1316
;1316:			if ( ( !g_friendlyFire.integer && g_gametype.integer != GT_ELIMINATION && g_gametype.integer != GT_CTF_ELIMINATION ) || ( g_elimination_selfdamage.integer<2 &&	(g_gametype.integer == GT_ELIMINATION || g_gametype.integer == GT_CTF_ELIMINATION) ) ) {
ADDRGP4 g_friendlyFire+12
INDIRI4
CNSTI4 0
NEI4 $765
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $765
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
NEI4 $766
LABELV $765
ADDRGP4 g_elimination_selfdamage+12
INDIRI4
CNSTI4 2
GEI4 $755
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $766
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
NEI4 $755
LABELV $766
line 1317
;1317:				return;
ADDRGP4 $567
JUMPV
LABELV $755
line 1319
;1318:			}
;1319:		}
LABELV $753
line 1320
;1320:		if (mod == MOD_PROXIMITY_MINE) {
ADDRFP4 28
INDIRI4
CNSTI4 30
NEI4 $767
line 1321
;1321:			if (inflictor && inflictor->parent && OnSameTeam(targ, inflictor->parent)) {
ADDRLP4 120
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 124
CNSTU4 0
ASGNU4
ADDRLP4 120
INDIRP4
CVPU4 4
ADDRLP4 124
INDIRU4
EQU4 $769
ADDRLP4 128
ADDRLP4 120
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ASGNP4
ADDRLP4 128
INDIRP4
CVPU4 4
ADDRLP4 124
INDIRU4
EQU4 $769
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
CNSTI4 0
EQI4 $769
line 1322
;1322:				return;
ADDRGP4 $567
JUMPV
LABELV $769
line 1324
;1323:			}
;1324:			if (targ == attacker) {
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRFP4 8
INDIRP4
CVPU4 4
NEU4 $771
line 1325
;1325:				return;
ADDRGP4 $567
JUMPV
LABELV $771
line 1327
;1326:			}
;1327:		}
LABELV $767
line 1330
;1328:
;1329:		// check for godmode
;1330:		if ( targ->flags & FL_GODMODE ) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $773
line 1331
;1331:			return;
ADDRGP4 $567
JUMPV
LABELV $773
line 1334
;1332:		}
;1333:
;1334:                if(targ->client && targ->client->spawnprotected) {
ADDRLP4 120
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $775
ADDRLP4 120
INDIRP4
CNSTI4 2192
ADDP4
INDIRI4
CNSTI4 0
EQI4 $775
line 1335
;1335:                   if(level.time>targ->client->respawnTime+g_spawnprotect.integer)
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1316
ADDP4
INDIRI4
ADDRGP4 g_spawnprotect+12
INDIRI4
ADDI4
LEI4 $777
line 1336
;1336:                       targ->client->spawnprotected = qfalse;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 2192
ADDP4
CNSTI4 0
ASGNI4
ADDRGP4 $778
JUMPV
LABELV $777
line 1338
;1337:                   else
;1338:                       if( (mod > MOD_UNKNOWN && mod < MOD_WATER) || mod == MOD_TELEFRAG || mod>MOD_TRIGGER_HURT)
ADDRLP4 124
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 124
INDIRI4
CNSTI4 0
LEI4 $784
ADDRLP4 124
INDIRI4
CNSTI4 19
LTI4 $785
LABELV $784
ADDRLP4 128
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 128
INDIRI4
CNSTI4 23
EQI4 $785
ADDRLP4 128
INDIRI4
CNSTI4 27
LEI4 $781
LABELV $785
line 1339
;1339:                       return;
ADDRGP4 $567
JUMPV
LABELV $781
LABELV $778
line 1340
;1340:                }
LABELV $775
line 1341
;1341:	}
LABELV $751
line 1345
;1342:
;1343:	// battlesuit protects from all radius damage (but takes knockback)
;1344:	// and protects 50% against all damage
;1345:	if ( client && client->ps.powerups[PW_BATTLESUIT] ) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $786
ADDRLP4 4
INDIRP4
CNSTI4 320
ADDP4
INDIRI4
CNSTI4 0
EQI4 $786
line 1346
;1346:		G_AddEvent( targ, EV_POWERUP_BATTLESUIT, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 63
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1347
;1347:		if ( ( dflags & DAMAGE_RADIUS ) || ( mod == MOD_FALLING ) ) {
ADDRFP4 24
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
NEI4 $790
ADDRFP4 28
INDIRI4
CNSTI4 24
NEI4 $788
LABELV $790
line 1348
;1348:			return;
ADDRGP4 $567
JUMPV
LABELV $788
line 1350
;1349:		}
;1350:		damage *= 0.5;
ADDRFP4 20
CNSTF4 1056964608
ADDRFP4 20
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 1351
;1351:	}
LABELV $786
line 1354
;1352:
;1353:	// add to the attacker's hit counter (if the target isn't a general entity like a prox mine)
;1354:	if ( attacker->client && client && targ != attacker && targ->health > 0 && targ->s.eType != ET_MISSILE && targ->s.eType != ET_GENERAL) {
ADDRLP4 108
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 112
CNSTU4 0
ASGNU4
ADDRLP4 108
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 112
INDIRU4
EQU4 $791
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRLP4 112
INDIRU4
EQU4 $791
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CVPU4 4
ADDRLP4 108
INDIRP4
CVPU4 4
EQU4 $791
ADDRLP4 120
CNSTI4 0
ASGNI4
ADDRLP4 116
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRLP4 120
INDIRI4
LEI4 $791
ADDRLP4 124
ADDRLP4 116
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 124
INDIRI4
CNSTI4 3
EQI4 $791
ADDRLP4 124
INDIRI4
ADDRLP4 120
INDIRI4
EQI4 $791
line 1355
;1355:		if ( OnSameTeam( targ, attacker ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 128
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 128
INDIRI4
CNSTI4 0
EQI4 $793
line 1356
;1356:			attacker->client->ps.persistant[PERS_HITS]--;
ADDRLP4 132
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 252
ADDP4
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1357
;1357:		} else {
ADDRGP4 $794
JUMPV
LABELV $793
line 1358
;1358:			attacker->client->ps.persistant[PERS_HITS]++;
ADDRLP4 132
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 252
ADDP4
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1359
;1359:		}
LABELV $794
line 1360
;1360:		attacker->client->ps.persistant[PERS_ATTACKEE_ARMOR] = (targ->health<<8)|(client->ps.stats[STAT_ARMOR]);
ADDRFP4 8
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 276
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 8
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
BORI4
ASGNI4
line 1361
;1361:	}
LABELV $791
line 1365
;1362:
;1363:	// always give half damage if hurting self
;1364:	// calculated after knockback, so rocket jumping works
;1365:	if ( targ == attacker) {
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRFP4 8
INDIRP4
CVPU4 4
NEU4 $795
line 1366
;1366:		damage *= 0.20;
ADDRFP4 20
CNSTF4 1045220557
ADDRFP4 20
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 1367
;1367:	}
LABELV $795
line 1369
;1368:
;1369:        if(targ && targ->client && attacker->client )
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
CNSTU4 0
ASGNU4
ADDRLP4 128
INDIRP4
CVPU4 4
ADDRLP4 132
INDIRU4
EQU4 $797
ADDRLP4 136
CNSTI4 556
ASGNI4
ADDRLP4 128
INDIRP4
ADDRLP4 136
INDIRI4
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 132
INDIRU4
EQU4 $797
ADDRFP4 8
INDIRP4
ADDRLP4 136
INDIRI4
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 132
INDIRU4
EQU4 $797
line 1370
;1370:            damage = catchup_damage(damage, attacker->client->ps.persistant[PERS_SCORE], targ->client->ps.persistant[PERS_SCORE]);
ADDRFP4 20
INDIRI4
ARGI4
ADDRLP4 140
CNSTI4 556
ASGNI4
ADDRLP4 144
CNSTI4 248
ASGNI4
ADDRFP4 8
INDIRP4
ADDRLP4 140
INDIRI4
ADDP4
INDIRP4
ADDRLP4 144
INDIRI4
ADDP4
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
ADDRLP4 140
INDIRI4
ADDP4
INDIRP4
ADDRLP4 144
INDIRI4
ADDP4
INDIRI4
ARGI4
ADDRLP4 148
ADDRGP4 catchup_damage
CALLI4
ASGNI4
ADDRFP4 20
ADDRLP4 148
INDIRI4
ASGNI4
LABELV $797
line 1372
;1371:
;1372:        if(g_damageModifier.value > 0.01) {
ADDRGP4 g_damageModifier+8
INDIRF4
CNSTF4 1008981770
LEF4 $799
line 1373
;1373:            damage *= g_damageModifier.value;
ADDRFP4 20
ADDRFP4 20
INDIRI4
CVIF4 4
ADDRGP4 g_damageModifier+8
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 1374
;1374:        }
LABELV $799
line 1376
;1375:
;1376:	if ((g_gametype.integer == GT_ELIMINATION || g_gametype.integer == GT_CTF_ELIMINATION || g_gametype.integer == GT_LMS || g_elimination_allgametypes.integer)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $812
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
EQI4 $812
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 11
EQI4 $812
ADDRGP4 g_elimination_allgametypes+12
INDIRI4
CNSTI4 0
EQI4 $803
LABELV $812
ADDRGP4 g_elimination_selfdamage+12
INDIRI4
CNSTI4 1
GEI4 $803
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRFP4 8
INDIRP4
CVPU4 4
EQU4 $813
ADDRFP4 28
INDIRI4
CNSTI4 24
NEI4 $803
LABELV $813
line 1377
;1377:				&& g_elimination_selfdamage.integer<1 && ( targ == attacker ||  mod == MOD_FALLING )) {
line 1378
;1378:		damage = 0;
ADDRFP4 20
CNSTI4 0
ASGNI4
line 1379
;1379:	}
LABELV $803
line 1382
;1380:
;1381:	//So people can be telefragged!
;1382:	if ((g_gametype.integer == GT_ELIMINATION || g_gametype.integer == GT_CTF_ELIMINATION || g_gametype.integer == GT_LMS) && level.time < level.roundStartTime && ((mod == MOD_LAVA) || (mod == MOD_SLIME)) ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $822
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
EQI4 $822
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 11
NEI4 $814
LABELV $822
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+10000
INDIRI4
GEI4 $814
ADDRLP4 152
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 152
INDIRI4
CNSTI4 21
EQI4 $823
ADDRLP4 152
INDIRI4
CNSTI4 20
NEI4 $814
LABELV $823
line 1383
;1383:		damage = 1000;
ADDRFP4 20
CNSTI4 1000
ASGNI4
line 1384
;1384:	}
LABELV $814
line 1386
;1385:
;1386:	take = damage;
ADDRLP4 8
ADDRFP4 20
INDIRI4
ASGNI4
line 1389
;1387:
;1388:	// save some from armor
;1389:	asave = CheckArmor (targ, take, dflags);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRFP4 24
INDIRI4
ARGI4
ADDRLP4 156
ADDRGP4 CheckArmor
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 156
INDIRI4
ASGNI4
line 1390
;1390:	take -= asave;
ADDRLP4 8
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ASGNI4
line 1392
;1391:
;1392:	if ( g_debugDamage.integer ) {
ADDRGP4 g_debugDamage+12
INDIRI4
CNSTI4 0
EQI4 $824
line 1393
;1393:		G_Printf( "%i: client:%i health:%i damage:%i armor:%i\n", level.time, targ->s.number,
ADDRGP4 $827
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 160
INDIRP4
INDIRI4
ARGI4
ADDRLP4 160
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 G_Printf
CALLV
pop
line 1395
;1394:			targ->health, take, asave );
;1395:	}
LABELV $824
line 1397
;1396:	
;1397:	if ( client ) {
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $829
line 1398
;1398:		if ( attacker ) {
ADDRFP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $831
line 1399
;1399:			client->ps.persistant[PERS_ATTACKER] = attacker->s.number;
ADDRLP4 4
INDIRP4
CNSTI4 272
ADDP4
ADDRFP4 8
INDIRP4
INDIRI4
ASGNI4
line 1400
;1400:                } else if(client->lastSentFlying) {
ADDRGP4 $832
JUMPV
LABELV $831
ADDRLP4 4
INDIRP4
CNSTI4 1448
ADDP4
INDIRI4
CNSTI4 0
EQI4 $833
line 1401
;1401:                        client->ps.persistant[PERS_ATTACKER] = client->lastSentFlying;
ADDRLP4 4
INDIRP4
CNSTI4 272
ADDP4
ADDRLP4 4
INDIRP4
CNSTI4 1448
ADDP4
INDIRI4
ASGNI4
line 1402
;1402:                } else {
ADDRGP4 $834
JUMPV
LABELV $833
line 1403
;1403:			client->ps.persistant[PERS_ATTACKER] = ENTITYNUM_WORLD;
ADDRLP4 4
INDIRP4
CNSTI4 272
ADDP4
CNSTI4 4094
ASGNI4
line 1404
;1404:		}
LABELV $834
LABELV $832
line 1405
;1405:		client->damage_armor += asave;
ADDRLP4 160
ADDRLP4 4
INDIRP4
CNSTI4 1264
ADDP4
ASGNP4
ADDRLP4 160
INDIRP4
ADDRLP4 160
INDIRP4
INDIRI4
ADDRLP4 12
INDIRI4
ADDI4
ASGNI4
line 1406
;1406:		client->damage_blood += take;
ADDRLP4 164
ADDRLP4 4
INDIRP4
CNSTI4 1268
ADDP4
ASGNP4
ADDRLP4 164
INDIRP4
ADDRLP4 164
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1407
;1407:		client->damage_knockback += knockback;
ADDRLP4 168
ADDRLP4 4
INDIRP4
CNSTI4 1272
ADDP4
ASGNP4
ADDRLP4 168
INDIRP4
ADDRLP4 168
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 1408
;1408:		if ( dir ) {
ADDRFP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $835
line 1409
;1409:			VectorCopy ( dir, client->damage_from );
ADDRLP4 4
INDIRP4
CNSTI4 1276
ADDP4
ADDRFP4 12
INDIRP4
INDIRB
ASGNB 12
line 1410
;1410:			client->damage_fromWorld = qfalse;
ADDRLP4 4
INDIRP4
CNSTI4 1288
ADDP4
CNSTI4 0
ASGNI4
line 1411
;1411:		} else {
ADDRGP4 $836
JUMPV
LABELV $835
line 1412
;1412:			VectorCopy ( targ->r.currentOrigin, client->damage_from );
ADDRLP4 4
INDIRP4
CNSTI4 1276
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRB
ASGNB 12
line 1413
;1413:			client->damage_fromWorld = qtrue;
ADDRLP4 4
INDIRP4
CNSTI4 1288
ADDP4
CNSTI4 1
ASGNI4
line 1414
;1414:		}
LABELV $836
line 1415
;1415:	}
LABELV $829
line 1418
;1416:
;1417:	// See if it's the player hurting the emeny flag carrier
;1418:	if( g_gametype.integer == GT_CTF || g_gametype.integer == GT_1FCTF || g_gametype.integer == GT_CTF_ELIMINATION) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 5
EQI4 $843
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 6
EQI4 $843
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
NEI4 $837
LABELV $843
line 1419
;1419:		Team_CheckHurtCarrier(targ, attacker);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Team_CheckHurtCarrier
CALLV
pop
line 1420
;1420:	}
LABELV $837
line 1422
;1421:
;1422:	if (targ->client) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $844
line 1424
;1423:		// set the last client who damaged the target
;1424:		targ->client->lasthurt_client = attacker->s.number;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1308
ADDP4
ADDRFP4 8
INDIRP4
INDIRI4
ASGNI4
line 1425
;1425:		targ->client->lasthurt_mod = mod;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1312
ADDP4
ADDRFP4 28
INDIRI4
ASGNI4
line 1426
;1426:	}
LABELV $844
line 1429
;1427:
;1428:	//If vampire is enabled, gain health but not from self or teammate, cannot steal more than targ has
;1429:	if( g_vampire.value>0.0 && (targ != attacker) && take > 0 &&
ADDRGP4 g_vampire+8
INDIRF4
CNSTF4 0
LEF4 $846
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 164
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 160
INDIRP4
CVPU4 4
ADDRLP4 164
INDIRP4
CVPU4 4
EQU4 $846
ADDRLP4 8
INDIRI4
CNSTI4 0
LEI4 $846
ADDRLP4 160
INDIRP4
ARGP4
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 168
ADDRGP4 OnSameTeam
CALLI4
ASGNI4
ADDRLP4 172
CNSTI4 0
ASGNI4
ADDRLP4 168
INDIRI4
ADDRLP4 172
INDIRI4
NEI4 $846
ADDRLP4 176
CNSTI4 808
ASGNI4
ADDRFP4 8
INDIRP4
ADDRLP4 176
INDIRI4
ADDP4
INDIRI4
ADDRLP4 172
INDIRI4
LEI4 $846
ADDRFP4 0
INDIRP4
ADDRLP4 176
INDIRI4
ADDP4
INDIRI4
ADDRLP4 172
INDIRI4
LEI4 $846
line 1431
;1430:                !(OnSameTeam(targ, attacker)) && attacker->health > 0 && targ->health > 0 )
;1431:	{
line 1432
;1432:		if(take<targ->health)
ADDRLP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
GEI4 $849
line 1433
;1433:			attacker->health += (int)(((float)take)*g_vampire.value);
ADDRLP4 180
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
CVIF4 4
ADDRGP4 g_vampire+8
INDIRF4
MULF4
CVFI4 4
ADDI4
ASGNI4
ADDRGP4 $850
JUMPV
LABELV $849
line 1435
;1434:		else
;1435:			attacker->health += (int)(((float)targ->health)*g_vampire.value);
ADDRLP4 184
CNSTI4 808
ASGNI4
ADDRLP4 188
ADDRFP4 8
INDIRP4
ADDRLP4 184
INDIRI4
ADDP4
ASGNP4
ADDRLP4 188
INDIRP4
ADDRLP4 188
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
ADDRLP4 184
INDIRI4
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 g_vampire+8
INDIRF4
MULF4
CVFI4 4
ADDI4
ASGNI4
LABELV $850
line 1436
;1436:		if(attacker->health>g_vampireMaxHealth.integer)
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 g_vampireMaxHealth+12
INDIRI4
LEI4 $853
line 1437
;1437:			attacker->health = g_vampireMaxHealth.integer;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 g_vampireMaxHealth+12
INDIRI4
ASGNI4
LABELV $853
line 1438
;1438:	}
LABELV $846
line 1440
;1439:
;1440:	if(mod==MOD_MACHINEGUN){
ADDRFP4 28
INDIRI4
CNSTI4 3
NEI4 $857
line 1441
;1441:		if(g_mgvampire.integer==1){
ADDRGP4 g_mgvampire+12
INDIRI4
CNSTI4 1
NEI4 $859
line 1442
;1442:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $862
line 1443
;1443:				attacker->health += take;
ADDRLP4 180
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1444
;1444:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $864
line 1445
;1445:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1446
;1446:				}
LABELV $864
line 1447
;1447:			}
LABELV $862
line 1448
;1448:		}
LABELV $859
line 1449
;1449:	}
LABELV $857
line 1450
;1450:	if(mod==MOD_SHOTGUN){
ADDRFP4 28
INDIRI4
CNSTI4 1
NEI4 $866
line 1451
;1451:		if(g_sgvampire.integer==1){
ADDRGP4 g_sgvampire+12
INDIRI4
CNSTI4 1
NEI4 $868
line 1452
;1452:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $871
line 1453
;1453:				attacker->health += take;
ADDRLP4 180
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1454
;1454:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $873
line 1455
;1455:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1456
;1456:				}
LABELV $873
line 1457
;1457:			}
LABELV $871
line 1458
;1458:		}
LABELV $868
line 1459
;1459:	}
LABELV $866
line 1460
;1460:	if(mod==MOD_RAILGUN){
ADDRFP4 28
INDIRI4
CNSTI4 10
NEI4 $875
line 1461
;1461:		if(g_rgvampire.integer==1){
ADDRGP4 g_rgvampire+12
INDIRI4
CNSTI4 1
NEI4 $877
line 1462
;1462:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $880
line 1463
;1463:				attacker->health += take;
ADDRLP4 180
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1464
;1464:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $882
line 1465
;1465:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1466
;1466:				}
LABELV $882
line 1467
;1467:			}
LABELV $880
line 1468
;1468:		}
LABELV $877
line 1469
;1469:	}
LABELV $875
line 1470
;1470:	if(mod==MOD_LIGHTNING){
ADDRFP4 28
INDIRI4
CNSTI4 11
NEI4 $884
line 1471
;1471:		if(g_lgvampire.integer==1){
ADDRGP4 g_lgvampire+12
INDIRI4
CNSTI4 1
NEI4 $886
line 1472
;1472:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $889
line 1473
;1473:				attacker->health += take;
ADDRLP4 180
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1474
;1474:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $891
line 1475
;1475:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1476
;1476:				}
LABELV $891
line 1477
;1477:			}
LABELV $889
line 1478
;1478:		}
LABELV $886
line 1479
;1479:	}
LABELV $884
line 1480
;1480:	if(mod==MOD_NAIL){
ADDRFP4 28
INDIRI4
CNSTI4 28
NEI4 $893
line 1481
;1481:		if(g_ngvampire.integer==1){
ADDRGP4 g_ngvampire+12
INDIRI4
CNSTI4 1
NEI4 $895
line 1482
;1482:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $898
line 1483
;1483:				attacker->health += take;
ADDRLP4 180
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1484
;1484:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $900
line 1485
;1485:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1486
;1486:				}
LABELV $900
line 1487
;1487:			}
LABELV $898
line 1488
;1488:		}
LABELV $895
line 1489
;1489:	}
LABELV $893
line 1490
;1490:	if(mod==MOD_CHAINGUN){
ADDRFP4 28
INDIRI4
CNSTI4 29
NEI4 $902
line 1491
;1491:		if(g_cgvampire.integer==1){
ADDRGP4 g_cgvampire+12
INDIRI4
CNSTI4 1
NEI4 $904
line 1492
;1492:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $907
line 1493
;1493:				attacker->health += take;
ADDRLP4 180
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1494
;1494:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $909
line 1495
;1495:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1496
;1496:				}
LABELV $909
line 1497
;1497:			}
LABELV $907
line 1498
;1498:		}
LABELV $904
line 1499
;1499:	}
LABELV $902
line 1500
;1500:	if(mod==MOD_PROXIMITY_MINE){
ADDRFP4 28
INDIRI4
CNSTI4 30
NEI4 $911
line 1501
;1501:		if(g_plvampire.integer==1){
ADDRGP4 g_plvampire+12
INDIRI4
CNSTI4 1
NEI4 $913
line 1502
;1502:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $916
line 1503
;1503:				attacker->health += take;
ADDRLP4 180
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 180
INDIRP4
ADDRLP4 180
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1504
;1504:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $918
line 1505
;1505:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1506
;1506:				}
LABELV $918
line 1507
;1507:			}
LABELV $916
line 1508
;1508:		}
LABELV $913
line 1509
;1509:	}
LABELV $911
line 1510
;1510:	if((mod==MOD_GRENADE)||(mod==MOD_GRENADE_SPLASH)){
ADDRLP4 180
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 180
INDIRI4
CNSTI4 4
EQI4 $922
ADDRLP4 180
INDIRI4
CNSTI4 5
NEI4 $920
LABELV $922
line 1511
;1511:		if(g_glvampire.integer==1){
ADDRGP4 g_glvampire+12
INDIRI4
CNSTI4 1
NEI4 $923
line 1512
;1512:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $926
line 1513
;1513:				attacker->health += take;
ADDRLP4 184
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 184
INDIRP4
ADDRLP4 184
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1514
;1514:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $928
line 1515
;1515:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1516
;1516:				}
LABELV $928
line 1517
;1517:			}
LABELV $926
line 1518
;1518:		}
LABELV $923
line 1519
;1519:	}
LABELV $920
line 1520
;1520:	if((mod==MOD_ROCKET)||(mod==MOD_ROCKET_SPLASH)){
ADDRLP4 184
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 184
INDIRI4
CNSTI4 6
EQI4 $932
ADDRLP4 184
INDIRI4
CNSTI4 7
NEI4 $930
LABELV $932
line 1521
;1521:		if(g_rlvampire.integer==1){
ADDRGP4 g_rlvampire+12
INDIRI4
CNSTI4 1
NEI4 $933
line 1522
;1522:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $936
line 1523
;1523:				attacker->health += take;
ADDRLP4 188
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 188
INDIRP4
ADDRLP4 188
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1524
;1524:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $938
line 1525
;1525:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1526
;1526:				}
LABELV $938
line 1527
;1527:			}
LABELV $936
line 1528
;1528:		}
LABELV $933
line 1529
;1529:	}
LABELV $930
line 1530
;1530:	if((mod==MOD_PLASMA)||(mod==MOD_PLASMA_SPLASH)){
ADDRLP4 188
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 188
INDIRI4
CNSTI4 8
EQI4 $942
ADDRLP4 188
INDIRI4
CNSTI4 9
NEI4 $940
LABELV $942
line 1531
;1531:		if(g_pgvampire.integer==1){
ADDRGP4 g_pgvampire+12
INDIRI4
CNSTI4 1
NEI4 $943
line 1532
;1532:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $946
line 1533
;1533:				attacker->health += take;
ADDRLP4 192
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 192
INDIRP4
ADDRLP4 192
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1534
;1534:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $948
line 1535
;1535:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1536
;1536:				}
LABELV $948
line 1537
;1537:			}
LABELV $946
line 1538
;1538:		}
LABELV $943
line 1539
;1539:	}
LABELV $940
line 1540
;1540:	if((mod==MOD_BFG)||(mod==MOD_BFG_SPLASH)){
ADDRLP4 192
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 192
INDIRI4
CNSTI4 12
EQI4 $952
ADDRLP4 192
INDIRI4
CNSTI4 13
NEI4 $950
LABELV $952
line 1541
;1541:		if(g_bfgvampire.integer==1){
ADDRGP4 g_bfgvampire+12
INDIRI4
CNSTI4 1
NEI4 $953
line 1542
;1542:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $956
line 1543
;1543:				attacker->health += take;
ADDRLP4 196
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 196
INDIRP4
ADDRLP4 196
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1544
;1544:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $958
line 1545
;1545:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1546
;1546:				}
LABELV $958
line 1547
;1547:			}
LABELV $956
line 1548
;1548:		}
LABELV $953
line 1549
;1549:	}
LABELV $950
line 1550
;1550:	if((mod==MOD_FLAME)||(mod==MOD_FLAME_SPLASH)){
ADDRLP4 196
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 196
INDIRI4
CNSTI4 14
EQI4 $962
ADDRLP4 196
INDIRI4
CNSTI4 15
NEI4 $960
LABELV $962
line 1551
;1551:		if(g_ftvampire.integer==1){
ADDRGP4 g_ftvampire+12
INDIRI4
CNSTI4 1
NEI4 $963
line 1552
;1552:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $966
line 1553
;1553:				attacker->health += take;
ADDRLP4 200
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 200
INDIRP4
ADDRLP4 200
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1554
;1554:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $968
line 1555
;1555:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1556
;1556:				}
LABELV $968
line 1557
;1557:			}
LABELV $966
line 1558
;1558:		}
LABELV $963
line 1559
;1559:	}
LABELV $960
line 1560
;1560:	if((mod==MOD_ANTIMATTER)||(mod==MOD_ANTIMATTER_SPLASH)){
ADDRLP4 200
ADDRFP4 28
INDIRI4
ASGNI4
ADDRLP4 200
INDIRI4
CNSTI4 16
EQI4 $972
ADDRLP4 200
INDIRI4
CNSTI4 17
NEI4 $970
LABELV $972
line 1561
;1561:		if(g_amvampire.integer==1){
ADDRGP4 g_amvampire+12
INDIRI4
CNSTI4 1
NEI4 $973
line 1562
;1562:			if(attacker->health<mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
GEI4 $976
line 1563
;1563:				attacker->health += take;
ADDRLP4 204
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 204
INDIRP4
ADDRLP4 204
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 1564
;1564:				if(attacker->health>mod_vampire_max_health){
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRGP4 mod_vampire_max_health
INDIRI4
LEI4 $978
line 1565
;1565:					attacker->health = mod_vampire_max_health;
ADDRFP4 8
INDIRP4
CNSTI4 808
ADDP4
ADDRGP4 mod_vampire_max_health
INDIRI4
ASGNI4
line 1566
;1566:				}
LABELV $978
line 1567
;1567:			}
LABELV $976
line 1568
;1568:		}
LABELV $973
line 1569
;1569:	}
LABELV $970
line 1572
;1570:	
;1571:	// do the damage
;1572:	if (take) {
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $980
line 1573
;1573:		targ->health = targ->health - take;
ADDRLP4 204
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 204
INDIRP4
ADDRLP4 204
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ASGNI4
line 1574
;1574:		if ( targ->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $982
line 1575
;1575:			targ->client->ps.stats[STAT_HEALTH] = targ->health;
ADDRLP4 208
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 208
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 208
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ASGNI4
line 1576
;1576:		}
LABELV $982
line 1578
;1577:		
;1578:		if ( !strcmp(targ->classname, "func_breakable") ) {
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $620
ARGP4
ADDRLP4 208
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 208
INDIRI4
CNSTI4 0
NEI4 $984
line 1579
;1579:			targ->health -= damage;
ADDRLP4 212
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 212
INDIRP4
ADDRLP4 212
INDIRP4
INDIRI4
ADDRFP4 20
INDIRI4
SUBI4
ASGNI4
line 1580
;1580:			if ( targ->health <= 0 ){
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 0
GTI4 $986
line 1581
;1581:			    Break_Breakable(targ, attacker);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 Break_Breakable
CALLV
pop
line 1582
;1582:			}
LABELV $986
line 1583
;1583:		}
LABELV $984
line 1584
;1584:                ScorePlum(attacker, targ->r.currentOrigin, damage, asave);
ADDRFP4 8
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ARGP4
ADDRFP4 20
INDIRI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 ScorePlum
CALLV
pop
line 1586
;1585:
;1586:		if ( targ->health <= 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 0
GTI4 $988
line 1587
;1587:			if ( client )
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $990
line 1588
;1588:				targ->flags |= FL_NO_KNOCKBACK;
ADDRLP4 212
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
ASGNP4
ADDRLP4 212
INDIRP4
ADDRLP4 212
INDIRP4
INDIRI4
CNSTI4 2048
BORI4
ASGNI4
LABELV $990
line 1590
;1589:
;1590:			if (targ->health < -999)
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 -999
GEI4 $992
line 1591
;1591:				targ->health = -999;
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
CNSTI4 -999
ASGNI4
LABELV $992
line 1593
;1592:
;1593:			targ->enemy = attacker;
ADDRFP4 0
INDIRP4
CNSTI4 964
ADDP4
ADDRFP4 8
INDIRP4
ASGNP4
line 1594
;1594:			targ->die (targ, inflictor, attacker, take, mod);
ADDRLP4 216
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 216
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRFP4 28
INDIRI4
ARGI4
ADDRLP4 216
INDIRP4
CNSTI4 792
ADDP4
INDIRP4
CALLV
pop
line 1595
;1595:			return;
ADDRGP4 $567
JUMPV
LABELV $988
line 1596
;1596:		} else if ( targ->pain ) {
ADDRFP4 0
INDIRP4
CNSTI4 788
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $994
line 1597
;1597:			targ->pain (targ, attacker, take);
ADDRLP4 212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 212
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 212
INDIRP4
CNSTI4 788
ADDP4
INDIRP4
CALLV
pop
line 1598
;1598:		}
LABELV $994
line 1599
;1599:	}
LABELV $980
line 1600
;1600:}
LABELV $567
endproc G_Damage 220 24
export G_PropDamage
proc G_PropDamage 8 32
line 1602
;1601:
;1602:void G_PropDamage (gentity_t *targ, gentity_t *attacker, int damage){
line 1603
;1603:	G_Damage( targ, attacker, attacker, NULL, NULL, damage, 0, MOD_PROP );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
CNSTP4 0
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 36
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 1604
;1604:}
LABELV $996
endproc G_PropDamage 8 32
export G_CarDamage
proc G_CarDamage 8 32
line 1606
;1605:
;1606:void G_CarDamage (gentity_t *targ, gentity_t *attacker, int damage){
line 1607
;1607:	G_Damage( targ, attacker, attacker, NULL, NULL, damage, 0, MOD_CAR );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 4
CNSTP4 0
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRI4
ARGI4
CNSTI4 0
ARGI4
CNSTI4 34
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 1608
;1608:}
LABELV $997
endproc G_CarDamage 8 32
export G_ExitVehicle
proc G_ExitVehicle 4 4
line 1610
;1609:
;1610:void G_ExitVehicle (int num){
line 1611
;1611:	Cmd_VehicleExit_f( G_FindEntityForClientNum(num));
ADDRFP4 0
INDIRI4
ARGI4
ADDRLP4 0
ADDRGP4 G_FindEntityForClientNum
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Cmd_VehicleExit_f
CALLI4
pop
line 1612
;1612:}
LABELV $998
endproc G_ExitVehicle 4 4
export CanDamage
proc CanDamage 112 28
line 1623
;1613:
;1614:
;1615:/*
;1616:============
;1617:CanDamage
;1618:
;1619:Returns qtrue if the inflictor can directly damage the target.  Used for
;1620:explosions and melee attacks.
;1621:============
;1622:*/
;1623:qboolean CanDamage (gentity_t *targ, vec3_t origin) {
line 1630
;1624:	vec3_t	dest;
;1625:	trace_t	tr;
;1626:	vec3_t	midpoint;
;1627:
;1628:	// use the midpoint of the bounds instead of the origin, because
;1629:	// bmodels may have their origin is 0,0,0
;1630:	VectorAdd (targ->r.absmin, targ->r.absmax, midpoint);
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 80
INDIRP4
CNSTI4 504
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 516
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 80
INDIRP4
CNSTI4 508
ADDP4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 520
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12+8
ADDRLP4 84
INDIRP4
CNSTI4 512
ADDP4
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 524
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1631
;1631:	VectorScale (midpoint, 0.5, midpoint);
ADDRLP4 88
CNSTF4 1056964608
ASGNF4
ADDRLP4 12
ADDRLP4 88
INDIRF4
ADDRLP4 12
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 88
INDIRF4
ADDRLP4 12+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 12+8
CNSTF4 1056964608
ADDRLP4 12+8
INDIRF4
MULF4
ASGNF4
line 1633
;1632:
;1633:	VectorCopy (midpoint, dest);
ADDRLP4 0
ADDRLP4 12
INDIRB
ASGNB 12
line 1634
;1634:	trap_Trace ( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID);
ADDRLP4 24
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 92
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1635
;1635:	if (tr.fraction == 1.0 || tr.entityNum == targ->s.number)
ADDRLP4 24+8
INDIRF4
CNSTF4 1065353216
EQF4 $1010
ADDRLP4 24+52
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
NEI4 $1006
LABELV $1010
line 1636
;1636:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $999
JUMPV
LABELV $1006
line 1640
;1637:
;1638:	// this should probably check in the plane of projection,
;1639:	// rather than in world coordinate, and also include Z
;1640:	VectorCopy (midpoint, dest);
ADDRLP4 0
ADDRLP4 12
INDIRB
ASGNB 12
line 1641
;1641:	dest[0] += 15.0;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1097859072
ADDF4
ASGNF4
line 1642
;1642:	dest[1] += 15.0;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1097859072
ADDF4
ASGNF4
line 1643
;1643:	trap_Trace ( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID);
ADDRLP4 24
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 96
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 96
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1644
;1644:	if (tr.fraction == 1.0)
ADDRLP4 24+8
INDIRF4
CNSTF4 1065353216
NEF4 $1012
line 1645
;1645:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $999
JUMPV
LABELV $1012
line 1647
;1646:
;1647:	VectorCopy (midpoint, dest);
ADDRLP4 0
ADDRLP4 12
INDIRB
ASGNB 12
line 1648
;1648:	dest[0] += 15.0;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1097859072
ADDF4
ASGNF4
line 1649
;1649:	dest[1] -= 15.0;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1097859072
SUBF4
ASGNF4
line 1650
;1650:	trap_Trace ( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID);
ADDRLP4 24
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 100
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 100
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1651
;1651:	if (tr.fraction == 1.0)
ADDRLP4 24+8
INDIRF4
CNSTF4 1065353216
NEF4 $1016
line 1652
;1652:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $999
JUMPV
LABELV $1016
line 1654
;1653:
;1654:	VectorCopy (midpoint, dest);
ADDRLP4 0
ADDRLP4 12
INDIRB
ASGNB 12
line 1655
;1655:	dest[0] -= 15.0;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1097859072
SUBF4
ASGNF4
line 1656
;1656:	dest[1] += 15.0;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1097859072
ADDF4
ASGNF4
line 1657
;1657:	trap_Trace ( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID);
ADDRLP4 24
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 104
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1658
;1658:	if (tr.fraction == 1.0)
ADDRLP4 24+8
INDIRF4
CNSTF4 1065353216
NEF4 $1020
line 1659
;1659:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $999
JUMPV
LABELV $1020
line 1661
;1660:
;1661:	VectorCopy (midpoint, dest);
ADDRLP4 0
ADDRLP4 12
INDIRB
ASGNB 12
line 1662
;1662:	dest[0] -= 15.0;
ADDRLP4 0
ADDRLP4 0
INDIRF4
CNSTF4 1097859072
SUBF4
ASGNF4
line 1663
;1663:	dest[1] -= 15.0;
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CNSTF4 1097859072
SUBF4
ASGNF4
line 1664
;1664:	trap_Trace ( &tr, origin, vec3_origin, vec3_origin, dest, ENTITYNUM_NONE, MASK_SOLID);
ADDRLP4 24
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 vec3_origin
ASGNP4
ADDRLP4 108
INDIRP4
ARGP4
ADDRLP4 108
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1665
;1665:	if (tr.fraction == 1.0)
ADDRLP4 24+8
INDIRF4
CNSTF4 1065353216
NEF4 $1024
line 1666
;1666:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $999
JUMPV
LABELV $1024
line 1669
;1667:
;1668:
;1669:	return qfalse;
CNSTI4 0
RETI4
LABELV $999
endproc CanDamage 112 28
export G_RadiusDamage
proc G_RadiusDamage 100 32
line 1679
;1670:}
;1671:
;1672:
;1673:/*
;1674:============
;1675:G_RadiusDamage
;1676:============
;1677:*/
;1678:qboolean G_RadiusDamage ( vec3_t origin, gentity_t *attacker, float damage, float radius,
;1679:					 gentity_t *ignore, int mod) {
line 1687
;1680:	float		points, dist;
;1681:	gentity_t	*ent;
;1682:	int			numListedEntities;
;1683:	vec3_t		mins, maxs;
;1684:	vec3_t		v;
;1685:	vec3_t		dir;
;1686:	int			i, e;
;1687:	qboolean	hitClient = qfalse;
ADDRLP4 72
CNSTI4 0
ASGNI4
line 1689
;1688:
;1689:	if ( radius < 1 ) {
ADDRFP4 12
INDIRF4
CNSTF4 1065353216
GEF4 $1028
line 1690
;1690:		radius = 1;
ADDRFP4 12
CNSTF4 1065353216
ASGNF4
line 1691
;1691:	}
LABELV $1028
line 1693
;1692:
;1693:	for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1030
line 1694
;1694:		mins[i] = origin[i] - radius;
ADDRLP4 76
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 76
INDIRI4
ADDRLP4 48
ADDP4
ADDRLP4 76
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ADDRFP4 12
INDIRF4
SUBF4
ASGNF4
line 1695
;1695:		maxs[i] = origin[i] + radius;
ADDRLP4 80
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 80
INDIRI4
ADDRLP4 60
ADDP4
ADDRLP4 80
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ADDRFP4 12
INDIRF4
ADDF4
ASGNF4
line 1696
;1696:	}
LABELV $1031
line 1693
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1030
line 1698
;1697:
;1698:	numListedEntities = trap_EntitiesInBox( mins, maxs, MiTechEntityList, MAX_GENTITIES );
ADDRLP4 48
ARGP4
ADDRLP4 60
ARGP4
ADDRGP4 MiTechEntityList
ARGP4
CNSTI4 4096
ARGI4
ADDRLP4 76
ADDRGP4 trap_EntitiesInBox
CALLI4
ASGNI4
ADDRLP4 44
ADDRLP4 76
INDIRI4
ASGNI4
line 1700
;1699:
;1700:	for ( e = 0 ; e < numListedEntities ; e++ ) {
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRGP4 $1037
JUMPV
LABELV $1034
line 1701
;1701:		ent = &g_entities[MiTechEntityList[ e ]];
ADDRLP4 4
CNSTI4 2492
ADDRLP4 20
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 MiTechEntityList
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 1703
;1702:
;1703:		if (ent == ignore)
ADDRLP4 4
INDIRP4
CVPU4 4
ADDRFP4 16
INDIRP4
CVPU4 4
NEU4 $1038
line 1704
;1704:			continue;
ADDRGP4 $1035
JUMPV
LABELV $1038
line 1705
;1705:		if (!ent->takedamage)
ADDRLP4 4
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1040
line 1706
;1706:			continue;
ADDRGP4 $1035
JUMPV
LABELV $1040
line 1709
;1707:
;1708:		// find the distance from the edge of the bounding box
;1709:		for ( i = 0 ; i < 3 ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $1042
line 1710
;1710:			if ( origin[i] < ent->r.absmin[i] ) {
ADDRLP4 80
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 80
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ADDRLP4 80
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 504
ADDP4
ADDP4
INDIRF4
GEF4 $1046
line 1711
;1711:				v[i] = ent->r.absmin[i] - origin[i];
ADDRLP4 84
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 84
INDIRI4
ADDRLP4 8
ADDP4
ADDRLP4 84
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 504
ADDP4
ADDP4
INDIRF4
ADDRLP4 84
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1712
;1712:			} else if ( origin[i] > ent->r.absmax[i] ) {
ADDRGP4 $1047
JUMPV
LABELV $1046
ADDRLP4 84
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 84
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ADDRLP4 84
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
ADDP4
INDIRF4
LEF4 $1048
line 1713
;1713:				v[i] = origin[i] - ent->r.absmax[i];
ADDRLP4 88
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ASGNI4
ADDRLP4 88
INDIRI4
ADDRLP4 8
ADDP4
ADDRLP4 88
INDIRI4
ADDRFP4 0
INDIRP4
ADDP4
INDIRF4
ADDRLP4 88
INDIRI4
ADDRLP4 4
INDIRP4
CNSTI4 516
ADDP4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1714
;1714:			} else {
ADDRGP4 $1049
JUMPV
LABELV $1048
line 1715
;1715:				v[i] = 0;
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
ADDP4
CNSTF4 0
ASGNF4
line 1716
;1716:			}
LABELV $1049
LABELV $1047
line 1717
;1717:		}
LABELV $1043
line 1709
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 3
LTI4 $1042
line 1719
;1718:
;1719:		dist = VectorLength( v );
ADDRLP4 8
ARGP4
ADDRLP4 80
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 24
ADDRLP4 80
INDIRF4
ASGNF4
line 1720
;1720:		if ( dist >= radius ) {
ADDRLP4 24
INDIRF4
ADDRFP4 12
INDIRF4
LTF4 $1050
line 1721
;1721:			continue;
ADDRGP4 $1035
JUMPV
LABELV $1050
line 1724
;1722:		}
;1723:
;1724:		points = damage * ( 1.0 - dist / radius );
ADDRLP4 40
ADDRFP4 8
INDIRF4
CNSTF4 1065353216
ADDRLP4 24
INDIRF4
ADDRFP4 12
INDIRF4
DIVF4
SUBF4
MULF4
ASGNF4
line 1726
;1725:
;1726:		if( CanDamage (ent, origin) ) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 84
ADDRGP4 CanDamage
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $1052
line 1727
;1727:			if( LogAccuracyHit( ent, attacker ) ) {
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 LogAccuracyHit
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
EQI4 $1054
line 1728
;1728:				hitClient = qtrue;
ADDRLP4 72
CNSTI4 1
ASGNI4
line 1729
;1729:			}
LABELV $1054
line 1730
;1730:			VectorSubtract (ent->r.currentOrigin, origin, dir);
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 4
INDIRP4
CNSTI4 528
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 4
INDIRP4
CNSTI4 532
ADDP4
INDIRF4
ADDRLP4 96
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28+8
ADDRLP4 4
INDIRP4
CNSTI4 536
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1733
;1731:			// push the center of mass higher than the origin so players
;1732:			// get knocked into the air more
;1733:			dir[2] += 24;
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
CNSTF4 1103101952
ADDF4
ASGNF4
line 1734
;1734:			G_Damage (ent, NULL, attacker, dir, origin, (int)points, DAMAGE_RADIUS, mod);
ADDRLP4 4
INDIRP4
ARGP4
CNSTP4 0
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 40
INDIRF4
CVFI4 4
ARGI4
CNSTI4 1
ARGI4
ADDRFP4 20
INDIRI4
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 1735
;1735:		}
LABELV $1052
line 1736
;1736:	}
LABELV $1035
line 1700
ADDRLP4 20
ADDRLP4 20
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1037
ADDRLP4 20
INDIRI4
ADDRLP4 44
INDIRI4
LTI4 $1034
line 1738
;1737:
;1738:	return hitClient;
ADDRLP4 72
INDIRI4
RETI4
LABELV $1027
endproc G_RadiusDamage 100 32
import Cmd_VehicleExit_f
import G_EnablePropPhysics
import IsBot
import G_DropLoot
import G_UseTriggerFragAndDeathEntities
import neutralObelisk
import G_admin_namelog_cleanup
import G_admin_cleanup
import G_admin_duration
import G_admin_buffer_end
import G_admin_buffer_begin
import G_admin_buffer_print
import G_admin_print
import G_admin_shuffle
import G_admin_warn
import G_admin_slap
import G_admin_orient
import G_admin_disorient
import G_admin_unlock
import G_admin_lock
import G_admin_namelog
import G_admin_nextmap
import G_admin_restart
import G_admin_rename
import G_admin_spec999
import G_admin_passvote
import G_admin_cancelvote
import G_admin_allready
import G_admin_admintest
import G_admin_help
import G_admin_showbans
import G_admin_mute
import G_admin_map
import G_admin_listplayers
import G_admin_listadmins
import G_admin_putteam
import G_admin_unban
import G_admin_ban
import G_admin_adjustban
import G_admin_kick
import G_admin_setlevel
import G_admin_time
import G_admin_parse_time
import G_admin_level
import G_admin_namelog_update
import G_admin_name_check
import G_admin_permission
import G_admin_readconfig
import G_admin_cmd_check
import G_admin_ban_check
import G_ConfigClientExcellent
import G_checkForMultiKill
import G_CheckForSpree
import G_RunStreakLogic
import G_ReadAltKillSettings
import AU_Cvar_VariableString
import G_ArenaScriptRandom
import G_ArenaScriptAutoFloat
import G_ArenaScriptAutoNonPointChar
import G_ArenaScriptAutoChar
import G_ArenaScriptAutoInt
import G_ArenaScriptFindFloat
import G_ArenaScriptFindChar
import G_ArenaScriptFindInt
import Svcmd_SaveSession_f
import Svcmd_For_f
import Svcmd_SystemCommand_f
import Svcmd_ClientCommand_f
import Svcmd_Editline_f
import Svcmd_Random_f
import Svcmd_Cvar_f
import Svcmd_Operation_f
import Svcmd_Condition_f
import Svcmd_MessageWrapper
import Svcmd_ListIP_f
import Svcmd_Chat_f
import Svcmd_DumpUser_f
import Svcmd_EjectClient_f
import Svcmd_BannerPrint_f
import Svcmd_ReplaceTexture_f
import Svcmd_CenterPrint_f
import Svcmd_TeamMessage_f
import Svcmd_Status_f
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_System
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_RealTime
import trap_Milliseconds
import trap_Error
import trap_Printf
import g_maxNameChanges
import g_minNameChangePeriod
import g_warningExpire
import g_maxWarnings
import g_publicAdminMessages
import g_specChat
import g_adminMaxBan
import g_adminTempBan
import g_adminNameProtect
import g_adminParseSay
import g_adminLog
import g_admin
import g_floodMinTime
import g_floodMaxDemerits
import g_spreeDiv
import g_altExcellent
import g_sprees
import g_lagLightning
import sv_fps
import g_truePing
import g_delagHitscan
import g_blueTeamClientNumbers
import g_redTeamClientNumbers
import g_humanplayers
import g_maxvotes
import g_voteMaxFraglimit
import g_voteMinFraglimit
import g_voteMaxTimelimit
import g_voteMinTimelimit
import g_voteGametypes
import g_voteBan
import g_voteNames
import g_mappools
import g_autonextmap
import g_catchup
import g_persistantpowerups
import g_awardpushing
import g_elimination_ctf_oneway
import g_lms_mode
import g_lms_lives
import g_ffa_gt
import g_regen
import g_vampireMaxHealth
import g_vampire
import g_instantgib
import g_rockets
import g_elimination_lockspectator
import g_eliminationred_holdable
import g_eliminationred_flight
import g_eliminationred_regen
import g_eliminationred_invis
import g_eliminationred_bsuit
import g_eliminationred_haste
import g_eliminationred_quad
import g_eliminationred_antimatter
import g_eliminationred_flame
import g_eliminationred_nail
import g_eliminationred_mine
import g_eliminationred_chain
import g_eliminationred_plasmagun
import g_eliminationred_lightning
import g_eliminationred_railgun
import g_eliminationred_rocket
import g_eliminationred_grenade
import g_eliminationred_shotgun
import g_eliminationred_machinegun
import g_eliminationred_gauntlet
import g_eliminationred_grapple
import g_eliminationred_bfg
import g_eliminationred_startArmor
import g_eliminationred_startHealth
import g_elimination_holdable
import g_elimination_items
import g_elimination_flight
import g_elimination_regen
import g_elimination_invis
import g_elimination_bsuit
import g_elimination_haste
import g_elimination_quad
import g_elimination_antimatter
import g_elimination_flame
import g_elimination_nail
import g_elimination_mine
import g_elimination_chain
import g_elimination_plasmagun
import g_elimination_lightning
import g_elimination_railgun
import g_elimination_rocket
import g_elimination_grenade
import g_elimination_shotgun
import g_elimination_machinegun
import g_elimination_gauntlet
import g_elimination_allgametypes
import g_elimination_activewarmup
import g_elimination_warmup
import g_elimination_roundtime
import g_elimination_grapple
import g_elimination_bfg
import g_elimination_startArmor
import g_elimination_startHealth
import g_elimination_selfdamage
import g_spawnprotect
import g_music
import g_proxMineTimeout
import g_enableBreath
import g_enableDust
import g_blueteam
import g_redteam
import g_singlePlayer
import g_rankings
import pmove_float
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_teamAutoJoin
import g_allowVote
import g_blood
import g_doWarmup
import g_warmup
import g_votecustom
import g_votemaps
import g_motdfile
import g_motd
import g_synchronousClients
import g_weaponTeamRespawn
import g_weaponRespawn
import g_allowSyncCutscene
import g_debugBotspawns
import g_debugVariables
import g_debugScore
import g_debugCameras
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_disableCutscenes
import g_inactivity
import g_respawntime
import g_forcerespawn
import g_quadfactor
import g_knockback
import g_speed
import g_damageModifier
import g_gravityModifier
import g_gravity
import g_needpass
import g_password
import g_friendlyFire
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_voteflags
import g_elimflags
import g_videoflags
import g_dmflags
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import g_gametype
import g_poweruprespawn
import g_megahealthrespawn
import g_holdablerespawn
import g_ammorespawn
import g_healthrespawn
import g_armorrespawn
import g_ammolimit
import g_drowndamage
import g_speedfactor
import g_jumpheight
import g_respawnwait
import g_armorprotect
import g_medkitmodifier
import g_hastefirespeed
import g_autoflagreturn
import g_droppeditemtime
import g_slowhealthregen
import g_fasthealthregen
import g_invultime
import g_invulmove
import g_portalhealth
import g_portaltimeout
import g_flagrespawn
import g_noplayerclip
import g_falldamagebig
import g_falldamagesmall
import g_randomteleport
import g_maxweaponpickup
import g_slimedamage
import g_lavadamage
import g_waterdamage
import g_medkitlimit
import g_kamikazeinf
import g_portalinf
import g_teleporterinf
import g_medkitinf
import g_invulinf
import g_kamikazeinfinf
import g_kill
import g_mapcycleposition
import g_useMapcycle
import g_mapcycle
import info_zombie
import g_randomItems
import g_accelerate
import g_slickmove
import g_overlay
import g_lavatowater
import onandroid
import eliminationrespawn
import eliminationredrespawn
import g_spectatorspeed
import g_regenarmor
import tex_newname
import tex_name
import g_roundmode
import g_scoreboardlock
import g_connectmsg
import g_currentmap
import g_tests
import cl_language
import cl_selectedmod
import g_maxEntities
import g_npcdrop
import g_safe
import g_allowgravitygun
import g_allowphysgun
import g_allowtoolgun
import g_allownoclip
import g_allowitems
import g_allownpc
import g_allowsettings
import g_allowprops
import save8_epsession
import save8_session0_lvl
import save8_session0
import save7_epsession
import save7_session0_lvl
import save7_session0
import save6_epsession
import save6_session0_lvl
import save6_session0
import save5_epsession
import save5_session0_lvl
import save5_session0
import save4_epsession
import save4_session0_lvl
import save4_session0
import save3_epsession
import save3_session0_lvl
import save3_session0
import save2_epsession
import save2_session0_lvl
import save2_session0
import save1_epsession
import save1_session0_lvl
import save1_session0
import save_epsession
import save_session0_lvl
import save_session0
import save8_curmap
import save7_curmap
import save6_curmap
import save5_curmap
import save4_curmap
import save3_curmap
import save2_curmap
import save1_curmap
import save_curmap
import g_skyColorA
import g_skyColorB
import g_skyColorG
import g_skyColorR
import g_skyShader
import g_fogColorA
import g_fogColorB
import g_fogColorG
import g_fogColorR
import g_fogInterval
import g_fogDistance
import g_fogShader
import g_fogModel
import g_teamred_pickupitems
import g_teamred_respawnwait
import g_teamred_infammo
import g_teamred_damage
import g_teamred_firespeed
import g_teamred_gravityModifier
import g_teamred_speed
import g_teamblue_pickupitems
import g_teamblue_respawnwait
import g_teamblue_infammo
import g_teamblue_damage
import g_teamblue_firespeed
import g_teamblue_gravityModifier
import g_teamblue_speed
import g_amweaponcount
import g_ftweaponcount
import g_cgweaponcount
import g_plweaponcount
import g_ngweaponcount
import g_bfgweaponcount
import g_pgweaponcount
import g_rgweaponcount
import g_lgweaponcount
import g_rlweaponcount
import g_glweaponcount
import g_sgweaponcount
import g_mgweaponcount
import g_ftammocount
import g_cgammocount
import g_plammocount
import g_ngammocount
import g_bfgammocount
import g_pgammocount
import g_rgammocount
import g_lgammocount
import g_rlammocount
import g_glammocount
import g_sgammocount
import g_mgammocount
import g_ammoregenhealthmodifier
import g_ammoregengravitymodifier
import g_ammoregenspeedfactor
import g_ammoregendamagefactor
import g_ammoregen_infammo
import g_ammoregenfirespeed
import g_guard_infammo
import g_guardgravitymodifier
import g_guardspeedfactor
import g_guarddamagefactor
import g_guardfirespeed
import g_guardhealthmodifier
import g_doublerhealthmodifier
import g_doubler_infammo
import g_doublergravitymodifier
import g_doublerspeedfactor
import g_doublerdamagefactor
import g_doublerfirespeed
import g_scouthealthmodifier
import g_scout_infammo
import g_scoutgravitymodifier
import g_scoutdamagefactor
import g_scoutfirespeed
import g_scoutspeedfactor
import g_amguided
import g_amhoming
import g_ftguided
import g_fthoming
import g_ngguided
import g_nghoming
import g_bfgguided
import g_bfghoming
import g_pgguided
import g_pghoming
import g_rlguided
import g_rlhoming
import g_glguided
import g_glhoming
import g_amknockback
import g_ambouncemodifier
import g_aminf
import g_amvampire
import g_amgravity
import g_ambounce
import g_amtimeout
import g_amdamage
import g_amsdamage
import g_amspeed
import g_amsradius
import g_amdelay
import g_ftknockback
import g_ftbouncemodifier
import g_ftinf
import g_ftvampire
import g_ftgravity
import g_ftbounce
import g_fttimeout
import g_ftdamage
import g_ftsdamage
import g_ftspeed
import g_ftsradius
import g_ftdelay
import g_cgknockback
import g_cginf
import g_cgvampire
import g_cgspread
import g_cgdamage
import g_cgdelay
import g_plknockback
import g_plinf
import g_plvampire
import g_plgravity
import g_pldamage
import g_plsdamage
import g_plsradius
import g_pltimeout
import g_plspeed
import g_pldelay
import g_ngknockback
import g_ngbouncemodifier
import g_nginf
import g_ngvampire
import g_ngrandom
import g_nggravity
import g_ngbounce
import g_ngcount
import g_ngtimeout
import g_ngdamage
import g_ngspread
import g_ngspeed
import g_ngdelay
import g_bfgknockback
import g_bfgbouncemodifier
import g_bfginf
import g_bfgvampire
import g_bfggravity
import g_bfgbounce
import g_bfgdamage
import g_bfgsdamage
import g_bfgsradius
import g_bfgtimeout
import g_bfgspeed
import g_bfgdelay
import g_pgknockback
import g_pgbouncemodifier
import g_pginf
import g_pgvampire
import g_pggravity
import g_pgbounce
import g_pgtimeout
import g_pgdamage
import g_pgsdamage
import g_pgspeed
import g_pgsradius
import g_pgdelay
import g_rgknockback
import g_rginf
import g_rgvampire
import g_rgdamage
import g_rgdelay
import g_lgknockback
import g_lginf
import g_lgvampire
import g_lgsradius
import g_lgsdamage
import g_lgexplode
import g_lgrange
import g_lgdelay
import g_lgdamage
import g_rlknockback
import g_rlbouncemodifier
import g_rlinf
import g_rlvampire
import g_rlgravity
import g_rlbounce
import g_rldamage
import g_rlsdamage
import g_rlsradius
import g_rltimeout
import g_rlspeed
import g_rldelay
import g_glknockback
import g_glbouncemodifier
import g_glinf
import g_glvampire
import g_glgravity
import g_glbounce
import g_gldamage
import g_glsdamage
import g_glsradius
import g_gltimeout
import g_glspeed
import g_gldelay
import g_sgknockback
import g_sginf
import g_sgvampire
import g_sgcount
import g_sgsradius
import g_sgsdamage
import g_sgexplode
import g_sgspread
import g_sgdamage
import g_sgdelay
import g_mgknockback
import g_mginf
import g_mgvampire
import g_mgsradius
import g_mgsdamage
import g_mgexplode
import g_mgspread
import g_mgdamage
import g_mgdelay
import g_gknockback
import g_grange
import g_gdamage
import g_gdelay
import mod_ghtimeout
import g_ghtimeout
import g_ghspeed
import g_minigame
import g_physdamage
import g_physimpulse
import g_physimpact
import cl_giantcharheight
import cl_giantcharwidth
import cl_bigcharheight
import cl_bigcharwidth
import cl_smallcharheight
import cl_smallcharwidth
import cl_propgapwidth
import cl_propspacewidth
import cl_propheight
import cl_propsmallsizescale
import mod_gravity
import mod_zsround
import mod_zround
import mod_roundmode
import mod_overlay
import mod_slickmove
import mod_accelerate
import mod_teamred_damage
import mod_teamblue_damage
import mod_invulinf
import mod_kamikazeinf
import mod_portalinf
import mod_teleporterinf
import mod_medkitinf
import mod_medkitlimit
import mod_teamblue_firespeed
import mod_teamred_firespeed
import mod_invulmove
import mod_noplayerclip
import mod_flighttime
import mod_regentime
import mod_invistime
import mod_hastetime
import mod_bsuittime
import mod_quadtime
import mod_doublerfirespeed
import mod_guardfirespeed
import mod_poweruptime
import mod_scoutfirespeed
import mod_ammoregenfirespeed
import mod_hastefirespeed
import mod_vampire_max_health
import mod_amdelay
import mod_ftdelay
import mod_cgspread
import mod_cgdelay
import mod_pldelay
import mod_ngdelay
import mod_bfgdelay
import mod_rgdelay
import mod_pgdelay
import mod_lgrange
import mod_lgdelay
import mod_rldelay
import mod_gldelay
import mod_sgcount
import mod_sgspread
import mod_sgdelay
import mod_mgspread
import mod_mgdelay
import mod_gdelay
import mod_jumpheight
import mod_ammolimit
import cmapname
import CustomModRun
import Newmodcommands
import nailgun_think
import bfg_think
import grenade_think
import rocket_think
import plasma_think
import G_SendSwepWeapons
import G_SendWeaponProperties
import g_entities
import level
import Team_ForceGesture
import Team_DD_bonusAtPoints
import Team_RemoveDoubleDominationPoints
import Team_SpawnDoubleDominationPoints
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import Team_Dom_SpawnPoints
import SelectDoubleDominationSpawnPoint
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import AddTeamScore
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import G_LoadMapfileAll_f
import G_LoadMapfile_f
import G_LoadMapfileAll
import G_LoadMapfile
import G_WriteMapfileAll_f
import G_WriteMapfile_f
import G_ClassnameAllowedAll
import G_ClassnameAllowed
import G_GetMapLockArena
import SkippedChar
import G_LoadMapcycle
import G_sendMapcycle
import G_drawMapcycle
import G_drawAllowedMaps
import G_mapIsVoteable
import G_GetMapfile
import G_GetNextMap
import G_GetNextMapCycle
import G_GotoNextMapCycle
import getCustomVote
import VoteParseCustomVotes
import allowedFraglimit
import allowedTimelimit
import allowedGametype
import allowedMap
import getMappage
import custom_vote_info
import ClientLeaving
import CountVotes
import CheckVote
import allowedVote
import PlayerStore_restore
import PlayerStore_store
import PlayerStoreInit
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import SpawnModelsOnVictoryPads
import UpdateTournamentInfo
import G_WriteSessionData
import G_InitWorldSession
import G_SaveClientSessionDataSave
import G_InitSessionData
import G_ReadSessionData
import Svcmd_GameMem_f
import G_TeamFromString
import ShuffleTeams
import CheckObeliskAttack
import Team_CheckDroppedItem
import OnSameTeam
import G_DefaultSwep
import G_CheckSwepAmmo
import G_CheckSwep
import G_RunClient
import ClientEndFrame
import ClientThink
import PrecacheBotAssets
import SetCustomWeapons
import SetSandboxWeapons
import SetUnlimitedWeapons
import SetupCustomBot
import LinkBotSpawnEntity
import DropClientSilently
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_NpcFactionProp
import G_LevelLoadComplete
import CheckTeamVote
import LogExit
import G_Error
import G_Printf
import SendYourTeamMessageToTeam
import SendDominationPointsStatusMessageToAllClients
import SendDDtimetakenMessageToAllClients
import SendEliminationMessageToAllClients
import SendScoreboardMessageToAllClients
import G_LogPrintf
import ExitLevel
import AddTournamentQueue
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import SendCustomVoteCommands
import DominationPointStatusMessage
import DominationPointNamesMessage
import RespawnTimeMessage
import EliminationMessage
import ObeliskHealthMessage
import AttackingTeamMessage
import YourTeamMessage
import DoubleDominationScoreTimeMessage
import DeathmatchScoreboardMessage
import G_SetStats
import MoveClientToIntermission
import G_StartCarExplode
import G_StartKamikaze
import KamikazeShockWave
import KamikazeRadiusDamage
import CarExplodeDamage
import KamikazeDamage
import FireWeapon
import ClientForString
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import SpawnPointIsActive
import SpotWouldTelefrag
import CalculateRanks
import ClientSpawn
import InitBodyQue
import InitClientResp
import InitClientPersistant
import BeginIntermission
import ClientRespawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import LMSpoint
import EndEliminationRound
import DisableWeapons
import EnableWeapons
import RespawnDead
import RespawnAll
import TeamHealthCount
import TeamLivingCount
import TeamCount
import G_PredictPlayerMove
import G_UnTimeShiftClient
import G_UndoTimeShiftFor
import G_DoTimeShiftFor
import G_UnTimeShiftAllClients
import G_TimeShiftAllClients
import G_StoreHistory
import G_ResetHistory
import Laser_Think
import Laser_Gen
import Weapon_HookThink
import Weapon_HookFree
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import G_FindEntityForClientNum
import G_FindEntityForEntityNum
import G_ShowObjects
import G_HideObjects
import G_BounceProp
import G_RunProp
import G_ModProp
import DropPortalDestination
import DropPortalSource
import TeleportPlayer
import lock_touch
import trigger_teleporter_touch
import Break_Breakable
import Touch_DoorTrigger
import G_RunMover
import fire_antimatter
import fire_flame
import fire_prox
import fire_nail
import fire_nails
import fire_grapple
import fire_bfg
import fire_rocket
import fire_grenade
import fire_plasma
import fire_custom
import fire_blaster
import ProximityMine_RemoveAll
import G_RunMissile
import target_finish_use
import target_finish_think
import BuildShaderStateConfig
import AddRemap
import G_SetTargetname
import G_SetTarget
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_GlobalSound
import G_Sound
import G_TempEntity
import G_Spawn
import findradius
import G_InitGentity
import CrosshairPointGravity
import CrosshairPointPhys
import FindEntityForGravitygun
import FindEntityForPhysgun
import botsandbox_check
import G_CalculatePlayerScore
import G_FadeIn
import G_FadeOut
import G_Fade
import G_GetScoringMapName
import G_SetMovedir
import G_UseDeathTargets
import G_UseTargets
import G_PickTarget
import G_ScrFind
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import Throw_Item
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Touch_Item2
import Touch_Item
import Set_Weapon
import Set_Ammo
import Add_Ammo
import ArmorIndex
import Think_Weapon
import FinishSpawningItem
import G_SpawnItem
import SetRespawn
import LaunchBackpack
import LaunchItem
import Drop_Item
import PrecacheItem
import UseHoldableItem
import RespawnItemCtf
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import writeFile_string
import writeFile_int
import readFile_string
import readFile_int
import SanitizeString
import G_ClientIsLagging
import G_ClientNumberFromString
import Cmd_AdminMessage_f
import G_FloodLimited
import G_ClientNumbersFromString
import G_SanitiseString
import G_MatchOnePlayer
import G_DecolorString
import G_SayConcatArgs
import G_SayArgv
import G_SayArgc
import NextCustomRound_f
import G_Say
import ConcatArgs
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector4
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import MiTechEntityList
import BG_TeamName
import BG_GetVehicleSettings
import BG_VehicleCheckClass
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_DefragmentMemory
import BG_Free
import BG_InitMemory
import BG_Alloc
import BG_CanAlloc
import BG_CanItemBeGrabbed
import BG_FindItemForBackpack
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindSwepAmmo
import BG_FindSwep
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import COM_LoadLevelScores
import COM_CalculatePlayerScore
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import vectoyaw
import AngleDifference
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import Q_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import Lerp
import VelocityToAxis
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import Q_snprintf
import Q_vsnprintf
import strtol
import _atoi
import atoi
import strtod
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import ifstrlenru
import strlenru
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $827
byte 1 37
byte 1 105
byte 1 58
byte 1 32
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 58
byte 1 37
byte 1 105
byte 1 32
byte 1 104
byte 1 101
byte 1 97
byte 1 108
byte 1 116
byte 1 104
byte 1 58
byte 1 37
byte 1 105
byte 1 32
byte 1 100
byte 1 97
byte 1 109
byte 1 97
byte 1 103
byte 1 101
byte 1 58
byte 1 37
byte 1 105
byte 1 32
byte 1 97
byte 1 114
byte 1 109
byte 1 111
byte 1 114
byte 1 58
byte 1 37
byte 1 105
byte 1 10
byte 1 0
align 1
LABELV $637
byte 1 103
byte 1 95
byte 1 115
byte 1 112
byte 1 83
byte 1 107
byte 1 105
byte 1 108
byte 1 108
byte 1 0
align 1
LABELV $631
byte 1 115
byte 1 104
byte 1 111
byte 1 111
byte 1 116
byte 1 101
byte 1 114
byte 1 95
byte 1 0
align 1
LABELV $624
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 116
byte 1 114
byte 1 97
byte 1 105
byte 1 110
byte 1 0
align 1
LABELV $620
byte 1 102
byte 1 117
byte 1 110
byte 1 99
byte 1 95
byte 1 98
byte 1 114
byte 1 101
byte 1 97
byte 1 107
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 0
align 1
LABELV $398
byte 1 83
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 110
byte 1 32
byte 1 76
byte 1 77
byte 1 83
byte 1 32
byte 1 49
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $394
byte 1 83
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 110
byte 1 32
byte 1 76
byte 1 77
byte 1 83
byte 1 32
byte 1 69
byte 1 108
byte 1 105
byte 1 109
byte 1 32
byte 1 49
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $364
byte 1 60
byte 1 98
byte 1 97
byte 1 100
byte 1 32
byte 1 111
byte 1 98
byte 1 105
byte 1 116
byte 1 117
byte 1 97
byte 1 114
byte 1 121
byte 1 62
byte 1 0
align 1
LABELV $357
byte 1 60
byte 1 119
byte 1 111
byte 1 114
byte 1 108
byte 1 100
byte 1 62
byte 1 0
align 1
LABELV $356
byte 1 60
byte 1 110
byte 1 111
byte 1 110
byte 1 45
byte 1 99
byte 1 108
byte 1 105
byte 1 101
byte 1 110
byte 1 116
byte 1 62
byte 1 0
align 1
LABELV $324
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $323
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $303
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $302
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $286
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 66
byte 1 82
byte 1 69
byte 1 65
byte 1 75
byte 1 65
byte 1 66
byte 1 76
byte 1 69
byte 1 95
byte 1 83
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $285
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 80
byte 1 82
byte 1 79
byte 1 80
byte 1 0
align 1
LABELV $284
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 67
byte 1 65
byte 1 82
byte 1 69
byte 1 88
byte 1 80
byte 1 76
byte 1 79
byte 1 68
byte 1 69
byte 1 0
align 1
LABELV $283
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 67
byte 1 65
byte 1 82
byte 1 0
align 1
LABELV $282
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 71
byte 1 82
byte 1 65
byte 1 80
byte 1 80
byte 1 76
byte 1 69
byte 1 0
align 1
LABELV $281
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 74
byte 1 85
byte 1 73
byte 1 67
byte 1 69
byte 1 68
byte 1 0
align 1
LABELV $280
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 75
byte 1 65
byte 1 77
byte 1 73
byte 1 75
byte 1 65
byte 1 90
byte 1 69
byte 1 0
align 1
LABELV $279
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 80
byte 1 82
byte 1 79
byte 1 88
byte 1 73
byte 1 77
byte 1 73
byte 1 84
byte 1 89
byte 1 95
byte 1 77
byte 1 73
byte 1 78
byte 1 69
byte 1 0
align 1
LABELV $278
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 67
byte 1 72
byte 1 65
byte 1 73
byte 1 78
byte 1 71
byte 1 85
byte 1 78
byte 1 0
align 1
LABELV $277
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 78
byte 1 65
byte 1 73
byte 1 76
byte 1 0
align 1
LABELV $276
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 84
byte 1 82
byte 1 73
byte 1 71
byte 1 71
byte 1 69
byte 1 82
byte 1 95
byte 1 72
byte 1 85
byte 1 82
byte 1 84
byte 1 0
align 1
LABELV $275
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 84
byte 1 65
byte 1 82
byte 1 71
byte 1 69
byte 1 84
byte 1 95
byte 1 76
byte 1 65
byte 1 83
byte 1 69
byte 1 82
byte 1 0
align 1
LABELV $274
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 83
byte 1 85
byte 1 73
byte 1 67
byte 1 73
byte 1 68
byte 1 69
byte 1 0
align 1
LABELV $273
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 70
byte 1 65
byte 1 76
byte 1 76
byte 1 73
byte 1 78
byte 1 71
byte 1 0
align 1
LABELV $272
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 84
byte 1 69
byte 1 76
byte 1 69
byte 1 70
byte 1 82
byte 1 65
byte 1 71
byte 1 0
align 1
LABELV $271
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 67
byte 1 82
byte 1 85
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $270
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 76
byte 1 65
byte 1 86
byte 1 65
byte 1 0
align 1
LABELV $269
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 83
byte 1 76
byte 1 73
byte 1 77
byte 1 69
byte 1 0
align 1
LABELV $268
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 87
byte 1 65
byte 1 84
byte 1 69
byte 1 82
byte 1 0
align 1
LABELV $267
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 84
byte 1 79
byte 1 79
byte 1 76
byte 1 71
byte 1 85
byte 1 78
byte 1 0
align 1
LABELV $266
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 65
byte 1 78
byte 1 84
byte 1 73
byte 1 77
byte 1 65
byte 1 84
byte 1 84
byte 1 69
byte 1 82
byte 1 95
byte 1 83
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $265
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 65
byte 1 78
byte 1 84
byte 1 73
byte 1 77
byte 1 65
byte 1 84
byte 1 84
byte 1 69
byte 1 82
byte 1 0
align 1
LABELV $264
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 70
byte 1 76
byte 1 65
byte 1 77
byte 1 69
byte 1 95
byte 1 83
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $263
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 70
byte 1 76
byte 1 65
byte 1 77
byte 1 69
byte 1 0
align 1
LABELV $262
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 66
byte 1 70
byte 1 71
byte 1 95
byte 1 83
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $261
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 66
byte 1 70
byte 1 71
byte 1 0
align 1
LABELV $260
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 76
byte 1 73
byte 1 71
byte 1 72
byte 1 84
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 0
align 1
LABELV $259
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 82
byte 1 65
byte 1 73
byte 1 76
byte 1 71
byte 1 85
byte 1 78
byte 1 0
align 1
LABELV $258
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 77
byte 1 65
byte 1 95
byte 1 83
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $257
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 77
byte 1 65
byte 1 0
align 1
LABELV $256
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 82
byte 1 79
byte 1 67
byte 1 75
byte 1 69
byte 1 84
byte 1 95
byte 1 83
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $255
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 82
byte 1 79
byte 1 67
byte 1 75
byte 1 69
byte 1 84
byte 1 0
align 1
LABELV $254
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 71
byte 1 82
byte 1 69
byte 1 78
byte 1 65
byte 1 68
byte 1 69
byte 1 95
byte 1 83
byte 1 80
byte 1 76
byte 1 65
byte 1 83
byte 1 72
byte 1 0
align 1
LABELV $253
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 71
byte 1 82
byte 1 69
byte 1 78
byte 1 65
byte 1 68
byte 1 69
byte 1 0
align 1
LABELV $252
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 77
byte 1 65
byte 1 67
byte 1 72
byte 1 73
byte 1 78
byte 1 69
byte 1 71
byte 1 85
byte 1 78
byte 1 0
align 1
LABELV $251
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 71
byte 1 65
byte 1 85
byte 1 78
byte 1 84
byte 1 76
byte 1 69
byte 1 84
byte 1 0
align 1
LABELV $250
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 83
byte 1 72
byte 1 79
byte 1 84
byte 1 71
byte 1 85
byte 1 78
byte 1 0
align 1
LABELV $249
byte 1 77
byte 1 79
byte 1 68
byte 1 95
byte 1 85
byte 1 78
byte 1 75
byte 1 78
byte 1 79
byte 1 87
byte 1 78
byte 1 0
align 1
LABELV $242
byte 1 107
byte 1 97
byte 1 109
byte 1 105
byte 1 107
byte 1 97
byte 1 122
byte 1 101
byte 1 32
byte 1 116
byte 1 105
byte 1 109
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $199
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 67
byte 1 117
byte 1 98
byte 1 101
byte 1 0
align 1
LABELV $198
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 67
byte 1 117
byte 1 98
byte 1 101
byte 1 0
align 1
LABELV $180
byte 1 80
byte 1 111
byte 1 114
byte 1 116
byte 1 97
byte 1 108
byte 1 0
align 1
LABELV $177
byte 1 73
byte 1 110
byte 1 118
byte 1 117
byte 1 108
byte 1 110
byte 1 101
byte 1 114
byte 1 97
byte 1 98
byte 1 105
byte 1 108
byte 1 105
byte 1 116
byte 1 121
byte 1 0
align 1
LABELV $174
byte 1 75
byte 1 97
byte 1 109
byte 1 105
byte 1 107
byte 1 97
byte 1 122
byte 1 101
byte 1 0
align 1
LABELV $171
byte 1 77
byte 1 101
byte 1 100
byte 1 107
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $168
byte 1 80
byte 1 101
byte 1 114
byte 1 115
byte 1 111
byte 1 110
byte 1 97
byte 1 108
byte 1 32
byte 1 84
byte 1 101
byte 1 108
byte 1 101
byte 1 112
byte 1 111
byte 1 114
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $103
byte 1 80
byte 1 108
byte 1 97
byte 1 121
byte 1 101
byte 1 114
byte 1 83
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 110
byte 1 111
byte 1 119
byte 1 32
byte 1 104
byte 1 97
byte 1 115
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 112
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $100
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 83
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 105
byte 1 58
byte 1 32
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 110
byte 1 111
byte 1 119
byte 1 32
byte 1 104
byte 1 97
byte 1 115
byte 1 32
byte 1 37
byte 1 100
byte 1 32
byte 1 112
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $99
byte 1 84
byte 1 101
byte 1 97
byte 1 109
byte 1 83
byte 1 99
byte 1 111
byte 1 114
byte 1 101
byte 1 58
byte 1 32
byte 1 97
byte 1 100
byte 1 100
byte 1 32
byte 1 49
byte 1 10
byte 1 0
