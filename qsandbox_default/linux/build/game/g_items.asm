export Pickup_Powerup
code
proc Pickup_Powerup 132 28
file "../../../code/game/g_items.c"
line 49
;1:/*
;2:===========================================================================
;3:Copyright (C) 1999-2005 Id Software, Inc.
;4:
;5:This file is part of Quake III Arena source code.
;6:
;7:Quake III Arena source code is free software; you can redistribute it
;8:and/or modify it under the terms of the GNU General Public License as
;9:published by the Free Software Foundation; either version 2 of the License,
;10:or (at your option) any later version.
;11:
;12:Quake III Arena source code is distributed in the hope that it will be
;13:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;14:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;15:GNU General Public License for more details.
;16:
;17:You should have received a copy of the GNU General Public License
;18:along with Quake III Arena source code; if not, write to the Free Software
;19:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;20:===========================================================================
;21:*/
;22://
;23:#include "g_local.h"
;24:
;25:/*
;26:
;27:  Items are any object that a player can touch to gain some effect.
;28:
;29:  Pickup will return the number of seconds until they should respawn.
;30:
;31:  all items should pop when dropped in lava or slime
;32:
;33:  Respawnable items don't actually go away when picked up, they are
;34:  just made invisible and untouchable.  This allows them to ride
;35:  movers and respawn apropriately.
;36:*/
;37:
;38:
;39:#define	RESPAWN_ARMOR		g_armorrespawn.value
;40:#define	RESPAWN_HEALTH		g_healthrespawn.value
;41:#define	RESPAWN_AMMO		g_ammorespawn.value
;42:#define	RESPAWN_HOLDABLE	g_holdablerespawn.value
;43:#define	RESPAWN_MEGAHEALTH	g_megahealthrespawn.value//120
;44:#define	RESPAWN_POWERUP		g_poweruprespawn.value
;45:
;46:
;47://======================================================================
;48:
;49:int Pickup_Powerup( gentity_t *ent, gentity_t *other ) {
line 56
;50:	int			quantity;
;51:	int			i;
;52:	gclient_t	*client;
;53:
;54:
;55:
;56:	if ( !other->client->ps.powerups[ent->item->giTag] ) {
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
INDIRI4
CNSTI4 0
NEI4 $65
line 59
;57:		// round timing to seconds to make multiple powerup timers
;58:		// count in sync
;59:		other->client->ps.powerups[ent->item->giTag] =
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
MODI4
SUBI4
ASGNI4
line 61
;60:			level.time - ( level.time % 1000 );
;61:	}
LABELV $65
line 63
;62:
;63:	if ( ent->count ) {
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
EQI4 $69
line 64
;64:		quantity = ent->count;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
ASGNI4
line 65
;65:	}
ADDRGP4 $70
JUMPV
LABELV $69
line 66
;66:	else {
line 67
;67:		quantity = ent->item->quantity;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
line 68
;68:		other->client->ps.powerups[ent->item->giTag] += ent->count * 1000;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 1000
ADDRLP4 12
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
MULI4
ADDI4
ASGNI4
line 69
;69:	}
LABELV $70
line 70
;70:		if (ent->item->giTag == PW_QUAD){
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 1
NEI4 $71
line 71
;71:		if ( !ent->count )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
NEI4 $73
line 72
;72:	quantity = mod_quadtime;
ADDRLP4 8
ADDRGP4 mod_quadtime
INDIRI4
ASGNI4
LABELV $73
line 73
;73:	}
LABELV $71
line 74
;74:		if (ent->item->giTag == PW_BATTLESUIT){
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
NEI4 $75
line 75
;75:		if ( !ent->count )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
NEI4 $77
line 76
;76:	quantity = mod_bsuittime;
ADDRLP4 8
ADDRGP4 mod_bsuittime
INDIRI4
ASGNI4
LABELV $77
line 77
;77:	}
LABELV $75
line 78
;78:		if (ent->item->giTag == PW_HASTE){
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 3
NEI4 $79
line 79
;79:		if ( !ent->count )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
NEI4 $81
line 80
;80:	quantity = mod_hastetime;
ADDRLP4 8
ADDRGP4 mod_hastetime
INDIRI4
ASGNI4
LABELV $81
line 81
;81:	}
LABELV $79
line 82
;82:		if (ent->item->giTag == PW_INVIS){
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 4
NEI4 $83
line 83
;83:		if ( !ent->count )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
NEI4 $85
line 84
;84:	quantity = mod_invistime;
ADDRLP4 8
ADDRGP4 mod_invistime
INDIRI4
ASGNI4
LABELV $85
line 85
;85:	}
LABELV $83
line 86
;86:		if (ent->item->giTag == PW_REGEN){
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 5
NEI4 $87
line 87
;87:		if ( !ent->count )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
NEI4 $89
line 88
;88:	quantity = mod_regentime;
ADDRLP4 8
ADDRGP4 mod_regentime
INDIRI4
ASGNI4
LABELV $89
line 89
;89:	}
LABELV $87
line 90
;90:		if (ent->item->giTag == PW_FLIGHT){
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 6
NEI4 $91
line 91
;91:		if ( !ent->count )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
NEI4 $93
line 92
;92:	quantity = mod_flighttime;
ADDRLP4 8
ADDRGP4 mod_flighttime
INDIRI4
ASGNI4
LABELV $93
line 93
;93:	}
LABELV $91
line 95
;94:
;95:	other->client->ps.powerups[ent->item->giTag] += quantity * 1000;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 312
ADDP4
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 1000
ADDRLP4 8
INDIRI4
MULI4
ADDI4
ASGNI4
line 98
;96:
;97:	// give any nearby players a "denied" anti-reward
;98:	for ( i = 0 ; i < level.maxclients ; i++ ) {
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $98
JUMPV
LABELV $95
line 104
;99:		vec3_t		delta;
;100:		float		len;
;101:		vec3_t		forward;
;102:		trace_t		tr;
;103:
;104:		client = &level.clients[i];
ADDRLP4 0
CNSTI4 2324
ADDRLP4 4
INDIRI4
MULI4
ADDRGP4 level
INDIRP4
ADDP4
ASGNP4
line 105
;105:		if ( client == other->client ) {
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
NEU4 $100
line 106
;106:			continue;
ADDRGP4 $96
JUMPV
LABELV $100
line 108
;107:		}
;108:		if ( client->pers.connected == CON_DISCONNECTED ) {
ADDRLP4 0
INDIRP4
CNSTI4 472
ADDP4
INDIRI4
CNSTI4 0
NEI4 $102
line 109
;109:			continue;
ADDRGP4 $96
JUMPV
LABELV $102
line 111
;110:		}
;111:		if ( client->ps.stats[STAT_HEALTH] <= 0 ) {
ADDRLP4 0
INDIRP4
CNSTI4 184
ADDP4
INDIRI4
CNSTI4 0
GTI4 $104
line 112
;112:			continue;
ADDRGP4 $96
JUMPV
LABELV $104
line 117
;113:		}
;114:
;115:    // if same team in team game, no sound
;116:    // cannot use OnSameTeam as it expects to g_entities, not clients
;117:  	if ( g_gametype.integer >= GT_TEAM && g_ffa_gt==0 && other->client->sess.sessionTeam == client->sess.sessionTeam  ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
LTI4 $106
ADDRGP4 g_ffa_gt
INDIRI4
CNSTI4 0
NEI4 $106
ADDRLP4 100
CNSTI4 1032
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
ADDRLP4 100
INDIRI4
ADDP4
INDIRI4
NEI4 $106
line 118
;118:      continue;
ADDRGP4 $96
JUMPV
LABELV $106
line 122
;119:    }
;120:
;121:		// if too far away, no sound
;122:		VectorSubtract( ent->s.pos.trBase, client->ps.origin, delta );
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
CNSTI4 24
ASGNI4
ADDRLP4 16
ADDRLP4 104
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 104
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
ADDRLP4 108
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
SUBF4
ASGNF4
line 123
;123:		len = VectorNormalize( delta );
ADDRLP4 16
ARGP4
ADDRLP4 116
ADDRGP4 VectorNormalize
CALLF4
ASGNF4
ADDRLP4 40
ADDRLP4 116
INDIRF4
ASGNF4
line 124
;124:		if ( len > 192 ) {
ADDRLP4 40
INDIRF4
CNSTF4 1128267776
LEF4 $111
line 125
;125:			continue;
ADDRGP4 $96
JUMPV
LABELV $111
line 129
;126:		}
;127:
;128:		// if not facing, no sound
;129:		AngleVectors( client->ps.viewangles, forward, NULL, NULL );
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 120
CNSTP4 0
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 130
;130:		if ( DotProduct( delta, forward ) < 0.4 ) {
ADDRLP4 16
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ADDRLP4 16+4
INDIRF4
ADDRLP4 28+4
INDIRF4
MULF4
ADDF4
ADDRLP4 16+8
INDIRF4
ADDRLP4 28+8
INDIRF4
MULF4
ADDF4
CNSTF4 1053609165
GEF4 $113
line 131
;131:			continue;
ADDRGP4 $96
JUMPV
LABELV $113
line 135
;132:		}
;133:
;134:		// if not line of sight, no sound
;135:		trap_Trace( &tr, client->ps.origin, NULL, NULL, ent->s.pos.trBase, ENTITYNUM_NONE, CONTENTS_SOLID );
ADDRLP4 44
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 20
ADDP4
ARGP4
ADDRLP4 124
CNSTP4 0
ASGNP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRLP4 124
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 4095
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 136
;136:		if ( tr.fraction != 1.0 ) {
ADDRLP4 44+8
INDIRF4
CNSTF4 1065353216
EQF4 $119
line 137
;137:			continue;
ADDRGP4 $96
JUMPV
LABELV $119
line 141
;138:		}
;139:
;140:		// anti-reward
;141:		client->ps.persistant[PERS_PLAYEREVENTS] ^= PLAYEREVENT_DENIEDREWARD;
ADDRLP4 128
ADDRLP4 0
INDIRP4
CNSTI4 268
ADDP4
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRI4
CNSTI4 1
BXORI4
ASGNI4
line 142
;142:	}
LABELV $96
line 98
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $98
ADDRLP4 4
INDIRI4
ADDRGP4 level+24
INDIRI4
LTI4 $95
line 143
;143:	return RESPAWN_POWERUP;
ADDRGP4 g_poweruprespawn+8
INDIRF4
CVFI4 4
RETI4
LABELV $64
endproc Pickup_Powerup 132 28
export Pickup_PersistantPowerup
proc Pickup_PersistantPowerup 1056 12
line 148
;144:}
;145:
;146://======================================================================
;147:
;148:int Pickup_PersistantPowerup( gentity_t *ent, gentity_t *other ) {
line 157
;149:	int		clientNum;
;150:	char	userinfo[MAX_INFO_STRING];
;151:	float	handicap;
;152:	int		max;
;153:
;154:
;155:
;156:
;157:	other->client->ps.stats[STAT_PERSISTANT_POWERUP] = ent->item - bg_itemlist;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 192
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
ASGNI4
line 158
;158:	other->client->persistantPowerup = ent;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1360
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 160
;159:
;160:	switch( ent->item->giTag ) {
ADDRLP4 1036
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
ADDRLP4 1036
INDIRI4
CNSTI4 10
LTI4 $124
ADDRLP4 1036
INDIRI4
CNSTI4 13
GTI4 $124
ADDRLP4 1036
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $173-40
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $173
address $138
address $127
address $148
address $158
code
LABELV $127
line 162
;161:	case PW_GUARD:
;162:		if (g_guardhealthmodifier.value > 0){
ADDRGP4 g_guardhealthmodifier+8
INDIRF4
CNSTF4 0
LEF4 $125
line 163
;163:		clientNum = other->client->ps.clientNum;
ADDRLP4 1032
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 164
;164:		trap_GetUserinfo( clientNum, userinfo, sizeof(userinfo) );
ADDRLP4 1032
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 165
;165:		handicap = atof( Info_ValueForKey( userinfo, "handicap" ) );
ADDRLP4 8
ARGP4
ADDRGP4 $131
ARGP4
ADDRLP4 1044
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1044
INDIRP4
ARGP4
ADDRLP4 1048
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 1048
INDIRF4
ASGNF4
line 166
;166:		if (!(other->r.svFlags & SVF_BOT)){
ADDRFP4 4
INDIRP4
CNSTI4 464
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $132
line 167
;167:				if( handicap<=0.0f || handicap>100.0f) {
ADDRLP4 1052
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 1052
INDIRF4
CNSTF4 0
LEF4 $136
ADDRLP4 1052
INDIRF4
CNSTF4 1120403456
LEF4 $134
LABELV $136
line 168
;168:					handicap = 100.0f;
ADDRLP4 4
CNSTF4 1120403456
ASGNF4
line 169
;169:				}
LABELV $134
line 170
;170:		}
LABELV $132
line 172
;171:
;172:		max = (int)(g_guardhealthmodifier.value * handicap * 1);
ADDRLP4 0
CNSTF4 1065353216
ADDRGP4 g_guardhealthmodifier+8
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
CVFI4 4
ASGNI4
line 174
;173:
;174:		other->health = max;
ADDRFP4 4
INDIRP4
CNSTI4 808
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 175
;175:		other->client->ps.stats[STAT_HEALTH] = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 176
;176:		other->client->ps.stats[STAT_MAX_HEALTH] = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 212
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 177
;177:		other->client->ps.stats[STAT_ARMOR] = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 178
;178:		other->client->pers.maxHealth = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 552
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 179
;179:		}
line 181
;180:
;181:		break;
ADDRGP4 $125
JUMPV
LABELV $138
line 184
;182:
;183:	case PW_SCOUT:
;184:		if (g_scouthealthmodifier.value > 0){
ADDRGP4 g_scouthealthmodifier+8
INDIRF4
CNSTF4 0
LEF4 $125
line 185
;185:		clientNum = other->client->ps.clientNum;
ADDRLP4 1032
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 186
;186:		trap_GetUserinfo( clientNum, userinfo, sizeof(userinfo) );
ADDRLP4 1032
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 187
;187:		handicap = atof( Info_ValueForKey( userinfo, "handicap" ) );
ADDRLP4 8
ARGP4
ADDRGP4 $131
ARGP4
ADDRLP4 1044
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1044
INDIRP4
ARGP4
ADDRLP4 1048
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 1048
INDIRF4
ASGNF4
line 188
;188:		if (!(other->r.svFlags & SVF_BOT)){
ADDRFP4 4
INDIRP4
CNSTI4 464
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $142
line 189
;189:				if( handicap<=0.0f || handicap>100.0f) {
ADDRLP4 1052
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 1052
INDIRF4
CNSTF4 0
LEF4 $146
ADDRLP4 1052
INDIRF4
CNSTF4 1120403456
LEF4 $144
LABELV $146
line 190
;190:					handicap = 100.0f;
ADDRLP4 4
CNSTF4 1120403456
ASGNF4
line 191
;191:				}
LABELV $144
line 192
;192:		}
LABELV $142
line 194
;193:
;194:		max = (int)(g_scouthealthmodifier.value *  handicap * 1);
ADDRLP4 0
CNSTF4 1065353216
ADDRGP4 g_scouthealthmodifier+8
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
CVFI4 4
ASGNI4
line 196
;195:
;196:		other->health = max;
ADDRFP4 4
INDIRP4
CNSTI4 808
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 197
;197:		other->client->ps.stats[STAT_HEALTH] = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 198
;198:		other->client->ps.stats[STAT_MAX_HEALTH] = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 212
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 199
;199:		other->client->ps.stats[STAT_ARMOR] = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 200
;200:		other->client->pers.maxHealth = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 552
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 201
;201:		}
line 203
;202:
;203:		break;
ADDRGP4 $125
JUMPV
LABELV $148
line 206
;204:
;205:	case PW_DOUBLER:
;206:		if(g_doublerhealthmodifier.value > 0){
ADDRGP4 g_doublerhealthmodifier+8
INDIRF4
CNSTF4 0
LEF4 $125
line 207
;207:		clientNum = other->client->ps.clientNum;
ADDRLP4 1032
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 208
;208:		trap_GetUserinfo( clientNum, userinfo, sizeof(userinfo) );
ADDRLP4 1032
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 209
;209:		handicap = atof( Info_ValueForKey( userinfo, "handicap" ) );
ADDRLP4 8
ARGP4
ADDRGP4 $131
ARGP4
ADDRLP4 1044
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1044
INDIRP4
ARGP4
ADDRLP4 1048
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 1048
INDIRF4
ASGNF4
line 210
;210:		if (!(other->r.svFlags & SVF_BOT)){
ADDRFP4 4
INDIRP4
CNSTI4 464
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $152
line 211
;211:				if( handicap<=0.0f || handicap>100.0f) {
ADDRLP4 1052
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 1052
INDIRF4
CNSTF4 0
LEF4 $156
ADDRLP4 1052
INDIRF4
CNSTF4 1120403456
LEF4 $154
LABELV $156
line 212
;212:					handicap = 100.0f;
ADDRLP4 4
CNSTF4 1120403456
ASGNF4
line 213
;213:				}
LABELV $154
line 214
;214:		}
LABELV $152
line 216
;215:
;216:		max = (int)(g_doublerhealthmodifier.value *  handicap * 1);
ADDRLP4 0
CNSTF4 1065353216
ADDRGP4 g_doublerhealthmodifier+8
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
CVFI4 4
ASGNI4
line 218
;217:
;218:		other->health = max;
ADDRFP4 4
INDIRP4
CNSTI4 808
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 219
;219:		other->client->ps.stats[STAT_HEALTH] = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 220
;220:		other->client->ps.stats[STAT_MAX_HEALTH] = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 212
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 221
;221:		other->client->ps.stats[STAT_ARMOR] = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 222
;222:		other->client->pers.maxHealth = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 552
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 223
;223:		}
line 225
;224:
;225:		break;
ADDRGP4 $125
JUMPV
LABELV $158
line 227
;226:	case PW_AMMOREGEN:
;227:		if(g_ammoregenhealthmodifier.value > 0){
ADDRGP4 g_ammoregenhealthmodifier+8
INDIRF4
CNSTF4 0
LEF4 $159
line 228
;228:		clientNum = other->client->ps.clientNum;
ADDRLP4 1032
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 229
;229:		trap_GetUserinfo( clientNum, userinfo, sizeof(userinfo) );
ADDRLP4 1032
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 230
;230:		handicap = atof( Info_ValueForKey( userinfo, "handicap" ) );
ADDRLP4 8
ARGP4
ADDRGP4 $131
ARGP4
ADDRLP4 1044
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1044
INDIRP4
ARGP4
ADDRLP4 1048
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 1048
INDIRF4
ASGNF4
line 231
;231:		if (!(other->r.svFlags & SVF_BOT)){
ADDRFP4 4
INDIRP4
CNSTI4 464
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $162
line 232
;232:				if( handicap<=0.0f || handicap>100.0f) {
ADDRLP4 1052
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 1052
INDIRF4
CNSTF4 0
LEF4 $166
ADDRLP4 1052
INDIRF4
CNSTF4 1120403456
LEF4 $164
LABELV $166
line 233
;233:					handicap = 100.0f;
ADDRLP4 4
CNSTF4 1120403456
ASGNF4
line 234
;234:				}
LABELV $164
line 235
;235:		}
LABELV $162
line 237
;236:
;237:		max = (int)(g_ammoregenhealthmodifier.value *  handicap * 1);
ADDRLP4 0
CNSTF4 1065353216
ADDRGP4 g_ammoregenhealthmodifier+8
INDIRF4
ADDRLP4 4
INDIRF4
MULF4
MULF4
CVFI4 4
ASGNI4
line 239
;238:
;239:		other->health = max;
ADDRFP4 4
INDIRP4
CNSTI4 808
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 240
;240:		other->client->ps.stats[STAT_HEALTH] = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 241
;241:		other->client->ps.stats[STAT_MAX_HEALTH] = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 212
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 242
;242:		other->client->ps.stats[STAT_ARMOR] = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 243
;243:		other->client->pers.maxHealth = max;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 552
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 244
;244:		}
LABELV $159
LABELV $124
line 247
;245:
;246:	default:
;247:		clientNum = other->client->ps.clientNum;
ADDRLP4 1032
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 140
ADDP4
INDIRI4
ASGNI4
line 248
;248:		trap_GetUserinfo( clientNum, userinfo, sizeof(userinfo) );
ADDRLP4 1032
INDIRI4
ARGI4
ADDRLP4 8
ARGP4
CNSTI4 1024
ARGI4
ADDRGP4 trap_GetUserinfo
CALLV
pop
line 249
;249:		handicap = atof( Info_ValueForKey( userinfo, "handicap" ) );
ADDRLP4 8
ARGP4
ADDRGP4 $131
ARGP4
ADDRLP4 1044
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 1044
INDIRP4
ARGP4
ADDRLP4 1048
ADDRGP4 atof
CALLF4
ASGNF4
ADDRLP4 4
ADDRLP4 1048
INDIRF4
ASGNF4
line 250
;250:		if (!(other->r.svFlags & SVF_BOT)){
ADDRFP4 4
INDIRP4
CNSTI4 464
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
NEI4 $168
line 251
;251:				if( handicap<=0.0f || handicap>100.0f) {
ADDRLP4 1052
ADDRLP4 4
INDIRF4
ASGNF4
ADDRLP4 1052
INDIRF4
CNSTF4 0
LEF4 $172
ADDRLP4 1052
INDIRF4
CNSTF4 1120403456
LEF4 $170
LABELV $172
line 252
;252:					handicap = 100.0f;
ADDRLP4 4
CNSTF4 1120403456
ASGNF4
line 253
;253:				}
LABELV $170
line 254
;254:		}
LABELV $168
line 255
;255:		other->client->pers.maxHealth = handicap;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 552
ADDP4
ADDRLP4 4
INDIRF4
CVFI4 4
ASGNI4
line 256
;256:		break;
LABELV $125
line 259
;257:	}
;258:
;259:	return -1;
CNSTI4 -1
RETI4
LABELV $123
endproc Pickup_PersistantPowerup 1056 12
export Pickup_Holdable
proc Pickup_Holdable 16 0
line 264
;260:}
;261:
;262://======================================================================
;263:
;264:int Pickup_Holdable( gentity_t *ent, gentity_t *other ) {
line 268
;265:	int i;
;266:
;267:	//other->client->ps.stats[STAT_HOLDABLE_ITEM] = ent->item - bg_itemlist;
;268:	other->client->ps.stats[STAT_HOLDABLE_ITEM] |= (1 << ent->item->giTag);
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
LSHI4
BORI4
ASGNI4
line 271
;269:	
;270:	//set teleportation target if player picks up a personal teleporter with fixed teleporter target
;271:	if ( ent->item->giTag == HI_TELEPORTER && ent->teleporterTarget ) {
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 1
NEI4 $176
ADDRLP4 8
INDIRP4
CNSTI4 1072
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $176
line 272
;272:		other->teleporterTarget = ent->teleporterTarget;
ADDRLP4 12
CNSTI4 1072
ASGNI4
ADDRFP4 4
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
ADDRFP4 0
INDIRP4
ADDRLP4 12
INDIRI4
ADDP4
INDIRP4
ASGNP4
line 273
;273:        }
LABELV $176
line 279
;274:
;275:
;276:
;277:	//other->client->ps.stats[STAT_HOLDABLE_ITEM] = ent->item - bg_itemlist;
;278:
;279:	if( ent->item->giTag == HI_KAMIKAZE ) {
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 3
NEI4 $178
line 280
;280:		other->client->ps.eFlags |= EF_KAMIKAZE;
ADDRLP4 12
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
CNSTI4 512
BORI4
ASGNI4
line 281
;281:	}
LABELV $178
line 283
;282:
;283:	return RESPAWN_HOLDABLE;
ADDRGP4 g_holdablerespawn+8
INDIRF4
CVFI4 4
RETI4
LABELV $175
endproc Pickup_Holdable 16 0
export Pickup_Backpack
proc Pickup_Backpack 104 0
line 288
;284:}
;285:
;286://======================================================================
;287:
;288:int Pickup_Backpack( gentity_t *ent, gentity_t *other) {
line 294
;289:	//ent is the backpack
;290:	//other is the player picking the backpack up
;291:	//function doesn't return a respawn time because backpacks never respawn
;292:	
;293:	//machinegun
;294:	if ( ent->count & (1 << WP_MACHINEGUN) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $182
line 295
;295:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_MACHINEGUN);
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 4
BORI4
ASGNI4
LABELV $182
line 298
;296:	
;297:	//after dying, player spawns with 'free' 100 MG ammo, so we're taking 100 bullets from the backpack and give the remainder to the player
;298:	if ( ent->backpackContents[WP_MACHINEGUN] > 100 )
ADDRFP4 0
INDIRP4
CNSTI4 2120
ADDP4
INDIRI4
CNSTI4 100
LEI4 $184
line 299
;299:		other->client->ps.ammo[WP_MACHINEGUN] += (ent->backpackContents[WP_MACHINEGUN] - 100);
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 384
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2120
ADDP4
INDIRI4
CNSTI4 100
SUBI4
ADDI4
ASGNI4
LABELV $184
line 300
;300:	if (other->client->ps.ammo[WP_MACHINEGUN] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 384
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $186
line 301
;301:		other->client->ps.ammo[WP_MACHINEGUN] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 384
ADDP4
CNSTI4 9999
ASGNI4
LABELV $186
line 304
;302:	
;303:	//shotgun
;304:	if ( ent->count & (1 << WP_SHOTGUN) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $188
line 305
;305:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_SHOTGUN);
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
LABELV $188
line 306
;306:	other->client->ps.ammo[WP_SHOTGUN] += ent->backpackContents[WP_SHOTGUN];
ADDRLP4 12
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 388
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2124
ADDP4
INDIRI4
ADDI4
ASGNI4
line 307
;307:	if (other->client->ps.ammo[WP_SHOTGUN] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 388
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $190
line 308
;308:		other->client->ps.ammo[WP_SHOTGUN] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 388
ADDP4
CNSTI4 9999
ASGNI4
LABELV $190
line 311
;309:
;310:	//grenade launcher
;311:	if ( ent->count & (1 << WP_GRENADE_LAUNCHER) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $192
line 312
;312:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_GRENADE_LAUNCHER);
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
LABELV $192
line 313
;313:	other->client->ps.ammo[WP_GRENADE_LAUNCHER] += ent->backpackContents[WP_GRENADE_LAUNCHER];
ADDRLP4 20
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 392
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2128
ADDP4
INDIRI4
ADDI4
ASGNI4
line 314
;314:	if (other->client->ps.ammo[WP_GRENADE_LAUNCHER] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 392
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $194
line 315
;315:		other->client->ps.ammo[WP_GRENADE_LAUNCHER] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 392
ADDP4
CNSTI4 9999
ASGNI4
LABELV $194
line 318
;316:
;317:	//rocket launcher
;318:	if ( ent->count & (1 << WP_ROCKET_LAUNCHER) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $196
line 319
;319:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_ROCKET_LAUNCHER);
ADDRLP4 24
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
LABELV $196
line 320
;320:	other->client->ps.ammo[WP_ROCKET_LAUNCHER] += ent->backpackContents[WP_ROCKET_LAUNCHER];
ADDRLP4 28
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 396
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2132
ADDP4
INDIRI4
ADDI4
ASGNI4
line 321
;321:	if (other->client->ps.ammo[WP_ROCKET_LAUNCHER] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $198
line 322
;322:		other->client->ps.ammo[WP_ROCKET_LAUNCHER] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 396
ADDP4
CNSTI4 9999
ASGNI4
LABELV $198
line 325
;323:
;324:	//lightning gun
;325:	if ( ent->count & (1 << WP_LIGHTNING) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $200
line 326
;326:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_LIGHTNING);
ADDRLP4 32
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 64
BORI4
ASGNI4
LABELV $200
line 327
;327:	other->client->ps.ammo[WP_LIGHTNING] += ent->backpackContents[WP_LIGHTNING];
ADDRLP4 36
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 400
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2136
ADDP4
INDIRI4
ADDI4
ASGNI4
line 328
;328:	if (other->client->ps.ammo[WP_LIGHTNING] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 400
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $202
line 329
;329:		other->client->ps.ammo[WP_LIGHTNING] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 400
ADDP4
CNSTI4 9999
ASGNI4
LABELV $202
line 332
;330:	
;331:	//railgun
;332:	if ( ent->count & (1 << WP_RAILGUN) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $204
line 333
;333:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_RAILGUN);
ADDRLP4 40
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
LABELV $204
line 334
;334:	other->client->ps.ammo[WP_RAILGUN] += ent->backpackContents[WP_RAILGUN];
ADDRLP4 44
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 404
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2140
ADDP4
INDIRI4
ADDI4
ASGNI4
line 335
;335:	if (other->client->ps.ammo[WP_RAILGUN] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 404
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $206
line 336
;336:		other->client->ps.ammo[WP_RAILGUN] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 404
ADDP4
CNSTI4 9999
ASGNI4
LABELV $206
line 339
;337:
;338:	//plasma gun
;339:	if ( ent->count & (1 << WP_PLASMAGUN) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $208
line 340
;340:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_PLASMAGUN);
ADDRLP4 48
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
LABELV $208
line 341
;341:	other->client->ps.ammo[WP_PLASMAGUN] += ent->backpackContents[WP_PLASMAGUN];
ADDRLP4 52
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 408
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2144
ADDP4
INDIRI4
ADDI4
ASGNI4
line 342
;342:	if (other->client->ps.ammo[WP_PLASMAGUN] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $210
line 343
;343:		other->client->ps.ammo[WP_PLASMAGUN] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 408
ADDP4
CNSTI4 9999
ASGNI4
LABELV $210
line 346
;344:
;345:	//bfg
;346:		if ( ent->count & (1 << WP_BFG) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $212
line 347
;347:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_BFG);
ADDRLP4 56
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRI4
CNSTI4 512
BORI4
ASGNI4
LABELV $212
line 348
;348:	other->client->ps.ammo[WP_BFG] += ent->backpackContents[WP_BFG];
ADDRLP4 60
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 412
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2148
ADDP4
INDIRI4
ADDI4
ASGNI4
line 349
;349:	if (other->client->ps.ammo[WP_BFG] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $214
line 350
;350:		other->client->ps.ammo[WP_BFG] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 412
ADDP4
CNSTI4 9999
ASGNI4
LABELV $214
line 353
;351:	
;352:	//nailgun
;353:		if ( ent->count & (1 << WP_NAILGUN) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $216
line 354
;354:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_NAILGUN);
ADDRLP4 64
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRI4
CNSTI4 2048
BORI4
ASGNI4
LABELV $216
line 355
;355:	other->client->ps.ammo[WP_NAILGUN] += ent->backpackContents[WP_NAILGUN];
ADDRLP4 68
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 420
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2156
ADDP4
INDIRI4
ADDI4
ASGNI4
line 356
;356:	if (other->client->ps.ammo[WP_NAILGUN] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $218
line 357
;357:		other->client->ps.ammo[WP_NAILGUN] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 420
ADDP4
CNSTI4 9999
ASGNI4
LABELV $218
line 360
;358:	
;359:	//prox
;360:		if ( ent->count & (1 << WP_PROX_LAUNCHER) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $220
line 361
;361:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_PROX_LAUNCHER);
ADDRLP4 72
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRI4
CNSTI4 4096
BORI4
ASGNI4
LABELV $220
line 362
;362:	other->client->ps.ammo[WP_PROX_LAUNCHER] += ent->backpackContents[WP_PROX_LAUNCHER];
ADDRLP4 76
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2160
ADDP4
INDIRI4
ADDI4
ASGNI4
line 363
;363:	if (other->client->ps.ammo[WP_PROX_LAUNCHER] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $222
line 364
;364:		other->client->ps.ammo[WP_PROX_LAUNCHER] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 9999
ASGNI4
LABELV $222
line 367
;365:	
;366:	//chaingun
;367:		if ( ent->count & (1 << WP_CHAINGUN) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 8192
BANDI4
CNSTI4 0
EQI4 $224
line 368
;368:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_CHAINGUN);
ADDRLP4 80
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 8192
BORI4
ASGNI4
LABELV $224
line 369
;369:	other->client->ps.ammo[WP_CHAINGUN] += ent->backpackContents[WP_CHAINGUN];
ADDRLP4 84
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 428
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2164
ADDP4
INDIRI4
ADDI4
ASGNI4
line 370
;370:	if (other->client->ps.ammo[WP_CHAINGUN] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 428
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $226
line 371
;371:		other->client->ps.ammo[WP_CHAINGUN] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 428
ADDP4
CNSTI4 9999
ASGNI4
LABELV $226
line 374
;372:	
;373:	//flamethrower
;374:		if ( ent->count & (1 << WP_FLAMETHROWER) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $228
line 375
;375:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_FLAMETHROWER);
ADDRLP4 88
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRI4
CNSTI4 16384
BORI4
ASGNI4
LABELV $228
line 376
;376:	other->client->ps.ammo[WP_FLAMETHROWER] += ent->backpackContents[WP_FLAMETHROWER];
ADDRLP4 92
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 432
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2168
ADDP4
INDIRI4
ADDI4
ASGNI4
line 377
;377:	if (other->client->ps.ammo[WP_FLAMETHROWER] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 432
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $230
line 378
;378:		other->client->ps.ammo[WP_FLAMETHROWER] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 432
ADDP4
CNSTI4 9999
ASGNI4
LABELV $230
line 381
;379:	
;380:	//dark flare
;381:		if ( ent->count & (1 << WP_ANTIMATTER) )
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 32768
BANDI4
CNSTI4 0
EQI4 $232
line 382
;382:		other->client->ps.stats[STAT_WEAPONS] |= (1 << WP_ANTIMATTER);
ADDRLP4 96
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRI4
CNSTI4 32768
BORI4
ASGNI4
LABELV $232
line 383
;383:	other->client->ps.ammo[WP_ANTIMATTER] += ent->backpackContents[WP_ANTIMATTER];
ADDRLP4 100
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 436
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2172
ADDP4
INDIRI4
ADDI4
ASGNI4
line 384
;384:	if (other->client->ps.ammo[WP_ANTIMATTER] > 9999)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
CNSTI4 9999
LEI4 $234
line 385
;385:		other->client->ps.ammo[WP_ANTIMATTER] = 9999;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 436
ADDP4
CNSTI4 9999
ASGNI4
LABELV $234
line 388
;386:
;387:	//holdables
;388:	other->client->ps.stats[STAT_HOLDABLE_ITEM] = ent->backpackContents[0];
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 2112
ADDP4
INDIRI4
ASGNI4
line 390
;389:
;390:	return -1;
CNSTI4 -1
RETI4
LABELV $181
endproc Pickup_Backpack 104 0
export Set_Weapon
proc Set_Weapon 4 0
line 397
;391:}
;392:
;393:
;394://======================================================================
;395:
;396:void Set_Weapon (gentity_t *ent, int weapon, int status)
;397:{
line 398
;398:if(weapon <= 15){
ADDRFP4 4
INDIRI4
CNSTI4 15
GTI4 $237
line 399
;399:	if(status == 1){
ADDRFP4 8
INDIRI4
CNSTI4 1
NEI4 $239
line 400
;400:	ent->client->ps.stats[STAT_WEAPONS] |= ( 1 << weapon );
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BORI4
ASGNI4
line 401
;401:	} else {
ADDRGP4 $238
JUMPV
LABELV $239
line 402
;402:	ent->client->ps.stats[STAT_WEAPONS] &= ~( 1 << weapon );
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 1
ADDRFP4 4
INDIRI4
LSHI4
BCOMI4
BANDI4
ASGNI4
line 403
;403:	}
line 404
;404:} else {
ADDRGP4 $238
JUMPV
LABELV $237
line 405
;405:	if(status == 1){
ADDRFP4 8
INDIRI4
CNSTI4 1
NEI4 $241
line 406
;406:	ent->swep_list[weapon] = 1;
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 2292
ADDP4
ADDP4
CNSTI4 1
ASGNI4
line 407
;407:	} else {
ADDRGP4 $242
JUMPV
LABELV $241
line 408
;408:	ent->swep_list[weapon] = 0;
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 2292
ADDP4
ADDP4
CNSTI4 0
ASGNI4
line 409
;409:	}
LABELV $242
line 410
;410:}
LABELV $238
line 411
;411:}
LABELV $236
endproc Set_Weapon 4 0
export Add_Ammo
proc Add_Ammo 4 0
line 414
;412:
;413:void Add_Ammo (gentity_t *ent, int weapon, int count)
;414:{
line 415
;415:if(weapon <= 15){
ADDRFP4 4
INDIRI4
CNSTI4 15
GTI4 $244
line 416
;416:	ent->client->ps.ammo[weapon] += count;
ADDRLP4 0
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ASGNI4
line 417
;417:	if ( ent->client->ps.ammo[weapon] > mod_ammolimit && count != 9999 ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ADDRGP4 mod_ammolimit
INDIRI4
LEI4 $245
ADDRFP4 8
INDIRI4
CNSTI4 9999
EQI4 $245
line 418
;418:		ent->client->ps.ammo[weapon] = mod_ammolimit;
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
ADDRGP4 mod_ammolimit
INDIRI4
ASGNI4
line 419
;419:	}
line 420
;420:} else {
ADDRGP4 $245
JUMPV
LABELV $244
line 421
;421:	ent->swep_ammo[weapon] += count;
ADDRLP4 0
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 2368
ADDP4
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
ADDRFP4 8
INDIRI4
ADDI4
ASGNI4
line 422
;422:	if ( ent->swep_ammo[weapon] > mod_ammolimit && count != 9999 ) {
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 2368
ADDP4
ADDP4
INDIRI4
ADDRGP4 mod_ammolimit
INDIRI4
LEI4 $248
ADDRFP4 8
INDIRI4
CNSTI4 9999
EQI4 $248
line 423
;423:		ent->swep_ammo[weapon] = mod_ammolimit;
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 2368
ADDP4
ADDP4
ADDRGP4 mod_ammolimit
INDIRI4
ASGNI4
line 424
;424:	}
LABELV $248
line 425
;425:}
LABELV $245
line 426
;426:}
LABELV $243
endproc Add_Ammo 4 0
export Set_Ammo
proc Set_Ammo 0 0
line 429
;427:
;428:void Set_Ammo (gentity_t *ent, int weapon, int count)
;429:{
line 430
;430:if(weapon <= 15){
ADDRFP4 4
INDIRI4
CNSTI4 15
GTI4 $251
line 431
;431:	ent->client->ps.ammo[weapon] = count;
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 432
;432:} else {
ADDRGP4 $252
JUMPV
LABELV $251
line 433
;433:	ent->swep_ammo[weapon] = count;
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 2368
ADDP4
ADDP4
ADDRFP4 8
INDIRI4
ASGNI4
line 434
;434:}
LABELV $252
line 435
;435:}
LABELV $250
endproc Set_Ammo 0 0
export Pickup_Ammo
proc Pickup_Ammo 16 12
line 438
;436:
;437:int Pickup_Ammo (gentity_t *ent, gentity_t *other)
;438:{
line 443
;439:	int		quantity;
;440:
;441:
;442:
;443:	if ( ent->count ) {
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
EQI4 $254
line 444
;444:		quantity = ent->count;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
ASGNI4
line 445
;445:	} else {
ADDRGP4 $255
JUMPV
LABELV $254
line 446
;446:		quantity = ent->item->quantity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
line 448
;447:
;448:    switch(ent->item->giTag)
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
CNSTI4 2
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $256
ADDRLP4 4
INDIRI4
CNSTI4 14
GTI4 $256
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
LSHI4
ADDRGP4 $319-8
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $319
address $259
address $264
address $269
address $274
address $289
address $284
address $279
address $294
address $256
address $299
address $304
address $309
address $314
code
line 449
;449:	{
LABELV $259
line 451
;450:			case WP_MACHINEGUN:
;451:					if(g_mgammocount.integer != -1){
ADDRGP4 g_mgammocount+12
INDIRI4
CNSTI4 -1
EQI4 $257
line 452
;452:				 	quantity = g_mgammocount.integer;
ADDRLP4 0
ADDRGP4 g_mgammocount+12
INDIRI4
ASGNI4
line 453
;453:					}
line 454
;454:				break;
ADDRGP4 $257
JUMPV
LABELV $264
line 456
;455:			case WP_SHOTGUN:
;456:					if(g_sgammocount.integer != -1){
ADDRGP4 g_sgammocount+12
INDIRI4
CNSTI4 -1
EQI4 $257
line 457
;457:					quantity = g_sgammocount.integer;
ADDRLP4 0
ADDRGP4 g_sgammocount+12
INDIRI4
ASGNI4
line 458
;458:					}
line 459
;459:				break;
ADDRGP4 $257
JUMPV
LABELV $269
line 461
;460:			case WP_GRENADE_LAUNCHER:
;461:					if(g_glammocount.integer != -1){
ADDRGP4 g_glammocount+12
INDIRI4
CNSTI4 -1
EQI4 $257
line 462
;462:					quantity = g_glammocount.integer;
ADDRLP4 0
ADDRGP4 g_glammocount+12
INDIRI4
ASGNI4
line 463
;463:					}
line 464
;464:				break;
ADDRGP4 $257
JUMPV
LABELV $274
line 466
;465:			case WP_ROCKET_LAUNCHER:
;466:					if(g_rlammocount.integer != -1){
ADDRGP4 g_rlammocount+12
INDIRI4
CNSTI4 -1
EQI4 $257
line 467
;467:					quantity = g_rlammocount.integer;
ADDRLP4 0
ADDRGP4 g_rlammocount+12
INDIRI4
ASGNI4
line 468
;468:					}
line 469
;469:				break;
ADDRGP4 $257
JUMPV
LABELV $279
line 471
;470:			case WP_PLASMAGUN:
;471:					if(g_pgammocount.integer != -1){
ADDRGP4 g_pgammocount+12
INDIRI4
CNSTI4 -1
EQI4 $257
line 472
;472:					quantity = g_pgammocount.integer;
ADDRLP4 0
ADDRGP4 g_pgammocount+12
INDIRI4
ASGNI4
line 473
;473:					}
line 474
;474:				break;
ADDRGP4 $257
JUMPV
LABELV $284
line 476
;475:			case WP_RAILGUN:
;476:					if(g_rgammocount.integer != -1){
ADDRGP4 g_rgammocount+12
INDIRI4
CNSTI4 -1
EQI4 $257
line 477
;477:					quantity = g_rgammocount.integer;
ADDRLP4 0
ADDRGP4 g_rgammocount+12
INDIRI4
ASGNI4
line 478
;478:					}
line 479
;479:				break;
ADDRGP4 $257
JUMPV
LABELV $289
line 481
;480:			case WP_LIGHTNING:
;481:					if(g_lgammocount.integer != -1){
ADDRGP4 g_lgammocount+12
INDIRI4
CNSTI4 -1
EQI4 $257
line 482
;482:					quantity = g_lgammocount.integer;
ADDRLP4 0
ADDRGP4 g_lgammocount+12
INDIRI4
ASGNI4
line 483
;483:					}
line 484
;484:				break;
ADDRGP4 $257
JUMPV
LABELV $294
line 486
;485:			case WP_BFG:
;486:					if(g_bfgammocount.integer != -1){
ADDRGP4 g_bfgammocount+12
INDIRI4
CNSTI4 -1
EQI4 $257
line 487
;487:					quantity = g_bfgammocount.integer;
ADDRLP4 0
ADDRGP4 g_bfgammocount+12
INDIRI4
ASGNI4
line 488
;488:					}
line 489
;489:				break;
ADDRGP4 $257
JUMPV
LABELV $299
line 491
;490:			case WP_NAILGUN:
;491:					if(g_ngammocount.integer != -1){
ADDRGP4 g_ngammocount+12
INDIRI4
CNSTI4 -1
EQI4 $257
line 492
;492:					quantity = g_ngammocount.integer;
ADDRLP4 0
ADDRGP4 g_ngammocount+12
INDIRI4
ASGNI4
line 493
;493:					}
line 494
;494:				break;
ADDRGP4 $257
JUMPV
LABELV $304
line 496
;495:			case WP_PROX_LAUNCHER:
;496:					if(g_plammocount.integer != -1){
ADDRGP4 g_plammocount+12
INDIRI4
CNSTI4 -1
EQI4 $257
line 497
;497:					quantity = g_plammocount.integer;
ADDRLP4 0
ADDRGP4 g_plammocount+12
INDIRI4
ASGNI4
line 498
;498:					}
line 499
;499:				break;
ADDRGP4 $257
JUMPV
LABELV $309
line 501
;500:			case WP_CHAINGUN:
;501:					if(g_cgammocount.integer != -1){
ADDRGP4 g_cgammocount+12
INDIRI4
CNSTI4 -1
EQI4 $257
line 502
;502:					quantity = g_cgammocount.integer;
ADDRLP4 0
ADDRGP4 g_cgammocount+12
INDIRI4
ASGNI4
line 503
;503:					}
line 504
;504:				break;
ADDRGP4 $257
JUMPV
LABELV $314
line 506
;505:			case WP_FLAMETHROWER:
;506:					if(g_ftammocount.integer != -1){
ADDRGP4 g_ftammocount+12
INDIRI4
CNSTI4 -1
EQI4 $257
line 507
;507:					quantity = g_ftammocount.integer;
ADDRLP4 0
ADDRGP4 g_ftammocount+12
INDIRI4
ASGNI4
line 508
;508:					}
line 509
;509:				break;
LABELV $256
LABELV $257
line 512
;510:	}
;511:    //end
;512:	}
LABELV $255
line 513
;513:	Add_Ammo (other, ent->item->giTag, quantity);
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Add_Ammo
CALLV
pop
line 515
;514:
;515:	return RESPAWN_AMMO;
ADDRGP4 g_ammorespawn+8
INDIRF4
CVFI4 4
RETI4
LABELV $253
endproc Pickup_Ammo 16 12
export Pickup_Weapon
proc Pickup_Weapon 16 12
line 521
;516:}
;517:
;518://======================================================================
;519:
;520:
;521:int Pickup_Weapon (gentity_t *ent, gentity_t *other) {
line 526
;522:	int		quantity;
;523:
;524:
;525:
;526:	if ( ent->count < 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
GEI4 $323
line 527
;527:		quantity = 0; // None for you, sir!
ADDRLP4 0
CNSTI4 0
ASGNI4
line 528
;528:	} else {
ADDRGP4 $324
JUMPV
LABELV $323
line 529
;529:		if ( ent->count ) {
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
EQI4 $325
line 530
;530:			quantity = ent->count;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
ASGNI4
line 531
;531:		} else {
ADDRGP4 $326
JUMPV
LABELV $325
line 532
;532:			quantity = ent->item->quantity;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
line 535
;533:
;534:
;535:    switch(ent->item->giTag)
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
CNSTI4 2
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $327
ADDRLP4 4
INDIRI4
CNSTI4 15
GTI4 $327
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
LSHI4
ADDRGP4 $395-8
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $395
address $330
address $335
address $340
address $345
address $360
address $355
address $350
address $365
address $327
address $370
address $375
address $380
address $385
address $390
code
line 536
;536:	{
LABELV $330
line 538
;537:			case WP_MACHINEGUN:
;538:					if(g_mgweaponcount.integer != -1){
ADDRGP4 g_mgweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 539
;539:				 	quantity = g_mgweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_mgweaponcount+12
INDIRI4
ASGNI4
line 540
;540:					}
line 541
;541:				break;
ADDRGP4 $328
JUMPV
LABELV $335
line 543
;542:			case WP_SHOTGUN:
;543:					if(g_sgweaponcount.integer != -1){
ADDRGP4 g_sgweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 544
;544:					quantity = g_sgweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_sgweaponcount+12
INDIRI4
ASGNI4
line 545
;545:					}
line 546
;546:				break;
ADDRGP4 $328
JUMPV
LABELV $340
line 548
;547:			case WP_GRENADE_LAUNCHER:
;548:					if(g_glweaponcount.integer != -1){
ADDRGP4 g_glweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 549
;549:					quantity = g_glweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_glweaponcount+12
INDIRI4
ASGNI4
line 550
;550:					}
line 551
;551:				break;
ADDRGP4 $328
JUMPV
LABELV $345
line 553
;552:			case WP_ROCKET_LAUNCHER:
;553:					if(g_rlweaponcount.integer != -1){
ADDRGP4 g_rlweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 554
;554:					quantity = g_rlweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_rlweaponcount+12
INDIRI4
ASGNI4
line 555
;555:					}
line 556
;556:				break;
ADDRGP4 $328
JUMPV
LABELV $350
line 558
;557:			case WP_PLASMAGUN:
;558:					if(g_pgweaponcount.integer != -1){
ADDRGP4 g_pgweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 559
;559:					quantity = g_pgweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_pgweaponcount+12
INDIRI4
ASGNI4
line 560
;560:					}
line 561
;561:				break;
ADDRGP4 $328
JUMPV
LABELV $355
line 563
;562:			case WP_RAILGUN:
;563:					if(g_rgweaponcount.integer != -1){
ADDRGP4 g_rgweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 564
;564:					quantity = g_rgweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_rgweaponcount+12
INDIRI4
ASGNI4
line 565
;565:					}
line 566
;566:				break;
ADDRGP4 $328
JUMPV
LABELV $360
line 568
;567:			case WP_LIGHTNING:
;568:					if(g_lgweaponcount.integer != -1){
ADDRGP4 g_lgweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 569
;569:					quantity = g_lgweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_lgweaponcount+12
INDIRI4
ASGNI4
line 570
;570:					}
line 571
;571:				break;
ADDRGP4 $328
JUMPV
LABELV $365
line 573
;572:			case WP_BFG:
;573:					if(g_bfgweaponcount.integer != -1){
ADDRGP4 g_bfgweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 574
;574:					quantity = g_bfgweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_bfgweaponcount+12
INDIRI4
ASGNI4
line 575
;575:					}
line 576
;576:				break;
ADDRGP4 $328
JUMPV
LABELV $370
line 578
;577:			case WP_NAILGUN:
;578:					if(g_ngweaponcount.integer != -1){
ADDRGP4 g_ngweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 579
;579:					quantity = g_ngweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_ngweaponcount+12
INDIRI4
ASGNI4
line 580
;580:					}
line 581
;581:				break;
ADDRGP4 $328
JUMPV
LABELV $375
line 583
;582:			case WP_PROX_LAUNCHER:
;583:					if(g_plweaponcount.integer != -1){
ADDRGP4 g_plweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 584
;584:					quantity = g_plweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_plweaponcount+12
INDIRI4
ASGNI4
line 585
;585:					}
line 586
;586:				break;
ADDRGP4 $328
JUMPV
LABELV $380
line 588
;587:			case WP_CHAINGUN:
;588:					if(g_cgweaponcount.integer != -1){
ADDRGP4 g_cgweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 589
;589:					quantity = g_cgweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_cgweaponcount+12
INDIRI4
ASGNI4
line 590
;590:					}
line 591
;591:				break;
ADDRGP4 $328
JUMPV
LABELV $385
line 593
;592:			case WP_FLAMETHROWER:
;593:					if(g_ftweaponcount.integer != -1){
ADDRGP4 g_ftweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 594
;594:					quantity = g_ftweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_ftweaponcount+12
INDIRI4
ASGNI4
line 595
;595:					}
line 596
;596:				break;
ADDRGP4 $328
JUMPV
LABELV $390
line 598
;597:			case WP_ANTIMATTER:
;598:					if(g_amweaponcount.integer != -1){
ADDRGP4 g_amweaponcount+12
INDIRI4
CNSTI4 -1
EQI4 $328
line 599
;599:					quantity = g_amweaponcount.integer;
ADDRLP4 0
ADDRGP4 g_amweaponcount+12
INDIRI4
ASGNI4
line 600
;600:					}
line 601
;601:				break;
LABELV $327
LABELV $328
line 604
;602:	}
;603:    //end
;604:		}
LABELV $326
line 605
;605:	if(ent->item->giTag <= 15){
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 15
GTI4 $397
line 607
;606:		// dropped items and teamplay weapons always have full ammo
;607:		if ( ! (ent->flags & FL_DROPPED_ITEM) && g_gametype.integer != GT_TEAM ) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $398
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
EQI4 $398
line 610
;608:			// respawning rules
;609:			// drop the quantity if the already have over the minimum
;610:			if ( other->client->ps.ammo[ ent->item->giTag ] < quantity ) {
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
GEI4 $402
line 611
;611:				quantity = quantity - other->client->ps.ammo[ ent->item->giTag ];
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 376
ADDP4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 612
;612:			} else {
ADDRGP4 $398
JUMPV
LABELV $402
line 613
;613:				if(g_maxweaponpickup.integer == 1){
ADDRGP4 g_maxweaponpickup+12
INDIRI4
CNSTI4 1
NEI4 $404
line 614
;614:				quantity /= 2;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 2
DIVI4
ASGNI4
line 615
;615:				}
LABELV $404
line 616
;616:				if(g_maxweaponpickup.integer != 1){
ADDRGP4 g_maxweaponpickup+12
INDIRI4
CNSTI4 1
EQI4 $398
line 617
;617:					quantity = g_maxweaponpickup.integer;		// only add a single shot
ADDRLP4 0
ADDRGP4 g_maxweaponpickup+12
INDIRI4
ASGNI4
line 618
;618:				}
line 619
;619:			}
line 620
;620:		}
line 621
;621:	} else {
ADDRGP4 $398
JUMPV
LABELV $397
line 623
;622:		// dropped items and teamplay weapons always have full ammo
;623:		if ( ! (ent->flags & FL_DROPPED_ITEM) && g_gametype.integer != GT_TEAM ) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $411
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
EQI4 $411
line 626
;624:			// respawning rules
;625:			// drop the quantity if the already have over the minimum
;626:			if ( other->swep_ammo[ent->item->giTag] < quantity ) {
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 2368
ADDP4
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
GEI4 $414
line 627
;627:				quantity = quantity - other->swep_ammo[ent->item->giTag];
ADDRLP4 0
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 4
INDIRP4
CNSTI4 2368
ADDP4
ADDP4
INDIRI4
SUBI4
ASGNI4
line 628
;628:			} else {
ADDRGP4 $415
JUMPV
LABELV $414
line 629
;629:				if(g_maxweaponpickup.integer == 1){
ADDRGP4 g_maxweaponpickup+12
INDIRI4
CNSTI4 1
NEI4 $416
line 630
;630:				quantity /= 2;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 2
DIVI4
ASGNI4
line 631
;631:				}
LABELV $416
line 632
;632:				if(g_maxweaponpickup.integer != 1){
ADDRGP4 g_maxweaponpickup+12
INDIRI4
CNSTI4 1
EQI4 $419
line 633
;633:					quantity = g_maxweaponpickup.integer;		// only add a single shot
ADDRLP4 0
ADDRGP4 g_maxweaponpickup+12
INDIRI4
ASGNI4
line 634
;634:				}
LABELV $419
line 635
;635:			}
LABELV $415
line 636
;636:		}
LABELV $411
line 637
;637:	}
LABELV $398
line 639
;638:		
;639:	}
LABELV $324
line 642
;640:
;641:	// add the weapon
;642:	Set_Weapon( other, ent->item->giTag, 1 );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 Set_Weapon
CALLV
pop
line 643
;643:	Add_Ammo( other, ent->item->giTag, quantity );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Add_Ammo
CALLV
pop
line 645
;644:
;645:	SetUnlimitedWeapons(other);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 SetUnlimitedWeapons
CALLV
pop
line 648
;646:
;647:	// team deathmatch has slow weapon respawns
;648:	if ( g_gametype.integer == GT_TEAM ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
NEI4 $423
line 649
;649:		return g_weaponTeamRespawn.integer;
ADDRGP4 g_weaponTeamRespawn+12
INDIRI4
RETI4
ADDRGP4 $322
JUMPV
LABELV $423
line 652
;650:	}
;651:
;652:	return g_weaponRespawn.integer;
ADDRGP4 g_weaponRespawn+12
INDIRI4
RETI4
LABELV $322
endproc Pickup_Weapon 16 12
export Pickup_Health
proc Pickup_Health 24 0
line 658
;653:}
;654:
;655:
;656://======================================================================
;657:
;658:int Pickup_Health (gentity_t *ent, gentity_t *other) {
line 663
;659:	int			max;
;660:	int			quantity;
;661:
;662:
;663:        if( !other->client)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $429
line 664
;664:            return RESPAWN_HEALTH;
ADDRGP4 g_healthrespawn+8
INDIRF4
CVFI4 4
RETI4
ADDRGP4 $428
JUMPV
LABELV $429
line 667
;665:
;666:	// small and mega healths will go over the max
;667:	if( other->client && bg_itemlist[other->client->ps.stats[STAT_PERSISTANT_POWERUP]].giTag == PW_GUARD ) {
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $432
CNSTI4 56
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+44
ADDP4
INDIRI4
CNSTI4 11
NEI4 $432
line 668
;668:		max = other->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
ASGNI4
line 669
;669:	}
ADDRGP4 $433
JUMPV
LABELV $432
line 671
;670:	else
;671:	if ( ent->item->quantity != 5 && ent->item->quantity != 100 ) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 5
EQI4 $435
ADDRLP4 12
INDIRI4
CNSTI4 100
EQI4 $435
line 672
;672:		max = other->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
ASGNI4
line 673
;673:	} else {
ADDRGP4 $436
JUMPV
LABELV $435
line 674
;674:		max = other->client->ps.stats[STAT_MAX_HEALTH] * 2;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 675
;675:	}
LABELV $436
LABELV $433
line 677
;676:
;677:	if ( ent->count ) {
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
EQI4 $437
line 678
;678:		quantity = ent->count;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
ASGNI4
line 679
;679:	} else {
ADDRGP4 $438
JUMPV
LABELV $437
line 680
;680:		quantity = ent->item->quantity;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
line 681
;681:	}
LABELV $438
line 683
;682:
;683:	other->health += quantity;
ADDRLP4 16
ADDRFP4 4
INDIRP4
CNSTI4 808
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 685
;684:
;685:	if (other->health > max ) {
ADDRFP4 4
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $439
line 686
;686:		other->health = max;
ADDRFP4 4
INDIRP4
CNSTI4 808
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 687
;687:	}
LABELV $439
line 688
;688:	other->client->ps.stats[STAT_HEALTH] = other->health;
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 184
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
ASGNI4
line 690
;689:
;690:	if ( ent->item->quantity == 100 ) {		// mega health respawns slow
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
CNSTI4 100
NEI4 $441
line 691
;691:		return RESPAWN_MEGAHEALTH;
ADDRGP4 g_megahealthrespawn+8
INDIRF4
CVFI4 4
RETI4
ADDRGP4 $428
JUMPV
LABELV $441
line 694
;692:	}
;693:
;694:	return RESPAWN_HEALTH;
ADDRGP4 g_healthrespawn+8
INDIRF4
CVFI4 4
RETI4
LABELV $428
endproc Pickup_Health 24 0
export Pickup_Armor
proc Pickup_Armor 12 0
line 699
;695:}
;696:
;697://======================================================================
;698:
;699:int Pickup_Armor( gentity_t *ent, gentity_t *other ) {
line 704
;700:	int		upperBound;
;701:
;702:
;703:
;704:	other->client->ps.stats[STAT_ARMOR] += ent->item->quantity;
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 200
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ADDI4
ASGNI4
line 706
;705:
;706:	if( other->client && bg_itemlist[other->client->ps.stats[STAT_PERSISTANT_POWERUP]].giTag == PW_GUARD ) {
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $446
CNSTI4 56
ADDRLP4 8
INDIRP4
CNSTI4 192
ADDP4
INDIRI4
MULI4
ADDRGP4 bg_itemlist+44
ADDP4
INDIRI4
CNSTI4 11
NEI4 $446
line 707
;707:		upperBound = other->client->ps.stats[STAT_MAX_HEALTH];
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
ASGNI4
line 708
;708:	}
ADDRGP4 $447
JUMPV
LABELV $446
line 709
;709:	else {
line 710
;710:		upperBound = other->client->ps.stats[STAT_MAX_HEALTH] * 2;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 212
ADDP4
INDIRI4
CNSTI4 1
LSHI4
ASGNI4
line 711
;711:	}
LABELV $447
line 713
;712:
;713:	if ( other->client->ps.stats[STAT_ARMOR] > upperBound ) {
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 200
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
LEI4 $449
line 714
;714:		other->client->ps.stats[STAT_ARMOR] = upperBound;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 200
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 715
;715:	}
LABELV $449
line 717
;716:
;717:	return RESPAWN_ARMOR;
ADDRGP4 g_armorrespawn+8
INDIRF4
CVFI4 4
RETI4
LABELV $445
endproc Pickup_Armor 12 0
export RespawnItem
proc RespawnItem 28 12
line 727
;718:}
;719:
;720://======================================================================
;721:
;722:/*
;723:===============
;724:RespawnItem
;725:===============
;726:*/
;727:void RespawnItem( gentity_t *ent ) {
line 730
;728:	int		spawn_item;
;729:
;730:    if(g_randomItems.integer) {
ADDRGP4 g_randomItems+12
INDIRI4
CNSTI4 0
EQI4 $453
line 731
;731:		spawn_item = rq3_random(1, 56);
CNSTI4 1
ARGI4
CNSTI4 56
ARGI4
ADDRLP4 4
ADDRGP4 rq3_random
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 733
;732:
;733:		if(spawn_item == 8){
ADDRLP4 0
INDIRI4
CNSTI4 8
NEI4 $456
line 734
;734:		spawn_item = 55;
ADDRLP4 0
CNSTI4 55
ASGNI4
line 735
;735:		}
LABELV $456
line 736
;736:		if(spawn_item == 34){
ADDRLP4 0
INDIRI4
CNSTI4 34
NEI4 $458
line 737
;737:		spawn_item = 55;
ADDRLP4 0
CNSTI4 55
ASGNI4
line 738
;738:		}
LABELV $458
line 739
;739:		if(spawn_item == 35){
ADDRLP4 0
INDIRI4
CNSTI4 35
NEI4 $460
line 740
;740:		spawn_item = 55;
ADDRLP4 0
CNSTI4 55
ASGNI4
line 741
;741:		}
LABELV $460
line 742
;742:		if(spawn_item == 46){
ADDRLP4 0
INDIRI4
CNSTI4 46
NEI4 $462
line 743
;743:		spawn_item = 55;
ADDRLP4 0
CNSTI4 55
ASGNI4
line 744
;744:		}
LABELV $462
line 745
;745:		if(spawn_item == 47){
ADDRLP4 0
INDIRI4
CNSTI4 47
NEI4 $464
line 746
;746:		spawn_item = 55;
ADDRLP4 0
CNSTI4 55
ASGNI4
line 747
;747:		}
LABELV $464
line 748
;748:		if(spawn_item == 48){
ADDRLP4 0
INDIRI4
CNSTI4 48
NEI4 $466
line 749
;749:		spawn_item = 55;
ADDRLP4 0
CNSTI4 55
ASGNI4
line 750
;750:		}
LABELV $466
line 751
;751:		ent->item = &bg_itemlist[spawn_item];
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
CNSTI4 56
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 bg_itemlist
ADDP4
ASGNP4
line 752
;752:		ent->item->classname = bg_itemlist[spawn_item].classname;
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 56
ADDRLP4 0
INDIRI4
MULI4
ADDRGP4 bg_itemlist
ADDP4
INDIRP4
ASGNP4
line 753
;753:		ent->s.modelindex = spawn_item;
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 754
;754:	}
LABELV $453
line 758
;755:	//end
;756:
;757:	// randomly select from teamed entities
;758:	if (ent->team) {
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $468
line 763
;759:		gentity_t	*master;
;760:		int	count;
;761:		int choice;
;762:
;763:		if ( !ent->teammaster ) {
ADDRFP4 0
INDIRP4
CNSTI4 976
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $470
line 764
;764:			G_Printf( "RespawnItem: bad teammaster");
ADDRGP4 $472
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 765
;765:		}
LABELV $470
line 766
;766:		master = ent->teammaster;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 976
ADDP4
INDIRP4
ASGNP4
line 768
;767:
;768:		for (count = 0, ent = master; ent; ent = ent->teamchain, count++)
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRFP4 0
ADDRLP4 12
INDIRP4
ASGNP4
ADDRGP4 $476
JUMPV
LABELV $473
line 769
;769:			;
LABELV $474
line 768
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 972
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $476
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $473
line 771
;770:
;771:		choice = (count > 0)? rand()%count : 0;
ADDRLP4 4
INDIRI4
CNSTI4 0
LEI4 $478
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 20
INDIRI4
ADDRLP4 4
INDIRI4
MODI4
ASGNI4
ADDRGP4 $479
JUMPV
LABELV $478
ADDRLP4 16
CNSTI4 0
ASGNI4
LABELV $479
ADDRLP4 8
ADDRLP4 16
INDIRI4
ASGNI4
line 773
;772:
;773:		for (count = 0, ent = master; count < choice; ent = ent->teamchain, count++)
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRFP4 0
ADDRLP4 12
INDIRP4
ASGNP4
ADDRGP4 $483
JUMPV
LABELV $480
line 774
;774:			;
LABELV $481
line 773
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 972
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $483
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $480
line 775
;775:	}
LABELV $468
line 777
;776:
;777:	ent->r.contents = CONTENTS_TRIGGER;
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1073741824
ASGNI4
line 778
;778:	ent->s.eFlags &= ~EF_NODRAW;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 779
;779:	ent->r.svFlags &= ~SVF_NOCLIENT;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 780
;780:	trap_LinkEntity (ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 782
;781:
;782:	if ( ent->item->giType == IT_POWERUP ) {
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 5
NEI4 $484
line 787
;783:		// play powerup spawn sound to all clients
;784:		gentity_t	*te;
;785:
;786:		// if the powerup respawn sound should Not be global
;787:		if (ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
EQF4 $486
line 788
;788:			te = G_TempEntity( ent->s.pos.trBase, EV_GENERAL_SOUND );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 16
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
ASGNP4
line 789
;789:		}
ADDRGP4 $487
JUMPV
LABELV $486
line 790
;790:		else {
line 791
;791:			te = G_TempEntity( ent->s.pos.trBase, EV_GLOBAL_SOUND );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 16
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
ASGNP4
line 792
;792:		}
LABELV $487
line 793
;793:		te->s.eventParm = G_SoundIndex( "sound/items/poweruprespawn.wav" );
ADDRGP4 $488
ARGP4
ADDRLP4 16
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 196
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 794
;794:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 20
ADDRLP4 12
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 795
;795:	}
LABELV $484
line 797
;796:
;797:	if ( ent->item->giType == IT_HOLDABLE && ent->item->giTag == HI_KAMIKAZE ) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 6
NEI4 $489
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 3
NEI4 $489
line 802
;798:		// play powerup spawn sound to all clients
;799:		gentity_t	*te;
;800:
;801:		// if the powerup respawn sound should Not be global
;802:		if (ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
EQF4 $491
line 803
;803:			te = G_TempEntity( ent->s.pos.trBase, EV_GENERAL_SOUND );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 20
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 20
INDIRP4
ASGNP4
line 804
;804:		}
ADDRGP4 $492
JUMPV
LABELV $491
line 805
;805:		else {
line 806
;806:			te = G_TempEntity( ent->s.pos.trBase, EV_GLOBAL_SOUND );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 20
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 20
INDIRP4
ASGNP4
line 807
;807:		}
LABELV $492
line 808
;808:		te->s.eventParm = G_SoundIndex( "sound/items/kamikazerespawn.wav" );
ADDRGP4 $493
ARGP4
ADDRLP4 20
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 196
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 809
;809:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 24
ADDRLP4 16
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 810
;810:	}
LABELV $489
line 813
;811:
;812:	// play the normal respawn sound only to nearby clients
;813:	G_AddEvent( ent, EV_ITEM_RESPAWN, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 40
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 815
;814:
;815:	ent->nextthink = 0;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 0
ASGNI4
line 816
;816:}
LABELV $452
endproc RespawnItem 28 12
export RespawnItemCtf
proc RespawnItemCtf 28 12
line 823
;817:
;818:/*
;819:===============
;820:RespawnItemCtf
;821:===============
;822:*/
;823:void RespawnItemCtf( gentity_t *ent ) {
line 827
;824:	int		spawn_item;
;825:
;826:	// randomly select from teamed entities
;827:	if (ent->team) {
ADDRFP4 0
INDIRP4
CNSTI4 728
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $495
line 832
;828:		gentity_t	*master;
;829:		int	count;
;830:		int choice;
;831:
;832:		if ( !ent->teammaster ) {
ADDRFP4 0
INDIRP4
CNSTI4 976
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $497
line 833
;833:			G_Printf( "RespawnItem: bad teammaster");
ADDRGP4 $472
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 834
;834:		}
LABELV $497
line 835
;835:		master = ent->teammaster;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 976
ADDP4
INDIRP4
ASGNP4
line 837
;836:
;837:		for (count = 0, ent = master; ent; ent = ent->teamchain, count++)
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRFP4 0
ADDRLP4 12
INDIRP4
ASGNP4
ADDRGP4 $502
JUMPV
LABELV $499
line 838
;838:			;
LABELV $500
line 837
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 972
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $502
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $499
line 840
;839:
;840:		choice = (count > 0)? rand()%count : 0;
ADDRLP4 4
INDIRI4
CNSTI4 0
LEI4 $504
ADDRLP4 20
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 16
ADDRLP4 20
INDIRI4
ADDRLP4 4
INDIRI4
MODI4
ASGNI4
ADDRGP4 $505
JUMPV
LABELV $504
ADDRLP4 16
CNSTI4 0
ASGNI4
LABELV $505
ADDRLP4 8
ADDRLP4 16
INDIRI4
ASGNI4
line 842
;841:
;842:		for (count = 0, ent = master; count < choice; ent = ent->teamchain, count++)
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRFP4 0
ADDRLP4 12
INDIRP4
ASGNP4
ADDRGP4 $509
JUMPV
LABELV $506
line 843
;843:			;
LABELV $507
line 842
ADDRFP4 0
ADDRFP4 0
INDIRP4
CNSTI4 972
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $509
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
LTI4 $506
line 844
;844:	}
LABELV $495
line 846
;845:
;846:	ent->r.contents = CONTENTS_TRIGGER;
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1073741824
ASGNI4
line 847
;847:	ent->s.eFlags &= ~EF_NODRAW;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -129
BANDI4
ASGNI4
line 848
;848:	ent->r.svFlags &= ~SVF_NOCLIENT;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 849
;849:	trap_LinkEntity (ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 851
;850:
;851:	if ( ent->item->giType == IT_POWERUP ) {
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 5
NEI4 $510
line 856
;852:		// play powerup spawn sound to all clients
;853:		gentity_t	*te;
;854:
;855:		// if the powerup respawn sound should Not be global
;856:		if (ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
EQF4 $512
line 857
;857:			te = G_TempEntity( ent->s.pos.trBase, EV_GENERAL_SOUND );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 16
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
ASGNP4
line 858
;858:		}
ADDRGP4 $513
JUMPV
LABELV $512
line 859
;859:		else {
line 860
;860:			te = G_TempEntity( ent->s.pos.trBase, EV_GLOBAL_SOUND );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 16
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 12
ADDRLP4 16
INDIRP4
ASGNP4
line 861
;861:		}
LABELV $513
line 862
;862:		te->s.eventParm = G_SoundIndex( "sound/items/poweruprespawn.wav" );
ADDRGP4 $488
ARGP4
ADDRLP4 16
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 12
INDIRP4
CNSTI4 196
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 863
;863:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 20
ADDRLP4 12
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 864
;864:	}
LABELV $510
line 866
;865:
;866:	if ( ent->item->giType == IT_HOLDABLE && ent->item->giTag == HI_KAMIKAZE ) {
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 6
NEI4 $514
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 3
NEI4 $514
line 871
;867:		// play powerup spawn sound to all clients
;868:		gentity_t	*te;
;869:
;870:		// if the powerup respawn sound should Not be global
;871:		if (ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
EQF4 $516
line 872
;872:			te = G_TempEntity( ent->s.pos.trBase, EV_GENERAL_SOUND );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 45
ARGI4
ADDRLP4 20
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 20
INDIRP4
ASGNP4
line 873
;873:		}
ADDRGP4 $517
JUMPV
LABELV $516
line 874
;874:		else {
line 875
;875:			te = G_TempEntity( ent->s.pos.trBase, EV_GLOBAL_SOUND );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 46
ARGI4
ADDRLP4 20
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 16
ADDRLP4 20
INDIRP4
ASGNP4
line 876
;876:		}
LABELV $517
line 877
;877:		te->s.eventParm = G_SoundIndex( "sound/items/kamikazerespawn.wav" );
ADDRGP4 $493
ARGP4
ADDRLP4 20
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRLP4 16
INDIRP4
CNSTI4 196
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
line 878
;878:		te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 24
ADDRLP4 16
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 879
;879:	}
LABELV $514
line 882
;880:
;881:	// play the normal respawn sound only to nearby clients
;882:	G_AddEvent( ent, EV_ITEM_RESPAWN, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 40
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 884
;883:
;884:	ent->nextthink = 0;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 0
ASGNI4
line 885
;885:}
LABELV $494
endproc RespawnItemCtf 28 12
export Touch_Item
proc Touch_Item 0 16
line 892
;886:
;887:/*
;888:===============
;889:Touch_Item
;890:===============
;891:*/
;892:void Touch_Item(gentity_t *ent, gentity_t *other, trace_t *trace) {
line 893
;893:	Touch_Item2(ent, other, trace, qfalse);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 8
INDIRP4
ARGP4
CNSTI4 0
ARGI4
ADDRGP4 Touch_Item2
CALLV
pop
line 894
;894:}
LABELV $518
endproc Touch_Item 0 16
export Touch_Item2
proc Touch_Item2 64 12
line 896
;895:
;896:void Touch_Item2 (gentity_t *ent, gentity_t *other, trace_t *trace, qboolean allowBot ) {
line 900
;897:	int			respawn;
;898:	qboolean	predict;
;899:
;900:		if(ent->singlebot){
ADDRFP4 0
INDIRP4
CNSTI4 1028
ADDP4
INDIRI4
CNSTI4 0
EQI4 $520
line 901
;901:		if(!G_NpcFactionProp(NP_PICKUP, ent)){
CNSTI4 8
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 G_NpcFactionProp
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
NEI4 $522
line 902
;902:		return;		// npc can't pickup
ADDRGP4 $519
JUMPV
LABELV $522
line 904
;903:		}
;904:		}
LABELV $520
line 906
;905:		
;906:		if(other->client->sess.sessionTeam == TEAM_BLUE){
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 2
NEI4 $524
line 907
;907:		if(g_teamblue_pickupitems.integer == 0){
ADDRGP4 g_teamblue_pickupitems+12
INDIRI4
CNSTI4 0
NEI4 $526
line 908
;908:		return;
ADDRGP4 $519
JUMPV
LABELV $526
line 910
;909:		}
;910:		}
LABELV $524
line 912
;911:		
;912:		if(other->client->sess.sessionTeam == TEAM_RED){
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 1
NEI4 $529
line 913
;913:		if(g_teamred_pickupitems.integer == 0){
ADDRGP4 g_teamred_pickupitems+12
INDIRI4
CNSTI4 0
NEI4 $531
line 914
;914:		return;
ADDRGP4 $519
JUMPV
LABELV $531
line 916
;915:		}
;916:		}
LABELV $529
line 919
;917:	
;918:	//instant gib
;919:	if (g_elimination_items.integer == 0){
ADDRGP4 g_elimination_items+12
INDIRI4
CNSTI4 0
NEI4 $534
line 920
;920:	if ((g_instantgib.integer || g_rockets.integer || g_gametype.integer == GT_CTF_ELIMINATION || g_elimination_allgametypes.integer)
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 g_instantgib+12
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $545
ADDRGP4 g_rockets+12
INDIRI4
ADDRLP4 8
INDIRI4
NEI4 $545
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
EQI4 $545
ADDRGP4 g_elimination_allgametypes+12
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $537
LABELV $545
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
EQI4 $537
line 922
;921:                && ent->item->giType != IT_TEAM)
;922:		return;
ADDRGP4 $519
JUMPV
LABELV $537
line 923
;923:	}
LABELV $534
line 926
;924:
;925:	//Cannot touch flag before round starts
;926:	if(g_gametype.integer == GT_CTF_ELIMINATION && level.roundNumber != level.roundNumberStarted)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
NEI4 $546
ADDRGP4 level+10004
INDIRI4
ADDRGP4 level+10008
INDIRI4
EQI4 $546
line 927
;927:		return;
ADDRGP4 $519
JUMPV
LABELV $546
line 930
;928:
;929:	//Cannot take ctf elimination oneway
;930:	if(g_gametype.integer == GT_CTF_ELIMINATION && g_elimination_ctf_oneway.integer!=0 && (
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
NEI4 $551
ADDRLP4 8
CNSTI4 0
ASGNI4
ADDRGP4 g_elimination_ctf_oneway+12
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $551
ADDRLP4 12
CNSTI4 2
ASGNI4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
ADDRLP4 12
INDIRI4
NEI4 $560
ADDRGP4 level+10024
INDIRI4
ADDRGP4 level+10004
INDIRI4
ADDI4
ADDRLP4 12
INDIRI4
MODI4
ADDRLP4 8
INDIRI4
EQI4 $559
LABELV $560
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 1
NEI4 $551
ADDRGP4 level+10024
INDIRI4
ADDRGP4 level+10004
INDIRI4
ADDI4
CNSTI4 2
MODI4
CNSTI4 0
EQI4 $551
LABELV $559
line 933
;931:			(other->client->sess.sessionTeam==TEAM_BLUE && (level.eliminationSides+level.roundNumber)%2 == 0 ) ||
;932:			(other->client->sess.sessionTeam==TEAM_RED && (level.eliminationSides+level.roundNumber)%2 != 0 ) ))
;933:		return;
ADDRGP4 $519
JUMPV
LABELV $551
line 934
;934:	if (g_elimination_items.integer == 0)
ADDRGP4 g_elimination_items+12
INDIRI4
CNSTI4 0
NEI4 $561
line 935
;935:	if (g_gametype.integer == GT_ELIMINATION || g_gametype.integer == GT_LMS)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $568
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 11
NEI4 $564
LABELV $568
line 936
;936:		return;		//nothing to pick up in elimination
ADDRGP4 $519
JUMPV
LABELV $564
LABELV $561
line 938
;937:
;938:	if (!other->client)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $569
line 939
;939:		return;
ADDRGP4 $519
JUMPV
LABELV $569
line 940
;940:	if (other->health < 1)
ADDRFP4 4
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 1
GEI4 $571
line 941
;941:		return;		// dead people can't pickup
ADDRGP4 $519
JUMPV
LABELV $571
line 947
;942:
;943:	/*if ( !allowBot && IsBot(other) )
;944:		return;		// bots don't pick up items in entityplus*/
;945:
;946:	// the same pickup rules are used for client side and server side
;947:	if ( !BG_CanItemBeGrabbed( g_gametype.integer, &ent->s, &other->client->ps ) ) {
ADDRGP4 g_gametype+12
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
ADDRGP4 BG_CanItemBeGrabbed
CALLI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 0
NEI4 $573
line 948
;948:		return;
ADDRGP4 $519
JUMPV
LABELV $573
line 952
;949:	}
;950:
;951:	//In double DD we cannot "pick up" a flag we already got
;952:	if(g_gametype.integer == GT_DOUBLE_D) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 12
NEI4 $576
line 953
;953:		if( strcmp(ent->classname, "team_CTF_redflag") == 0 )
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $581
ARGP4
ADDRLP4 20
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
NEI4 $579
line 954
;954:			if(other->client->sess.sessionTeam == level.pointStatusA)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
ADDRGP4 level+10028
INDIRI4
NEI4 $582
line 955
;955:				return;
ADDRGP4 $519
JUMPV
LABELV $582
LABELV $579
line 956
;956:		if( strcmp(ent->classname, "team_CTF_blueflag") == 0 )
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $587
ARGP4
ADDRLP4 24
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
NEI4 $585
line 957
;957:			if(other->client->sess.sessionTeam == level.pointStatusB)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
ADDRGP4 level+10032
INDIRI4
NEI4 $588
line 958
;958:				return;
ADDRGP4 $519
JUMPV
LABELV $588
LABELV $585
line 959
;959:	}
LABELV $576
line 961
;960:
;961:	G_LogPrintf( "Item: %i %s\n", other->s.number, ent->item->classname );
ADDRGP4 $591
ARGP4
ADDRFP4 4
INDIRP4
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
INDIRP4
ARGP4
ADDRGP4 G_LogPrintf
CALLV
pop
line 963
;962:
;963:	predict = other->client->pers.predictItemPickup;
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 508
ADDP4
INDIRI4
ASGNI4
line 966
;964:
;965:	// call the item-specific pickup function
;966:	switch( ent->item->giType ) {
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 1
LTI4 $519
ADDRLP4 20
INDIRI4
CNSTI4 9
GTI4 $519
ADDRLP4 20
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $606-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $606
address $595
address $596
address $597
address $598
address $599
address $604
address $600
address $601
address $605
code
LABELV $595
line 968
;967:	case IT_WEAPON:
;968:		respawn = Pickup_Weapon(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 Pickup_Weapon
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 28
INDIRI4
ASGNI4
line 970
;969://		predict = qfalse;
;970:		break;
ADDRGP4 $593
JUMPV
LABELV $596
line 972
;971:	case IT_AMMO:
;972:		respawn = Pickup_Ammo(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 Pickup_Ammo
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 32
INDIRI4
ASGNI4
line 974
;973://		predict = qfalse;
;974:		break;
ADDRGP4 $593
JUMPV
LABELV $597
line 976
;975:	case IT_ARMOR:
;976:		respawn = Pickup_Armor(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 36
ADDRGP4 Pickup_Armor
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 36
INDIRI4
ASGNI4
line 977
;977:		break;
ADDRGP4 $593
JUMPV
LABELV $598
line 979
;978:	case IT_HEALTH:
;979:		respawn = Pickup_Health(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 Pickup_Health
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 40
INDIRI4
ASGNI4
line 980
;980:		break;
ADDRGP4 $593
JUMPV
LABELV $599
line 982
;981:	case IT_POWERUP:
;982:		respawn = Pickup_Powerup(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 Pickup_Powerup
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 44
INDIRI4
ASGNI4
line 983
;983:		predict = qfalse;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 984
;984:		break;
ADDRGP4 $593
JUMPV
LABELV $600
line 986
;985:	case IT_PERSISTANT_POWERUP:
;986:		respawn = Pickup_PersistantPowerup(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 Pickup_PersistantPowerup
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 48
INDIRI4
ASGNI4
line 987
;987:		break;
ADDRGP4 $593
JUMPV
LABELV $601
line 989
;988:	case IT_TEAM:
;989:		respawn = Pickup_Team(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 52
ADDRGP4 Pickup_Team
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 52
INDIRI4
ASGNI4
line 991
;990:                //If touching a team item remove spawnprotection
;991:                if(other->client->spawnprotected)
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 2192
ADDP4
INDIRI4
CNSTI4 0
EQI4 $593
line 992
;992:                    other->client->spawnprotected = qfalse;
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 2192
ADDP4
CNSTI4 0
ASGNI4
line 993
;993:		break;
ADDRGP4 $593
JUMPV
LABELV $604
line 995
;994:	case IT_HOLDABLE:
;995:		respawn = Pickup_Holdable(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 Pickup_Holdable
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 56
INDIRI4
ASGNI4
line 996
;996:		break;
ADDRGP4 $593
JUMPV
LABELV $605
line 998
;997:	case IT_BACKPACK:
;998:		respawn = Pickup_Backpack(ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 60
ADDRGP4 Pickup_Backpack
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 60
INDIRI4
ASGNI4
line 999
;999:		break;
line 1001
;1000:	default:
;1001:		return;
LABELV $593
line 1004
;1002:	}
;1003:
;1004:	if ( !respawn ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
NEI4 $608
line 1005
;1005:		return;
ADDRGP4 $519
JUMPV
LABELV $608
line 1009
;1006:	}
;1007:
;1008:	// play the normal pickup sound
;1009:	if (!(ent->spawnflags & 2)) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
NEI4 $610
line 1010
;1010:	if (predict) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $612
line 1011
;1011:		G_AddPredictableEvent( other, EV_ITEM_PICKUP, ent->s.modelindex );
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 19
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddPredictableEvent
CALLV
pop
line 1012
;1012:	} else {
ADDRGP4 $613
JUMPV
LABELV $612
line 1013
;1013:		G_AddEvent( other, EV_ITEM_PICKUP, ent->s.modelindex );
ADDRFP4 4
INDIRP4
ARGP4
CNSTI4 19
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 1014
;1014:	}
LABELV $613
line 1017
;1015:
;1016:	// powerup pickups are global broadcasts
;1017:	if ( /*ent->item->giType == IT_POWERUP ||*/ ent->item->giType == IT_TEAM) {	//disabled powerup sound for all cuz it annoying
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
NEI4 $614
line 1019
;1018:		// if we want the global sound to play
;1019:		if (!ent->speed) {
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
INDIRF4
CNSTF4 0
NEF4 $616
line 1022
;1020:			gentity_t	*te;
;1021:
;1022:			te = G_TempEntity( ent->s.pos.trBase, EV_GLOBAL_ITEM_PICKUP );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 20
ARGI4
ADDRLP4 32
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 28
ADDRLP4 32
INDIRP4
ASGNP4
line 1023
;1023:			te->s.eventParm = ent->s.modelindex;
ADDRLP4 28
INDIRP4
CNSTI4 196
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ASGNI4
line 1024
;1024:			te->r.svFlags |= SVF_BROADCAST;
ADDRLP4 36
ADDRLP4 28
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 1025
;1025:		} else {
ADDRGP4 $617
JUMPV
LABELV $616
line 1028
;1026:			gentity_t	*te;
;1027:
;1028:			te = G_TempEntity( ent->s.pos.trBase, EV_GLOBAL_ITEM_PICKUP );
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
CNSTI4 20
ARGI4
ADDRLP4 32
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 28
ADDRLP4 32
INDIRP4
ASGNP4
line 1029
;1029:			te->s.eventParm = ent->s.modelindex;
ADDRLP4 28
INDIRP4
CNSTI4 196
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 172
ADDP4
INDIRI4
ASGNI4
line 1031
;1030:			// only send this temp entity to a single client
;1031:			te->r.svFlags |= SVF_SINGLECLIENT;
ADDRLP4 36
ADDRLP4 28
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
line 1032
;1032:			te->r.singleClient = other->s.number;
ADDRLP4 28
INDIRP4
CNSTI4 468
ADDP4
ADDRFP4 4
INDIRP4
INDIRI4
ASGNI4
line 1033
;1033:		}
LABELV $617
line 1034
;1034:	}
LABELV $614
line 1035
;1035:	}
LABELV $610
line 1040
;1036:
;1037:	
;1038:
;1039:	// fire item targets
;1040:	G_UseTargets (ent, other);
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_UseTargets
CALLV
pop
line 1041
;1041:if(g_gametype.integer == GT_SINGLE){
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 2
NEI4 $618
line 1043
;1042:	// items with no specified respawn will not respawn in entityplus
;1043:	if ( !ent->wait )
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
CNSTF4 0
NEF4 $621
line 1044
;1044:		ent->wait = -1;
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
CNSTF4 3212836864
ASGNF4
LABELV $621
line 1045
;1045:}
LABELV $618
line 1048
;1046:
;1047:	// wait of -1 will not respawn
;1048:	if ( ent->wait == -1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
CNSTF4 3212836864
NEF4 $623
line 1049
;1049:		ent->r.svFlags |= SVF_NOCLIENT;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 1050
;1050:		ent->s.eFlags |= EF_NODRAW;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 1051
;1051:		ent->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 0
ASGNI4
line 1052
;1052:		ent->unlinkAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 600
ADDP4
CNSTI4 1
ASGNI4
line 1054
;1053:
;1054:		G_FreeEntity( ent );	//completely free the entity. It no longer serves a purpose.
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1055
;1055:		return;
ADDRGP4 $519
JUMPV
LABELV $623
line 1059
;1056:	}
;1057:
;1058:	// non zero wait overrides respawn time
;1059:	if ( ent->wait ) {
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
CNSTF4 0
EQF4 $625
line 1060
;1060:		respawn = ent->wait;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 1061
;1061:	}
LABELV $625
line 1064
;1062:
;1063:	// random can be used to vary the respawn time
;1064:	if ( ent->random ) {
ADDRFP4 0
INDIRP4
CNSTI4 1016
ADDP4
INDIRF4
CNSTF4 0
EQF4 $627
line 1065
;1065:		respawn += crandom() * ent->random;
ADDRLP4 28
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 0
INDIRI4
CVIF4 4
CNSTF4 1073741824
ADDRLP4 28
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
ADDRFP4 0
INDIRP4
CNSTI4 1016
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1066
;1066:		if ( respawn < 1 ) {
ADDRLP4 0
INDIRI4
CNSTI4 1
GEI4 $629
line 1067
;1067:			respawn = 1;
ADDRLP4 0
CNSTI4 1
ASGNI4
line 1068
;1068:		}
LABELV $629
line 1069
;1069:	}
LABELV $627
line 1072
;1070:
;1071:	// dropped items will not respawn
;1072:	if ( ent->flags & FL_DROPPED_ITEM ) {
ADDRFP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $631
line 1073
;1073:		ent->freeAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 596
ADDP4
CNSTI4 1
ASGNI4
line 1074
;1074:	}
LABELV $631
line 1079
;1075:
;1076:	// picked up items still stay around, they just don't
;1077:	// draw anything.  This allows respawnable items
;1078:	// to be placed on movers.
;1079:	ent->r.svFlags |= SVF_NOCLIENT;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 1080
;1080:	ent->s.eFlags |= EF_NODRAW;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 1081
;1081:	ent->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 0
ASGNI4
line 1087
;1082:
;1083:	// ZOID
;1084:	// A negative respawn times means to never respawn this item (but don't
;1085:	// delete it).  This is used by items that are respawned by third party
;1086:	// events such as ctf flags
;1087:	if ( respawn <= 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
GTI4 $633
line 1088
;1088:		ent->nextthink = 0;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
CNSTI4 0
ASGNI4
line 1089
;1089:		ent->think = 0;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
CNSTP4 0
ASGNP4
line 1090
;1090:	} else {
ADDRGP4 $634
JUMPV
LABELV $633
line 1091
;1091:		ent->nextthink = level.time + respawn * 1000;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDRLP4 0
INDIRI4
MULI4
ADDI4
ASGNI4
line 1092
;1092:		ent->think = RespawnItem;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 RespawnItem
ASGNP4
line 1093
;1093:	}
LABELV $634
line 1094
;1094:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1095
;1095:}
LABELV $519
endproc Touch_Item2 64 12
export LaunchItem
proc LaunchItem 12 8
line 1107
;1096:
;1097:
;1098://======================================================================
;1099:
;1100:/*
;1101:================
;1102:LaunchItem
;1103:
;1104:Spawns an item and tosses it forward
;1105:================
;1106:*/
;1107:gentity_t *LaunchItem( gitem_t *item, vec3_t origin, vec3_t velocity ) {
line 1110
;1108:	gentity_t	*dropped;
;1109:
;1110:	dropped = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1112
;1111:
;1112:	dropped->s.eType = ET_ITEM;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 2
ASGNI4
line 1113
;1113:	dropped->s.modelindex = item - bg_itemlist;	// store item number in modelindex
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
ASGNI4
line 1114
;1114:	dropped->s.modelindex2 = 1; // This is non-zero is it's a dropped item
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTI4 1
ASGNI4
line 1116
;1115:
;1116:	dropped->classname = item->classname;
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 1117
;1117:	dropped->item = item;
ADDRLP4 0
INDIRP4
CNSTI4 1020
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1118
;1118:	VectorSet (dropped->r.mins, -ITEM_RADIUS, -ITEM_RADIUS, -ITEM_RADIUS);
ADDRLP4 0
INDIRP4
CNSTI4 476
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 480
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 484
ADDP4
CNSTF4 3245342720
ASGNF4
line 1119
;1119:	VectorSet (dropped->r.maxs, ITEM_RADIUS, ITEM_RADIUS, ITEM_RADIUS);
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 492
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 496
ADDP4
CNSTF4 1097859072
ASGNF4
line 1120
;1120:	dropped->r.contents = CONTENTS_TRIGGER;
ADDRLP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1073741824
ASGNI4
line 1122
;1121:
;1122:	dropped->touch = Touch_Item;
ADDRLP4 0
INDIRP4
CNSTI4 780
ADDP4
ADDRGP4 Touch_Item
ASGNP4
line 1124
;1123:
;1124:	G_SetOrigin( dropped, origin );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 1125
;1125:	dropped->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 1126
;1126:	dropped->s.pos.trTime = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1127
;1127:	VectorCopy( velocity, dropped->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 1129
;1128:
;1129:	dropped->s.eFlags |= EF_BOUNCE_HALF;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 1130
;1130:	if ((g_gametype.integer == GT_CTF || g_gametype.integer == GT_1FCTF || g_gametype.integer == GT_CTF_ELIMINATION || g_gametype.integer == GT_DOUBLE_D)			&& item->giType == IT_TEAM) { // Special case for CTF flags
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 5
EQI4 $646
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 6
EQI4 $646
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
EQI4 $646
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 12
NEI4 $638
LABELV $646
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
NEI4 $638
line 1131
;1131:		dropped->think = Team_DroppedFlagThink;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Team_DroppedFlagThink
ASGNP4
line 1132
;1132:		dropped->nextthink = level.time + g_autoflagreturn.integer*1000;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDRGP4 g_autoflagreturn+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 1133
;1133:		Team_CheckDroppedItem( dropped );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Team_CheckDroppedItem
CALLV
pop
line 1134
;1134:	} else { // auto-remove after 30 seconds
ADDRGP4 $639
JUMPV
LABELV $638
line 1135
;1135:	if ( item->giType != IT_BACKPACK ) { // auto-remove after 30 seconds if it's not a backpack
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 9
EQI4 $649
line 1136
;1136:		dropped->think = G_FreeEntity;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 1137
;1137:		dropped->nextthink = level.time + g_droppeditemtime.integer*1000;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDRGP4 g_droppeditemtime+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 1138
;1138:}
LABELV $649
line 1139
;1139:	}
LABELV $639
line 1141
;1140:
;1141:	dropped->flags = FL_DROPPED_ITEM;
ADDRLP4 0
INDIRP4
CNSTI4 576
ADDP4
CNSTI4 4096
ASGNI4
line 1143
;1142:
;1143:	trap_LinkEntity (dropped);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1145
;1144:
;1145:	return dropped;
ADDRLP4 0
INDIRP4
RETP4
LABELV $636
endproc LaunchItem 12 8
export BackpackThink
proc BackpackThink 8 8
line 1148
;1146:}
;1147:
;1148:void BackpackThink(gentity_t* self) {
line 1158
;1149:	gentity_t* ent2;
;1150:	
;1151:	/*(
;1152:	ent2 = G_TempEntity(self->r.currentOrigin, EV_PARTICLES_LINEAR_UP);
;1153:	ent2->s.constantLight = (255 << 8);	//constantLight is used to determine particle color
;1154:	ent2->s.eventParm = 25; //eventParm is used to determine the number of particles
;1155:	ent2->s.generic1 = 50; //generic1 is used to determine the speed of the particles
;1156:	*/
;1157:
;1158:	ent2 = G_TempEntity(self->r.currentOrigin, EV_SMOKEPUFF);
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ARGP4
CNSTI4 99
ARGI4
ADDRLP4 4
ADDRGP4 G_TempEntity
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1159
;1159:	ent2->s.constantLight = (255 << 8);
ADDRLP4 0
INDIRP4
CNSTI4 164
ADDP4
CNSTI4 65280
ASGNI4
line 1160
;1160:	ent2->s.eventParm = 10;	//eventParm is used to determine the amount of time the smoke puff exists
ADDRLP4 0
INDIRP4
CNSTI4 196
ADDP4
CNSTI4 10
ASGNI4
line 1161
;1161:	ent2->s.generic1 = 16;	//generic1 is used to determine the movement speed of the smoke puff
ADDRLP4 0
INDIRP4
CNSTI4 216
ADDP4
CNSTI4 16
ASGNI4
line 1162
;1162:	ent2->s.otherEntityNum = 1 * 32; //otherEntityNum is used to determine the size of the smokepuff. The default is 32.
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
CNSTI4 32
ASGNI4
line 1163
;1163:	ent2->s.angles[2] = 1;
ADDRLP4 0
INDIRP4
CNSTI4 136
ADDP4
CNSTF4 1065353216
ASGNF4
line 1165
;1164:
;1165:	self->nextthink = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 1166
;1166:}
LABELV $653
endproc BackpackThink 8 8
export LaunchBackpack
proc LaunchBackpack 28 8
line 1175
;1167:
;1168:/*
;1169:================
;1170:LaunchBackpack
;1171:
;1172:Spawns a backpack and tosses it forward
;1173:================
;1174:*/
;1175:gentity_t *LaunchBackpack( gitem_t *item, gentity_t *self, vec3_t velocity ) {
line 1178
;1176:	gentity_t	*dropped;
;1177:	vec3_t		origin;
;1178:	int			weapons = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 1180
;1179:
;1180:	VectorCopy(self->s.pos.trBase, origin);
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 1182
;1181:
;1182:	dropped = G_Spawn();
ADDRLP4 20
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 1184
;1183:
;1184:	dropped->s.eType = ET_ITEM;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 2
ASGNI4
line 1185
;1185:	dropped->s.modelindex = item - bg_itemlist;	// store item number in modelindex
ADDRLP4 0
INDIRP4
CNSTI4 172
ADDP4
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
ASGNI4
line 1186
;1186:	dropped->s.modelindex2 = 1; // This is non-zero is it's a dropped item
ADDRLP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTI4 1
ASGNI4
line 1188
;1187:
;1188:	dropped->classname = item->classname;
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRFP4 0
INDIRP4
INDIRP4
ASGNP4
line 1189
;1189:	dropped->item = item;
ADDRLP4 0
INDIRP4
CNSTI4 1020
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1190
;1190:	VectorSet (dropped->r.mins, -ITEM_RADIUS, -ITEM_RADIUS, -ITEM_RADIUS);
ADDRLP4 0
INDIRP4
CNSTI4 476
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 480
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 484
ADDP4
CNSTF4 3245342720
ASGNF4
line 1191
;1191:	VectorSet (dropped->r.maxs, ITEM_RADIUS, ITEM_RADIUS, ITEM_RADIUS);
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 492
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 496
ADDP4
CNSTF4 1097859072
ASGNF4
line 1192
;1192:	dropped->r.contents = CONTENTS_TRIGGER;
ADDRLP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1073741824
ASGNI4
line 1194
;1193:
;1194:	dropped->touch = Touch_Item;
ADDRLP4 0
INDIRP4
CNSTI4 780
ADDP4
ADDRGP4 Touch_Item
ASGNP4
line 1196
;1195:
;1196:	G_SetOrigin( dropped, origin );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 1197
;1197:	dropped->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 1198
;1198:	dropped->s.pos.trTime = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1199
;1199:	VectorCopy( velocity, dropped->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRB
ASGNB 12
line 1201
;1200:
;1201:	dropped->s.eFlags |= EF_BOUNCE_HALF;
ADDRLP4 24
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
line 1202
;1202:	dropped->flags = FL_DROPPED_ITEM;
ADDRLP4 0
INDIRP4
CNSTI4 576
ADDP4
CNSTI4 4096
ASGNI4
line 1211
;1203:
;1204:	// emit ligth
;1205:	// dropped->s.constantLight = (255 << 8) | (50 << 24);
;1206:
;1207:	// emit smoke
;1208:	// dropped->nextthink = level.time + 1000;
;1209:	// dropped->think = BackpackThink;
;1210:
;1211:	trap_LinkEntity (dropped);
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1216
;1212:
;1213:	//set contents of backpack
;1214:	
;1215:	//holdables
;1216:	dropped->backpackContents[0] = self->client->ps.stats[STAT_HOLDABLE_ITEM];
ADDRLP4 0
INDIRP4
CNSTI4 2112
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 188
ADDP4
INDIRI4
ASGNI4
line 1219
;1217:	
;1218:	//machinegun 
;1219:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_MACHINEGUN ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 4
BANDI4
CNSTI4 0
EQI4 $657
line 1220
;1220:		weapons |= (1 << WP_MACHINEGUN);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 4
BORI4
ASGNI4
LABELV $657
line 1221
;1221:	dropped->backpackContents[WP_MACHINEGUN] = self->client->ps.ammo[WP_MACHINEGUN];
ADDRLP4 0
INDIRP4
CNSTI4 2120
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 384
ADDP4
INDIRI4
ASGNI4
line 1224
;1222:	
;1223:	//shotgun
;1224:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_SHOTGUN ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 8
BANDI4
CNSTI4 0
EQI4 $659
line 1225
;1225:		weapons |= (1 << WP_SHOTGUN);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 8
BORI4
ASGNI4
LABELV $659
line 1226
;1226:	dropped->backpackContents[WP_SHOTGUN] = self->client->ps.ammo[WP_SHOTGUN];
ADDRLP4 0
INDIRP4
CNSTI4 2124
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 388
ADDP4
INDIRI4
ASGNI4
line 1229
;1227:
;1228:	//grenade launcher
;1229:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_GRENADE_LAUNCHER ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $661
line 1230
;1230:		weapons |= (1 << WP_GRENADE_LAUNCHER);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 16
BORI4
ASGNI4
LABELV $661
line 1231
;1231:	dropped->backpackContents[WP_GRENADE_LAUNCHER] = self->client->ps.ammo[WP_GRENADE_LAUNCHER];
ADDRLP4 0
INDIRP4
CNSTI4 2128
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 392
ADDP4
INDIRI4
ASGNI4
line 1234
;1232:
;1233:	//rocket launcher
;1234:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_ROCKET_LAUNCHER ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $663
line 1235
;1235:		weapons |= (1 << WP_ROCKET_LAUNCHER);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 32
BORI4
ASGNI4
LABELV $663
line 1236
;1236:	dropped->backpackContents[WP_ROCKET_LAUNCHER] = self->client->ps.ammo[WP_ROCKET_LAUNCHER];
ADDRLP4 0
INDIRP4
CNSTI4 2132
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 396
ADDP4
INDIRI4
ASGNI4
line 1239
;1237:
;1238:	//lightning gun
;1239:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_LIGHTNING ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $665
line 1240
;1240:		weapons |= (1 << WP_LIGHTNING);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 64
BORI4
ASGNI4
LABELV $665
line 1241
;1241:	dropped->backpackContents[WP_LIGHTNING] = self->client->ps.ammo[WP_LIGHTNING];
ADDRLP4 0
INDIRP4
CNSTI4 2136
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 400
ADDP4
INDIRI4
ASGNI4
line 1244
;1242:
;1243:	//railgun
;1244:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_RAILGUN ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $667
line 1245
;1245:		weapons |= (1 << WP_RAILGUN);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
LABELV $667
line 1246
;1246:	dropped->backpackContents[WP_RAILGUN] = self->client->ps.ammo[WP_RAILGUN];
ADDRLP4 0
INDIRP4
CNSTI4 2140
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 404
ADDP4
INDIRI4
ASGNI4
line 1249
;1247:
;1248:	//plasmagun
;1249:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_PLASMAGUN ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 256
BANDI4
CNSTI4 0
EQI4 $669
line 1250
;1250:		weapons |= (1 << WP_PLASMAGUN);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 256
BORI4
ASGNI4
LABELV $669
line 1251
;1251:	dropped->backpackContents[WP_PLASMAGUN] = self->client->ps.ammo[WP_PLASMAGUN];
ADDRLP4 0
INDIRP4
CNSTI4 2144
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 408
ADDP4
INDIRI4
ASGNI4
line 1254
;1252:
;1253:	//bfg
;1254:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_BFG ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 512
BANDI4
CNSTI4 0
EQI4 $671
line 1255
;1255:		weapons |= (1 << WP_BFG);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 512
BORI4
ASGNI4
LABELV $671
line 1256
;1256:	dropped->backpackContents[WP_BFG] = self->client->ps.ammo[WP_BFG];
ADDRLP4 0
INDIRP4
CNSTI4 2148
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
ASGNI4
line 1259
;1257:	
;1258:	//grapple
;1259:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_GRAPPLING_HOOK ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $673
line 1260
;1260:		weapons |= (1 << WP_GRAPPLING_HOOK);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1024
BORI4
ASGNI4
LABELV $673
line 1261
;1261:	dropped->backpackContents[WP_GRAPPLING_HOOK] = self->client->ps.ammo[WP_GRAPPLING_HOOK];
ADDRLP4 0
INDIRP4
CNSTI4 2152
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1264
;1262:	
;1263:	//nailgun
;1264:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_NAILGUN ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 2048
BANDI4
CNSTI4 0
EQI4 $675
line 1265
;1265:		weapons |= (1 << WP_NAILGUN);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 2048
BORI4
ASGNI4
LABELV $675
line 1266
;1266:	dropped->backpackContents[WP_NAILGUN] = self->client->ps.ammo[WP_NAILGUN];
ADDRLP4 0
INDIRP4
CNSTI4 2156
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
ASGNI4
line 1269
;1267:	
;1268:	//proxlauncher
;1269:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_PROX_LAUNCHER ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $677
line 1270
;1270:		weapons |= (1 << WP_PROX_LAUNCHER);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 4096
BORI4
ASGNI4
LABELV $677
line 1271
;1271:	dropped->backpackContents[WP_PROX_LAUNCHER] = self->client->ps.ammo[WP_PROX_LAUNCHER];
ADDRLP4 0
INDIRP4
CNSTI4 2160
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
ASGNI4
line 1274
;1272:	
;1273:	//chaingun
;1274:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_CHAINGUN ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 8192
BANDI4
CNSTI4 0
EQI4 $679
line 1275
;1275:		weapons |= (1 << WP_CHAINGUN);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 8192
BORI4
ASGNI4
LABELV $679
line 1276
;1276:	dropped->backpackContents[WP_CHAINGUN] = self->client->ps.ammo[WP_CHAINGUN];
ADDRLP4 0
INDIRP4
CNSTI4 2164
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 428
ADDP4
INDIRI4
ASGNI4
line 1279
;1277:	
;1278:	//flamethrower
;1279:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_FLAMETHROWER ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $681
line 1280
;1280:		weapons |= (1 << WP_FLAMETHROWER);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 16384
BORI4
ASGNI4
LABELV $681
line 1281
;1281:	dropped->backpackContents[WP_FLAMETHROWER] = self->client->ps.ammo[WP_FLAMETHROWER];
ADDRLP4 0
INDIRP4
CNSTI4 2168
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 432
ADDP4
INDIRI4
ASGNI4
line 1284
;1282:	
;1283:	//antimatter
;1284:	if ( self->client->ps.stats[STAT_WEAPONS] & (1 << WP_ANTIMATTER ) )
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 196
ADDP4
INDIRI4
CNSTI4 32768
BANDI4
CNSTI4 0
EQI4 $683
line 1285
;1285:		weapons |= (1 << WP_ANTIMATTER);
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 32768
BORI4
ASGNI4
LABELV $683
line 1286
;1286:	dropped->backpackContents[WP_ANTIMATTER] = self->client->ps.ammo[WP_ANTIMATTER];
ADDRLP4 0
INDIRP4
CNSTI4 2172
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ASGNI4
line 1290
;1287:
;1288:	
;1289:	//store weapons in the count attribute of the backpack
;1290:	dropped->count = weapons;
ADDRLP4 0
INDIRP4
CNSTI4 944
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 1292
;1291:
;1292:	return dropped;
ADDRLP4 0
INDIRP4
RETP4
LABELV $655
endproc LaunchBackpack 28 8
export Drop_Item
proc Drop_Item 44 16
line 1302
;1293:}
;1294:
;1295:/*
;1296:================
;1297:Drop_Item
;1298:
;1299:Spawns an item and tosses it forward
;1300:================
;1301:*/
;1302:gentity_t *Drop_Item( gentity_t *ent, gitem_t *item, float angle ) {
line 1306
;1303:	vec3_t	velocity;
;1304:	vec3_t	angles;
;1305:
;1306:	VectorCopy( ent->s.apos.trBase, angles );
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRB
ASGNB 12
line 1307
;1307:	angles[YAW] += angle;
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ASGNF4
line 1308
;1308:	angles[PITCH] = 0;	// always forward
ADDRLP4 12
CNSTF4 0
ASGNF4
line 1310
;1309:
;1310:	AngleVectors( angles, velocity, NULL, NULL );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
CNSTP4 0
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1311
;1311:	VectorScale( velocity, 150, velocity );
ADDRLP4 28
CNSTF4 1125515264
ASGNF4
ADDRLP4 0
ADDRLP4 28
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 28
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1125515264
ADDRLP4 0+8
INDIRF4
MULF4
ASGNF4
line 1312
;1312:	velocity[2] += 200 + crandom() * 50;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1112014848
CNSTF4 1073741824
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1128792064
ADDF4
ADDF4
ASGNF4
line 1314
;1313:	
;1314:	if ( item->giType == IT_BACKPACK )
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 9
NEI4 $692
line 1315
;1315:		return LaunchBackpack( item, ent, velocity );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 36
ADDRGP4 LaunchBackpack
CALLP4
ASGNP4
ADDRLP4 36
INDIRP4
RETP4
ADDRGP4 $685
JUMPV
LABELV $692
line 1317
;1316:	else
;1317:	return LaunchItem( item, ent->s.pos.trBase, velocity );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 40
ADDRGP4 LaunchItem
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
RETP4
LABELV $685
endproc Drop_Item 44 16
export Throw_Item
proc Throw_Item 40 16
line 1322
;1318:}
;1319:
;1320:// oatmeal begin
;1321:
;1322:gentity_t *Throw_Item( gentity_t *ent, gitem_t *item, float angle ) {
line 1326
;1323:	vec3_t	velocity;
;1324:	vec3_t	angles;
;1325:
;1326:	VectorCopy( ent->s.apos.trBase, angles );
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRB
ASGNB 12
line 1327
;1327:	angles[YAW] += angle;
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRFP4 8
INDIRF4
ADDF4
ASGNF4
line 1328
;1328:	angles[PITCH] = 0;	// always forward
ADDRLP4 12
CNSTF4 0
ASGNF4
line 1330
;1329:
;1330:	AngleVectors( angles, velocity, NULL, NULL );
ADDRLP4 12
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 24
CNSTP4 0
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 1331
;1331:	VectorScale( velocity, 300, velocity );
ADDRLP4 28
CNSTF4 1133903872
ASGNF4
ADDRLP4 0
ADDRLP4 28
INDIRF4
ADDRLP4 0
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 28
INDIRF4
ADDRLP4 0+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 0+8
CNSTF4 1133903872
ADDRLP4 0+8
INDIRF4
MULF4
ASGNF4
line 1332
;1332:	velocity[2] += 300 + crandom() * 50;
ADDRLP4 32
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CNSTF4 1112014848
CNSTF4 1073741824
ADDRLP4 32
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
CNSTF4 1133903872
ADDF4
ADDF4
ASGNF4
line 1334
;1333:
;1334:	ent->wait_to_pickup = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 1024
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 1335
;1335:	ent->client->ps.stats[STAT_NO_PICKUP] = 1;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 216
ADDP4
CNSTI4 1
ASGNI4
line 1337
;1336:
;1337:	return LaunchItem( item, ent->s.pos.trBase, velocity );
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 36
ADDRGP4 LaunchItem
CALLP4
ASGNP4
ADDRLP4 36
INDIRP4
RETP4
LABELV $694
endproc Throw_Item 40 16
export Use_Item
proc Use_Item 0 4
line 1349
;1338:}
;1339:
;1340:// oatmeal end
;1341:
;1342:/*
;1343:================
;1344:Use_Item
;1345:
;1346:Respawn the item
;1347:================
;1348:*/
;1349:void Use_Item( gentity_t *ent, gentity_t *other, gentity_t *activator ) {
line 1350
;1350:	RespawnItem( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 RespawnItem
CALLV
pop
line 1351
;1351:}
LABELV $702
endproc Use_Item 0 4
export FinishSpawningItem
proc FinishSpawningItem 88 28
line 1363
;1352:
;1353://======================================================================
;1354:
;1355:/*
;1356:================
;1357:FinishSpawningItem
;1358:
;1359:Traces down to find where an item should rest, instead of letting them
;1360:free fall from their spawn points
;1361:================
;1362:*/
;1363:void FinishSpawningItem( gentity_t *ent ) {
line 1367
;1364:	trace_t		tr;
;1365:	vec3_t		dest;
;1366:
;1367:	VectorSet( ent->r.mins, -ITEM_RADIUS, -ITEM_RADIUS, -ITEM_RADIUS );
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
CNSTF4 3245342720
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
CNSTF4 3245342720
ASGNF4
line 1368
;1368:	VectorSet( ent->r.maxs, ITEM_RADIUS, ITEM_RADIUS, ITEM_RADIUS );
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
CNSTF4 1097859072
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
CNSTF4 1097859072
ASGNF4
line 1370
;1369:
;1370:	ent->s.eType = ET_ITEM;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 2
ASGNI4
line 1371
;1371:	ent->s.modelindex = ent->item - bg_itemlist;		// store item number in modelindex
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 172
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
ASGNI4
line 1372
;1372:	ent->s.modelindex2 = 0; // zero indicates this isn't a dropped item
ADDRFP4 0
INDIRP4
CNSTI4 176
ADDP4
CNSTI4 0
ASGNI4
line 1374
;1373:
;1374:	ent->r.contents = CONTENTS_TRIGGER;
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1073741824
ASGNI4
line 1375
;1375:	ent->touch = Touch_Item;
ADDRFP4 0
INDIRP4
CNSTI4 780
ADDP4
ADDRGP4 Touch_Item
ASGNP4
line 1377
;1376:	// useing an item causes it to respawn
;1377:	ent->use = Use_Item;
ADDRFP4 0
INDIRP4
CNSTI4 784
ADDP4
ADDRGP4 Use_Item
ASGNP4
line 1379
;1378:
;1379:	if ( ent->spawnflags & 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $704
line 1381
;1380:		// suspended
;1381:		G_SetOrigin( ent, ent->s.origin );
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 1382
;1382:	} else {
ADDRGP4 $705
JUMPV
LABELV $704
line 1384
;1383:		// drop to floor
;1384:		VectorSet( dest, ent->s.origin[0], ent->s.origin[1], ent->s.origin[2] - 4096 );
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ASGNF4
ADDRLP4 56+4
ADDRLP4 72
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ASGNF4
ADDRLP4 56+8
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
CNSTF4 1166016512
SUBF4
ASGNF4
line 1385
;1385:		trap_Trace( &tr, ent->s.origin, ent->r.mins, ent->r.maxs, dest, ent->s.number, MASK_SOLID );
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 476
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 76
INDIRP4
INDIRI4
ARGI4
CNSTI4 1
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1386
;1386:		if ( tr.startsolid ) {
ADDRLP4 0+4
INDIRI4
CNSTI4 0
EQI4 $708
line 1387
;1387:			G_Printf ("FinishSpawningItem: %s startsolid at %s\n", ent->classname, vtos(ent->s.origin));
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 80
ADDRGP4 vtos
CALLP4
ASGNP4
ADDRGP4 $711
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRLP4 80
INDIRP4
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1388
;1388:			G_FreeEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1389
;1389:			return;
ADDRGP4 $703
JUMPV
LABELV $708
line 1393
;1390:		}
;1391:
;1392:		// allow to ride movers
;1393:		ent->s.groundEntityNum = tr.entityNum;
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
ADDRLP4 0+52
INDIRI4
ASGNI4
line 1395
;1394:
;1395:		G_SetOrigin( ent, tr.endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0+12
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 1396
;1396:	}
LABELV $705
line 1399
;1397:
;1398:	// team slaves and targeted items aren't present at start
;1399:	if ( ( ent->flags & FL_TEAMSLAVE ) || ent->targetname ) {
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
NEI4 $716
ADDRLP4 72
INDIRP4
CNSTI4 724
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $714
LABELV $716
line 1400
;1400:		ent->s.eFlags |= EF_NODRAW;
ADDRLP4 76
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 1401
;1401:		ent->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 0
ASGNI4
line 1402
;1402:		return;
ADDRGP4 $703
JUMPV
LABELV $714
line 1407
;1403:	}
;1404:
;1405:
;1406:	// powerups don't spawn in for a while (but not in elimination)
;1407:	if(g_gametype.integer != GT_ELIMINATION && g_gametype.integer != GT_CTF_ELIMINATION && g_gametype.integer != GT_LMS
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $717
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
EQI4 $717
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 11
EQI4 $717
ADDRLP4 76
CNSTI4 0
ASGNI4
ADDRGP4 g_instantgib+12
INDIRI4
ADDRLP4 76
INDIRI4
NEI4 $717
ADDRGP4 g_elimination_allgametypes+12
INDIRI4
ADDRLP4 76
INDIRI4
NEI4 $717
ADDRGP4 g_rockets+12
INDIRI4
ADDRLP4 76
INDIRI4
NEI4 $717
line 1409
;1408:                && !g_instantgib.integer && !g_elimination_allgametypes.integer && !g_rockets.integer )
;1409:	if ( ent->item->giType == IT_POWERUP ) {
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 5
NEI4 $725
line 1412
;1410:		float	respawn;
;1411:
;1412:		respawn = 1;
ADDRLP4 80
CNSTF4 1065353216
ASGNF4
line 1413
;1413:		ent->s.eFlags |= EF_NODRAW;
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 1414
;1414:		ent->r.contents = 0;
ADDRFP4 0
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 0
ASGNI4
line 1415
;1415:		ent->nextthink = level.time + respawn * 1000;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
CNSTF4 1148846080
ADDRLP4 80
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1416
;1416:		ent->think = RespawnItem;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 RespawnItem
ASGNP4
line 1417
;1417:		return;
ADDRGP4 $703
JUMPV
LABELV $725
LABELV $717
line 1421
;1418:	}
;1419:
;1420:
;1421:	trap_LinkEntity (ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1422
;1422:}
LABELV $703
endproc FinishSpawningItem 88 28
export G_CheckTeamItems
proc G_CheckTeamItems 28 12
line 1432
;1423:
;1424:
;1425:qboolean	itemRegistered[MAX_ITEMS];
;1426:
;1427:/*
;1428:==================
;1429:G_CheckTeamItems
;1430:==================
;1431:*/
;1432:void G_CheckTeamItems( void ) {
line 1435
;1433:
;1434:	// Set up team stuff
;1435:	Team_InitGame();
ADDRGP4 Team_InitGame
CALLV
pop
line 1437
;1436:
;1437:	if( g_gametype.integer == GT_CTF || g_gametype.integer == GT_CTF_ELIMINATION || g_gametype.integer == GT_DOUBLE_D) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 5
EQI4 $735
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
EQI4 $735
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 12
NEI4 $729
LABELV $735
line 1441
;1438:		gitem_t	*item;
;1439:
;1440:		// check for the two flags
;1441:		item = BG_FindItem( "Red Flag" );
ADDRGP4 $736
ARGP4
ADDRLP4 4
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1442
;1442:		if ( !item || !itemRegistered[ item - bg_itemlist ] ) {
ADDRLP4 8
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 8
INDIRU4
CNSTU4 0
EQU4 $739
ADDRLP4 8
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $737
LABELV $739
line 1443
;1443:			G_Printf( S_COLOR_YELLOW "WARNING: No team_CTF_redflag in map\n" );
ADDRGP4 $740
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1444
;1444:		}
LABELV $737
line 1445
;1445:		item = BG_FindItem( "Blue Flag" );
ADDRGP4 $741
ARGP4
ADDRLP4 12
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
line 1446
;1446:		if ( !item || !itemRegistered[ item - bg_itemlist ] ) {
ADDRLP4 16
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 16
INDIRU4
CNSTU4 0
EQU4 $744
ADDRLP4 16
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $742
LABELV $744
line 1447
;1447:			G_Printf( S_COLOR_YELLOW "WARNING: No team_CTF_blueflag in map\n" );
ADDRGP4 $745
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1448
;1448:		}
LABELV $742
line 1449
;1449:	}
LABELV $729
line 1450
;1450:	if( g_gametype.integer == GT_1FCTF ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 6
NEI4 $746
line 1454
;1451:		gitem_t	*item;
;1452:
;1453:		// check for all three flags
;1454:		item = BG_FindItem( "Red Flag" );
ADDRGP4 $736
ARGP4
ADDRLP4 4
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1455
;1455:		if ( !item || !itemRegistered[ item - bg_itemlist ] ) {
ADDRLP4 8
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 8
INDIRU4
CNSTU4 0
EQU4 $751
ADDRLP4 8
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $749
LABELV $751
line 1456
;1456:			G_Printf( S_COLOR_YELLOW "WARNING: No team_CTF_redflag in map\n" );
ADDRGP4 $740
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1457
;1457:		}
LABELV $749
line 1458
;1458:		item = BG_FindItem( "Blue Flag" );
ADDRGP4 $741
ARGP4
ADDRLP4 12
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
line 1459
;1459:		if ( !item || !itemRegistered[ item - bg_itemlist ] ) {
ADDRLP4 16
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 16
INDIRU4
CNSTU4 0
EQU4 $754
ADDRLP4 16
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $752
LABELV $754
line 1460
;1460:			G_Printf( S_COLOR_YELLOW "WARNING: No team_CTF_blueflag in map\n" );
ADDRGP4 $745
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1461
;1461:		}
LABELV $752
line 1462
;1462:		item = BG_FindItem( "Neutral Flag" );
ADDRGP4 $755
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 20
INDIRP4
ASGNP4
line 1463
;1463:		if ( !item || !itemRegistered[ item - bg_itemlist ] ) {
ADDRLP4 24
ADDRLP4 0
INDIRP4
CVPU4 4
ASGNU4
ADDRLP4 24
INDIRU4
CNSTU4 0
EQU4 $758
ADDRLP4 24
INDIRU4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
NEI4 $756
LABELV $758
line 1464
;1464:			G_Printf( S_COLOR_YELLOW "WARNING: No team_CTF_neutralflag in map\n" );
ADDRGP4 $759
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1465
;1465:		}
LABELV $756
line 1466
;1466:	}
LABELV $746
line 1468
;1467:
;1468:	if( g_gametype.integer == GT_OBELISK ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 7
NEI4 $760
line 1472
;1469:		gentity_t	*ent;
;1470:
;1471:		// check for the two obelisks
;1472:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 1473
;1473:		ent = G_Find( ent, FOFS(classname), "team_redobelisk" );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 564
ARGI4
ADDRGP4 $763
ARGP4
ADDRLP4 4
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1474
;1474:		if( !ent ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $764
line 1475
;1475:			G_Printf( S_COLOR_YELLOW "WARNING: No team_redobelisk in map\n" );
ADDRGP4 $766
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1476
;1476:		}
LABELV $764
line 1478
;1477:
;1478:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 1479
;1479:		ent = G_Find( ent, FOFS(classname), "team_blueobelisk" );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 564
ARGI4
ADDRGP4 $767
ARGP4
ADDRLP4 8
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 1480
;1480:		if( !ent ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $768
line 1481
;1481:			G_Printf( S_COLOR_YELLOW "WARNING: No team_blueobelisk in map\n" );
ADDRGP4 $770
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1482
;1482:		}
LABELV $768
line 1483
;1483:	}
LABELV $760
line 1485
;1484:
;1485:	if( g_gametype.integer == GT_HARVESTER ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 8
NEI4 $771
line 1489
;1486:		gentity_t	*ent;
;1487:
;1488:		// check for all three obelisks
;1489:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 1490
;1490:		ent = G_Find( ent, FOFS(classname), "team_redobelisk" );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 564
ARGI4
ADDRGP4 $763
ARGP4
ADDRLP4 4
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1491
;1491:		if( !ent ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $774
line 1492
;1492:			G_Printf( S_COLOR_YELLOW "WARNING: No team_redobelisk in map\n" );
ADDRGP4 $766
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1493
;1493:		}
LABELV $774
line 1495
;1494:
;1495:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 1496
;1496:		ent = G_Find( ent, FOFS(classname), "team_blueobelisk" );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 564
ARGI4
ADDRGP4 $767
ARGP4
ADDRLP4 8
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 1497
;1497:		if( !ent ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $776
line 1498
;1498:			G_Printf( S_COLOR_YELLOW "WARNING: No team_blueobelisk in map\n" );
ADDRGP4 $770
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1499
;1499:		}
LABELV $776
line 1501
;1500:
;1501:		ent = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 1502
;1502:		ent = G_Find( ent, FOFS(classname), "team_neutralobelisk" );
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 564
ARGI4
ADDRGP4 $778
ARGP4
ADDRLP4 12
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 12
INDIRP4
ASGNP4
line 1503
;1503:		if( !ent ) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $779
line 1504
;1504:			G_Printf( S_COLOR_YELLOW "WARNING: No team_neutralobelisk in map\n" );
ADDRGP4 $781
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1505
;1505:		}
LABELV $779
line 1506
;1506:	}
LABELV $771
line 1507
;1507:}
LABELV $728
endproc G_CheckTeamItems 28 12
export ClearRegisteredItems
proc ClearRegisteredItems 56 12
line 1514
;1508:
;1509:/*
;1510:==============
;1511:ClearRegisteredItems
;1512:==============
;1513:*/
;1514:void ClearRegisteredItems( void ) {
line 1515
;1515:	memset( itemRegistered, 0, sizeof( itemRegistered ) );
ADDRGP4 itemRegistered
ARGP4
CNSTI4 0
ARGI4
CNSTI4 4096
ARGI4
ADDRGP4 memset
CALLP4
pop
line 1517
;1516:
;1517:	if(g_instantgib.integer) {
ADDRGP4 g_instantgib+12
INDIRI4
CNSTI4 0
EQI4 $783
line 1518
;1518:            if(g_instantgib.integer & 2)
ADDRGP4 g_instantgib+12
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $786
line 1519
;1519:                RegisterItem( BG_FindItemForWeapon( WP_GAUNTLET ) );
CNSTI4 1
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
LABELV $786
line 1521
;1520:            //RegisterItem( BG_FindItemForWeapon( WP_MACHINEGUN ) );
;1521:            RegisterItem( BG_FindItemForWeapon( WP_RAILGUN ) );
CNSTI4 7
ARGI4
ADDRLP4 4
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1522
;1522:	}
ADDRGP4 $784
JUMPV
LABELV $783
line 1524
;1523:        else
;1524:	if(g_rockets.integer) {
ADDRGP4 g_rockets+12
INDIRI4
CNSTI4 0
EQI4 $789
line 1527
;1525:		//RegisterItem( BG_FindItemForWeapon( WP_GAUNTLET ) );
;1526:		//RegisterItem( BG_FindItemForWeapon( WP_MACHINEGUN ) );
;1527:		RegisterItem( BG_FindItemForWeapon( WP_ROCKET_LAUNCHER ) );
CNSTI4 5
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1528
;1528:	}
ADDRGP4 $790
JUMPV
LABELV $789
line 1530
;1529:	else
;1530:	{
line 1532
;1531:		// players always start with the base weapon
;1532:		RegisterItem( BG_FindItemForWeapon( WP_MACHINEGUN ) );
CNSTI4 2
ARGI4
ADDRLP4 0
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1533
;1533:		RegisterItem( BG_FindItemForWeapon( WP_GAUNTLET ) );
CNSTI4 1
ARGI4
ADDRLP4 4
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1534
;1534:		if(g_gametype.integer == GT_ELIMINATION || g_gametype.integer == GT_CTF_ELIMINATION
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $800
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
EQI4 $800
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 11
EQI4 $800
ADDRGP4 g_elimination_allgametypes+12
INDIRI4
CNSTI4 0
EQI4 $792
LABELV $800
line 1536
;1535:                        || g_gametype.integer == GT_LMS || g_elimination_allgametypes.integer)
;1536:		{
line 1537
;1537:			RegisterItem( BG_FindItemForWeapon( WP_SHOTGUN ) );
CNSTI4 3
ARGI4
ADDRLP4 8
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1538
;1538:			RegisterItem( BG_FindItemForWeapon( WP_GRENADE_LAUNCHER ) );
CNSTI4 4
ARGI4
ADDRLP4 12
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1539
;1539:			RegisterItem( BG_FindItemForWeapon( WP_ROCKET_LAUNCHER ) );
CNSTI4 5
ARGI4
ADDRLP4 16
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1540
;1540:			RegisterItem( BG_FindItemForWeapon( WP_LIGHTNING ) );
CNSTI4 6
ARGI4
ADDRLP4 20
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1541
;1541:			RegisterItem( BG_FindItemForWeapon( WP_RAILGUN ) );
CNSTI4 7
ARGI4
ADDRLP4 24
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1542
;1542:			RegisterItem( BG_FindItemForWeapon( WP_PLASMAGUN ) );
CNSTI4 8
ARGI4
ADDRLP4 28
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1543
;1543:			RegisterItem( BG_FindItemForWeapon( WP_BFG ) );
CNSTI4 9
ARGI4
ADDRLP4 32
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1544
;1544:			RegisterItem( BG_FindItemForWeapon( WP_NAILGUN ) );
CNSTI4 11
ARGI4
ADDRLP4 36
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1545
;1545:			RegisterItem( BG_FindItemForWeapon( WP_PROX_LAUNCHER ) );
CNSTI4 12
ARGI4
ADDRLP4 40
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1546
;1546:			RegisterItem( BG_FindItemForWeapon( WP_CHAINGUN ) );
CNSTI4 13
ARGI4
ADDRLP4 44
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 44
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1547
;1547:			RegisterItem( BG_FindItemForWeapon( WP_FLAMETHROWER ) );
CNSTI4 14
ARGI4
ADDRLP4 48
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 48
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1548
;1548:			RegisterItem( BG_FindItemForWeapon( WP_ANTIMATTER ) );
CNSTI4 15
ARGI4
ADDRLP4 52
ADDRGP4 BG_FindItemForWeapon
CALLP4
ASGNP4
ADDRLP4 52
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1549
;1549:		}
LABELV $792
line 1550
;1550:	}
LABELV $790
LABELV $784
line 1551
;1551:	if( g_gametype.integer == GT_HARVESTER ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 8
NEI4 $801
line 1552
;1552:		RegisterItem( BG_FindItem( "Red Cube" ) );
ADDRGP4 $804
ARGP4
ADDRLP4 0
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1553
;1553:		RegisterItem( BG_FindItem( "Blue Cube" ) );
ADDRGP4 $805
ARGP4
ADDRLP4 4
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1554
;1554:	}
LABELV $801
line 1556
;1555:
;1556:	if(g_gametype.integer == GT_DOUBLE_D ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 12
NEI4 $806
line 1557
;1557:		RegisterItem( BG_FindItem( "Point A (Blue)" ) );
ADDRGP4 $809
ARGP4
ADDRLP4 0
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1558
;1558:		RegisterItem( BG_FindItem( "Point A (Red)" ) );
ADDRGP4 $810
ARGP4
ADDRLP4 4
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1559
;1559:		RegisterItem( BG_FindItem( "Point A (White)" ) );
ADDRGP4 $811
ARGP4
ADDRLP4 8
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1560
;1560:		RegisterItem( BG_FindItem( "Point B (Blue)" ) );
ADDRGP4 $812
ARGP4
ADDRLP4 12
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1561
;1561:		RegisterItem( BG_FindItem( "Point B (Red)" ) );
ADDRGP4 $813
ARGP4
ADDRLP4 16
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1562
;1562:		RegisterItem( BG_FindItem( "Point B (White)" ) );
ADDRGP4 $814
ARGP4
ADDRLP4 20
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1563
;1563:	}
LABELV $806
line 1565
;1564:
;1565:	if(g_gametype.integer == GT_DOMINATION ) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 13
NEI4 $815
line 1566
;1566:		RegisterItem( BG_FindItem( "Neutral domination point" ) );
ADDRGP4 $818
ARGP4
ADDRLP4 0
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1567
;1567:		RegisterItem( BG_FindItem( "Red domination point" ) );
ADDRGP4 $819
ARGP4
ADDRLP4 4
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1568
;1568:		RegisterItem( BG_FindItem( "Blue domination point" ) );
ADDRGP4 $820
ARGP4
ADDRLP4 8
ADDRGP4 BG_FindItem
CALLP4
ASGNP4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1569
;1569:	}
LABELV $815
line 1572
;1570:
;1571:	// precache backpack in entityplus
;1572:	RegisterItem( BG_FindItemForBackpack() );
ADDRLP4 0
ADDRGP4 BG_FindItemForBackpack
CALLP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1573
;1573:}
LABELV $782
endproc ClearRegisteredItems 56 12
export RegisterItem
proc RegisterItem 0 4
line 1582
;1574:
;1575:/*
;1576:===============
;1577:RegisterItem
;1578:
;1579:The item will be added to the precache list
;1580:===============
;1581:*/
;1582:void RegisterItem( gitem_t *item ) {
line 1583
;1583:	if ( !item ) {
ADDRFP4 0
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $822
line 1584
;1584:		G_Printf( "RegisterItem: NULL");
ADDRGP4 $824
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 1585
;1585:	}
LABELV $822
line 1586
;1586:	itemRegistered[ item - bg_itemlist ] = qtrue;
ADDRFP4 0
INDIRP4
CVPU4 4
ADDRGP4 bg_itemlist
CVPU4 4
SUBU4
CVUI4 4
CNSTI4 56
DIVI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
CNSTI4 1
ASGNI4
line 1587
;1587:}
LABELV $821
endproc RegisterItem 0 4
export SaveRegisteredItems
proc SaveRegisteredItems 1036 8
line 1598
;1588:
;1589:
;1590:/*
;1591:===============
;1592:SaveRegisteredItems
;1593:
;1594:Write the needed items to a config string
;1595:so the client will know which ones to precache
;1596:===============
;1597:*/
;1598:void SaveRegisteredItems( void ) {
line 1603
;1599:	char	string[MAX_ITEMS+1];
;1600:	int		i;
;1601:	int		count;
;1602:
;1603:	count = 0;
ADDRLP4 1032
CNSTI4 0
ASGNI4
line 1604
;1604:	for ( i = 0 ; i < bg_numItems ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $829
JUMPV
LABELV $826
line 1605
;1605:		if ( itemRegistered[i] ) {
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 itemRegistered
ADDP4
INDIRI4
CNSTI4 0
EQI4 $830
line 1606
;1606:			count++;
ADDRLP4 1032
ADDRLP4 1032
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1607
;1607:			string[i] = '1';
ADDRLP4 0
INDIRI4
ADDRLP4 4
ADDP4
CNSTI1 49
ASGNI1
line 1608
;1608:		} else {
ADDRGP4 $831
JUMPV
LABELV $830
line 1609
;1609:			string[i] = '0';
ADDRLP4 0
INDIRI4
ADDRLP4 4
ADDP4
CNSTI1 48
ASGNI1
line 1610
;1610:		}
LABELV $831
line 1611
;1611:	}
LABELV $827
line 1604
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $829
ADDRLP4 0
INDIRI4
ADDRGP4 bg_numItems
INDIRI4
LTI4 $826
line 1612
;1612:	string[ bg_numItems ] = 0;
ADDRGP4 bg_numItems
INDIRI4
ADDRLP4 4
ADDP4
CNSTI1 0
ASGNI1
line 1614
;1613:
;1614:        G_Printf( "%i items registered\n", count );
ADDRGP4 $832
ARGP4
ADDRLP4 1032
INDIRI4
ARGI4
ADDRGP4 G_Printf
CALLV
pop
line 1615
;1615:	trap_SetConfigstring(CS_ITEMS, string);
CNSTI4 27
ARGI4
ADDRLP4 4
ARGP4
ADDRGP4 trap_SetConfigstring
CALLV
pop
line 1616
;1616:}
LABELV $825
endproc SaveRegisteredItems 1036 8
export G_ItemDisabled
proc G_ItemDisabled 132 16
line 1623
;1617:
;1618:/*
;1619:============
;1620:G_ItemDisabled
;1621:============
;1622:*/
;1623:int G_ItemDisabled( gitem_t *item ) {
line 1627
;1624:
;1625:	char name[128];
;1626:
;1627:	Com_sprintf(name, sizeof(name), "disable_%s", item->classname);
ADDRLP4 0
ARGP4
CNSTI4 128
ARGI4
ADDRGP4 $834
ARGP4
ADDRFP4 0
INDIRP4
INDIRP4
ARGP4
ADDRGP4 Com_sprintf
CALLV
pop
line 1628
;1628:	return trap_Cvar_VariableIntegerValue( name );
ADDRLP4 0
ARGP4
ADDRLP4 128
ADDRGP4 trap_Cvar_VariableIntegerValue
CALLI4
ASGNI4
ADDRLP4 128
INDIRI4
RETI4
LABELV $833
endproc G_ItemDisabled 132 16
export G_SpawnItem
proc G_SpawnItem 116 12
line 1641
;1629:}
;1630:
;1631:/*
;1632:============
;1633:G_SpawnItem
;1634:
;1635:Sets the clipping size and plants the object on the floor.
;1636:
;1637:Items can't be immediately dropped to floor, because they might
;1638:be on an entity that hasn't spawned yet.
;1639:============
;1640:*/
;1641:void G_SpawnItem (gentity_t *ent, gitem_t *item) {
line 1645
;1642:	char	buffer[MAX_QPATH];
;1643:	char	*s;
;1644:
;1645:	G_SpawnFloat( "random", "0", &ent->random );
ADDRGP4 $836
ARGP4
ADDRGP4 $837
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 1016
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1646
;1646:	G_SpawnFloat( "wait", "0", &ent->wait );
ADDRGP4 $838
ARGP4
ADDRGP4 $837
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1648
;1647:	
;1648:	ent->s.generic1 = ent->spawnflags;	//we want to know spawnflags for muting predicted pickup sounds client-side.
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 68
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
ASGNI4
line 1650
;1649:
;1650:	if((item->giType == IT_TEAM && (g_instantgib.integer || g_rockets.integer) ) || (!g_instantgib.integer && !g_rockets.integer) )
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
NEI4 $846
ADDRLP4 72
CNSTI4 0
ASGNI4
ADDRGP4 g_instantgib+12
INDIRI4
ADDRLP4 72
INDIRI4
NEI4 $845
ADDRGP4 g_rockets+12
INDIRI4
ADDRLP4 72
INDIRI4
NEI4 $845
LABELV $846
ADDRLP4 76
CNSTI4 0
ASGNI4
ADDRGP4 g_instantgib+12
INDIRI4
ADDRLP4 76
INDIRI4
NEI4 $839
ADDRGP4 g_rockets+12
INDIRI4
ADDRLP4 76
INDIRI4
NEI4 $839
LABELV $845
line 1651
;1651:	{
line 1653
;1652:		//Don't load pickups in Elimination (or maybe... gives warnings)
;1653:			RegisterItem( item );
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
line 1655
;1654:		//Registrer flags anyway in CTF Elimination:
;1655:		if (g_gametype.integer == GT_CTF_ELIMINATION && item->giType == IT_TEAM)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
NEI4 $847
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
NEI4 $847
line 1656
;1656:			RegisterItem( item );
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 RegisterItem
CALLV
pop
LABELV $847
line 1657
;1657:		if ( G_ItemDisabled(item) )
ADDRFP4 4
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 G_ItemDisabled
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
EQI4 $850
line 1658
;1658:			return;
ADDRGP4 $835
JUMPV
LABELV $850
line 1659
;1659:	}
LABELV $839
line 1660
;1660:        if(!g_persistantpowerups.integer && item->giType == IT_PERSISTANT_POWERUP)
ADDRGP4 g_persistantpowerups+12
INDIRI4
CNSTI4 0
NEI4 $852
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 7
NEI4 $852
line 1661
;1661:            return;
ADDRGP4 $835
JUMPV
LABELV $852
line 1663
;1662:
;1663:	ent->item = item;
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
ADDRFP4 4
INDIRP4
ASGNP4
line 1666
;1664:	// some movers spawn on the second frame, so delay item
;1665:	// spawns until the third frame so they can ride trains
;1666:	ent->nextthink = level.time + FRAMETIME * 2;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 200
ADDI4
ASGNI4
line 1667
;1667:	ent->think = FinishSpawningItem;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 FinishSpawningItem
ASGNP4
line 1669
;1668:
;1669:	ent->physicsBounce = 0.50;		// items are bouncy
ADDRFP4 0
INDIRP4
CNSTI4 608
ADDP4
CNSTF4 1056964608
ASGNF4
line 1670
;1670:	if (g_elimination_items.integer == 0) {
ADDRGP4 g_elimination_items+12
INDIRI4
CNSTI4 0
NEI4 $856
line 1671
;1671:	if (g_gametype.integer == GT_ELIMINATION || g_gametype.integer == GT_LMS ||
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 9
EQI4 $871
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 11
EQI4 $871
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
EQI4 $859
ADDRLP4 80
CNSTI4 0
ASGNI4
ADDRGP4 g_instantgib+12
INDIRI4
ADDRLP4 80
INDIRI4
NEI4 $871
ADDRGP4 g_rockets+12
INDIRI4
ADDRLP4 80
INDIRI4
NEI4 $871
ADDRGP4 g_elimination_allgametypes+12
INDIRI4
ADDRLP4 80
INDIRI4
NEI4 $871
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 10
NEI4 $859
LABELV $871
line 1672
;1672:			( item->giType != IT_TEAM && (g_instantgib.integer || g_rockets.integer || g_elimination_allgametypes.integer || g_gametype.integer==GT_CTF_ELIMINATION) ) ) {
line 1673
;1673:		ent->s.eFlags |= EF_NODRAW; //Invisible in elimination
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 1674
;1674:                ent->r.svFlags |= SVF_NOCLIENT;  //Don't broadcast
ADDRLP4 88
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 1675
;1675:        }
LABELV $859
line 1676
;1676:	}
LABELV $856
line 1679
;1677:
;1678:
;1679:	if(g_gametype.integer == GT_DOUBLE_D && (strcmp(ent->classname, "team_CTF_redflag")==0 || strcmp(ent->classname, "team_CTF_blueflag")==0 || strcmp(ent->classname, "team_CTF_neutralflag") == 0 || item->giType == IT_PERSISTANT_POWERUP  ))
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 12
NEI4 $872
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $581
ARGP4
ADDRLP4 80
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
EQI4 $878
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $587
ARGP4
ADDRLP4 84
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $878
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $875
ARGP4
ADDRLP4 88
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
EQI4 $878
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 7
NEI4 $872
LABELV $878
line 1680
;1680:		ent->s.eFlags |= EF_NODRAW; //Don't draw the flag models/persistant powerups
ADDRLP4 92
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
LABELV $872
line 1682
;1681:
;1682:	if( g_gametype.integer != GT_1FCTF && strcmp(ent->classname, "team_CTF_neutralflag") == 0)
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 6
EQI4 $879
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $875
ARGP4
ADDRLP4 96
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
NEI4 $879
line 1683
;1683:		ent->s.eFlags |= EF_NODRAW; // Don't draw the flag in CTF_elimination
ADDRLP4 100
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
LABELV $879
line 1685
;1684:
;1685:        if(strcmp(ent->classname, "domination_point") == 0)
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $884
ARGP4
ADDRLP4 104
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 0
NEI4 $882
line 1686
;1686:                ent->s.eFlags |= EF_NODRAW; // Don't draw domination_point. It is just a pointer to where the Domination points should be placed
ADDRLP4 108
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
LABELV $882
line 1687
;1687:	if ( item->giType == IT_POWERUP ) {
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 5
NEI4 $885
line 1688
;1688:		G_SoundIndex( "sound/items/poweruprespawn.wav" );
ADDRGP4 $488
ARGP4
ADDRGP4 G_SoundIndex
CALLI4
pop
line 1689
;1689:		G_SpawnFloat( "noglobalsound", "0", &ent->speed);
ADDRGP4 $887
ARGP4
ADDRGP4 $837
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 744
ADDP4
ARGP4
ADDRGP4 G_SpawnFloat
CALLI4
pop
line 1690
;1690:	}
LABELV $885
line 1692
;1691:
;1692:	if ( item->giType == IT_PERSISTANT_POWERUP ) {
ADDRFP4 4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 7
NEI4 $888
line 1693
;1693:		ent->s.generic1 = ent->spawnflags;
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
CNSTI4 216
ADDP4
ADDRLP4 112
INDIRP4
CNSTI4 568
ADDP4
INDIRI4
ASGNI4
line 1694
;1694:	}
LABELV $888
line 1695
;1695:}
LABELV $835
endproc G_SpawnItem 116 12
export G_BounceItem
proc G_BounceItem 64 12
line 1704
;1696:
;1697:
;1698:/*
;1699:================
;1700:G_BounceItem
;1701:
;1702:================
;1703:*/
;1704:void G_BounceItem( gentity_t *ent, trace_t *trace ) {
line 1710
;1705:	vec3_t	velocity;
;1706:	float	dot;
;1707:	int		hitTime;
;1708:
;1709:	// reflect the velocity on the trace plane
;1710:	hitTime = level.previousTime + ( level.time - level.previousTime ) * trace->fraction;
ADDRLP4 16
ADDRGP4 level+36
INDIRI4
CVIF4 4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+36
INDIRI4
SUBI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 1711
;1711:	BG_EvaluateTrajectoryDelta( &ent->s.pos, hitTime, velocity );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 1712
;1712:	dot = DotProduct( velocity, trace->plane.normal );
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1713
;1713:	VectorMA( velocity, -2*dot, trace->plane.normal, ent->s.pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 1716
;1714:
;1715:	// cut the velocity to keep from bouncing forever
;1716:	VectorScale( ent->s.pos.trDelta, ent->physicsBounce, ent->s.pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRLP4 24
INDIRP4
CNSTI4 608
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 32
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 608
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
ADDRLP4 40
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 608
ADDP4
INDIRF4
MULF4
ASGNF4
line 1719
;1717:
;1718:	// check for stop
;1719:	if ( trace->plane.normal[2] > 0 && ent->s.pos.trDelta[2] < 40 ) {
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 0
LEF4 $898
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRF4
CNSTF4 1109393408
GEF4 $898
line 1720
;1720:		trace->endpos[2] += 1.0;	// make sure it is off ground
ADDRLP4 48
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1721
;1721:		SnapVector( trace->endpos );
ADDRLP4 52
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 56
ADDRFP4 4
INDIRP4
CNSTI4 16
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 60
ADDRFP4 4
INDIRP4
CNSTI4 20
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1722
;1722:		G_SetOrigin( ent, trace->endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 1723
;1723:		ent->s.groundEntityNum = trace->entityNum;
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ASGNI4
line 1724
;1724:		return;
ADDRGP4 $890
JUMPV
LABELV $898
line 1727
;1725:	}
;1726:
;1727:	VectorAdd( ent->r.currentOrigin, trace->plane.normal, ent->r.currentOrigin);
ADDRLP4 48
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDF4
ASGNF4
line 1728
;1728:	VectorCopy( ent->r.currentOrigin, ent->s.pos.trBase );
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 60
INDIRP4
CNSTI4 528
ADDP4
INDIRB
ASGNB 12
line 1729
;1729:	ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1730
;1730:}
LABELV $890
endproc G_BounceItem 64 12
export TeleportBackpack
proc TeleportBackpack 48 12
line 1740
;1731:
;1732:/*
;1733:================
;1734:RespawnBackpack
;1735:
;1736:When a backpack falls into a nodrop area, it will be teleported towards the nearest info_backpack entity.
;1737:Returns false if no info_backpack entity to teleport to was found or supplied entity was not a backpack. Otherwise returns true.
;1738:================
;1739:*/
;1740:qboolean TeleportBackpack( gentity_t *backpack ) {
line 1746
;1741:	gentity_t	*spot;
;1742:	vec3_t		from, delta;
;1743:	float		dist, nearestDist;
;1744:	gentity_t	*nearestSpot;
;1745:
;1746:	if ( backpack->item->giType != IT_BACKPACK )
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 9
EQI4 $902
line 1747
;1747:		return qfalse;
CNSTI4 0
RETI4
ADDRGP4 $901
JUMPV
LABELV $902
line 1749
;1748:
;1749:	VectorCopy(backpack->r.currentOrigin, from);
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRB
ASGNB 12
line 1751
;1750:
;1751:	nearestDist = 999999;
ADDRLP4 32
CNSTF4 1232348144
ASGNF4
line 1752
;1752:	nearestSpot = NULL;
ADDRLP4 36
CNSTP4 0
ASGNP4
line 1753
;1753:	spot = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
ADDRGP4 $905
JUMPV
LABELV $904
line 1755
;1754:
;1755:	while ((spot = G_Find (spot, FOFS(classname), "info_backpack")) != NULL) {
line 1756
;1756:		VectorSubtract( spot->s.origin, from, delta );
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ADDRLP4 16
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ADDRLP4 16+4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
ADDRLP4 16+8
INDIRF4
SUBF4
ASGNF4
line 1757
;1757:		dist = VectorLength( delta );
ADDRLP4 4
ARGP4
ADDRLP4 44
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 28
ADDRLP4 44
INDIRF4
ASGNF4
line 1758
;1758:		if ( dist < nearestDist ) {
ADDRLP4 28
INDIRF4
ADDRLP4 32
INDIRF4
GEF4 $912
line 1759
;1759:			nearestDist = dist;
ADDRLP4 32
ADDRLP4 28
INDIRF4
ASGNF4
line 1760
;1760:			nearestSpot = spot;
ADDRLP4 36
ADDRLP4 0
INDIRP4
ASGNP4
line 1761
;1761:		}
LABELV $912
line 1762
;1762:	}
LABELV $905
line 1755
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 564
ARGI4
ADDRGP4 $907
ARGP4
ADDRLP4 40
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $904
line 1764
;1763:
;1764:	if (nearestSpot != NULL) {
ADDRLP4 36
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $914
line 1765
;1765:		G_SetOrigin(backpack, nearestSpot->s.origin);
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 36
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 1766
;1766:		backpack->s.pos.trType = TR_GRAVITY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 1767
;1767:		return qtrue;
CNSTI4 1
RETI4
ADDRGP4 $901
JUMPV
LABELV $914
line 1770
;1768:	}
;1769:
;1770:	return qfalse;
CNSTI4 0
RETI4
LABELV $901
endproc TeleportBackpack 48 12
export G_RunItem
proc G_RunItem 92 28
line 1779
;1771:}
;1772:
;1773:/*
;1774:================
;1775:G_RunItem
;1776:
;1777:================
;1778:*/
;1779:void G_RunItem( gentity_t *ent ) {
line 1787
;1780:	vec3_t		origin;
;1781:	trace_t		tr;
;1782:	int			contents;
;1783:	int			mask;
;1784:
;1785:
;1786:	// if groundentity has been set to -1, it may have been pushed off an edge
;1787:	if ( ent->s.groundEntityNum == -1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 160
ADDP4
INDIRI4
CNSTI4 -1
NEI4 $917
line 1788
;1788:		if ( ent->s.pos.trType != TR_GRAVITY ) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 5
EQI4 $919
line 1789
;1789:			ent->s.pos.trType = TR_GRAVITY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
line 1790
;1790:			ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1791
;1791:		}
LABELV $919
line 1792
;1792:	}
LABELV $917
line 1794
;1793:
;1794:	if ( ent->s.pos.trType == TR_STATIONARY ) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 0
NEI4 $922
line 1796
;1795:		// check think function
;1796:		G_RunThink( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 1797
;1797:		return;
ADDRGP4 $916
JUMPV
LABELV $922
line 1801
;1798:	}
;1799:
;1800:	// get current position
;1801:	BG_EvaluateTrajectory( &ent->s.pos, level.time, origin );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 56
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 1804
;1802:
;1803:	// trace a line from the previous position to the current position
;1804:	if ( ent->clipmask ) {
ADDRFP4 0
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
CNSTI4 0
EQI4 $925
line 1805
;1805:		mask = ent->clipmask;
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
ASGNI4
line 1806
;1806:	} else {
ADDRGP4 $926
JUMPV
LABELV $925
line 1807
;1807:		mask = MASK_PLAYERSOLID & ~CONTENTS_BODY;//MASK_SOLID;
ADDRLP4 72
CNSTI4 65537
ASGNI4
line 1808
;1808:	}
LABELV $926
line 1809
;1809:	trap_Trace( &tr, ent->r.currentOrigin, ent->r.mins, ent->r.maxs, origin,
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 528
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 476
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 56
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 552
ADDP4
INDIRI4
ARGI4
ADDRLP4 72
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 1812
;1810:		ent->r.ownerNum, mask );
;1811:
;1812:	VectorCopy( tr.endpos, ent->r.currentOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 0+12
INDIRB
ASGNB 12
line 1814
;1813:
;1814:	if ( tr.startsolid ) {
ADDRLP4 0+4
INDIRI4
CNSTI4 0
EQI4 $928
line 1815
;1815:		tr.fraction = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 1816
;1816:	}
LABELV $928
line 1818
;1817:
;1818:	trap_LinkEntity( ent );	// FIXME: avoid this for stationary?
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 1821
;1819:
;1820:	// check think function
;1821:	G_RunThink( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 1823
;1822:
;1823:	if ( tr.fraction == 1 ) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
NEF4 $932
line 1824
;1824:		return;
ADDRGP4 $916
JUMPV
LABELV $932
line 1828
;1825:	}
;1826:
;1827:	// if it is in a nodrop volume, remove it
;1828:	contents = trap_PointContents( ent->r.currentOrigin, -1 );
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ARGP4
CNSTI4 -1
ARGI4
ADDRLP4 80
ADDRGP4 trap_PointContents
CALLI4
ASGNI4
ADDRLP4 68
ADDRLP4 80
INDIRI4
ASGNI4
line 1829
;1829:	if ( contents & CONTENTS_NODROP ) {
ADDRLP4 68
INDIRI4
CVIU4 4
CNSTU4 2147483648
BANDU4
CNSTU4 0
EQU4 $935
line 1830
;1830:		if (ent->item && ent->item->giType == IT_TEAM) {
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 1020
ADDP4
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $937
ADDRLP4 84
INDIRP4
CNSTI4 40
ADDP4
INDIRI4
CNSTI4 8
NEI4 $937
line 1831
;1831:			Team_FreeEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Team_FreeEntity
CALLV
pop
line 1832
;1832:		} else {
ADDRGP4 $916
JUMPV
LABELV $937
line 1833
;1833:		if ( !TeleportBackpack( ent ) ) {
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 88
ADDRGP4 TeleportBackpack
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
NEI4 $916
line 1834
;1834:			G_FreeEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 1835
;1835:                }
line 1836
;1836:		}
line 1837
;1837:		return;
ADDRGP4 $916
JUMPV
LABELV $935
line 1840
;1838:	}
;1839:
;1840:	G_BounceItem( ent, &tr );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_BounceItem
CALLV
pop
line 1841
;1841:}
LABELV $916
endproc G_RunItem 92 28
import rq3_random
bss
export itemRegistered
align 4
LABELV itemRegistered
skip 4096
import G_admin_namelog_cleanup
import G_admin_cleanup
import G_admin_duration
import G_admin_buffer_end
import G_admin_buffer_begin
import G_admin_buffer_print
import G_admin_print
import G_admin_shuffle
import G_admin_warn
import G_admin_slap
import G_admin_orient
import G_admin_disorient
import G_admin_unlock
import G_admin_lock
import G_admin_namelog
import G_admin_nextmap
import G_admin_restart
import G_admin_rename
import G_admin_spec999
import G_admin_passvote
import G_admin_cancelvote
import G_admin_allready
import G_admin_admintest
import G_admin_help
import G_admin_showbans
import G_admin_mute
import G_admin_map
import G_admin_listplayers
import G_admin_listadmins
import G_admin_putteam
import G_admin_unban
import G_admin_ban
import G_admin_adjustban
import G_admin_kick
import G_admin_setlevel
import G_admin_time
import G_admin_parse_time
import G_admin_level
import G_admin_namelog_update
import G_admin_name_check
import G_admin_permission
import G_admin_readconfig
import G_admin_cmd_check
import G_admin_ban_check
import G_ConfigClientExcellent
import G_checkForMultiKill
import G_CheckForSpree
import G_RunStreakLogic
import G_ReadAltKillSettings
import AU_Cvar_VariableString
import G_ArenaScriptRandom
import G_ArenaScriptAutoFloat
import G_ArenaScriptAutoNonPointChar
import G_ArenaScriptAutoChar
import G_ArenaScriptAutoInt
import G_ArenaScriptFindFloat
import G_ArenaScriptFindChar
import G_ArenaScriptFindInt
import Svcmd_SaveSession_f
import Svcmd_For_f
import Svcmd_SystemCommand_f
import Svcmd_ClientCommand_f
import Svcmd_Editline_f
import Svcmd_Random_f
import Svcmd_Cvar_f
import Svcmd_Operation_f
import Svcmd_Condition_f
import Svcmd_MessageWrapper
import Svcmd_ListIP_f
import Svcmd_Chat_f
import Svcmd_DumpUser_f
import Svcmd_EjectClient_f
import Svcmd_BannerPrint_f
import Svcmd_ReplaceTexture_f
import Svcmd_CenterPrint_f
import Svcmd_TeamMessage_f
import Svcmd_Status_f
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_System
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_RealTime
import trap_Milliseconds
import trap_Error
import trap_Printf
import g_maxNameChanges
import g_minNameChangePeriod
import g_warningExpire
import g_maxWarnings
import g_publicAdminMessages
import g_specChat
import g_adminMaxBan
import g_adminTempBan
import g_adminNameProtect
import g_adminParseSay
import g_adminLog
import g_admin
import g_floodMinTime
import g_floodMaxDemerits
import g_spreeDiv
import g_altExcellent
import g_sprees
import g_lagLightning
import sv_fps
import g_truePing
import g_delagHitscan
import g_blueTeamClientNumbers
import g_redTeamClientNumbers
import g_humanplayers
import g_maxvotes
import g_voteMaxFraglimit
import g_voteMinFraglimit
import g_voteMaxTimelimit
import g_voteMinTimelimit
import g_voteGametypes
import g_voteBan
import g_voteNames
import g_mappools
import g_autonextmap
import g_catchup
import g_persistantpowerups
import g_awardpushing
import g_elimination_ctf_oneway
import g_lms_mode
import g_lms_lives
import g_ffa_gt
import g_regen
import g_vampireMaxHealth
import g_vampire
import g_instantgib
import g_rockets
import g_elimination_lockspectator
import g_eliminationred_holdable
import g_eliminationred_flight
import g_eliminationred_regen
import g_eliminationred_invis
import g_eliminationred_bsuit
import g_eliminationred_haste
import g_eliminationred_quad
import g_eliminationred_antimatter
import g_eliminationred_flame
import g_eliminationred_nail
import g_eliminationred_mine
import g_eliminationred_chain
import g_eliminationred_plasmagun
import g_eliminationred_lightning
import g_eliminationred_railgun
import g_eliminationred_rocket
import g_eliminationred_grenade
import g_eliminationred_shotgun
import g_eliminationred_machinegun
import g_eliminationred_gauntlet
import g_eliminationred_grapple
import g_eliminationred_bfg
import g_eliminationred_startArmor
import g_eliminationred_startHealth
import g_elimination_holdable
import g_elimination_items
import g_elimination_flight
import g_elimination_regen
import g_elimination_invis
import g_elimination_bsuit
import g_elimination_haste
import g_elimination_quad
import g_elimination_antimatter
import g_elimination_flame
import g_elimination_nail
import g_elimination_mine
import g_elimination_chain
import g_elimination_plasmagun
import g_elimination_lightning
import g_elimination_railgun
import g_elimination_rocket
import g_elimination_grenade
import g_elimination_shotgun
import g_elimination_machinegun
import g_elimination_gauntlet
import g_elimination_allgametypes
import g_elimination_activewarmup
import g_elimination_warmup
import g_elimination_roundtime
import g_elimination_grapple
import g_elimination_bfg
import g_elimination_startArmor
import g_elimination_startHealth
import g_elimination_selfdamage
import g_spawnprotect
import g_music
import g_proxMineTimeout
import g_enableBreath
import g_enableDust
import g_blueteam
import g_redteam
import g_singlePlayer
import g_rankings
import pmove_float
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_teamAutoJoin
import g_allowVote
import g_blood
import g_doWarmup
import g_warmup
import g_votecustom
import g_votemaps
import g_motdfile
import g_motd
import g_synchronousClients
import g_weaponTeamRespawn
import g_weaponRespawn
import g_allowSyncCutscene
import g_debugBotspawns
import g_debugVariables
import g_debugScore
import g_debugCameras
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_disableCutscenes
import g_inactivity
import g_respawntime
import g_forcerespawn
import g_quadfactor
import g_knockback
import g_speed
import g_damageModifier
import g_gravityModifier
import g_gravity
import g_needpass
import g_password
import g_friendlyFire
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_voteflags
import g_elimflags
import g_videoflags
import g_dmflags
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import g_gametype
import g_poweruprespawn
import g_megahealthrespawn
import g_holdablerespawn
import g_ammorespawn
import g_healthrespawn
import g_armorrespawn
import g_ammolimit
import g_drowndamage
import g_speedfactor
import g_jumpheight
import g_respawnwait
import g_armorprotect
import g_medkitmodifier
import g_hastefirespeed
import g_autoflagreturn
import g_droppeditemtime
import g_slowhealthregen
import g_fasthealthregen
import g_invultime
import g_invulmove
import g_portalhealth
import g_portaltimeout
import g_flagrespawn
import g_noplayerclip
import g_falldamagebig
import g_falldamagesmall
import g_randomteleport
import g_maxweaponpickup
import g_slimedamage
import g_lavadamage
import g_waterdamage
import g_medkitlimit
import g_kamikazeinf
import g_portalinf
import g_teleporterinf
import g_medkitinf
import g_invulinf
import g_kamikazeinfinf
import g_kill
import g_mapcycleposition
import g_useMapcycle
import g_mapcycle
import info_zombie
import g_randomItems
import g_accelerate
import g_slickmove
import g_overlay
import g_lavatowater
import onandroid
import eliminationrespawn
import eliminationredrespawn
import g_spectatorspeed
import g_regenarmor
import tex_newname
import tex_name
import g_roundmode
import g_scoreboardlock
import g_connectmsg
import g_currentmap
import g_tests
import cl_language
import cl_selectedmod
import g_maxEntities
import g_npcdrop
import g_safe
import g_allowgravitygun
import g_allowphysgun
import g_allowtoolgun
import g_allownoclip
import g_allowitems
import g_allownpc
import g_allowsettings
import g_allowprops
import save8_epsession
import save8_session0_lvl
import save8_session0
import save7_epsession
import save7_session0_lvl
import save7_session0
import save6_epsession
import save6_session0_lvl
import save6_session0
import save5_epsession
import save5_session0_lvl
import save5_session0
import save4_epsession
import save4_session0_lvl
import save4_session0
import save3_epsession
import save3_session0_lvl
import save3_session0
import save2_epsession
import save2_session0_lvl
import save2_session0
import save1_epsession
import save1_session0_lvl
import save1_session0
import save_epsession
import save_session0_lvl
import save_session0
import save8_curmap
import save7_curmap
import save6_curmap
import save5_curmap
import save4_curmap
import save3_curmap
import save2_curmap
import save1_curmap
import save_curmap
import g_skyColorA
import g_skyColorB
import g_skyColorG
import g_skyColorR
import g_skyShader
import g_fogColorA
import g_fogColorB
import g_fogColorG
import g_fogColorR
import g_fogInterval
import g_fogDistance
import g_fogShader
import g_fogModel
import g_teamred_pickupitems
import g_teamred_respawnwait
import g_teamred_infammo
import g_teamred_damage
import g_teamred_firespeed
import g_teamred_gravityModifier
import g_teamred_speed
import g_teamblue_pickupitems
import g_teamblue_respawnwait
import g_teamblue_infammo
import g_teamblue_damage
import g_teamblue_firespeed
import g_teamblue_gravityModifier
import g_teamblue_speed
import g_amweaponcount
import g_ftweaponcount
import g_cgweaponcount
import g_plweaponcount
import g_ngweaponcount
import g_bfgweaponcount
import g_pgweaponcount
import g_rgweaponcount
import g_lgweaponcount
import g_rlweaponcount
import g_glweaponcount
import g_sgweaponcount
import g_mgweaponcount
import g_ftammocount
import g_cgammocount
import g_plammocount
import g_ngammocount
import g_bfgammocount
import g_pgammocount
import g_rgammocount
import g_lgammocount
import g_rlammocount
import g_glammocount
import g_sgammocount
import g_mgammocount
import g_ammoregenhealthmodifier
import g_ammoregengravitymodifier
import g_ammoregenspeedfactor
import g_ammoregendamagefactor
import g_ammoregen_infammo
import g_ammoregenfirespeed
import g_guard_infammo
import g_guardgravitymodifier
import g_guardspeedfactor
import g_guarddamagefactor
import g_guardfirespeed
import g_guardhealthmodifier
import g_doublerhealthmodifier
import g_doubler_infammo
import g_doublergravitymodifier
import g_doublerspeedfactor
import g_doublerdamagefactor
import g_doublerfirespeed
import g_scouthealthmodifier
import g_scout_infammo
import g_scoutgravitymodifier
import g_scoutdamagefactor
import g_scoutfirespeed
import g_scoutspeedfactor
import g_amguided
import g_amhoming
import g_ftguided
import g_fthoming
import g_ngguided
import g_nghoming
import g_bfgguided
import g_bfghoming
import g_pgguided
import g_pghoming
import g_rlguided
import g_rlhoming
import g_glguided
import g_glhoming
import g_amknockback
import g_ambouncemodifier
import g_aminf
import g_amvampire
import g_amgravity
import g_ambounce
import g_amtimeout
import g_amdamage
import g_amsdamage
import g_amspeed
import g_amsradius
import g_amdelay
import g_ftknockback
import g_ftbouncemodifier
import g_ftinf
import g_ftvampire
import g_ftgravity
import g_ftbounce
import g_fttimeout
import g_ftdamage
import g_ftsdamage
import g_ftspeed
import g_ftsradius
import g_ftdelay
import g_cgknockback
import g_cginf
import g_cgvampire
import g_cgspread
import g_cgdamage
import g_cgdelay
import g_plknockback
import g_plinf
import g_plvampire
import g_plgravity
import g_pldamage
import g_plsdamage
import g_plsradius
import g_pltimeout
import g_plspeed
import g_pldelay
import g_ngknockback
import g_ngbouncemodifier
import g_nginf
import g_ngvampire
import g_ngrandom
import g_nggravity
import g_ngbounce
import g_ngcount
import g_ngtimeout
import g_ngdamage
import g_ngspread
import g_ngspeed
import g_ngdelay
import g_bfgknockback
import g_bfgbouncemodifier
import g_bfginf
import g_bfgvampire
import g_bfggravity
import g_bfgbounce
import g_bfgdamage
import g_bfgsdamage
import g_bfgsradius
import g_bfgtimeout
import g_bfgspeed
import g_bfgdelay
import g_pgknockback
import g_pgbouncemodifier
import g_pginf
import g_pgvampire
import g_pggravity
import g_pgbounce
import g_pgtimeout
import g_pgdamage
import g_pgsdamage
import g_pgspeed
import g_pgsradius
import g_pgdelay
import g_rgknockback
import g_rginf
import g_rgvampire
import g_rgdamage
import g_rgdelay
import g_lgknockback
import g_lginf
import g_lgvampire
import g_lgsradius
import g_lgsdamage
import g_lgexplode
import g_lgrange
import g_lgdelay
import g_lgdamage
import g_rlknockback
import g_rlbouncemodifier
import g_rlinf
import g_rlvampire
import g_rlgravity
import g_rlbounce
import g_rldamage
import g_rlsdamage
import g_rlsradius
import g_rltimeout
import g_rlspeed
import g_rldelay
import g_glknockback
import g_glbouncemodifier
import g_glinf
import g_glvampire
import g_glgravity
import g_glbounce
import g_gldamage
import g_glsdamage
import g_glsradius
import g_gltimeout
import g_glspeed
import g_gldelay
import g_sgknockback
import g_sginf
import g_sgvampire
import g_sgcount
import g_sgsradius
import g_sgsdamage
import g_sgexplode
import g_sgspread
import g_sgdamage
import g_sgdelay
import g_mgknockback
import g_mginf
import g_mgvampire
import g_mgsradius
import g_mgsdamage
import g_mgexplode
import g_mgspread
import g_mgdamage
import g_mgdelay
import g_gknockback
import g_grange
import g_gdamage
import g_gdelay
import mod_ghtimeout
import g_ghtimeout
import g_ghspeed
import g_minigame
import g_physdamage
import g_physimpulse
import g_physimpact
import cl_giantcharheight
import cl_giantcharwidth
import cl_bigcharheight
import cl_bigcharwidth
import cl_smallcharheight
import cl_smallcharwidth
import cl_propgapwidth
import cl_propspacewidth
import cl_propheight
import cl_propsmallsizescale
import mod_gravity
import mod_zsround
import mod_zround
import mod_roundmode
import mod_overlay
import mod_slickmove
import mod_accelerate
import mod_teamred_damage
import mod_teamblue_damage
import mod_invulinf
import mod_kamikazeinf
import mod_portalinf
import mod_teleporterinf
import mod_medkitinf
import mod_medkitlimit
import mod_teamblue_firespeed
import mod_teamred_firespeed
import mod_invulmove
import mod_noplayerclip
import mod_flighttime
import mod_regentime
import mod_invistime
import mod_hastetime
import mod_bsuittime
import mod_quadtime
import mod_doublerfirespeed
import mod_guardfirespeed
import mod_poweruptime
import mod_scoutfirespeed
import mod_ammoregenfirespeed
import mod_hastefirespeed
import mod_vampire_max_health
import mod_amdelay
import mod_ftdelay
import mod_cgspread
import mod_cgdelay
import mod_pldelay
import mod_ngdelay
import mod_bfgdelay
import mod_rgdelay
import mod_pgdelay
import mod_lgrange
import mod_lgdelay
import mod_rldelay
import mod_gldelay
import mod_sgcount
import mod_sgspread
import mod_sgdelay
import mod_mgspread
import mod_mgdelay
import mod_gdelay
import mod_jumpheight
import mod_ammolimit
import cmapname
import CustomModRun
import Newmodcommands
import nailgun_think
import bfg_think
import grenade_think
import rocket_think
import plasma_think
import G_SendSwepWeapons
import G_SendWeaponProperties
import g_entities
import level
import Team_ForceGesture
import Team_DD_bonusAtPoints
import Team_RemoveDoubleDominationPoints
import Team_SpawnDoubleDominationPoints
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import Team_Dom_SpawnPoints
import SelectDoubleDominationSpawnPoint
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import AddTeamScore
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import G_LoadMapfileAll_f
import G_LoadMapfile_f
import G_LoadMapfileAll
import G_LoadMapfile
import G_WriteMapfileAll_f
import G_WriteMapfile_f
import G_ClassnameAllowedAll
import G_ClassnameAllowed
import G_GetMapLockArena
import SkippedChar
import G_LoadMapcycle
import G_sendMapcycle
import G_drawMapcycle
import G_drawAllowedMaps
import G_mapIsVoteable
import G_GetMapfile
import G_GetNextMap
import G_GetNextMapCycle
import G_GotoNextMapCycle
import getCustomVote
import VoteParseCustomVotes
import allowedFraglimit
import allowedTimelimit
import allowedGametype
import allowedMap
import getMappage
import custom_vote_info
import ClientLeaving
import CountVotes
import CheckVote
import allowedVote
import PlayerStore_restore
import PlayerStore_store
import PlayerStoreInit
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import SpawnModelsOnVictoryPads
import UpdateTournamentInfo
import G_WriteSessionData
import G_InitWorldSession
import G_SaveClientSessionDataSave
import G_InitSessionData
import G_ReadSessionData
import Svcmd_GameMem_f
import G_TeamFromString
import ShuffleTeams
import CheckObeliskAttack
import Team_CheckDroppedItem
import OnSameTeam
import G_DefaultSwep
import G_CheckSwepAmmo
import G_CheckSwep
import G_RunClient
import ClientEndFrame
import ClientThink
import PrecacheBotAssets
import SetCustomWeapons
import SetSandboxWeapons
import SetUnlimitedWeapons
import SetupCustomBot
import LinkBotSpawnEntity
import DropClientSilently
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_NpcFactionProp
import G_LevelLoadComplete
import CheckTeamVote
import LogExit
import G_Error
import G_Printf
import SendYourTeamMessageToTeam
import SendDominationPointsStatusMessageToAllClients
import SendDDtimetakenMessageToAllClients
import SendEliminationMessageToAllClients
import SendScoreboardMessageToAllClients
import G_LogPrintf
import ExitLevel
import AddTournamentQueue
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import SendCustomVoteCommands
import DominationPointStatusMessage
import DominationPointNamesMessage
import RespawnTimeMessage
import EliminationMessage
import ObeliskHealthMessage
import AttackingTeamMessage
import YourTeamMessage
import DoubleDominationScoreTimeMessage
import DeathmatchScoreboardMessage
import G_SetStats
import MoveClientToIntermission
import G_StartCarExplode
import G_StartKamikaze
import KamikazeShockWave
import KamikazeRadiusDamage
import CarExplodeDamage
import KamikazeDamage
import FireWeapon
import ClientForString
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import SpawnPointIsActive
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import InitClientResp
import InitClientPersistant
import BeginIntermission
import ClientRespawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import LMSpoint
import EndEliminationRound
import DisableWeapons
import EnableWeapons
import RespawnDead
import RespawnAll
import TeamHealthCount
import TeamLivingCount
import TeamCount
import G_PredictPlayerMove
import G_UnTimeShiftClient
import G_UndoTimeShiftFor
import G_DoTimeShiftFor
import G_UnTimeShiftAllClients
import G_TimeShiftAllClients
import G_StoreHistory
import G_ResetHistory
import Laser_Think
import Laser_Gen
import Weapon_HookThink
import Weapon_HookFree
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import G_FindEntityForClientNum
import G_FindEntityForEntityNum
import G_ShowObjects
import G_HideObjects
import G_BounceProp
import G_RunProp
import G_ModProp
import DropPortalDestination
import DropPortalSource
import TeleportPlayer
import lock_touch
import trigger_teleporter_touch
import Break_Breakable
import Touch_DoorTrigger
import G_RunMover
import fire_antimatter
import fire_flame
import fire_prox
import fire_nail
import fire_nails
import fire_grapple
import fire_bfg
import fire_rocket
import fire_grenade
import fire_plasma
import fire_custom
import fire_blaster
import ProximityMine_RemoveAll
import G_RunMissile
import TossClientCubes
import TossClientPersistantPowerups
import TossClientItems
import body_die
import G_InvulnerabilityEffect
import G_RadiusDamage
import G_ExitVehicle
import G_CarDamage
import G_PropDamage
import G_Damage
import CanDamage
import target_finish_use
import target_finish_think
import BuildShaderStateConfig
import AddRemap
import G_SetTargetname
import G_SetTarget
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_GlobalSound
import G_Sound
import G_TempEntity
import G_Spawn
import findradius
import G_InitGentity
import CrosshairPointGravity
import CrosshairPointPhys
import FindEntityForGravitygun
import FindEntityForPhysgun
import VehiclePhys
import botsandbox_check
import G_CalculatePlayerScore
import G_FadeIn
import G_FadeOut
import G_Fade
import G_GetScoringMapName
import G_SetMovedir
import G_UseDeathTargets
import G_UseTargets
import G_PickTarget
import G_ScrFind
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import ArmorIndex
import Think_Weapon
import SetRespawn
import PrecacheItem
import UseHoldableItem
import writeFile_string
import writeFile_int
import readFile_string
import readFile_int
import SanitizeString
import G_ClientIsLagging
import G_ClientNumberFromString
import Cmd_AdminMessage_f
import G_FloodLimited
import G_ClientNumbersFromString
import G_SanitiseString
import G_MatchOnePlayer
import G_DecolorString
import G_SayConcatArgs
import G_SayArgv
import G_SayArgc
import NextCustomRound_f
import G_Say
import ConcatArgs
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector4
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import MiTechEntityList
import BG_TeamName
import BG_GetVehicleSettings
import BG_VehicleCheckClass
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_DefragmentMemory
import BG_Free
import BG_InitMemory
import BG_Alloc
import BG_CanAlloc
import BG_CanItemBeGrabbed
import BG_FindItemForBackpack
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindSwepAmmo
import BG_FindSwep
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import COM_LoadLevelScores
import COM_CalculatePlayerScore
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import vectoyaw
import AngleDifference
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import Q_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import Lerp
import VelocityToAxis
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import Q_snprintf
import Q_vsnprintf
import strtol
import _atoi
import atoi
import strtod
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import ifstrlenru
import strlenru
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $907
byte 1 105
byte 1 110
byte 1 102
byte 1 111
byte 1 95
byte 1 98
byte 1 97
byte 1 99
byte 1 107
byte 1 112
byte 1 97
byte 1 99
byte 1 107
byte 1 0
align 1
LABELV $887
byte 1 110
byte 1 111
byte 1 103
byte 1 108
byte 1 111
byte 1 98
byte 1 97
byte 1 108
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 0
align 1
LABELV $884
byte 1 100
byte 1 111
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 95
byte 1 112
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $875
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $838
byte 1 119
byte 1 97
byte 1 105
byte 1 116
byte 1 0
align 1
LABELV $837
byte 1 48
byte 1 0
align 1
LABELV $836
byte 1 114
byte 1 97
byte 1 110
byte 1 100
byte 1 111
byte 1 109
byte 1 0
align 1
LABELV $834
byte 1 100
byte 1 105
byte 1 115
byte 1 97
byte 1 98
byte 1 108
byte 1 101
byte 1 95
byte 1 37
byte 1 115
byte 1 0
align 1
LABELV $832
byte 1 37
byte 1 105
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 115
byte 1 32
byte 1 114
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 101
byte 1 100
byte 1 10
byte 1 0
align 1
LABELV $824
byte 1 82
byte 1 101
byte 1 103
byte 1 105
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 78
byte 1 85
byte 1 76
byte 1 76
byte 1 0
align 1
LABELV $820
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 100
byte 1 111
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 112
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $819
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 100
byte 1 111
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 112
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $818
byte 1 78
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 32
byte 1 100
byte 1 111
byte 1 109
byte 1 105
byte 1 110
byte 1 97
byte 1 116
byte 1 105
byte 1 111
byte 1 110
byte 1 32
byte 1 112
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 0
align 1
LABELV $814
byte 1 80
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 66
byte 1 32
byte 1 40
byte 1 87
byte 1 104
byte 1 105
byte 1 116
byte 1 101
byte 1 41
byte 1 0
align 1
LABELV $813
byte 1 80
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 66
byte 1 32
byte 1 40
byte 1 82
byte 1 101
byte 1 100
byte 1 41
byte 1 0
align 1
LABELV $812
byte 1 80
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 66
byte 1 32
byte 1 40
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 41
byte 1 0
align 1
LABELV $811
byte 1 80
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 65
byte 1 32
byte 1 40
byte 1 87
byte 1 104
byte 1 105
byte 1 116
byte 1 101
byte 1 41
byte 1 0
align 1
LABELV $810
byte 1 80
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 65
byte 1 32
byte 1 40
byte 1 82
byte 1 101
byte 1 100
byte 1 41
byte 1 0
align 1
LABELV $809
byte 1 80
byte 1 111
byte 1 105
byte 1 110
byte 1 116
byte 1 32
byte 1 65
byte 1 32
byte 1 40
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 41
byte 1 0
align 1
LABELV $805
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 67
byte 1 117
byte 1 98
byte 1 101
byte 1 0
align 1
LABELV $804
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 67
byte 1 117
byte 1 98
byte 1 101
byte 1 0
align 1
LABELV $781
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $778
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $770
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $767
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $766
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $763
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 111
byte 1 98
byte 1 101
byte 1 108
byte 1 105
byte 1 115
byte 1 107
byte 1 0
align 1
LABELV $759
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 110
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $755
byte 1 78
byte 1 101
byte 1 117
byte 1 116
byte 1 114
byte 1 97
byte 1 108
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $745
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $741
byte 1 66
byte 1 108
byte 1 117
byte 1 101
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $740
byte 1 94
byte 1 51
byte 1 87
byte 1 65
byte 1 82
byte 1 78
byte 1 73
byte 1 78
byte 1 71
byte 1 58
byte 1 32
byte 1 78
byte 1 111
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 32
byte 1 105
byte 1 110
byte 1 32
byte 1 109
byte 1 97
byte 1 112
byte 1 10
byte 1 0
align 1
LABELV $736
byte 1 82
byte 1 101
byte 1 100
byte 1 32
byte 1 70
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $711
byte 1 70
byte 1 105
byte 1 110
byte 1 105
byte 1 115
byte 1 104
byte 1 83
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 105
byte 1 110
byte 1 103
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 115
byte 1 32
byte 1 115
byte 1 116
byte 1 97
byte 1 114
byte 1 116
byte 1 115
byte 1 111
byte 1 108
byte 1 105
byte 1 100
byte 1 32
byte 1 97
byte 1 116
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $591
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 37
byte 1 105
byte 1 32
byte 1 37
byte 1 115
byte 1 10
byte 1 0
align 1
LABELV $587
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $581
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $493
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 115
byte 1 47
byte 1 107
byte 1 97
byte 1 109
byte 1 105
byte 1 107
byte 1 97
byte 1 122
byte 1 101
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $488
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 115
byte 1 47
byte 1 112
byte 1 111
byte 1 119
byte 1 101
byte 1 114
byte 1 117
byte 1 112
byte 1 114
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $472
byte 1 82
byte 1 101
byte 1 115
byte 1 112
byte 1 97
byte 1 119
byte 1 110
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 98
byte 1 97
byte 1 100
byte 1 32
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 109
byte 1 97
byte 1 115
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $131
byte 1 104
byte 1 97
byte 1 110
byte 1 100
byte 1 105
byte 1 99
byte 1 97
byte 1 112
byte 1 0
