export G_BounceMissile
code
proc G_BounceMissile 40 12
file "../../../code/game/g_missile.c"
line 33
;1:/*
;2:===========================================================================
;3:Copyright (C) 1999-2005 Id Software, Inc.
;4:
;5:This file is part of Quake III Arena source code.
;6:
;7:Quake III Arena source code is free software; you can redistribute it
;8:and/or modify it under the terms of the GNU General Public License as
;9:published by the Free Software Foundation; either version 2 of the License,
;10:or (at your option) any later version.
;11:
;12:Quake III Arena source code is distributed in the hope that it will be
;13:useful, but WITHOUT ANY WARRANTY; without even the implied warranty of
;14:MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;15:GNU General Public License for more details.
;16:
;17:You should have received a copy of the GNU General Public License
;18:along with Quake III Arena source code; if not, write to the Free Software
;19:Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
;20:===========================================================================
;21:*/
;22://
;23:#include "g_local.h"
;24:
;25:#define	MISSILE_PRESTEP_TIME	50
;26:
;27:/*
;28:================
;29:G_BounceMissile
;30:
;31:================
;32:*/
;33:void G_BounceMissile( gentity_t *ent, trace_t *trace ) {
line 39
;34:	vec3_t	velocity;
;35:	float	dot;
;36:	int		hitTime;
;37:
;38:	// reflect the velocity on the trace plane
;39:	hitTime = level.previousTime + ( level.time - level.previousTime ) * trace->fraction;
ADDRLP4 16
ADDRGP4 level+36
INDIRI4
CVIF4 4
ADDRGP4 level+32
INDIRI4
ADDRGP4 level+36
INDIRI4
SUBI4
CVIF4 4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 40
;40:	BG_EvaluateTrajectoryDelta( &ent->s.pos, hitTime, velocity );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 41
;41:	dot = DotProduct( velocity, trace->plane.normal );
ADDRLP4 20
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
MULF4
ADDRLP4 0+4
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
MULF4
ADDF4
ADDRLP4 0+8
INDIRF4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 42
;42:	VectorMA( velocity, -2*dot, trace->plane.normal, ent->s.pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 0+4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 0+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 3221225472
ADDRLP4 12
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 44
;43:
;44:	if ( ent->s.eFlags & EF_BOUNCE_HALF ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 32
BANDI4
CNSTI4 0
EQI4 $72
line 45
;45:		if(ent->classname == "plasma"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $76
CVPU4 4
NEU4 $74
line 46
;46:		VectorScale( ent->s.pos.trDelta, g_pgbouncemodifier.value, ent->s.pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 g_pgbouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRGP4 g_pgbouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRGP4 g_pgbouncemodifier+8
INDIRF4
MULF4
ASGNF4
line 47
;47:		}
LABELV $74
line 48
;48:		if(ent->classname == "grenade"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $82
CVPU4 4
NEU4 $80
line 49
;49:		VectorScale( ent->s.pos.trDelta, g_glbouncemodifier.value, ent->s.pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 g_glbouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRGP4 g_glbouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRGP4 g_glbouncemodifier+8
INDIRF4
MULF4
ASGNF4
line 50
;50:		}
LABELV $80
line 51
;51:		if(ent->classname == "bfg"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $88
CVPU4 4
NEU4 $86
line 52
;52:		VectorScale( ent->s.pos.trDelta, g_bfgbouncemodifier.value, ent->s.pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 g_bfgbouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRGP4 g_bfgbouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRGP4 g_bfgbouncemodifier+8
INDIRF4
MULF4
ASGNF4
line 53
;53:		}
LABELV $86
line 54
;54:		if(ent->classname == "rocket"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $94
CVPU4 4
NEU4 $92
line 55
;55:		VectorScale( ent->s.pos.trDelta, g_rlbouncemodifier.value, ent->s.pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 g_rlbouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRGP4 g_rlbouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRGP4 g_rlbouncemodifier+8
INDIRF4
MULF4
ASGNF4
line 56
;56:		}
LABELV $92
line 57
;57:		if(ent->classname == "nail"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $100
CVPU4 4
NEU4 $98
line 58
;58:		VectorScale( ent->s.pos.trDelta, g_ngbouncemodifier.value, ent->s.pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 g_ngbouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRGP4 g_ngbouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRGP4 g_ngbouncemodifier+8
INDIRF4
MULF4
ASGNF4
line 59
;59:		}
LABELV $98
line 60
;60:		if(ent->classname == "flame"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $106
CVPU4 4
NEU4 $104
line 61
;61:		VectorScale( ent->s.pos.trDelta, g_ftbouncemodifier.value, ent->s.pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 g_ftbouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRGP4 g_ftbouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRGP4 g_ftbouncemodifier+8
INDIRF4
MULF4
ASGNF4
line 62
;62:		}
LABELV $104
line 63
;63:		if(ent->classname == "antimatter"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $112
CVPU4 4
NEU4 $110
line 64
;64:		VectorScale( ent->s.pos.trDelta, g_ambouncemodifier.value, ent->s.pos.trDelta );
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRGP4 g_ambouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRGP4 g_ambouncemodifier+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRGP4 g_ambouncemodifier+8
INDIRF4
MULF4
ASGNF4
line 65
;65:		}
LABELV $110
line 67
;66:		// check for stop
;67:		if ( trace->plane.normal[2] > 0.2 && VectorLength( ent->s.pos.trDelta ) < 40 ) {
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
CNSTF4 1045220557
LEF4 $116
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 24
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 24
INDIRF4
CNSTF4 1109393408
GEF4 $116
line 68
;68:			G_SetOrigin( ent, trace->endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 69
;69:                        ent->s.time = level.time / 4;
ADDRFP4 0
INDIRP4
CNSTI4 84
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 4
DIVI4
ASGNI4
line 70
;70:			return;
ADDRGP4 $64
JUMPV
LABELV $116
line 72
;71:		}
;72:	}
LABELV $72
line 74
;73:
;74:	VectorAdd( ent->r.currentOrigin, trace->plane.normal, ent->r.currentOrigin);
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 532
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 28
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 32
ADDP4
INDIRF4
ADDF4
ASGNF4
line 75
;75:	VectorCopy( ent->r.currentOrigin, ent->s.pos.trBase );
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 528
ADDP4
INDIRB
ASGNB 12
line 76
;76:	ent->s.pos.trTime = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 77
;77:}
LABELV $64
endproc G_BounceMissile 40 12
export G_ExplodeMissile
proc G_ExplodeMissile 52 24
line 87
;78:
;79:
;80:/*
;81:================
;82:G_ExplodeMissile
;83:
;84:Explode a missile without an impact
;85:================
;86:*/
;87:void G_ExplodeMissile( gentity_t *ent ) {
line 91
;88:	vec3_t		dir;
;89:	vec3_t		origin;
;90:
;91:	BG_EvaluateTrajectory( &ent->s.pos, level.time, origin );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 92
;92:	SnapVector( origin );
ADDRLP4 0
ADDRLP4 0
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 93
;93:	G_SetOrigin( ent, origin );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 96
;94:
;95:	// we don't have a valid direction, so just point straight up
;96:	dir[0] = dir[1] = 0;
ADDRLP4 24
CNSTF4 0
ASGNF4
ADDRLP4 12+4
ADDRLP4 24
INDIRF4
ASGNF4
ADDRLP4 12
ADDRLP4 24
INDIRF4
ASGNF4
line 97
;97:	dir[2] = 1;
ADDRLP4 12+8
CNSTF4 1065353216
ASGNF4
line 99
;98:
;99:	ent->s.eType = ET_GENERAL;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 100
;100:	G_AddEvent( ent, EV_MISSILE_MISS, DirToByte( dir ) );
ADDRLP4 12
ARGP4
ADDRLP4 28
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 51
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 102
;101:
;102:	ent->freeAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 596
ADDP4
CNSTI4 1
ASGNI4
line 105
;103:
;104:	// splash damage
;105:	if ( ent->splashDamage ) {
ADDRFP4 0
INDIRP4
CNSTI4 928
ADDP4
INDIRI4
CNSTI4 0
EQI4 $128
line 106
;106:		if( G_RadiusDamage( ent->r.currentOrigin, ent->parent, ent->splashDamage, ent->splashRadius, ent
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 528
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 928
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 32
INDIRP4
CNSTI4 940
ADDP4
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 G_RadiusDamage
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $130
line 107
;107:			, ent->splashMethodOfDeath ) ) {
line 108
;108:			g_entities[ent->r.ownerNum].client->accuracy_hits++;
ADDRLP4 40
CNSTI4 2492
ADDRFP4 0
INDIRP4
CNSTI4 552
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+556
ADDP4
INDIRP4
CNSTI4 1300
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 109
;109:                        g_entities[ent->r.ownerNum].client->accuracy[ent->s.weapon][1]++;
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
ADDRLP4 44
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
CNSTI4 3
LSHI4
CNSTI4 2492
ADDRLP4 44
INDIRP4
CNSTI4 552
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+556
ADDP4
INDIRP4
CNSTI4 2196
ADDP4
ADDP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 48
INDIRP4
ADDRLP4 48
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 110
;110:		}
LABELV $130
line 111
;111:	}
LABELV $128
line 113
;112:
;113:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 114
;114:}
LABELV $120
endproc G_ExplodeMissile 52 24
proc ProximityMine_Explode 0 4
line 121
;115:
;116:/*
;117:================
;118:ProximityMine_Explode
;119:================
;120:*/
;121:static void ProximityMine_Explode( gentity_t *mine ) {
line 122
;122:	G_ExplodeMissile( mine );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_ExplodeMissile
CALLV
pop
line 124
;123:	// if the prox mine has a trigger free it
;124:	if (mine->activator) {
ADDRFP4 0
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $135
line 125
;125:		G_FreeEntity(mine->activator);
ADDRFP4 0
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 126
;126:		mine->activator = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 968
ADDP4
CNSTP4 0
ASGNP4
line 127
;127:	}
LABELV $135
line 128
;128:}
LABELV $134
endproc ProximityMine_Explode 0 4
proc ProximityMine_Die 0 0
line 135
;129:
;130:/*
;131:================
;132:ProximityMine_Die
;133:================
;134:*/
;135:static void ProximityMine_Die( gentity_t *ent, gentity_t *inflictor, gentity_t *attacker, int damage, int mod ) {
line 136
;136:	ent->think = ProximityMine_Explode;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 ProximityMine_Explode
ASGNP4
line 137
;137:	ent->nextthink = level.time + 1;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 138
;138:}
LABELV $137
endproc ProximityMine_Die 0 0
export ProximityMine_Trigger
proc ProximityMine_Trigger 44 12
line 145
;139:
;140:/*
;141:================
;142:ProximityMine_Trigger
;143:================
;144:*/
;145:void ProximityMine_Trigger( gentity_t *trigger, gentity_t *other, trace_t *trace ) {
line 149
;146:	vec3_t		v;
;147:	gentity_t	*mine;
;148:
;149:	if( !other->client ) {
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $140
line 150
;150:		return;
ADDRGP4 $139
JUMPV
LABELV $140
line 154
;151:	}
;152:
;153:	// trigger is a cube, do a distance test now to act as if it's a sphere
;154:	VectorSubtract( trigger->s.pos.trBase, other->s.pos.trBase, v );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
CNSTI4 24
ASGNI4
ADDRLP4 24
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
ADDRLP4 20
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 28
CNSTI4 28
ASGNI4
ADDRLP4 0+4
ADDRLP4 16
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRF4
ADDRLP4 24
INDIRP4
ADDRLP4 28
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 32
CNSTI4 32
ASGNI4
ADDRLP4 0+8
ADDRFP4 0
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
ADDRFP4 4
INDIRP4
ADDRLP4 32
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 155
;155:	if( VectorLength( v ) > trigger->parent->splashRadius ) {
ADDRLP4 0
ARGP4
ADDRLP4 36
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 36
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
CVIF4 4
LEF4 $144
line 156
;156:		return;
ADDRGP4 $139
JUMPV
LABELV $144
line 160
;157:	}
;158:
;159:
;160:	if ( g_gametype.integer >= GT_TEAM && g_ffa_gt!=1) {
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
LTI4 $146
ADDRGP4 g_ffa_gt
INDIRI4
CNSTI4 1
EQI4 $146
line 162
;161:		// don't trigger same team mines
;162:		if (trigger->parent->s.generic1 == other->client->sess.sessionTeam) {
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
NEI4 $149
line 163
;163:			return;
ADDRGP4 $139
JUMPV
LABELV $149
line 165
;164:		}
;165:	}
LABELV $146
line 168
;166:
;167:	// ok, now check for ability to damage so we don't get triggered thru walls, closed doors, etc...
;168:	if( !CanDamage( other, trigger->s.pos.trBase ) ) {
ADDRFP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 40
ADDRGP4 CanDamage
CALLI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 0
NEI4 $151
line 169
;169:		return;
ADDRGP4 $139
JUMPV
LABELV $151
line 173
;170:	}
;171:
;172:	// trigger the mine!
;173:	mine = trigger->parent;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ASGNP4
line 174
;174:	mine->s.loopSound = 0;
ADDRLP4 12
INDIRP4
CNSTI4 168
ADDP4
CNSTI4 0
ASGNI4
line 175
;175:	G_AddEvent( mine, EV_PROXIMITY_MINE_TRIGGER, 0 );
ADDRLP4 12
INDIRP4
ARGP4
CNSTI4 68
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 176
;176:	mine->nextthink = level.time + 500;
ADDRLP4 12
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 500
ADDI4
ASGNI4
line 178
;177:
;178:	G_FreeEntity( trigger );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_FreeEntity
CALLV
pop
line 179
;179:}
LABELV $139
endproc ProximityMine_Trigger 44 12
proc ProximityMine_Activate 68 12
line 186
;180:
;181:/*
;182:================
;183:ProximityMine_Activate
;184:================
;185:*/
;186:static void ProximityMine_Activate( gentity_t *ent ) {
line 192
;187:	gentity_t	*trigger;
;188:	float		r;
;189:        vec3_t          v1;
;190:        gentity_t       *flag;
;191:        char            *c;
;192:        qboolean        nearFlag = qfalse;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 195
;193:
;194:        // find the flag
;195:        switch (ent->s.generic1) {
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 216
ADDP4
INDIRI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 1
EQI4 $158
ADDRLP4 32
INDIRI4
CNSTI4 2
EQI4 $160
ADDRGP4 $155
JUMPV
LABELV $158
line 197
;196:        case TEAM_RED:
;197:                c = "team_CTF_redflag";
ADDRLP4 12
ADDRGP4 $159
ASGNP4
line 198
;198:                break;
ADDRGP4 $156
JUMPV
LABELV $160
line 200
;199:        case TEAM_BLUE:
;200:                c = "team_CTF_blueflag";
ADDRLP4 12
ADDRGP4 $161
ASGNP4
line 201
;201:                break;
ADDRGP4 $156
JUMPV
LABELV $155
line 203
;202:        default:
;203:            c = NULL;
ADDRLP4 12
CNSTP4 0
ASGNP4
line 204
;204:        }
LABELV $156
line 206
;205:
;206:        if(c) {
ADDRLP4 12
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $162
line 207
;207:            flag = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
ADDRGP4 $165
JUMPV
LABELV $164
line 208
;208:            while ((flag = G_Find (flag, FOFS(classname), c)) != NULL) {
line 209
;209:                    if (!(flag->flags & FL_DROPPED_ITEM))
ADDRLP4 0
INDIRP4
CNSTI4 576
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
NEI4 $167
line 210
;210:                            break;
ADDRGP4 $166
JUMPV
LABELV $167
line 211
;211:            }
LABELV $165
line 208
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 564
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 40
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $164
LABELV $166
line 213
;212:
;213:            if(flag) {
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $169
line 214
;214:                VectorSubtract(ent->r.currentOrigin,flag->r.currentOrigin , v1);
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
CNSTI4 528
ASGNI4
ADDRLP4 20
ADDRLP4 44
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 56
CNSTI4 532
ASGNI4
ADDRLP4 20+4
ADDRLP4 44
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 60
CNSTI4 536
ASGNI4
ADDRLP4 20+8
ADDRFP4 0
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
ADDRLP4 60
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 215
;215:                if(VectorLength(v1) < 500)
ADDRLP4 20
ARGP4
ADDRLP4 64
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 64
INDIRF4
CNSTF4 1140457472
GEF4 $173
line 216
;216:                    nearFlag = qtrue;
ADDRLP4 16
CNSTI4 1
ASGNI4
LABELV $173
line 217
;217:            }
LABELV $169
line 218
;218:        }
LABELV $162
line 220
;219:
;220:	ent->think = ProximityMine_Explode;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 ProximityMine_Explode
ASGNP4
line 221
;221:        if( nearFlag)
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $175
line 222
;222:            ent->nextthink = level.time + g_proxMineTimeout.integer/15;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_proxMineTimeout+12
INDIRI4
CNSTI4 15
DIVI4
ADDI4
ASGNI4
ADDRGP4 $176
JUMPV
LABELV $175
line 224
;223:        else
;224:            ent->nextthink = level.time + g_proxMineTimeout.integer;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_proxMineTimeout+12
INDIRI4
ADDI4
ASGNI4
LABELV $176
line 226
;225:
;226:	ent->takedamage = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 832
ADDP4
CNSTI4 1
ASGNI4
line 227
;227:	ent->health = 1;
ADDRFP4 0
INDIRP4
CNSTI4 808
ADDP4
CNSTI4 1
ASGNI4
line 228
;228:	ent->die = ProximityMine_Die;
ADDRFP4 0
INDIRP4
CNSTI4 792
ADDP4
ADDRGP4 ProximityMine_Die
ASGNP4
line 230
;229:
;230:	ent->s.loopSound = G_SoundIndex( "sound/weapons/proxmine/wstbtick.wav" );
ADDRGP4 $181
ARGP4
ADDRLP4 40
ADDRGP4 G_SoundIndex
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 168
ADDP4
ADDRLP4 40
INDIRI4
ASGNI4
line 233
;231:
;232:	// build the proximity trigger
;233:	trigger = G_Spawn ();
ADDRLP4 44
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 44
INDIRP4
ASGNP4
line 235
;234:
;235:	trigger->classname = "proxmine_trigger";
ADDRLP4 4
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $182
ASGNP4
line 237
;236:
;237:	r = ent->splashRadius;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 238
;238:	VectorSet( trigger->r.mins, -r, -r, -r );
ADDRLP4 4
INDIRP4
CNSTI4 476
ADDP4
ADDRLP4 8
INDIRF4
NEGF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 480
ADDP4
ADDRLP4 8
INDIRF4
NEGF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 484
ADDP4
ADDRLP4 8
INDIRF4
NEGF4
ASGNF4
line 239
;239:	VectorSet( trigger->r.maxs, r, r, r );
ADDRLP4 4
INDIRP4
CNSTI4 488
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 492
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
ADDRLP4 4
INDIRP4
CNSTI4 496
ADDP4
ADDRLP4 8
INDIRF4
ASGNF4
line 241
;240:
;241:	G_SetOrigin( trigger, ent->s.pos.trBase );
ADDRLP4 4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 243
;242:
;243:	trigger->parent = ent;
ADDRLP4 4
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 244
;244:	trigger->r.contents = CONTENTS_TRIGGER;
ADDRLP4 4
INDIRP4
CNSTI4 500
ADDP4
CNSTI4 1073741824
ASGNI4
line 245
;245:	trigger->touch = ProximityMine_Trigger;
ADDRLP4 4
INDIRP4
CNSTI4 780
ADDP4
ADDRGP4 ProximityMine_Trigger
ASGNP4
line 247
;246:
;247:	trap_LinkEntity (trigger);
ADDRLP4 4
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 250
;248:
;249:	// set pointer to trigger so the entity can be freed when the mine explodes
;250:	ent->activator = trigger;
ADDRFP4 0
INDIRP4
CNSTI4 968
ADDP4
ADDRLP4 4
INDIRP4
ASGNP4
line 251
;251:}
LABELV $154
endproc ProximityMine_Activate 68 12
proc ProximityMine_ExplodeOnPlayer 16 32
line 258
;252:
;253:/*
;254:================
;255:ProximityMine_ExplodeOnPlayer
;256:================
;257:*/
;258:static void ProximityMine_ExplodeOnPlayer( gentity_t *mine ) {
line 261
;259:	gentity_t	*player;
;260:
;261:	player = mine->enemy;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 964
ADDP4
INDIRP4
ASGNP4
line 262
;262:	player->client->ps.eFlags &= ~EF_TICKING;
ADDRLP4 4
ADDRLP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 -3
BANDI4
ASGNI4
line 264
;263:
;264:	if ( player->client->invulnerabilityTime > level.time ) {
ADDRLP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1432
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $184
line 265
;265:		G_Damage( player, mine->parent, mine->parent, vec3_origin, mine->s.origin, 1000, DAMAGE_NO_KNOCKBACK, MOD_JUICED );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 vec3_origin
ARGP4
ADDRLP4 8
INDIRP4
CNSTI4 92
ADDP4
ARGP4
CNSTI4 1000
ARGI4
CNSTI4 4
ARGI4
CNSTI4 32
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 266
;266:		player->client->invulnerabilityTime = 0;
ADDRLP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1432
ADDP4
CNSTI4 0
ASGNI4
line 267
;267:		G_TempEntity( player->client->ps.origin, EV_JUICED );
ADDRLP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 20
ADDP4
ARGP4
CNSTI4 73
ARGI4
ADDRGP4 G_TempEntity
CALLP4
pop
line 268
;268:	}
ADDRGP4 $185
JUMPV
LABELV $184
line 269
;269:	else {
line 270
;270:		G_SetOrigin( mine, player->s.pos.trBase );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 272
;271:		// make sure the explosion gets to the client
;272:		mine->r.svFlags &= ~SVF_NOCLIENT;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 -2
BANDI4
ASGNI4
line 273
;273:		mine->splashMethodOfDeath = MOD_PROXIMITY_MINE;
ADDRFP4 0
INDIRP4
CNSTI4 940
ADDP4
CNSTI4 30
ASGNI4
line 274
;274:		G_ExplodeMissile( mine );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_ExplodeMissile
CALLV
pop
line 275
;275:	}
LABELV $185
line 276
;276:}
LABELV $183
endproc ProximityMine_ExplodeOnPlayer 16 32
proc ProximityMine_Player 20 12
line 283
;277:
;278:/*
;279:================
;280:ProximityMine_Player
;281:================
;282:*/
;283:static void ProximityMine_Player( gentity_t *mine, gentity_t *player ) {
line 284
;284:	if( mine->s.eFlags & EF_NODRAW ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 128
BANDI4
CNSTI4 0
EQI4 $188
line 285
;285:		return;
ADDRGP4 $187
JUMPV
LABELV $188
line 288
;286:	}
;287:
;288:	G_AddEvent( mine, EV_PROXIMITY_MINE_STICK, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 67
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 290
;289:
;290:	if( player->s.eFlags & EF_TICKING ) {
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $190
line 291
;291:		player->activator->splashDamage += mine->splashDamage;
ADDRLP4 0
CNSTI4 928
ASGNI4
ADDRLP4 4
ADDRFP4 4
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
ADDRLP4 0
INDIRI4
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRI4
ADDP4
INDIRI4
ADDI4
ASGNI4
line 292
;292:		player->activator->splashRadius *= 1.50;
ADDRLP4 8
ADDRFP4 4
INDIRP4
CNSTI4 968
ADDP4
INDIRP4
CNSTI4 932
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTF4 1069547520
ADDRLP4 8
INDIRP4
INDIRI4
CVIF4 4
MULF4
CVFI4 4
ASGNI4
line 293
;293:		mine->think = G_FreeEntity;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_FreeEntity
ASGNP4
line 294
;294:		mine->nextthink = level.time;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 295
;295:		return;
ADDRGP4 $187
JUMPV
LABELV $190
line 298
;296:	}
;297:
;298:	player->client->ps.eFlags |= EF_TICKING;
ADDRLP4 0
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 104
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRI4
CNSTI4 2
BORI4
ASGNI4
line 299
;299:	player->activator = mine;
ADDRFP4 4
INDIRP4
CNSTI4 968
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 301
;300:
;301:	mine->s.eFlags |= EF_NODRAW;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 4
INDIRP4
ADDRLP4 4
INDIRP4
INDIRI4
CNSTI4 128
BORI4
ASGNI4
line 302
;302:	mine->r.svFlags |= SVF_NOCLIENT;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 464
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 303
;303:	mine->s.pos.trType = TR_LINEAR;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 304
;304:	VectorClear( mine->s.pos.trDelta );
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
CNSTF4 0
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
ADDRLP4 12
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 16
INDIRF4
ASGNF4
line 306
;305:
;306:	mine->enemy = player;
ADDRFP4 0
INDIRP4
CNSTI4 964
ADDP4
ADDRFP4 4
INDIRP4
ASGNP4
line 307
;307:	mine->think = ProximityMine_ExplodeOnPlayer;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 ProximityMine_ExplodeOnPlayer
ASGNP4
line 308
;308:	if ( player->client->invulnerabilityTime > level.time ) {
ADDRFP4 4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1432
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $193
line 309
;309:		mine->nextthink = level.time + 2 * 1000;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 310
;310:	}
ADDRGP4 $194
JUMPV
LABELV $193
line 311
;311:	else {
line 312
;312:		mine->nextthink = level.time + 10 * 1000;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 10000
ADDI4
ASGNI4
line 313
;313:	}
LABELV $194
line 314
;314:}
LABELV $187
endproc ProximityMine_Player 20 12
export ProximityMine_RemoveAll
proc ProximityMine_RemoveAll 8 12
line 322
;315:
;316:/*
;317: *=================
;318: *ProximityMine_RemoveAll
;319: *=================
;320: */
;321:
;322:void ProximityMine_RemoveAll() {
line 325
;323:    gentity_t	*mine;
;324:
;325:    mine = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
ADDRGP4 $200
JUMPV
LABELV $199
line 327
;326:
;327:    while ((mine = G_Find (mine, FOFS(classname), "prox mine")) != NULL) {
line 328
;328:        mine->think = ProximityMine_Explode;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 ProximityMine_Explode
ASGNP4
line 329
;329:	mine->nextthink = level.time + 1;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 330
;330:    }
LABELV $200
line 327
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 564
ARGI4
ADDRGP4 $202
ARGP4
ADDRLP4 4
ADDRGP4 G_Find
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $199
line 331
;331:}
LABELV $198
endproc ProximityMine_RemoveAll 8 12
export G_MissileImpact
proc G_MissileImpact 96 32
line 338
;332:
;333:/*
;334:================
;335:G_MissileImpact
;336:================
;337:*/
;338:void G_MissileImpact( gentity_t *ent, trace_t *trace ) {
line 340
;339:	gentity_t		*other;
;340:	qboolean		hitClient = qfalse;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 343
;341:	vec3_t			forward, impactpoint, bouncedir;
;342:	int				eFlags;
;343:	other = &g_entities[trace->entityNum];
ADDRLP4 0
CNSTI4 2492
ADDRFP4 4
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ASGNP4
line 346
;344:
;345:	// check for bounce
;346:	if ( !other->takedamage &&
ADDRLP4 48
CNSTI4 0
ASGNI4
ADDRLP4 0
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
ADDRLP4 48
INDIRI4
NEI4 $205
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 48
BANDI4
ADDRLP4 48
INDIRI4
EQI4 $205
line 347
;347:		( ent->s.eFlags & ( EF_BOUNCE | EF_BOUNCE_HALF ) ) ) {
line 348
;348:		G_BounceMissile( ent, trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_BounceMissile
CALLV
pop
line 349
;349:		if (ent->classname == "grenade"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $82
CVPU4 4
NEU4 $204
line 350
;350:		G_AddEvent( ent, EV_GRENADE_BOUNCE, 0 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 44
ARGI4
CNSTI4 0
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 351
;351:		}
line 352
;352:		return;
ADDRGP4 $204
JUMPV
LABELV $205
line 355
;353:	}
;354:
;355:	if ( other->takedamage ) {
ADDRLP4 0
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
CNSTI4 0
EQI4 $209
line 356
;356:		if ( ent->s.generic3 != WP_PROX_LAUNCHER ) {
ADDRFP4 0
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 12
EQI4 $211
line 357
;357:			if ( other->client && other->client->invulnerabilityTime > level.time ) {
ADDRLP4 52
ADDRLP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $213
ADDRLP4 52
INDIRP4
CNSTI4 1432
ADDP4
INDIRI4
ADDRGP4 level+32
INDIRI4
LEI4 $213
line 360
;358:
;359:				//
;360:				VectorCopy( ent->s.pos.trDelta, forward );
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRB
ASGNB 12
line 361
;361:				VectorNormalize( forward );
ADDRLP4 8
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 362
;362:				if (G_InvulnerabilityEffect( other, forward, ent->s.pos.trBase, impactpoint, bouncedir )) {
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 8
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 32
ARGP4
ADDRLP4 20
ARGP4
ADDRLP4 56
ADDRGP4 G_InvulnerabilityEffect
CALLI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 0
EQI4 $216
line 363
;363:					VectorCopy( bouncedir, trace->plane.normal );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 20
INDIRB
ASGNB 12
line 364
;364:					eFlags = ent->s.eFlags & EF_BOUNCE_HALF;
ADDRLP4 44
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 32
BANDI4
ASGNI4
line 365
;365:					ent->s.eFlags &= ~EF_BOUNCE_HALF;
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ADDRLP4 60
INDIRP4
INDIRI4
CNSTI4 -33
BANDI4
ASGNI4
line 366
;366:					G_BounceMissile( ent, trace );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 G_BounceMissile
CALLV
pop
line 367
;367:					ent->s.eFlags |= eFlags;
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRI4
ADDRLP4 44
INDIRI4
BORI4
ASGNI4
line 368
;368:				}
LABELV $216
line 369
;369:				ent->target_ent = other;
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 370
;370:				return;
ADDRGP4 $204
JUMPV
LABELV $213
line 372
;371:			}
;372:		}
LABELV $211
line 373
;373:	}
LABELV $209
line 375
;374:	// impact damage
;375:	if (other->takedamage) {
ADDRLP4 0
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
CNSTI4 0
EQI4 $218
line 377
;376:		// FIXME: wrong damage direction?
;377:		if ( ent->damage ) {
ADDRFP4 0
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
CNSTI4 0
EQI4 $220
line 380
;378:			vec3_t	velocity;
;379:
;380:			if( LogAccuracyHit( other, &g_entities[ent->r.ownerNum] ) ) {
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 2492
ADDRFP4 0
INDIRP4
CNSTI4 552
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRLP4 64
ADDRGP4 LogAccuracyHit
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
EQI4 $222
line 381
;381:				g_entities[ent->r.ownerNum].client->accuracy_hits++;
ADDRLP4 68
CNSTI4 2492
ADDRFP4 0
INDIRP4
CNSTI4 552
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+556
ADDP4
INDIRP4
CNSTI4 1300
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 382
;382:				hitClient = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 383
;383:                                g_entities[ent->r.ownerNum].client->accuracy[ent->s.weapon][1]++;
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
ADDRLP4 72
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
CNSTI4 3
LSHI4
CNSTI4 2492
ADDRLP4 72
INDIRP4
CNSTI4 552
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+556
ADDP4
INDIRP4
CNSTI4 2196
ADDP4
ADDP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 384
;384:			}
LABELV $222
line 385
;385:			BG_EvaluateTrajectoryDelta( &ent->s.pos, level.time, velocity );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 52
ARGP4
ADDRGP4 BG_EvaluateTrajectoryDelta
CALLV
pop
line 386
;386:			if ( VectorLength( velocity ) == 0 ) {
ADDRLP4 52
ARGP4
ADDRLP4 68
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 68
INDIRF4
CNSTF4 0
NEF4 $227
line 387
;387:				velocity[2] = 1;	// stepped on a grenade
ADDRLP4 52+8
CNSTF4 1065353216
ASGNF4
line 388
;388:			}
LABELV $227
line 389
;389:			G_Damage (other, ent, &g_entities[ent->r.ownerNum], velocity,
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
CNSTI4 2492
ADDRLP4 72
INDIRP4
CNSTI4 552
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities
ADDP4
ARGP4
ADDRLP4 52
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
ARGP4
ADDRLP4 72
INDIRP4
CNSTI4 924
ADDP4
INDIRI4
ARGI4
CNSTI4 0
ARGI4
ADDRLP4 72
INDIRP4
CNSTI4 936
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_Damage
CALLV
pop
line 392
;390:				ent->s.origin, ent->damage,
;391:				0, ent->methodOfDeath);
;392:		}
LABELV $220
line 393
;393:	}
LABELV $218
line 395
;394:
;395:	if( ent->s.generic3 == WP_PROX_LAUNCHER ) {
ADDRFP4 0
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 12
NEI4 $230
line 396
;396:		if( ent->s.pos.trType != TR_GRAVITY ) {
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
INDIRI4
CNSTI4 5
EQI4 $232
line 397
;397:			return;
ADDRGP4 $204
JUMPV
LABELV $232
line 401
;398:		}
;399:
;400:		// if it's a player, stick it on to them (flag them and remove this entity)
;401:		if( other->s.eType == ET_PLAYER && other->health > 0 ) {
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 1
NEI4 $234
ADDRLP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 0
LEI4 $234
line 402
;402:			ProximityMine_Player( ent, other );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 ProximityMine_Player
CALLV
pop
line 403
;403:			return;
ADDRGP4 $204
JUMPV
LABELV $234
line 406
;404:		}
;405:
;406:		SnapVectorTowards( trace->endpos, ent->s.pos.trBase );
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 SnapVectorTowards
CALLV
pop
line 407
;407:		G_SetOrigin( ent, trace->endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 408
;408:		ent->s.pos.trType = TR_STATIONARY;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 0
ASGNI4
line 409
;409:		VectorClear( ent->s.pos.trDelta );
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
CNSTF4 0
ASGNF4
ADDRLP4 56
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 60
INDIRF4
ASGNF4
ADDRLP4 56
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 60
INDIRF4
ASGNF4
ADDRLP4 56
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 60
INDIRF4
ASGNF4
line 411
;410:
;411:		G_AddEvent( ent, EV_PROXIMITY_MINE_STICK, trace->surfaceFlags );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 67
ARGI4
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 413
;412:
;413:		ent->think = ProximityMine_Activate;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 ProximityMine_Activate
ASGNP4
line 414
;414:		ent->nextthink = level.time + 2000;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 2000
ADDI4
ASGNI4
line 416
;415:
;416:		vectoangles( trace->plane.normal, ent->s.angles );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 417
;417:		ent->s.angles[0] += 90;
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRF4
CNSTF4 1119092736
ADDF4
ASGNF4
line 420
;418:
;419:		// link the prox mine to the other entity
;420:		ent->enemy = other;
ADDRFP4 0
INDIRP4
CNSTI4 964
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 421
;421:		ent->die = ProximityMine_Die;
ADDRFP4 0
INDIRP4
CNSTI4 792
ADDP4
ADDRGP4 ProximityMine_Die
ASGNP4
line 422
;422:		VectorCopy(trace->plane.normal, ent->movedir);
ADDRFP4 0
INDIRP4
CNSTI4 748
ADDP4
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRB
ASGNB 12
line 423
;423:		VectorSet(ent->r.mins, -4, -4, -4);
ADDRFP4 0
INDIRP4
CNSTI4 476
ADDP4
CNSTF4 3229614080
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 480
ADDP4
CNSTF4 3229614080
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 484
ADDP4
CNSTF4 3229614080
ASGNF4
line 424
;424:		VectorSet(ent->r.maxs, 4, 4, 4);
ADDRFP4 0
INDIRP4
CNSTI4 488
ADDP4
CNSTF4 1082130432
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 492
ADDP4
CNSTF4 1082130432
ASGNF4
ADDRFP4 0
INDIRP4
CNSTI4 496
ADDP4
CNSTF4 1082130432
ASGNF4
line 425
;425:		trap_LinkEntity(ent);
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 427
;426:
;427:		return;
ADDRGP4 $204
JUMPV
LABELV $230
line 430
;428:	}
;429:
;430:	if (!strcmp(ent->classname, "hook")) {
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
ARGP4
ADDRGP4 $239
ARGP4
ADDRLP4 52
ADDRGP4 strcmp
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
NEI4 $237
line 434
;431:		gentity_t *nent;
;432:		vec3_t v;
;433:
;434:		nent = G_Spawn();
ADDRLP4 72
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 56
ADDRLP4 72
INDIRP4
ASGNP4
line 435
;435:		if ( other->takedamage && other->client ) {
ADDRLP4 0
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
CNSTI4 0
EQI4 $240
ADDRLP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $240
line 437
;436:
;437:			G_AddEvent( nent, EV_MISSILE_HIT, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 80
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 56
INDIRP4
ARGP4
CNSTI4 50
ARGI4
ADDRLP4 80
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 438
;438:			nent->s.otherEntityNum = other->s.number;
ADDRLP4 56
INDIRP4
CNSTI4 152
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
line 440
;439:
;440:			ent->enemy = other;
ADDRFP4 0
INDIRP4
CNSTI4 964
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 442
;441:
;442:			v[0] = other->r.currentOrigin[0] + (other->r.mins[0] + other->r.maxs[0]) * 0.5;
ADDRLP4 60
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRLP4 0
INDIRP4
CNSTI4 476
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 488
ADDP4
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 443
;443:			v[1] = other->r.currentOrigin[1] + (other->r.mins[1] + other->r.maxs[1]) * 0.5;
ADDRLP4 60+4
ADDRLP4 0
INDIRP4
CNSTI4 532
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRLP4 0
INDIRP4
CNSTI4 480
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 492
ADDP4
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 444
;444:			v[2] = other->r.currentOrigin[2] + (other->r.mins[2] + other->r.maxs[2]) * 0.5;
ADDRLP4 60+8
ADDRLP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRF4
CNSTF4 1056964608
ADDRLP4 0
INDIRP4
CNSTI4 484
ADDP4
INDIRF4
ADDRLP4 0
INDIRP4
CNSTI4 496
ADDP4
INDIRF4
ADDF4
MULF4
ADDF4
ASGNF4
line 446
;445:
;446:			SnapVectorTowards( v, ent->s.pos.trBase );	// save net bandwidth
ADDRLP4 60
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 SnapVectorTowards
CALLV
pop
line 447
;447:		} else {
ADDRGP4 $241
JUMPV
LABELV $240
line 448
;448:			VectorCopy(trace->endpos, v);
ADDRLP4 60
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
INDIRB
ASGNB 12
line 449
;449:			G_AddEvent( nent, EV_MISSILE_MISS, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 80
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRLP4 56
INDIRP4
ARGP4
CNSTI4 51
ARGI4
ADDRLP4 80
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 450
;450:			ent->enemy = NULL;
ADDRFP4 0
INDIRP4
CNSTI4 964
ADDP4
CNSTP4 0
ASGNP4
line 451
;451:		}
LABELV $241
line 453
;452:
;453:		SnapVectorTowards( v, ent->s.pos.trBase );	// save net bandwidth
ADDRLP4 60
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 SnapVectorTowards
CALLV
pop
line 455
;454:
;455:		nent->freeAfterEvent = qtrue;
ADDRLP4 56
INDIRP4
CNSTI4 596
ADDP4
CNSTI4 1
ASGNI4
line 457
;456:		// change over to a normal entity right at the point of impact
;457:		nent->s.eType = ET_GENERAL;
ADDRLP4 56
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 458
;458:		ent->s.eType = ET_GRAPPLE;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 11
ASGNI4
line 460
;459:
;460:		G_SetOrigin( ent, v );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 60
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 461
;461:		G_SetOrigin( nent, v );
ADDRLP4 56
INDIRP4
ARGP4
ADDRLP4 60
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 463
;462:
;463:		ent->think = Weapon_HookThink;
ADDRFP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Weapon_HookThink
ASGNP4
line 464
;464:		ent->nextthink = level.time + FRAMETIME;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 100
ADDI4
ASGNI4
line 466
;465:
;466:		ent->parent->client->ps.pm_flags |= PMF_GRAPPLE_PULL;
ADDRLP4 80
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 12
ADDP4
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CNSTI4 2048
BORI4
ASGNI4
line 467
;467:		VectorCopy( ent->r.currentOrigin, ent->parent->client->ps.grapplePoint);
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 84
INDIRP4
CNSTI4 528
ADDP4
INDIRB
ASGNB 12
line 469
;468:
;469:		trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 470
;470:		trap_LinkEntity( nent );
ADDRLP4 56
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 472
;471:
;472:		return;
ADDRGP4 $204
JUMPV
LABELV $237
line 478
;473:	}
;474:
;475:	// is it cheaper in bandwidth to just remove this ent and create a new
;476:	// one, rather than changing the missile into the explosion?
;477:
;478:	if ( other->takedamage && other->client ) {
ADDRLP4 0
INDIRP4
CNSTI4 832
ADDP4
INDIRI4
CNSTI4 0
EQI4 $245
ADDRLP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $245
line 479
;479:		G_AddEvent( ent, EV_MISSILE_HIT, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 60
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 50
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 480
;480:		ent->s.otherEntityNum = other->s.number;
ADDRFP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
line 481
;481:	} else if( trace->surfaceFlags & SURF_METALSTEPS ) {
ADDRGP4 $246
JUMPV
LABELV $245
ADDRFP4 4
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
CNSTI4 4096
BANDI4
CNSTI4 0
EQI4 $247
line 482
;482:		G_AddEvent( ent, EV_MISSILE_MISS_METAL, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 60
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 52
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 483
;483:	} else {
ADDRGP4 $248
JUMPV
LABELV $247
line 484
;484:		G_AddEvent( ent, EV_MISSILE_MISS, DirToByte( trace->plane.normal ) );
ADDRFP4 4
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRLP4 60
ADDRGP4 DirToByte
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 51
ARGI4
ADDRLP4 60
INDIRI4
ARGI4
ADDRGP4 G_AddEvent
CALLV
pop
line 485
;485:	}
LABELV $248
LABELV $246
line 487
;486:
;487:	ent->freeAfterEvent = qtrue;
ADDRFP4 0
INDIRP4
CNSTI4 596
ADDP4
CNSTI4 1
ASGNI4
line 490
;488:
;489:	// change over to a normal entity right at the point of impact
;490:	ent->s.eType = ET_GENERAL;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 492
;491:
;492:	SnapVectorTowards( trace->endpos, ent->s.pos.trBase );	// save net bandwidth
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 24
ADDP4
ARGP4
ADDRGP4 SnapVectorTowards
CALLV
pop
line 494
;493:
;494:	G_SetOrigin( ent, trace->endpos );
ADDRFP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 G_SetOrigin
CALLV
pop
line 497
;495:
;496:	// splash damage (doesn't apply to person directly hit)
;497:	if ( ent->splashDamage ) {
ADDRFP4 0
INDIRP4
CNSTI4 928
ADDP4
INDIRI4
CNSTI4 0
EQI4 $249
line 498
;498:		if( G_RadiusDamage( trace->endpos, ent->parent, ent->splashDamage, ent->splashRadius,
ADDRFP4 4
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 60
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 928
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 60
INDIRP4
CNSTI4 932
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 60
INDIRP4
CNSTI4 940
ADDP4
INDIRI4
ARGI4
ADDRLP4 64
ADDRGP4 G_RadiusDamage
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
EQI4 $251
line 499
;499:			other, ent->splashMethodOfDeath ) ) {
line 500
;500:			if( !hitClient ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $253
line 501
;501:				g_entities[ent->r.ownerNum].client->accuracy_hits++;
ADDRLP4 68
CNSTI4 2492
ADDRFP4 0
INDIRP4
CNSTI4 552
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+556
ADDP4
INDIRP4
CNSTI4 1300
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 502
;502:                                g_entities[ent->r.ownerNum].client->accuracy[ent->s.weapon][1]++;
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
ADDRLP4 72
INDIRP4
CNSTI4 204
ADDP4
INDIRI4
CNSTI4 3
LSHI4
CNSTI4 2492
ADDRLP4 72
INDIRP4
CNSTI4 552
ADDP4
INDIRI4
MULI4
ADDRGP4 g_entities+556
ADDP4
INDIRP4
CNSTI4 2196
ADDP4
ADDP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 503
;503:			}
LABELV $253
line 504
;504:		}
LABELV $251
line 505
;505:	}
LABELV $249
line 507
;506:
;507:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 508
;508:}
LABELV $204
endproc G_MissileImpact 96 32
export G_RunMissile
proc G_RunMissile 96 28
line 515
;509:
;510:/*
;511:================
;512:G_RunMissile
;513:================
;514:*/
;515:void G_RunMissile( gentity_t *ent ) {
line 521
;516:	vec3_t		origin;
;517:	trace_t		tr;
;518:	int			passent;
;519:
;520:	// get current position
;521:	BG_EvaluateTrajectory( &ent->s.pos, level.time, origin );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRGP4 level+32
INDIRI4
ARGI4
ADDRLP4 60
ARGP4
ADDRGP4 BG_EvaluateTrajectory
CALLV
pop
line 524
;522:
;523:	// if this missile bounced off an invulnerability sphere
;524:	if ( ent->target_ent ) {
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $259
line 525
;525:		passent = ent->target_ent->s.number;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 740
ADDP4
INDIRP4
INDIRI4
ASGNI4
line 526
;526:	}
ADDRGP4 $260
JUMPV
LABELV $259
line 528
;527:	// prox mines that left the owner bbox will attach to anything, even the owner
;528:	else if (ent->s.generic3 == WP_PROX_LAUNCHER && ent->count) {
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 12
NEI4 $261
ADDRLP4 72
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
EQI4 $261
line 529
;529:		passent = ENTITYNUM_NONE;
ADDRLP4 56
CNSTI4 4095
ASGNI4
line 530
;530:	}
ADDRGP4 $262
JUMPV
LABELV $261
line 531
;531:	else {
line 533
;532:		// ignore interactions with the missile owner
;533:		passent = ent->r.ownerNum;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 552
ADDP4
INDIRI4
ASGNI4
line 534
;534:	}
LABELV $262
LABELV $260
line 536
;535:	// trace a line from the previous position to the current position
;536:	trap_Trace( &tr, ent->r.currentOrigin, ent->r.mins, ent->r.maxs, origin, passent, ent->clipmask );
ADDRLP4 0
ARGP4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 528
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 476
ADDP4
ARGP4
ADDRLP4 76
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 60
ARGP4
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 76
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 538
;537:
;538:	if ( tr.startsolid || tr.allsolid ) {
ADDRLP4 80
CNSTI4 0
ASGNI4
ADDRLP4 0+4
INDIRI4
ADDRLP4 80
INDIRI4
NEI4 $266
ADDRLP4 0
INDIRI4
ADDRLP4 80
INDIRI4
EQI4 $263
LABELV $266
line 540
;539:		// make sure the tr.entityNum is set to the entity we're stuck in
;540:		trap_Trace( &tr, ent->r.currentOrigin, ent->r.mins, ent->r.maxs, ent->r.currentOrigin, passent, ent->clipmask );
ADDRLP4 0
ARGP4
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
ADDRLP4 84
INDIRP4
CNSTI4 528
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 84
INDIRP4
CNSTI4 476
ADDP4
ARGP4
ADDRLP4 84
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 88
INDIRP4
ARGP4
ADDRLP4 56
INDIRI4
ARGI4
ADDRLP4 84
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 541
;541:		tr.fraction = 0;
ADDRLP4 0+8
CNSTF4 0
ASGNF4
line 542
;542:	}
ADDRGP4 $264
JUMPV
LABELV $263
line 543
;543:	else {
line 544
;544:		VectorCopy( tr.endpos, ent->r.currentOrigin );
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRLP4 0+12
INDIRB
ASGNB 12
line 545
;545:	}
LABELV $264
line 547
;546:
;547:	trap_LinkEntity( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 trap_LinkEntity
CALLV
pop
line 549
;548:
;549:	if ( tr.fraction != 1 ) {
ADDRLP4 0+8
INDIRF4
CNSTF4 1065353216
EQF4 $269
line 559
;550:		// never explode or bounce on sky
;551:/*		if ( tr.surfaceFlags & SURF_NOIMPACT ) {
;552:			// If grapple, reset owner
;553:			if (ent->parent && ent->parent->client && ent->parent->client->hook == ent) {
;554:				ent->parent->client->hook = NULL;
;555:			}
;556:			G_FreeEntity( ent );
;557:			return;
;558:		}*/
;559:		G_MissileImpact( ent, &tr );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRGP4 G_MissileImpact
CALLV
pop
line 560
;560:		if ( ent->s.eType != ET_MISSILE ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 3
EQI4 $272
line 561
;561:			return;		// exploded
ADDRGP4 $257
JUMPV
LABELV $272
line 563
;562:		}
;563:	}
LABELV $269
line 565
;564:	// if the prox mine wasn't yet outside the player body
;565:	if (ent->s.generic3 == WP_PROX_LAUNCHER && !ent->count) {
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 224
ADDP4
INDIRI4
CNSTI4 12
NEI4 $274
ADDRLP4 84
INDIRP4
CNSTI4 944
ADDP4
INDIRI4
CNSTI4 0
NEI4 $274
line 567
;566:		// check if the prox mine is outside the owner bbox
;567:		trap_Trace( &tr, ent->r.currentOrigin, ent->r.mins, ent->r.maxs, ent->r.currentOrigin, ENTITYNUM_NONE, ent->clipmask );
ADDRLP4 0
ARGP4
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
ADDRLP4 88
INDIRP4
CNSTI4 528
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ARGP4
ADDRLP4 88
INDIRP4
CNSTI4 476
ADDP4
ARGP4
ADDRLP4 88
INDIRP4
CNSTI4 488
ADDP4
ARGP4
ADDRLP4 92
INDIRP4
ARGP4
CNSTI4 4095
ARGI4
ADDRLP4 88
INDIRP4
CNSTI4 612
ADDP4
INDIRI4
ARGI4
ADDRGP4 trap_Trace
CALLV
pop
line 568
;568:		if (!tr.startsolid || tr.entityNum != ent->r.ownerNum) {
ADDRLP4 0+4
INDIRI4
CNSTI4 0
EQI4 $280
ADDRLP4 0+52
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 552
ADDP4
INDIRI4
EQI4 $276
LABELV $280
line 569
;569:			ent->count = 1;
ADDRFP4 0
INDIRP4
CNSTI4 944
ADDP4
CNSTI4 1
ASGNI4
line 570
;570:		}
LABELV $276
line 571
;571:	}
LABELV $274
line 573
;572:	// check think function after bouncing
;573:	G_RunThink( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_RunThink
CALLV
pop
line 574
;574:}
LABELV $257
endproc G_RunMissile 96 28
export G_HomingMissile
proc G_HomingMissile 96 12
line 594
;575:
;576:
;577://=============================================================================
;578:
;579:
;580:
;581:
;582:
;583:
;584:
;585:
;586:
;587:/*
;588:================
;589:G_HomingMissile
;590:================
;591:*/
;592:
;593:void G_HomingMissile( gentity_t *ent )
;594:{
line 595
;595:	gentity_t	*target = NULL;
ADDRLP4 40
CNSTP4 0
ASGNP4
line 596
;596:	gentity_t	*blip = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
ADDRGP4 $283
JUMPV
LABELV $282
line 599
;597:	vec3_t      dir, blipdir, temp_dir;
;598:
;599:	while (( blip = findradius( blip, ent->r.currentOrigin, 131072 )) != NULL ) {
line 601
;600:
;601:		if ( blip->client == NULL )
ADDRLP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $285
line 602
;602:			continue;
ADDRGP4 $283
JUMPV
LABELV $285
line 604
;603:
;604:		if ( blip == ent->parent )
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
CVPU4 4
NEU4 $287
line 605
;605:			continue;
ADDRGP4 $283
JUMPV
LABELV $287
line 607
;606:
;607:		if ( blip->health<=0 )
ADDRLP4 0
INDIRP4
CNSTI4 808
ADDP4
INDIRI4
CNSTI4 0
GTI4 $289
line 608
;608:			continue;
ADDRGP4 $283
JUMPV
LABELV $289
line 610
;609:
;610:		if ( blip->client->sess.sessionTeam == TEAM_SPECTATOR )
ADDRLP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
CNSTI4 3
NEI4 $291
line 611
;611:			continue;
ADDRGP4 $283
JUMPV
LABELV $291
line 613
;612:
;613:		if ((g_gametype.integer >= GT_TEAM && g_ffa_gt!=1) &&
ADDRGP4 g_gametype+12
INDIRI4
CNSTI4 4
LTI4 $293
ADDRGP4 g_ffa_gt
INDIRI4
CNSTI4 1
EQI4 $293
ADDRLP4 44
CNSTI4 556
ASGNI4
ADDRLP4 48
CNSTI4 1032
ASGNI4
ADDRLP4 0
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ADDRLP4 44
INDIRI4
ADDP4
INDIRP4
ADDRLP4 48
INDIRI4
ADDP4
INDIRI4
NEI4 $293
line 615
;614:			blip->client->sess.sessionTeam == ent->parent->client->sess.sessionTeam )
;615:			continue;
ADDRGP4 $283
JUMPV
LABELV $293
line 617
;616:
;617:		VectorSubtract( blip->r.currentOrigin, ent->r.currentOrigin, blipdir );
ADDRLP4 56
CNSTI4 528
ASGNI4
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
ADDRLP4 56
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 64
CNSTI4 532
ASGNI4
ADDRLP4 4+4
ADDRLP4 0
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRF4
ADDRLP4 60
INDIRP4
ADDRLP4 64
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 68
CNSTI4 536
ASGNI4
ADDRLP4 4+8
ADDRLP4 0
INDIRP4
ADDRLP4 68
INDIRI4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
ADDRLP4 68
INDIRI4
ADDP4
INDIRF4
SUBF4
ASGNF4
line 618
;618:		blipdir[2] += 16;
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
CNSTF4 1098907648
ADDF4
ASGNF4
line 620
;619:
;620:		if (( target == NULL ) || ( VectorLength( blipdir ) < VectorLength( dir ) )) {
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $301
ADDRLP4 4
ARGP4
ADDRLP4 72
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 28
ARGP4
ADDRLP4 76
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 72
INDIRF4
ADDRLP4 76
INDIRF4
GEF4 $299
LABELV $301
line 623
;621:
;622:			//if new target is the nearest
;623:			VectorCopy( blipdir, temp_dir );
ADDRLP4 16
ADDRLP4 4
INDIRB
ASGNB 12
line 624
;624:			VectorNormalize( temp_dir );
ADDRLP4 16
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 625
;625:			VectorAdd( temp_dir, ent->r.currentAngles, temp_dir );
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 16
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 540
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 16+4
INDIRF4
ADDRLP4 80
INDIRP4
CNSTI4 544
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 16+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 548
ADDP4
INDIRF4
ADDF4
ASGNF4
line 631
;626:
;627:			//now the longer temp_dir length is the more straight path for the rocket.
;628:			//if ( VectorLength( temp_dir ) >0.8 ) {
;629:
;630:				//if this 1.6 were smaller,the rocket also get to target the enemy on his back.
;631:				target = blip;
ADDRLP4 40
ADDRLP4 0
INDIRP4
ASGNP4
line 632
;632:				VectorCopy( blipdir, dir );
ADDRLP4 28
ADDRLP4 4
INDIRB
ASGNB 12
line 634
;633:			//}
;634:		}
LABELV $299
line 635
;635:	}
LABELV $283
line 599
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 528
ADDP4
ARGP4
CNSTF4 1207959552
ARGF4
ADDRLP4 44
ADDRGP4 findradius
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 44
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $282
line 637
;636:
;637:	if ( target == NULL ) {
ADDRLP4 40
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $306
line 638
;638:		ent->nextthink = level.time + 1000;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 1000
ADDI4
ASGNI4
line 639
;639:	} else {
ADDRGP4 $307
JUMPV
LABELV $306
line 640
;640:		ent->s.pos.trTime=level.time;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 641
;641:		VectorCopy( ent->r.currentOrigin, ent->s.pos.trBase );
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 48
INDIRP4
CNSTI4 528
ADDP4
INDIRB
ASGNB 12
line 644
;642:
;643:		//for exact trajectory calculation, set current point to base.
;644:		VectorNormalize( dir );
ADDRLP4 28
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 645
;645:		VectorScale( dir, 1.05,dir );
ADDRLP4 52
CNSTF4 1065772646
ASGNF4
ADDRLP4 28
ADDRLP4 52
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 52
INDIRF4
ADDRLP4 28+4
INDIRF4
MULF4
ASGNF4
ADDRLP4 28+8
CNSTF4 1065772646
ADDRLP4 28+8
INDIRF4
MULF4
ASGNF4
line 646
;646:		VectorAdd( dir, ent->r.currentAngles, dir );
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 28
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 540
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 28+4
ADDRLP4 28+4
INDIRF4
ADDRLP4 56
INDIRP4
CNSTI4 544
ADDP4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 28+8
ADDRLP4 28+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 548
ADDP4
INDIRF4
ADDF4
ASGNF4
line 650
;647:
;648:		// this 0.3 is swing rate.this value is cheap,I think.try 0.8 or 1.5.
;649:		// if you want fastest swing,comment out these 3 lines.
;650:		VectorNormalize( dir );
ADDRLP4 28
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 651
;651:		VectorCopy( dir, ent->r.currentAngles );
ADDRFP4 0
INDIRP4
CNSTI4 540
ADDP4
ADDRLP4 28
INDIRB
ASGNB 12
line 654
;652:
;653:		//locate nozzle to target
;654:		VectorScale ( dir, VectorLength( ent->s.pos.trDelta )*1.05, ent->s.pos.trDelta );
ADDRLP4 60
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 60
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 60
INDIRP4
ADDRLP4 28
INDIRF4
CNSTF4 1065772646
ADDRLP4 64
INDIRF4
MULF4
MULF4
ASGNF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 72
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 68
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 28+4
INDIRF4
CNSTF4 1065772646
ADDRLP4 72
INDIRF4
MULF4
MULF4
ASGNF4
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 36
ADDP4
ARGP4
ADDRLP4 80
ADDRGP4 VectorLength
CALLF4
ASGNF4
ADDRLP4 76
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 28+8
INDIRF4
CNSTF4 1065772646
ADDRLP4 80
INDIRF4
MULF4
MULF4
ASGNF4
line 658
;655:
;656:		//trDelta is actual vector for movement.Because the rockets slow down
;657:		// when swing large angle,so accelalate them.
;658:		SnapVector ( ent->s.pos.trDelta ); // save net bandwidth
ADDRLP4 84
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 88
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 88
INDIRP4
ADDRLP4 88
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 92
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 659
;659:		ent->nextthink = level.time + 180;	//decrease this value also makes fast swing.
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 180
ADDI4
ASGNI4
line 660
;660:	}
LABELV $307
line 665
;661:
;662:       /*if ( ent->parent->client->ps.stats[STAT_HEALTH] <= 0 || ent->parent->health <= 0 )
;663:           G_ExplodeMissile( ent );*/
;664:
;665:       if ( level.time > ent->wait ) {
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
LEF4 $321
line 666
;666:           G_ExplodeMissile( ent );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_ExplodeMissile
CALLV
pop
line 667
;667:	}
LABELV $321
line 668
;668:}
LABELV $281
endproc G_HomingMissile 96 12
export Guided_Missile_Think
proc Guided_Missile_Think 76 20
line 680
;669:
;670:
;671:
;672:
;673:
;674:/*
;675:================
;676:Guided_Missile_Think
;677:================
;678:*/
;679:void Guided_Missile_Think( gentity_t *missile )
;680:{
line 685
;681:	vec3_t forward, right, up;
;682:	vec3_t muzzle;
;683:	float  dist;
;684:
;685:	gentity_t *player = missile->parent;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 640
ADDP4
INDIRP4
ASGNP4
line 688
;686:
;687:	// If our owner can't be found, just return
;688:	if ( !player ) {
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $325
line 689
;689:		G_Printf ("Guided_Missile_Think : missile has no owner!\n");
ADDRGP4 $327
ARGP4
ADDRGP4 G_Printf
CALLV
pop
line 690
;690:		return;
ADDRGP4 $324
JUMPV
LABELV $325
line 694
;691:	}
;692:
;693:	// Get our forward, right, up vector from the view angle of the player
;694:	AngleVectors ( player->client->ps.viewangles, forward, right, up );
ADDRLP4 24
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 152
ADDP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 40
ARGP4
ADDRGP4 AngleVectors
CALLV
pop
line 697
;695:
;696:	// Calculate the player's eyes origin, and store this origin in muzzle
;697:	CalcMuzzlePoint ( player, forward, right, up, muzzle );
ADDRLP4 24
INDIRP4
ARGP4
ADDRLP4 0
ARGP4
ADDRLP4 28
ARGP4
ADDRLP4 40
ARGP4
ADDRLP4 12
ARGP4
ADDRGP4 CalcMuzzlePoint
CALLV
pop
line 700
;698:
;699:	// Tells the engine that our movement starts at the current missile's origin
;700:	VectorCopy ( missile->r.currentOrigin, missile->s.pos.trBase );
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
CNSTI4 24
ADDP4
ADDRLP4 56
INDIRP4
CNSTI4 528
ADDP4
INDIRB
ASGNB 12
line 703
;701:
;702:	// Trajectory type setup (linear move - fly)
;703:	missile->s.pos.trType = TR_LINEAR;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 704
;704:	missile->s.pos.trTime = level.time - 50;
ADDRFP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
SUBI4
ASGNI4
line 708
;705:
;706:	// Get the dir vector between the player's point of view and the rocket
;707:	// and store it into muzzle again
;708:	VectorSubtract( muzzle, missile->r.currentOrigin, muzzle );
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 60
INDIRP4
CNSTI4 528
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 12+4
INDIRF4
ADDRLP4 60
INDIRP4
CNSTI4 532
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 12+8
ADDRLP4 12+8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 536
ADDP4
INDIRF4
SUBF4
ASGNF4
line 717
;709:
;710:	// Add some range to our "line" so we can go behind blocks
;711:	// We could have used a trace function here, but the rocket would
;712:	// have come back if player was aiming on a block while the rocket is behind it
;713:	// as the trace stops on solid blocks
;714:
;715://	dist = VectorLength( muzzle ) + 400;	 //give the range of our muzzle vector + 400 units
;716://	VectorScale( forward, dist, forward );
;717:		if(missile->classname == "plasma"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $76
CVPU4 4
NEU4 $333
line 718
;718:     VectorScale( forward, g_pgspeed.integer, forward );
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 g_pgspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 g_pgspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 g_pgspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 719
;719:		}
LABELV $333
line 720
;720:		if(missile->classname == "grenade"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $82
CVPU4 4
NEU4 $342
line 721
;721:     VectorScale( forward, g_glspeed.integer, forward );
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 g_glspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 g_glspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 g_glspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 722
;722:		}
LABELV $342
line 723
;723:		if(missile->classname == "bfg"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $88
CVPU4 4
NEU4 $351
line 724
;724:     VectorScale( forward, g_bfgspeed.integer, forward );
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 g_bfgspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 g_bfgspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 g_bfgspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 725
;725:		}
LABELV $351
line 726
;726:		if(missile->classname == "rocket"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $94
CVPU4 4
NEU4 $360
line 727
;727:     VectorScale( forward, g_rlspeed.integer, forward );
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 g_rlspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 g_rlspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 g_rlspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 728
;728:		}
LABELV $360
line 729
;729:		if(missile->classname == "nail"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $100
CVPU4 4
NEU4 $369
line 730
;730:     VectorScale( forward, g_ngspeed.integer, forward );
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 g_ngspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 g_ngspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 g_ngspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 731
;731:		}
LABELV $369
line 732
;732:		if(missile->classname == "flame"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $106
CVPU4 4
NEU4 $378
line 733
;733:     VectorScale( forward, g_ftspeed.integer, forward );
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 g_ftspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 g_ftspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 g_ftspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 734
;734:		}
LABELV $378
line 735
;735:		if(missile->classname == "antimatter"){
ADDRFP4 0
INDIRP4
CNSTI4 564
ADDP4
INDIRP4
CVPU4 4
ADDRGP4 $112
CVPU4 4
NEU4 $387
line 736
;736:     VectorScale( forward, g_amspeed.integer, forward );
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRGP4 g_amspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+4
ADDRLP4 0+4
INDIRF4
ADDRGP4 g_amspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0+8
ADDRLP4 0+8
INDIRF4
ADDRGP4 g_amspeed+12
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 737
;737:		}
LABELV $387
line 740
;738:
;739:	// line straight forward
;740:	VectorAdd( forward, muzzle, muzzle );
ADDRLP4 12
ADDRLP4 0
INDIRF4
ADDRLP4 12
INDIRF4
ADDF4
ASGNF4
ADDRLP4 12+4
ADDRLP4 0+4
INDIRF4
ADDRLP4 12+4
INDIRF4
ADDF4
ASGNF4
ADDRLP4 12+8
ADDRLP4 0+8
INDIRF4
ADDRLP4 12+8
INDIRF4
ADDF4
ASGNF4
line 743
;741:
;742:	// Normalize the vector so it's 1 unit long, but keep its direction
;743:	VectorNormalize( muzzle );
ADDRLP4 12
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 749
;744:
;745:	// Slow the rocket down a bit, so we can handle it
;746:    // VectorScale( muzzle, 300, forward );
;747:
;748:	// Set the rockets's velocity so it'll move toward our new direction
;749:	VectorCopy( forward, missile->s.pos.trDelta );
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 0
INDIRB
ASGNB 12
line 752
;750:
;751:	// Change the rocket's angle so it'll point toward the new direction
;752:	vectoangles( muzzle, missile->s.angles );
ADDRLP4 12
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
ARGP4
ADDRGP4 vectoangles
CALLV
pop
line 755
;753:
;754:	// This should "save net bandwidth" =D
;755:	SnapVector( missile->s.pos.trDelta );
ADDRLP4 64
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 64
INDIRP4
ADDRLP4 64
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 68
ADDRFP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 68
INDIRP4
ADDRLP4 68
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 72
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 72
INDIRP4
ADDRLP4 72
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 758
;756:
;757:
;758:    missile->nextthink = level.time + 25;
ADDRFP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 25
ADDI4
ASGNI4
line 760
;759:
;760:    if ( level.time > missile->wait ) {
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
CNSTI4 1012
ADDP4
INDIRF4
LEF4 $403
line 761
;761:        G_ExplodeMissile( missile );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 G_ExplodeMissile
CALLV
pop
line 762
;762:	}
LABELV $403
line 763
;763:}
LABELV $324
endproc Guided_Missile_Think 76 20
export fire_plasma
proc fire_plasma 20 4
line 780
;764:
;765:
;766:
;767:
;768:
;769:
;770:
;771:
;772:
;773:
;774:/*
;775:=================
;776:fire_plasma
;777:
;778:=================
;779:*/
;780:gentity_t *fire_plasma (gentity_t *self, vec3_t start, vec3_t dir) {
line 783
;781:	gentity_t	*bolt;
;782:
;783:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 785
;784:
;785:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 786
;786:	bolt->classname = "plasma";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $76
ASGNP4
line 787
;787:if(g_pghoming.integer == 0){
ADDRGP4 g_pghoming+12
INDIRI4
CNSTI4 0
NEI4 $407
line 788
;788:	bolt->nextthink = level.time + g_pgtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_pgtimeout+12
INDIRI4
ADDI4
ASGNI4
line 789
;789:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 790
;790:}
LABELV $407
line 791
;791:if(g_pghoming.integer == 1){
ADDRGP4 g_pghoming+12
INDIRI4
CNSTI4 1
NEI4 $412
line 792
;792:	bolt->nextthink = level.time + 10;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 793
;793:	bolt->think = G_HomingMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_HomingMissile
ASGNP4
line 794
;794:    bolt->wait = level.time + g_pgtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_pgtimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 795
;795:}
LABELV $412
line 796
;796:if(g_pghoming.integer == 0){
ADDRGP4 g_pghoming+12
INDIRI4
CNSTI4 0
NEI4 $418
line 797
;797:if(g_pgguided.integer == 0){
ADDRGP4 g_pgguided+12
INDIRI4
CNSTI4 0
NEI4 $421
line 798
;798:	bolt->nextthink = level.time + g_pgtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_pgtimeout+12
INDIRI4
ADDI4
ASGNI4
line 799
;799:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 800
;800:}
LABELV $421
line 801
;801:if(g_pgguided.integer == 1){
ADDRGP4 g_pgguided+12
INDIRI4
CNSTI4 1
NEI4 $426
line 802
;802:	bolt->nextthink = level.time + 50;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 803
;803:	bolt->think = Guided_Missile_Think;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Guided_Missile_Think
ASGNP4
line 804
;804:    bolt->wait = level.time + g_pgtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_pgtimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 805
;805:}
LABELV $426
line 806
;806:}
LABELV $418
line 807
;807:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 808
;808:	if (g_pgbounce.integer == 1)
ADDRGP4 g_pgbounce+12
INDIRI4
CNSTI4 1
NEI4 $432
line 809
;809:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
ADDRGP4 $433
JUMPV
LABELV $432
line 811
;810:	else
;811:	if (g_pgbounce.integer == 2)
ADDRGP4 g_pgbounce+12
INDIRI4
CNSTI4 2
NEI4 $435
line 812
;812:	bolt->s.eFlags = EF_BOUNCE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 16
ASGNI4
ADDRGP4 $436
JUMPV
LABELV $435
line 814
;813:	else
;814:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 128
ASGNI4
LABELV $436
LABELV $433
line 815
;815:	bolt->s.generic3 = WP_PLASMAGUN;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 8
ASGNI4
line 816
;816:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 552
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 819
;817://unlagged - projectile nudge
;818:	// we'll need this for nudging projectiles later
;819:	bolt->s.otherEntityNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 821
;820://unlagged - projectile nudge
;821:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 822
;822:	bolt->damage = g_pgdamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
ADDRGP4 g_pgdamage+8
INDIRF4
CVFI4 4
ASGNI4
line 823
;823:	bolt->splashDamage = g_pgsdamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 928
ADDP4
ADDRGP4 g_pgsdamage+8
INDIRF4
CVFI4 4
ASGNI4
line 824
;824:	bolt->splashRadius = g_pgsradius.value;
ADDRLP4 0
INDIRP4
CNSTI4 932
ADDP4
ADDRGP4 g_pgsradius+8
INDIRF4
CVFI4 4
ASGNI4
line 825
;825:	bolt->methodOfDeath = MOD_PLASMA;
ADDRLP4 0
INDIRP4
CNSTI4 936
ADDP4
CNSTI4 8
ASGNI4
line 826
;826:	bolt->splashMethodOfDeath = MOD_PLASMA_SPLASH;
ADDRLP4 0
INDIRP4
CNSTI4 940
ADDP4
CNSTI4 9
ASGNI4
line 827
;827:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 100663297
ASGNI4
line 828
;828:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTP4 0
ASGNP4
line 829
;829:	if (g_pggravity.integer == 1)
ADDRGP4 g_pggravity+12
INDIRI4
CNSTI4 1
NEI4 $441
line 830
;830:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $442
JUMPV
LABELV $441
line 832
;831:	else
;832:	bolt->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
LABELV $442
line 833
;833:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
SUBI4
ASGNI4
line 834
;834:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 835
;835:	VectorScale( dir, g_pgspeed.value, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRGP4 g_pgspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 g_pgspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 g_pgspeed+8
INDIRF4
MULF4
ASGNF4
line 836
;836:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 838
;837:
;838:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 840
;839:
;840:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $406
endproc fire_plasma 20 4
export fire_grenade
proc fire_grenade 20 4
line 850
;841:}
;842:
;843://=============================================================================
;844:
;845:/*
;846:=================
;847:fire_grenade
;848:=================
;849:*/
;850:gentity_t *fire_grenade (gentity_t *self, vec3_t start, vec3_t dir) {
line 853
;851:	gentity_t	*bolt;
;852:
;853:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 855
;854:
;855:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 856
;856:	bolt->classname = "grenade";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $82
ASGNP4
line 857
;857:if(g_glhoming.integer == 0){
ADDRGP4 g_glhoming+12
INDIRI4
CNSTI4 0
NEI4 $449
line 858
;858:	bolt->nextthink = level.time + g_gltimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_gltimeout+12
INDIRI4
ADDI4
ASGNI4
line 859
;859:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 860
;860:}
LABELV $449
line 861
;861:if(g_glhoming.integer == 1){
ADDRGP4 g_glhoming+12
INDIRI4
CNSTI4 1
NEI4 $454
line 862
;862:	bolt->nextthink = level.time + 10;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 863
;863:	bolt->think = G_HomingMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_HomingMissile
ASGNP4
line 864
;864:    bolt->wait = level.time + g_gltimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_gltimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 865
;865:}
LABELV $454
line 866
;866:if(g_glhoming.integer == 0){
ADDRGP4 g_glhoming+12
INDIRI4
CNSTI4 0
NEI4 $460
line 867
;867:if(g_glguided.integer == 0){
ADDRGP4 g_glguided+12
INDIRI4
CNSTI4 0
NEI4 $463
line 868
;868:	bolt->nextthink = level.time + g_gltimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_gltimeout+12
INDIRI4
ADDI4
ASGNI4
line 869
;869:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 870
;870:}
LABELV $463
line 871
;871:if(g_glguided.integer == 1){
ADDRGP4 g_glguided+12
INDIRI4
CNSTI4 1
NEI4 $468
line 872
;872:	bolt->nextthink = level.time + 50;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 873
;873:	bolt->think = Guided_Missile_Think;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Guided_Missile_Think
ASGNP4
line 874
;874:    bolt->wait = level.time + g_gltimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_gltimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 875
;875:}
LABELV $468
line 876
;876:}
LABELV $460
line 877
;877:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 878
;878:	if (g_glbounce.integer == 1)
ADDRGP4 g_glbounce+12
INDIRI4
CNSTI4 1
NEI4 $474
line 879
;879:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
ADDRGP4 $475
JUMPV
LABELV $474
line 881
;880:	else
;881:	if (g_glbounce.integer == 2)
ADDRGP4 g_glbounce+12
INDIRI4
CNSTI4 2
NEI4 $477
line 882
;882:	bolt->s.eFlags = EF_BOUNCE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 16
ASGNI4
ADDRGP4 $478
JUMPV
LABELV $477
line 884
;883:	else
;884:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 128
ASGNI4
LABELV $478
LABELV $475
line 885
;885:	bolt->s.generic3 = WP_GRENADE_LAUNCHER;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 4
ASGNI4
line 886
;886:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 552
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 889
;887://unlagged - projectile nudge
;888:	// we'll need this for nudging projectiles later
;889:	bolt->s.otherEntityNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 891
;890://unlagged - projectile nudge
;891:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 892
;892:	bolt->damage = g_gldamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
ADDRGP4 g_gldamage+8
INDIRF4
CVFI4 4
ASGNI4
line 893
;893:	bolt->splashDamage = g_glsdamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 928
ADDP4
ADDRGP4 g_glsdamage+8
INDIRF4
CVFI4 4
ASGNI4
line 894
;894:	bolt->splashRadius = g_glsradius.value;
ADDRLP4 0
INDIRP4
CNSTI4 932
ADDP4
ADDRGP4 g_glsradius+8
INDIRF4
CVFI4 4
ASGNI4
line 895
;895:	bolt->methodOfDeath = MOD_GRENADE;
ADDRLP4 0
INDIRP4
CNSTI4 936
ADDP4
CNSTI4 4
ASGNI4
line 896
;896:	bolt->splashMethodOfDeath = MOD_GRENADE_SPLASH;
ADDRLP4 0
INDIRP4
CNSTI4 940
ADDP4
CNSTI4 5
ASGNI4
line 897
;897:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 100663297
ASGNI4
line 898
;898:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTP4 0
ASGNP4
line 899
;899:	if (g_glgravity.integer == 1)
ADDRGP4 g_glgravity+12
INDIRI4
CNSTI4 1
NEI4 $483
line 900
;900:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $484
JUMPV
LABELV $483
line 902
;901:	else
;902:	bolt->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
LABELV $484
line 903
;903:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
SUBI4
ASGNI4
line 904
;904:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 905
;905:	VectorScale( dir, g_glspeed.value, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRGP4 g_glspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 g_glspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 g_glspeed+8
INDIRF4
MULF4
ASGNF4
line 906
;906:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 908
;907:
;908:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 910
;909:
;910:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $448
endproc fire_grenade 20 4
export fire_bfg
proc fire_bfg 20 4
line 918
;911:}
;912:
;913:/*
;914:=================
;915:fire_bfg
;916:=================
;917:*/
;918:gentity_t *fire_bfg (gentity_t *self, vec3_t start, vec3_t dir) {
line 921
;919:	gentity_t	*bolt;
;920:
;921:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 923
;922:
;923:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 924
;924:	bolt->classname = "bfg";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $88
ASGNP4
line 925
;925:if(g_bfghoming.integer == 0){
ADDRGP4 g_bfghoming+12
INDIRI4
CNSTI4 0
NEI4 $491
line 926
;926:	bolt->nextthink = level.time + g_bfgtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_bfgtimeout+12
INDIRI4
ADDI4
ASGNI4
line 927
;927:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 928
;928:}
LABELV $491
line 929
;929:if(g_bfghoming.integer == 1){
ADDRGP4 g_bfghoming+12
INDIRI4
CNSTI4 1
NEI4 $496
line 930
;930:	bolt->nextthink = level.time + 10;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 931
;931:	bolt->think = G_HomingMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_HomingMissile
ASGNP4
line 932
;932:    bolt->wait = level.time + g_bfgtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_bfgtimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 933
;933:}
LABELV $496
line 934
;934:if(g_bfghoming.integer == 0){
ADDRGP4 g_bfghoming+12
INDIRI4
CNSTI4 0
NEI4 $502
line 935
;935:if(g_bfgguided.integer == 0){
ADDRGP4 g_bfgguided+12
INDIRI4
CNSTI4 0
NEI4 $505
line 936
;936:	bolt->nextthink = level.time + g_bfgtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_bfgtimeout+12
INDIRI4
ADDI4
ASGNI4
line 937
;937:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 938
;938:}
LABELV $505
line 939
;939:if(g_bfgguided.integer == 1){
ADDRGP4 g_bfgguided+12
INDIRI4
CNSTI4 1
NEI4 $510
line 940
;940:	bolt->nextthink = level.time + 50;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 941
;941:	bolt->think = Guided_Missile_Think;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Guided_Missile_Think
ASGNP4
line 942
;942:    bolt->wait = level.time + g_bfgtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_bfgtimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 943
;943:}
LABELV $510
line 944
;944:}
LABELV $502
line 945
;945:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 946
;946:	if (g_bfgbounce.integer == 1)
ADDRGP4 g_bfgbounce+12
INDIRI4
CNSTI4 1
NEI4 $516
line 947
;947:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
ADDRGP4 $517
JUMPV
LABELV $516
line 949
;948:	else
;949:	if (g_bfgbounce.integer == 2)
ADDRGP4 g_bfgbounce+12
INDIRI4
CNSTI4 2
NEI4 $519
line 950
;950:	bolt->s.eFlags = EF_BOUNCE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 16
ASGNI4
ADDRGP4 $520
JUMPV
LABELV $519
line 952
;951:	else
;952:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 128
ASGNI4
LABELV $520
LABELV $517
line 953
;953:	bolt->s.generic3 = WP_BFG;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 9
ASGNI4
line 954
;954:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 552
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 957
;955://unlagged - projectile nudge
;956:	// we'll need this for nudging projectiles later
;957:	bolt->s.otherEntityNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 959
;958://unlagged - projectile nudge
;959:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 960
;960:	bolt->damage = g_bfgdamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
ADDRGP4 g_bfgdamage+8
INDIRF4
CVFI4 4
ASGNI4
line 961
;961:	bolt->splashDamage = g_bfgsdamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 928
ADDP4
ADDRGP4 g_bfgsdamage+8
INDIRF4
CVFI4 4
ASGNI4
line 962
;962:	bolt->splashRadius = g_bfgsradius.value;
ADDRLP4 0
INDIRP4
CNSTI4 932
ADDP4
ADDRGP4 g_bfgsradius+8
INDIRF4
CVFI4 4
ASGNI4
line 963
;963:	bolt->methodOfDeath = MOD_BFG;
ADDRLP4 0
INDIRP4
CNSTI4 936
ADDP4
CNSTI4 12
ASGNI4
line 964
;964:	bolt->splashMethodOfDeath = MOD_BFG_SPLASH;
ADDRLP4 0
INDIRP4
CNSTI4 940
ADDP4
CNSTI4 13
ASGNI4
line 965
;965:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 100663297
ASGNI4
line 966
;966:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTP4 0
ASGNP4
line 967
;967:	if (g_bfggravity.integer == 1)
ADDRGP4 g_bfggravity+12
INDIRI4
CNSTI4 1
NEI4 $525
line 968
;968:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $526
JUMPV
LABELV $525
line 970
;969:	else
;970:	bolt->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
LABELV $526
line 971
;971:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
SUBI4
ASGNI4
line 972
;972:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 973
;973:	VectorScale( dir, g_bfgspeed.value, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRGP4 g_bfgspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 g_bfgspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 g_bfgspeed+8
INDIRF4
MULF4
ASGNF4
line 974
;974:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 975
;975:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 977
;976:
;977:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $490
endproc fire_bfg 20 4
export fire_custom
proc fire_custom 20 4
line 987
;978:}
;979:
;980://=============================================================================
;981:
;982:/*
;983:=================
;984:fire_custom
;985:=================
;986:*/
;987:gentity_t *fire_custom (gentity_t *self, vec3_t start, vec3_t dir) {
line 990
;988:	gentity_t	*bolt;
;989:
;990:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 992
;991:
;992:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 993
;993:	bolt->classname = "rocket";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $94
ASGNP4
line 994
;994:	if(self->mtype == 1){
ADDRFP4 0
INDIRP4
CNSTI4 2248
ADDP4
INDIRI4
CNSTI4 1
NEI4 $533
line 995
;995:	bolt->s.generic3 = WP_GRENADE_LAUNCHER;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 4
ASGNI4
line 996
;996:	}
LABELV $533
line 997
;997:	if(self->mtype == 2){
ADDRFP4 0
INDIRP4
CNSTI4 2248
ADDP4
INDIRI4
CNSTI4 2
NEI4 $535
line 998
;998:	bolt->s.generic3 = WP_ROCKET_LAUNCHER;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 5
ASGNI4
line 999
;999:	}
LABELV $535
line 1000
;1000:	if(self->mtype == 3){
ADDRFP4 0
INDIRP4
CNSTI4 2248
ADDP4
INDIRI4
CNSTI4 3
NEI4 $537
line 1001
;1001:	bolt->s.generic3 = WP_PLASMAGUN;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 8
ASGNI4
line 1002
;1002:	}
LABELV $537
line 1003
;1003:	if(self->mtype == 4){
ADDRFP4 0
INDIRP4
CNSTI4 2248
ADDP4
INDIRI4
CNSTI4 4
NEI4 $539
line 1004
;1004:	bolt->s.generic3 = WP_BFG;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 9
ASGNI4
line 1005
;1005:	}
LABELV $539
line 1006
;1006:	if(self->mtype == 5){
ADDRFP4 0
INDIRP4
CNSTI4 2248
ADDP4
INDIRI4
CNSTI4 5
NEI4 $541
line 1007
;1007:	bolt->s.generic3 = WP_NAILGUN;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 11
ASGNI4
line 1008
;1008:	}
LABELV $541
line 1009
;1009:	if(self->mtype == 6){
ADDRFP4 0
INDIRP4
CNSTI4 2248
ADDP4
INDIRI4
CNSTI4 6
NEI4 $543
line 1010
;1010:	bolt->s.generic3 = WP_PROX_LAUNCHER;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 12
ASGNI4
line 1011
;1011:	}
LABELV $543
line 1012
;1012:	if(self->mtype == 7){
ADDRFP4 0
INDIRP4
CNSTI4 2248
ADDP4
INDIRI4
CNSTI4 7
NEI4 $545
line 1013
;1013:	bolt->s.generic3 = WP_FLAMETHROWER;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 14
ASGNI4
line 1014
;1014:	}
LABELV $545
line 1015
;1015:	if(self->mtype == 8){
ADDRFP4 0
INDIRP4
CNSTI4 2248
ADDP4
INDIRI4
CNSTI4 8
NEI4 $547
line 1016
;1016:	bolt->s.generic3 = WP_ANTIMATTER;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 15
ASGNI4
line 1017
;1017:	}
LABELV $547
line 1018
;1018:if(self->mhoming){
ADDRFP4 0
INDIRP4
CNSTI4 2256
ADDP4
INDIRI4
CNSTI4 0
EQI4 $549
line 1019
;1019:	bolt->nextthink = level.time + 10;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 1020
;1020:	bolt->think = G_HomingMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_HomingMissile
ASGNP4
line 1021
;1021:    bolt->wait = level.time + self->mtimeout;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2252
ADDP4
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1022
;1022:}
LABELV $549
line 1023
;1023:if(!self->mhoming){
ADDRFP4 0
INDIRP4
CNSTI4 2256
ADDP4
INDIRI4
CNSTI4 0
NEI4 $553
line 1024
;1024:	bolt->nextthink = level.time + self->mtimeout;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 2252
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1025
;1025:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 1026
;1026:}
LABELV $553
line 1027
;1027:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 1028
;1028:	if (self->mbounce == 1)
ADDRFP4 0
INDIRP4
CNSTI4 2264
ADDP4
INDIRI4
CNSTI4 1
NEI4 $556
line 1029
;1029:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
ADDRGP4 $557
JUMPV
LABELV $556
line 1031
;1030:	else
;1031:	if (self->mbounce == 2)
ADDRFP4 0
INDIRP4
CNSTI4 2264
ADDP4
INDIRI4
CNSTI4 2
NEI4 $558
line 1032
;1032:	bolt->s.eFlags = EF_BOUNCE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 16
ASGNI4
ADDRGP4 $559
JUMPV
LABELV $558
line 1034
;1033:	else
;1034:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 128
ASGNI4
LABELV $559
LABELV $557
line 1035
;1035:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 552
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1038
;1036://unlagged - projectile nudge
;1037:	// we'll need this for nudging projectiles later
;1038:	bolt->s.otherEntityNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1040
;1039://unlagged - projectile nudge
;1040:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1041
;1041:	bolt->damage = self->mdamage;
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 2268
ADDP4
INDIRI4
ASGNI4
line 1042
;1042:	bolt->splashDamage = self->msdamage;
ADDRLP4 0
INDIRP4
CNSTI4 928
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 2272
ADDP4
INDIRI4
ASGNI4
line 1043
;1043:	bolt->splashRadius = self->msradius;
ADDRLP4 0
INDIRP4
CNSTI4 932
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 2276
ADDP4
INDIRI4
ASGNI4
line 1044
;1044:	bolt->methodOfDeath = MOD_ANTIMATTER;
ADDRLP4 0
INDIRP4
CNSTI4 936
ADDP4
CNSTI4 16
ASGNI4
line 1045
;1045:	bolt->splashMethodOfDeath = MOD_ANTIMATTER_SPLASH;
ADDRLP4 0
INDIRP4
CNSTI4 940
ADDP4
CNSTI4 17
ASGNI4
line 1046
;1046:	if(self->mnoclip){
ADDRFP4 0
INDIRP4
CNSTI4 2284
ADDP4
INDIRI4
CNSTI4 0
EQI4 $560
line 1047
;1047:	bolt->clipmask = MASK_NOCSHOT;
ADDRLP4 0
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 100663296
ASGNI4
line 1048
;1048:	} else {
ADDRGP4 $561
JUMPV
LABELV $560
line 1049
;1049:	bolt->clipmask = MASK_SHOT;	
ADDRLP4 0
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 100663297
ASGNI4
line 1050
;1050:	}
LABELV $561
line 1051
;1051:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTP4 0
ASGNP4
line 1052
;1052:	if (self->mgravity)
ADDRFP4 0
INDIRP4
CNSTI4 2280
ADDP4
INDIRI4
CNSTI4 0
EQI4 $562
line 1053
;1053:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $563
JUMPV
LABELV $562
line 1055
;1054:	else
;1055:	bolt->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
LABELV $563
line 1056
;1056:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
SUBI4
ASGNI4
line 1057
;1057:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1058
;1058:	VectorScale( dir, self->mspeed, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 2260
ADDP4
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 2260
ADDP4
INDIRI4
CVIF4 4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 2260
ADDP4
INDIRI4
CVIF4 4
MULF4
ASGNF4
line 1059
;1059:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1060
;1060:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1062
;1061:
;1062:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $532
endproc fire_custom 20 4
export fire_rocket
proc fire_rocket 20 4
line 1071
;1063:}
;1064:
;1065:
;1066:/*
;1067:=================
;1068:fire_rocket
;1069:=================
;1070:*/
;1071:gentity_t *fire_rocket (gentity_t *self, vec3_t start, vec3_t dir) {
line 1074
;1072:	gentity_t	*bolt;
;1073:
;1074:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1076
;1075:
;1076:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1077
;1077:	bolt->classname = "rocket";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $94
ASGNP4
line 1078
;1078:if(g_rlhoming.integer == 0){
ADDRGP4 g_rlhoming+12
INDIRI4
CNSTI4 0
NEI4 $566
line 1079
;1079:	bolt->nextthink = level.time + g_rltimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_rltimeout+12
INDIRI4
ADDI4
ASGNI4
line 1080
;1080:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 1081
;1081:}
LABELV $566
line 1082
;1082:if(g_rlhoming.integer == 1){
ADDRGP4 g_rlhoming+12
INDIRI4
CNSTI4 1
NEI4 $571
line 1083
;1083:	bolt->nextthink = level.time + 10;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 1084
;1084:	bolt->think = G_HomingMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_HomingMissile
ASGNP4
line 1085
;1085:    bolt->wait = level.time + g_rltimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_rltimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1086
;1086:}
LABELV $571
line 1087
;1087:if(g_rlhoming.integer == 0){
ADDRGP4 g_rlhoming+12
INDIRI4
CNSTI4 0
NEI4 $577
line 1088
;1088:if(g_rlguided.integer == 0){
ADDRGP4 g_rlguided+12
INDIRI4
CNSTI4 0
NEI4 $580
line 1089
;1089:	bolt->nextthink = level.time + g_rltimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_rltimeout+12
INDIRI4
ADDI4
ASGNI4
line 1090
;1090:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 1091
;1091:}
LABELV $580
line 1092
;1092:if(g_rlguided.integer == 1){
ADDRGP4 g_rlguided+12
INDIRI4
CNSTI4 1
NEI4 $585
line 1093
;1093:	bolt->nextthink = level.time + 50;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 1094
;1094:	bolt->think = Guided_Missile_Think;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Guided_Missile_Think
ASGNP4
line 1095
;1095:    bolt->wait = level.time + g_rltimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_rltimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1096
;1096:}
LABELV $585
line 1097
;1097:}
LABELV $577
line 1098
;1098:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 1099
;1099:	if (g_rlbounce.integer == 1)
ADDRGP4 g_rlbounce+12
INDIRI4
CNSTI4 1
NEI4 $591
line 1100
;1100:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
ADDRGP4 $592
JUMPV
LABELV $591
line 1102
;1101:	else
;1102:	if (g_rlbounce.integer == 2)
ADDRGP4 g_rlbounce+12
INDIRI4
CNSTI4 2
NEI4 $594
line 1103
;1103:	bolt->s.eFlags = EF_BOUNCE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 16
ASGNI4
ADDRGP4 $595
JUMPV
LABELV $594
line 1105
;1104:	else
;1105:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 128
ASGNI4
LABELV $595
LABELV $592
line 1106
;1106:	bolt->s.generic3 = WP_ROCKET_LAUNCHER;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 5
ASGNI4
line 1107
;1107:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 552
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1110
;1108://unlagged - projectile nudge
;1109:	// we'll need this for nudging projectiles later
;1110:	bolt->s.otherEntityNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1112
;1111://unlagged - projectile nudge
;1112:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1113
;1113:	bolt->damage = g_rldamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
ADDRGP4 g_rldamage+8
INDIRF4
CVFI4 4
ASGNI4
line 1114
;1114:	bolt->splashDamage = g_rlsdamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 928
ADDP4
ADDRGP4 g_rlsdamage+8
INDIRF4
CVFI4 4
ASGNI4
line 1115
;1115:	bolt->splashRadius = g_rlsradius.value;
ADDRLP4 0
INDIRP4
CNSTI4 932
ADDP4
ADDRGP4 g_rlsradius+8
INDIRF4
CVFI4 4
ASGNI4
line 1116
;1116:	bolt->methodOfDeath = MOD_ROCKET;
ADDRLP4 0
INDIRP4
CNSTI4 936
ADDP4
CNSTI4 6
ASGNI4
line 1117
;1117:	bolt->splashMethodOfDeath = MOD_ROCKET_SPLASH;
ADDRLP4 0
INDIRP4
CNSTI4 940
ADDP4
CNSTI4 7
ASGNI4
line 1118
;1118:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 100663297
ASGNI4
line 1119
;1119:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTP4 0
ASGNP4
line 1120
;1120:	if (g_rlgravity.integer == 1)
ADDRGP4 g_rlgravity+12
INDIRI4
CNSTI4 1
NEI4 $600
line 1121
;1121:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $601
JUMPV
LABELV $600
line 1123
;1122:	else
;1123:	bolt->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
LABELV $601
line 1124
;1124:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
SUBI4
ASGNI4
line 1125
;1125:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1126
;1126:	VectorScale( dir, g_rlspeed.value, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRGP4 g_rlspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 g_rlspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 g_rlspeed+8
INDIRF4
MULF4
ASGNF4
line 1127
;1127:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1128
;1128:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1130
;1129:
;1130:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $565
endproc fire_rocket 20 4
export fire_grapple
proc fire_grapple 24 4
line 1138
;1131:}
;1132:
;1133:/*
;1134:=================
;1135:fire_grapple
;1136:=================
;1137:*/
;1138:gentity_t *fire_grapple (gentity_t *self, vec3_t start, vec3_t dir) {
line 1144
;1139:	gentity_t	*hook;
;1140://unlagged - grapple
;1141:	int hooktime;
;1142://unlagged - grapple
;1143:
;1144:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1146
;1145:
;1146:	hook = G_Spawn();
ADDRLP4 8
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 1147
;1147:	hook->classname = "hook";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $239
ASGNP4
line 1148
;1148:	hook->nextthink = level.time + g_ghtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_ghtimeout+12
INDIRI4
ADDI4
ASGNI4
line 1149
;1149:	hook->think = Weapon_HookFree;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Weapon_HookFree
ASGNP4
line 1150
;1150:	hook->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 1151
;1151:	hook->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 128
ASGNI4
line 1152
;1152:	hook->s.generic3 = WP_GRAPPLING_HOOK;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 10
ASGNI4
line 1153
;1153:	hook->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 552
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1154
;1154:	hook->methodOfDeath = MOD_GRAPPLE;
ADDRLP4 0
INDIRP4
CNSTI4 936
ADDP4
CNSTI4 33
ASGNI4
line 1155
;1155:	hook->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 100663297
ASGNI4
line 1156
;1156:	hook->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1157
;1157:	hook->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTP4 0
ASGNP4
line 1161
;1158:
;1159://unlagged - grapple
;1160:	// we might want this later
;1161:	hook->s.otherEntityNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1166
;1162:
;1163:	// setting the projectile base time back makes the hook's first
;1164:	// step larger
;1165:
;1166:	if ( self->client ) {
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $610
line 1167
;1167:		hooktime = self->client->pers.cmd.serverTime + 50;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 476
ADDP4
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 1168
;1168:	}
ADDRGP4 $611
JUMPV
LABELV $610
line 1169
;1169:	else {
line 1170
;1170:		hooktime = level.time - MISSILE_PRESTEP_TIME;
ADDRLP4 4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
SUBI4
ASGNI4
line 1171
;1171:	}
LABELV $611
line 1173
;1172:
;1173:	hook->s.pos.trTime = hooktime;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 1176
;1174://unlagged - grapple
;1175:
;1176:	hook->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
line 1180
;1177://unlagged - grapple
;1178:	//hook->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
;1179://unlagged - grapple
;1180:	hook->s.otherEntityNum = self->s.number; // use to match beam in client
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1181
;1181:	VectorCopy( start, hook->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1182
;1182:	VectorScale( dir, g_ghspeed.value, hook->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRGP4 g_ghspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 g_ghspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 g_ghspeed+8
INDIRF4
MULF4
ASGNF4
line 1184
;1183:	
;1184:	SnapVector( hook->s.pos.trDelta );			// save net bandwidth
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1185
;1185:	VectorCopy (start, hook->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1187
;1186:
;1187:	self->client->hook = hook;
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1344
ADDP4
ADDRLP4 0
INDIRP4
ASGNP4
line 1189
;1188:
;1189:	return hook;
ADDRLP4 0
INDIRP4
RETP4
LABELV $607
endproc fire_grapple 24 4
export fire_nail
proc fire_nail 120 4
line 1199
;1190:}
;1191:
;1192:/*
;1193:=================
;1194:fire_nail
;1195:=================
;1196:*/
;1197:#define NAILGUN_SPREAD	g_ngspread.integer
;1198:
;1199:gentity_t *fire_nail( gentity_t *self, vec3_t start, vec3_t forward, vec3_t right, vec3_t up ) {
line 1205
;1200:	gentity_t	*bolt;
;1201:	vec3_t		dir;
;1202:	vec3_t		end;
;1203:	float		r, u, scale;
;1204:
;1205:	bolt = G_Spawn();
ADDRLP4 40
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 40
INDIRP4
ASGNP4
line 1206
;1206:	bolt->classname = "nail";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $100
ASGNP4
line 1207
;1207:if(g_nghoming.integer == 0){
ADDRGP4 g_nghoming+12
INDIRI4
CNSTI4 0
NEI4 $617
line 1208
;1208:	bolt->nextthink = level.time + g_ngtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_ngtimeout+12
INDIRI4
ADDI4
ASGNI4
line 1209
;1209:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 1210
;1210:}
LABELV $617
line 1211
;1211:if(g_nghoming.integer == 1){
ADDRGP4 g_nghoming+12
INDIRI4
CNSTI4 1
NEI4 $622
line 1212
;1212:	bolt->nextthink = level.time + 10;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 1213
;1213:	bolt->think = G_HomingMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_HomingMissile
ASGNP4
line 1214
;1214:    bolt->wait = level.time + g_ngtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_ngtimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1215
;1215:}
LABELV $622
line 1216
;1216:if(g_nghoming.integer == 0){
ADDRGP4 g_nghoming+12
INDIRI4
CNSTI4 0
NEI4 $628
line 1217
;1217:if(g_ngguided.integer == 0){
ADDRGP4 g_ngguided+12
INDIRI4
CNSTI4 0
NEI4 $631
line 1218
;1218:	bolt->nextthink = level.time + g_ngtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_ngtimeout+12
INDIRI4
ADDI4
ASGNI4
line 1219
;1219:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 1220
;1220:}
LABELV $631
line 1221
;1221:if(g_ngguided.integer == 1){
ADDRGP4 g_ngguided+12
INDIRI4
CNSTI4 1
NEI4 $636
line 1222
;1222:	bolt->nextthink = level.time + 50;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 1223
;1223:	bolt->think = Guided_Missile_Think;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Guided_Missile_Think
ASGNP4
line 1224
;1224:    bolt->wait = level.time + g_ngtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_ngtimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1225
;1225:}
LABELV $636
line 1226
;1226:}
LABELV $628
line 1227
;1227:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 1228
;1228:	if (g_ngbounce.integer == 1)
ADDRGP4 g_ngbounce+12
INDIRI4
CNSTI4 1
NEI4 $642
line 1229
;1229:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
ADDRGP4 $643
JUMPV
LABELV $642
line 1231
;1230:	else
;1231:	if (g_ngbounce.integer == 2)
ADDRGP4 g_ngbounce+12
INDIRI4
CNSTI4 2
NEI4 $645
line 1232
;1232:	bolt->s.eFlags = EF_BOUNCE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 16
ASGNI4
ADDRGP4 $646
JUMPV
LABELV $645
line 1234
;1233:	else
;1234:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 128
ASGNI4
LABELV $646
LABELV $643
line 1235
;1235:	bolt->s.generic3 = WP_NAILGUN;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 11
ASGNI4
line 1236
;1236:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 552
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1239
;1237://unlagged - projectile nudge
;1238:	// we'll need this for nudging projectiles later
;1239:	bolt->s.otherEntityNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1241
;1240://unlagged - projectile nudge
;1241:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1242
;1242:	bolt->damage = g_ngdamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
ADDRGP4 g_ngdamage+8
INDIRF4
CVFI4 4
ASGNI4
line 1243
;1243:	bolt->methodOfDeath = MOD_NAIL;
ADDRLP4 0
INDIRP4
CNSTI4 936
ADDP4
CNSTI4 28
ASGNI4
line 1244
;1244:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 100663297
ASGNI4
line 1245
;1245:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTP4 0
ASGNP4
line 1246
;1246:	if (g_nggravity.integer == 1)
ADDRGP4 g_nggravity+12
INDIRI4
CNSTI4 1
NEI4 $649
line 1247
;1247:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $650
JUMPV
LABELV $649
line 1249
;1248:	else
;1249:	bolt->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
LABELV $650
line 1250
;1250:	bolt->s.pos.trTime = level.time;
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
ASGNI4
line 1251
;1251:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1253
;1252:
;1253:	r = random() * M_PI * 2.0f;
ADDRLP4 44
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
CNSTF4 1073741824
CNSTF4 1078530011
ADDRLP4 44
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
MULF4
MULF4
ASGNF4
line 1254
;1254:	u = sin(r) * crandom() * NAILGUN_SPREAD * 16;
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 48
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 52
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 32
CNSTF4 1098907648
ADDRLP4 48
INDIRF4
CNSTF4 1073741824
ADDRLP4 52
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ADDRGP4 g_ngspread+12
INDIRI4
CVIF4 4
MULF4
MULF4
ASGNF4
line 1255
;1255:	r = cos(r) * crandom() * NAILGUN_SPREAD * 16;
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 56
ADDRGP4 cos
CALLF4
ASGNF4
ADDRLP4 60
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 28
CNSTF4 1098907648
ADDRLP4 56
INDIRF4
CNSTF4 1073741824
ADDRLP4 60
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
CNSTF4 1056964608
SUBF4
MULF4
MULF4
ADDRGP4 g_ngspread+12
INDIRI4
CVIF4 4
MULF4
MULF4
ASGNF4
line 1256
;1256:	VectorMA( start, 8192 * 16, forward, end);
ADDRLP4 64
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 68
CNSTF4 1207959552
ASGNF4
ADDRLP4 72
ADDRFP4 8
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 64
INDIRP4
INDIRF4
ADDRLP4 68
INDIRF4
ADDRLP4 72
INDIRP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 76
CNSTI4 4
ASGNI4
ADDRLP4 4+4
ADDRLP4 64
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRF4
ADDRLP4 68
INDIRF4
ADDRLP4 72
INDIRP4
ADDRLP4 76
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 80
CNSTI4 8
ASGNI4
ADDRLP4 4+8
ADDRFP4 4
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRF4
CNSTF4 1207959552
ADDRFP4 8
INDIRP4
ADDRLP4 80
INDIRI4
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 1257
;1257:	VectorMA (end, r, right, end);
ADDRLP4 84
ADDRFP4 12
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 84
INDIRP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 4+4
INDIRF4
ADDRLP4 84
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
ADDRFP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 28
INDIRF4
MULF4
ADDF4
ASGNF4
line 1258
;1258:	VectorMA (end, u, up, end);
ADDRLP4 92
ADDRFP4 16
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 4
INDIRF4
ADDRLP4 92
INDIRP4
INDIRF4
ADDRLP4 32
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+4
ADDRLP4 4+4
INDIRF4
ADDRLP4 92
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRLP4 32
INDIRF4
MULF4
ADDF4
ASGNF4
ADDRLP4 4+8
ADDRLP4 4+8
INDIRF4
ADDRFP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRLP4 32
INDIRF4
MULF4
ADDF4
ASGNF4
line 1259
;1259:	VectorSubtract( end, start, dir );
ADDRLP4 100
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 4
INDIRF4
ADDRLP4 100
INDIRP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+4
ADDRLP4 4+4
INDIRF4
ADDRLP4 100
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
SUBF4
ASGNF4
ADDRLP4 16+8
ADDRLP4 4+8
INDIRF4
ADDRFP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
SUBF4
ASGNF4
line 1260
;1260:	VectorNormalize( dir );
ADDRLP4 16
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1262
;1261:
;1262:	scale = g_ngspeed.integer + random() * g_ngrandom.integer;
ADDRLP4 104
ADDRGP4 rand
CALLI4
ASGNI4
ADDRLP4 36
ADDRGP4 g_ngspeed+12
INDIRI4
CVIF4 4
ADDRLP4 104
INDIRI4
CNSTI4 32767
BANDI4
CVIF4 4
CNSTF4 1191181824
DIVF4
ADDRGP4 g_ngrandom+12
INDIRI4
CVIF4 4
MULF4
ADDF4
ASGNF4
line 1263
;1263:	VectorScale( dir, scale, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRLP4 16
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRLP4 16+4
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 16+8
INDIRF4
ADDRLP4 36
INDIRF4
MULF4
ASGNF4
line 1264
;1264:	SnapVector( bolt->s.pos.trDelta );
ADDRLP4 108
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 112
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 116
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1266
;1265:
;1266:	VectorCopy( start, bolt->r.currentOrigin );
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1268
;1267:
;1268:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $616
endproc fire_nail 120 4
export fire_prox
proc fire_prox 20 4
line 1276
;1269:}
;1270:
;1271:/*
;1272:=================
;1273:fire_prox
;1274:=================
;1275:*/
;1276:gentity_t *fire_prox( gentity_t *self, vec3_t start, vec3_t dir ) {
line 1279
;1277:	gentity_t	*bolt;
;1278:
;1279:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1281
;1280:
;1281:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1282
;1282:	bolt->classname = "prox mine";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $202
ASGNP4
line 1283
;1283:	bolt->nextthink = level.time + g_pltimeout.value;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CVIF4 4
ADDRGP4 g_pltimeout+8
INDIRF4
ADDF4
CVFI4 4
ASGNI4
line 1284
;1284:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 1285
;1285:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 1286
;1286:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 128
ASGNI4
line 1287
;1287:	bolt->s.generic3 = WP_PROX_LAUNCHER;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 12
ASGNI4
line 1288
;1288:	bolt->s.eFlags = 0;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 0
ASGNI4
line 1289
;1289:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 552
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1292
;1290://unlagged - projectile nudge
;1291:	// we'll need this for nudging projectiles later
;1292:	bolt->s.otherEntityNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1294
;1293://unlagged - projectile nudge
;1294:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1295
;1295:	bolt->damage = g_pldamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
ADDRGP4 g_pldamage+8
INDIRF4
CVFI4 4
ASGNI4
line 1296
;1296:	bolt->splashDamage = g_plsdamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 928
ADDP4
ADDRGP4 g_plsdamage+8
INDIRF4
CVFI4 4
ASGNI4
line 1297
;1297:	bolt->splashRadius = g_plsradius.value;
ADDRLP4 0
INDIRP4
CNSTI4 932
ADDP4
ADDRGP4 g_plsradius+8
INDIRF4
CVFI4 4
ASGNI4
line 1298
;1298:	bolt->methodOfDeath = MOD_PROXIMITY_MINE;
ADDRLP4 0
INDIRP4
CNSTI4 936
ADDP4
CNSTI4 30
ASGNI4
line 1299
;1299:	bolt->splashMethodOfDeath = MOD_PROXIMITY_MINE;
ADDRLP4 0
INDIRP4
CNSTI4 940
ADDP4
CNSTI4 30
ASGNI4
line 1300
;1300:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 100663297
ASGNI4
line 1301
;1301:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTP4 0
ASGNP4
line 1304
;1302:	// count is used to check if the prox mine left the player bbox
;1303:	// if count == 1 then the prox mine left the player bbox and can attack to it
;1304:	bolt->count = 0;
ADDRLP4 0
INDIRP4
CNSTI4 944
ADDP4
CNSTI4 0
ASGNI4
line 1307
;1305:
;1306:	//FIXME: we prolly wanna abuse another field
;1307:	bolt->s.generic1 = self->client->sess.sessionTeam;
ADDRLP4 0
INDIRP4
CNSTI4 216
ADDP4
ADDRFP4 0
INDIRP4
CNSTI4 556
ADDP4
INDIRP4
CNSTI4 1032
ADDP4
INDIRI4
ASGNI4
line 1308
;1308:	if (g_plgravity.integer == 1)
ADDRGP4 g_plgravity+12
INDIRI4
CNSTI4 1
NEI4 $679
line 1309
;1309:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $680
JUMPV
LABELV $679
line 1311
;1310:	else
;1311:	bolt->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
LABELV $680
line 1312
;1312:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
SUBI4
ASGNI4
line 1313
;1313:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1314
;1314:	VectorScale( dir, g_plspeed.value, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRGP4 g_plspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 g_plspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 g_plspeed+8
INDIRF4
MULF4
ASGNF4
line 1315
;1315:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1317
;1316:
;1317:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1319
;1318:
;1319:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $673
endproc fire_prox 20 4
export fire_flame
proc fire_flame 20 4
line 1327
;1320:}
;1321:
;1322:/*
;1323:=================
;1324:fire_flamethrower
;1325:=================
;1326:*/
;1327:gentity_t *fire_flame (gentity_t *self, vec3_t start, vec3_t dir) {
line 1330
;1328:	gentity_t	*bolt;
;1329:
;1330:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1332
;1331:
;1332:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1333
;1333:	bolt->classname = "flame";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $106
ASGNP4
line 1334
;1334:if(g_fthoming.integer == 0){
ADDRGP4 g_fthoming+12
INDIRI4
CNSTI4 0
NEI4 $687
line 1335
;1335:	bolt->nextthink = level.time + g_fttimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_fttimeout+12
INDIRI4
ADDI4
ASGNI4
line 1336
;1336:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 1337
;1337:}
LABELV $687
line 1338
;1338:if(g_fthoming.integer == 1){
ADDRGP4 g_fthoming+12
INDIRI4
CNSTI4 1
NEI4 $692
line 1339
;1339:	bolt->nextthink = level.time + 10;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 1340
;1340:	bolt->think = G_HomingMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_HomingMissile
ASGNP4
line 1341
;1341:    bolt->wait = level.time + g_fttimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_fttimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1342
;1342:}
LABELV $692
line 1343
;1343:if(g_fthoming.integer == 0){
ADDRGP4 g_fthoming+12
INDIRI4
CNSTI4 0
NEI4 $698
line 1344
;1344:if(g_ftguided.integer == 0){
ADDRGP4 g_ftguided+12
INDIRI4
CNSTI4 0
NEI4 $701
line 1345
;1345:	bolt->nextthink = level.time + g_fttimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_fttimeout+12
INDIRI4
ADDI4
ASGNI4
line 1346
;1346:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 1347
;1347:}
LABELV $701
line 1348
;1348:if(g_ftguided.integer == 1){
ADDRGP4 g_ftguided+12
INDIRI4
CNSTI4 1
NEI4 $706
line 1349
;1349:	bolt->nextthink = level.time + 50;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 1350
;1350:	bolt->think = Guided_Missile_Think;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Guided_Missile_Think
ASGNP4
line 1351
;1351:    bolt->wait = level.time + g_fttimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_fttimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1352
;1352:}
LABELV $706
line 1353
;1353:}
LABELV $698
line 1354
;1354:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 1355
;1355:	if (g_ftbounce.integer == 1)
ADDRGP4 g_ftbounce+12
INDIRI4
CNSTI4 1
NEI4 $712
line 1356
;1356:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
ADDRGP4 $713
JUMPV
LABELV $712
line 1358
;1357:	else
;1358:	if (g_ftbounce.integer == 2)
ADDRGP4 g_ftbounce+12
INDIRI4
CNSTI4 2
NEI4 $715
line 1359
;1359:	bolt->s.eFlags = EF_BOUNCE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 16
ASGNI4
ADDRGP4 $716
JUMPV
LABELV $715
line 1361
;1360:	else
;1361:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 128
ASGNI4
LABELV $716
LABELV $713
line 1362
;1362:	bolt->s.generic3 = WP_FLAMETHROWER;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 14
ASGNI4
line 1363
;1363:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 552
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1366
;1364://unlagged - projectile nudge
;1365:	// we'll need this for nudging projectiles later
;1366:	bolt->s.otherEntityNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1368
;1367://unlagged - projectile nudge
;1368:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1369
;1369:	bolt->damage = g_ftdamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
ADDRGP4 g_ftdamage+8
INDIRF4
CVFI4 4
ASGNI4
line 1370
;1370:	bolt->splashDamage = g_ftsdamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 928
ADDP4
ADDRGP4 g_ftsdamage+8
INDIRF4
CVFI4 4
ASGNI4
line 1371
;1371:	bolt->splashRadius = g_ftsradius.value;
ADDRLP4 0
INDIRP4
CNSTI4 932
ADDP4
ADDRGP4 g_ftsradius+8
INDIRF4
CVFI4 4
ASGNI4
line 1372
;1372:	bolt->methodOfDeath = MOD_FLAME;
ADDRLP4 0
INDIRP4
CNSTI4 936
ADDP4
CNSTI4 14
ASGNI4
line 1373
;1373:	bolt->splashMethodOfDeath = MOD_FLAME_SPLASH;
ADDRLP4 0
INDIRP4
CNSTI4 940
ADDP4
CNSTI4 15
ASGNI4
line 1374
;1374:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 100663297
ASGNI4
line 1375
;1375:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTP4 0
ASGNP4
line 1376
;1376:	if (g_ftgravity.integer == 1)
ADDRGP4 g_ftgravity+12
INDIRI4
CNSTI4 1
NEI4 $721
line 1377
;1377:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $722
JUMPV
LABELV $721
line 1379
;1378:	else
;1379:	bolt->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
LABELV $722
line 1380
;1380:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
SUBI4
ASGNI4
line 1381
;1381:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1382
;1382:	VectorScale( dir, g_ftspeed.value, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRGP4 g_ftspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 g_ftspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 g_ftspeed+8
INDIRF4
MULF4
ASGNF4
line 1383
;1383:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1384
;1384:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1386
;1385:
;1386:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $686
endproc fire_flame 20 4
export fire_antimatter
proc fire_antimatter 20 4
line 1394
;1387:}
;1388:
;1389:/*
;1390:=================
;1391:fire_antimatter
;1392:=================
;1393:*/
;1394:gentity_t *fire_antimatter (gentity_t *self, vec3_t start, vec3_t dir) {
line 1397
;1395:	gentity_t	*bolt;
;1396:
;1397:	VectorNormalize (dir);
ADDRFP4 8
INDIRP4
ARGP4
ADDRGP4 VectorNormalize
CALLF4
pop
line 1399
;1398:
;1399:	bolt = G_Spawn();
ADDRLP4 4
ADDRGP4 G_Spawn
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 4
INDIRP4
ASGNP4
line 1400
;1400:	bolt->classname = "antimatter";
ADDRLP4 0
INDIRP4
CNSTI4 564
ADDP4
ADDRGP4 $112
ASGNP4
line 1401
;1401:if(g_amhoming.integer == 0){
ADDRGP4 g_amhoming+12
INDIRI4
CNSTI4 0
NEI4 $729
line 1402
;1402:	bolt->nextthink = level.time + g_amtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_amtimeout+12
INDIRI4
ADDI4
ASGNI4
line 1403
;1403:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 1404
;1404:}
LABELV $729
line 1405
;1405:if(g_amhoming.integer == 1){
ADDRGP4 g_amhoming+12
INDIRI4
CNSTI4 1
NEI4 $734
line 1406
;1406:	bolt->nextthink = level.time + 10;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 10
ADDI4
ASGNI4
line 1407
;1407:	bolt->think = G_HomingMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_HomingMissile
ASGNP4
line 1408
;1408:    bolt->wait = level.time + g_amtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_amtimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1409
;1409:}
LABELV $734
line 1410
;1410:if(g_amhoming.integer == 0){
ADDRGP4 g_amhoming+12
INDIRI4
CNSTI4 0
NEI4 $740
line 1411
;1411:if(g_amguided.integer == 0){
ADDRGP4 g_amguided+12
INDIRI4
CNSTI4 0
NEI4 $743
line 1412
;1412:	bolt->nextthink = level.time + g_amtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_amtimeout+12
INDIRI4
ADDI4
ASGNI4
line 1413
;1413:	bolt->think = G_ExplodeMissile;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 G_ExplodeMissile
ASGNP4
line 1414
;1414:}
LABELV $743
line 1415
;1415:if(g_amguided.integer == 1){
ADDRGP4 g_amguided+12
INDIRI4
CNSTI4 1
NEI4 $748
line 1416
;1416:	bolt->nextthink = level.time + 50;
ADDRLP4 0
INDIRP4
CNSTI4 760
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
ADDI4
ASGNI4
line 1417
;1417:	bolt->think = Guided_Missile_Think;
ADDRLP4 0
INDIRP4
CNSTI4 768
ADDP4
ADDRGP4 Guided_Missile_Think
ASGNP4
line 1418
;1418:    bolt->wait = level.time + g_amtimeout.integer;
ADDRLP4 0
INDIRP4
CNSTI4 1012
ADDP4
ADDRGP4 level+32
INDIRI4
ADDRGP4 g_amtimeout+12
INDIRI4
ADDI4
CVIF4 4
ASGNF4
line 1419
;1419:}
LABELV $748
line 1420
;1420:}
LABELV $740
line 1421
;1421:	bolt->s.eType = ET_MISSILE;
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 3
ASGNI4
line 1422
;1422:	if (g_ambounce.integer == 1)
ADDRGP4 g_ambounce+12
INDIRI4
CNSTI4 1
NEI4 $754
line 1423
;1423:	bolt->s.eFlags = EF_BOUNCE_HALF;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 32
ASGNI4
ADDRGP4 $755
JUMPV
LABELV $754
line 1425
;1424:	else
;1425:	if (g_ambounce.integer == 2)
ADDRGP4 g_ambounce+12
INDIRI4
CNSTI4 2
NEI4 $757
line 1426
;1426:	bolt->s.eFlags = EF_BOUNCE;
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
CNSTI4 16
ASGNI4
ADDRGP4 $758
JUMPV
LABELV $757
line 1428
;1427:	else
;1428:	bolt->r.svFlags = SVF_USE_CURRENT_ORIGIN;
ADDRLP4 0
INDIRP4
CNSTI4 464
ADDP4
CNSTI4 128
ASGNI4
LABELV $758
LABELV $755
line 1429
;1429:	bolt->s.generic3 = WP_ANTIMATTER;
ADDRLP4 0
INDIRP4
CNSTI4 224
ADDP4
CNSTI4 15
ASGNI4
line 1430
;1430:	bolt->r.ownerNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 552
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1433
;1431://unlagged - projectile nudge
;1432:	// we'll need this for nudging projectiles later
;1433:	bolt->s.otherEntityNum = self->s.number;
ADDRLP4 0
INDIRP4
CNSTI4 152
ADDP4
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 1435
;1434://unlagged - projectile nudge
;1435:	bolt->parent = self;
ADDRLP4 0
INDIRP4
CNSTI4 640
ADDP4
ADDRFP4 0
INDIRP4
ASGNP4
line 1436
;1436:	bolt->damage = g_amdamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 924
ADDP4
ADDRGP4 g_amdamage+8
INDIRF4
CVFI4 4
ASGNI4
line 1437
;1437:	bolt->splashDamage = g_amsdamage.value;
ADDRLP4 0
INDIRP4
CNSTI4 928
ADDP4
ADDRGP4 g_amsdamage+8
INDIRF4
CVFI4 4
ASGNI4
line 1438
;1438:	bolt->splashRadius = g_amsradius.value;
ADDRLP4 0
INDIRP4
CNSTI4 932
ADDP4
ADDRGP4 g_amsradius+8
INDIRF4
CVFI4 4
ASGNI4
line 1439
;1439:	bolt->methodOfDeath = MOD_ANTIMATTER;
ADDRLP4 0
INDIRP4
CNSTI4 936
ADDP4
CNSTI4 16
ASGNI4
line 1440
;1440:	bolt->splashMethodOfDeath = MOD_ANTIMATTER_SPLASH;
ADDRLP4 0
INDIRP4
CNSTI4 940
ADDP4
CNSTI4 17
ASGNI4
line 1441
;1441:	bolt->clipmask = MASK_SHOT;
ADDRLP4 0
INDIRP4
CNSTI4 612
ADDP4
CNSTI4 100663297
ASGNI4
line 1442
;1442:	bolt->target_ent = NULL;
ADDRLP4 0
INDIRP4
CNSTI4 740
ADDP4
CNSTP4 0
ASGNP4
line 1443
;1443:	if (g_amgravity.integer == 1)
ADDRGP4 g_amgravity+12
INDIRI4
CNSTI4 1
NEI4 $763
line 1444
;1444:	bolt->s.pos.trType = TR_GRAVITY;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 5
ASGNI4
ADDRGP4 $764
JUMPV
LABELV $763
line 1446
;1445:	else
;1446:	bolt->s.pos.trType = TR_LINEAR;
ADDRLP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI4 2
ASGNI4
LABELV $764
line 1447
;1447:	bolt->s.pos.trTime = level.time - MISSILE_PRESTEP_TIME;		// move a bit on the very first frame
ADDRLP4 0
INDIRP4
CNSTI4 16
ADDP4
ADDRGP4 level+32
INDIRI4
CNSTI4 50
SUBI4
ASGNI4
line 1448
;1448:	VectorCopy( start, bolt->s.pos.trBase );
ADDRLP4 0
INDIRP4
CNSTI4 24
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1449
;1449:	VectorScale( dir, g_amspeed.value, bolt->s.pos.trDelta );
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ADDRFP4 8
INDIRP4
INDIRF4
ADDRGP4 g_amspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ADDRGP4 g_amspeed+8
INDIRF4
MULF4
ASGNF4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRFP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ADDRGP4 g_amspeed+8
INDIRF4
MULF4
ASGNF4
line 1450
;1450:	SnapVector( bolt->s.pos.trDelta );			// save net bandwidth
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 36
ADDP4
ASGNP4
ADDRLP4 8
INDIRP4
ADDRLP4 8
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 40
ADDP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRF4
CVFI4 4
CVIF4 4
ASGNF4
line 1451
;1451:	VectorCopy (start, bolt->r.currentOrigin);
ADDRLP4 0
INDIRP4
CNSTI4 528
ADDP4
ADDRFP4 4
INDIRP4
INDIRB
ASGNB 12
line 1453
;1452:
;1453:	return bolt;
ADDRLP4 0
INDIRP4
RETP4
LABELV $728
endproc fire_antimatter 20 4
import G_admin_namelog_cleanup
import G_admin_cleanup
import G_admin_duration
import G_admin_buffer_end
import G_admin_buffer_begin
import G_admin_buffer_print
import G_admin_print
import G_admin_shuffle
import G_admin_warn
import G_admin_slap
import G_admin_orient
import G_admin_disorient
import G_admin_unlock
import G_admin_lock
import G_admin_namelog
import G_admin_nextmap
import G_admin_restart
import G_admin_rename
import G_admin_spec999
import G_admin_passvote
import G_admin_cancelvote
import G_admin_allready
import G_admin_admintest
import G_admin_help
import G_admin_showbans
import G_admin_mute
import G_admin_map
import G_admin_listplayers
import G_admin_listadmins
import G_admin_putteam
import G_admin_unban
import G_admin_ban
import G_admin_adjustban
import G_admin_kick
import G_admin_setlevel
import G_admin_time
import G_admin_parse_time
import G_admin_level
import G_admin_namelog_update
import G_admin_name_check
import G_admin_permission
import G_admin_readconfig
import G_admin_cmd_check
import G_admin_ban_check
import G_ConfigClientExcellent
import G_checkForMultiKill
import G_CheckForSpree
import G_RunStreakLogic
import G_ReadAltKillSettings
import AU_Cvar_VariableString
import G_ArenaScriptRandom
import G_ArenaScriptAutoFloat
import G_ArenaScriptAutoNonPointChar
import G_ArenaScriptAutoChar
import G_ArenaScriptAutoInt
import G_ArenaScriptFindFloat
import G_ArenaScriptFindChar
import G_ArenaScriptFindInt
import Svcmd_SaveSession_f
import Svcmd_For_f
import Svcmd_SystemCommand_f
import Svcmd_ClientCommand_f
import Svcmd_Editline_f
import Svcmd_Random_f
import Svcmd_Cvar_f
import Svcmd_Operation_f
import Svcmd_Condition_f
import Svcmd_MessageWrapper
import Svcmd_ListIP_f
import Svcmd_Chat_f
import Svcmd_DumpUser_f
import Svcmd_EjectClient_f
import Svcmd_BannerPrint_f
import Svcmd_ReplaceTexture_f
import Svcmd_CenterPrint_f
import Svcmd_TeamMessage_f
import Svcmd_Status_f
import trap_SnapVector
import trap_GeneticParentsAndChildSelection
import trap_BotResetWeaponState
import trap_BotFreeWeaponState
import trap_BotAllocWeaponState
import trap_BotLoadWeaponWeights
import trap_BotGetWeaponInfo
import trap_BotChooseBestFightWeapon
import trap_BotAddAvoidSpot
import trap_BotInitMoveState
import trap_BotFreeMoveState
import trap_BotAllocMoveState
import trap_BotPredictVisiblePosition
import trap_BotMovementViewTarget
import trap_BotReachabilityArea
import trap_BotResetLastAvoidReach
import trap_BotResetAvoidReach
import trap_BotMoveInDirection
import trap_BotMoveToGoal
import trap_BotResetMoveState
import trap_BotFreeGoalState
import trap_BotAllocGoalState
import trap_BotMutateGoalFuzzyLogic
import trap_BotSaveGoalFuzzyLogic
import trap_BotInterbreedGoalFuzzyLogic
import trap_BotFreeItemWeights
import trap_BotLoadItemWeights
import trap_BotUpdateEntityItems
import trap_BotInitLevelItems
import trap_BotSetAvoidGoalTime
import trap_BotAvoidGoalTime
import trap_BotGetLevelItemGoal
import trap_BotGetMapLocationGoal
import trap_BotGetNextCampSpotGoal
import trap_BotItemGoalInVisButNotVisible
import trap_BotTouchingGoal
import trap_BotChooseNBGItem
import trap_BotChooseLTGItem
import trap_BotGetSecondGoal
import trap_BotGetTopGoal
import trap_BotGoalName
import trap_BotDumpGoalStack
import trap_BotDumpAvoidGoals
import trap_BotEmptyGoalStack
import trap_BotPopGoal
import trap_BotPushGoal
import trap_BotResetAvoidGoals
import trap_BotRemoveFromAvoidGoals
import trap_BotResetGoalState
import trap_BotSetChatName
import trap_BotSetChatGender
import trap_BotLoadChatFile
import trap_BotReplaceSynonyms
import trap_UnifyWhiteSpaces
import trap_BotMatchVariable
import trap_BotFindMatch
import trap_StringContains
import trap_BotGetChatMessage
import trap_BotEnterChat
import trap_BotChatLength
import trap_BotReplyChat
import trap_BotNumInitialChats
import trap_BotInitialChat
import trap_BotNumConsoleMessages
import trap_BotNextConsoleMessage
import trap_BotRemoveConsoleMessage
import trap_BotQueueConsoleMessage
import trap_BotFreeChatState
import trap_BotAllocChatState
import trap_Characteristic_String
import trap_Characteristic_BInteger
import trap_Characteristic_Integer
import trap_Characteristic_BFloat
import trap_Characteristic_Float
import trap_BotFreeCharacter
import trap_BotLoadCharacter
import trap_EA_ResetInput
import trap_EA_GetInput
import trap_EA_EndRegular
import trap_EA_View
import trap_EA_Move
import trap_EA_DelayedJump
import trap_EA_Jump
import trap_EA_SelectWeapon
import trap_EA_MoveRight
import trap_EA_MoveLeft
import trap_EA_MoveBack
import trap_EA_MoveForward
import trap_EA_MoveDown
import trap_EA_MoveUp
import trap_EA_Crouch
import trap_EA_Respawn
import trap_EA_Use
import trap_EA_Attack
import trap_EA_Talk
import trap_EA_Gesture
import trap_EA_Action
import trap_EA_Command
import trap_EA_SayTeam
import trap_EA_Say
import trap_AAS_PredictClientMovement
import trap_AAS_Swimming
import trap_AAS_AlternativeRouteGoals
import trap_AAS_PredictRoute
import trap_AAS_EnableRoutingArea
import trap_AAS_AreaTravelTimeToGoalArea
import trap_AAS_AreaReachability
import trap_AAS_IntForBSPEpairKey
import trap_AAS_FloatForBSPEpairKey
import trap_AAS_VectorForBSPEpairKey
import trap_AAS_ValueForBSPEpairKey
import trap_AAS_NextBSPEntity
import trap_AAS_PointContents
import trap_AAS_TraceAreas
import trap_AAS_PointReachabilityAreaIndex
import trap_AAS_PointAreaNum
import trap_AAS_Time
import trap_AAS_PresenceTypeBoundingBox
import trap_AAS_Initialized
import trap_AAS_EntityInfo
import trap_AAS_AreaInfo
import trap_AAS_BBoxAreas
import trap_BotUserCommand
import trap_BotGetServerCommand
import trap_BotGetSnapshotEntity
import trap_BotLibTest
import trap_BotLibUpdateEntity
import trap_BotLibLoadMap
import trap_BotLibStartFrame
import trap_BotLibDefine
import trap_BotLibVarGet
import trap_BotLibVarSet
import trap_BotLibShutdown
import trap_BotLibSetup
import trap_DebugPolygonDelete
import trap_DebugPolygonCreate
import trap_GetEntityToken
import trap_GetUsercmd
import trap_BotFreeClient
import trap_BotAllocateClient
import trap_EntityContact
import trap_EntitiesInBox
import trap_UnlinkEntity
import trap_LinkEntity
import trap_AreasConnected
import trap_AdjustAreaPortalState
import trap_InPVSIgnorePortals
import trap_InPVS
import trap_PointContents
import trap_Trace
import trap_SetBrushModel
import trap_GetServerinfo
import trap_SetUserinfo
import trap_GetUserinfo
import trap_GetConfigstring
import trap_SetConfigstring
import trap_SendServerCommand
import trap_DropClient
import trap_LocateGameData
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_VariableIntegerValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_SendConsoleCommand
import trap_System
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Args
import trap_Argv
import trap_Argc
import trap_RealTime
import trap_Milliseconds
import trap_Error
import trap_Printf
import g_maxNameChanges
import g_minNameChangePeriod
import g_warningExpire
import g_maxWarnings
import g_publicAdminMessages
import g_specChat
import g_adminMaxBan
import g_adminTempBan
import g_adminNameProtect
import g_adminParseSay
import g_adminLog
import g_admin
import g_floodMinTime
import g_floodMaxDemerits
import g_spreeDiv
import g_altExcellent
import g_sprees
import g_lagLightning
import sv_fps
import g_truePing
import g_delagHitscan
import g_blueTeamClientNumbers
import g_redTeamClientNumbers
import g_humanplayers
import g_maxvotes
import g_voteMaxFraglimit
import g_voteMinFraglimit
import g_voteMaxTimelimit
import g_voteMinTimelimit
import g_voteGametypes
import g_voteBan
import g_voteNames
import g_mappools
import g_autonextmap
import g_catchup
import g_persistantpowerups
import g_awardpushing
import g_elimination_ctf_oneway
import g_lms_mode
import g_lms_lives
import g_ffa_gt
import g_regen
import g_vampireMaxHealth
import g_vampire
import g_instantgib
import g_rockets
import g_elimination_lockspectator
import g_eliminationred_holdable
import g_eliminationred_flight
import g_eliminationred_regen
import g_eliminationred_invis
import g_eliminationred_bsuit
import g_eliminationred_haste
import g_eliminationred_quad
import g_eliminationred_antimatter
import g_eliminationred_flame
import g_eliminationred_nail
import g_eliminationred_mine
import g_eliminationred_chain
import g_eliminationred_plasmagun
import g_eliminationred_lightning
import g_eliminationred_railgun
import g_eliminationred_rocket
import g_eliminationred_grenade
import g_eliminationred_shotgun
import g_eliminationred_machinegun
import g_eliminationred_gauntlet
import g_eliminationred_grapple
import g_eliminationred_bfg
import g_eliminationred_startArmor
import g_eliminationred_startHealth
import g_elimination_holdable
import g_elimination_items
import g_elimination_flight
import g_elimination_regen
import g_elimination_invis
import g_elimination_bsuit
import g_elimination_haste
import g_elimination_quad
import g_elimination_antimatter
import g_elimination_flame
import g_elimination_nail
import g_elimination_mine
import g_elimination_chain
import g_elimination_plasmagun
import g_elimination_lightning
import g_elimination_railgun
import g_elimination_rocket
import g_elimination_grenade
import g_elimination_shotgun
import g_elimination_machinegun
import g_elimination_gauntlet
import g_elimination_allgametypes
import g_elimination_activewarmup
import g_elimination_warmup
import g_elimination_roundtime
import g_elimination_grapple
import g_elimination_bfg
import g_elimination_startArmor
import g_elimination_startHealth
import g_elimination_selfdamage
import g_spawnprotect
import g_music
import g_proxMineTimeout
import g_enableBreath
import g_enableDust
import g_blueteam
import g_redteam
import g_singlePlayer
import g_rankings
import pmove_float
import pmove_msec
import pmove_fixed
import g_smoothClients
import g_cubeTimeout
import g_obeliskRespawnDelay
import g_obeliskRegenAmount
import g_obeliskRegenPeriod
import g_obeliskHealth
import g_filterBan
import g_banIPs
import g_teamForceBalance
import g_teamAutoJoin
import g_allowVote
import g_blood
import g_doWarmup
import g_warmup
import g_votecustom
import g_votemaps
import g_motdfile
import g_motd
import g_synchronousClients
import g_weaponTeamRespawn
import g_weaponRespawn
import g_allowSyncCutscene
import g_debugBotspawns
import g_debugVariables
import g_debugScore
import g_debugCameras
import g_debugDamage
import g_debugAlloc
import g_debugMove
import g_disableCutscenes
import g_inactivity
import g_respawntime
import g_forcerespawn
import g_quadfactor
import g_knockback
import g_speed
import g_damageModifier
import g_gravityModifier
import g_gravity
import g_needpass
import g_password
import g_friendlyFire
import g_capturelimit
import g_timelimit
import g_fraglimit
import g_voteflags
import g_elimflags
import g_videoflags
import g_dmflags
import g_restarted
import g_maxGameClients
import g_maxclients
import g_cheats
import g_dedicated
import g_gametype
import g_poweruprespawn
import g_megahealthrespawn
import g_holdablerespawn
import g_ammorespawn
import g_healthrespawn
import g_armorrespawn
import g_ammolimit
import g_drowndamage
import g_speedfactor
import g_jumpheight
import g_respawnwait
import g_armorprotect
import g_medkitmodifier
import g_hastefirespeed
import g_autoflagreturn
import g_droppeditemtime
import g_slowhealthregen
import g_fasthealthregen
import g_invultime
import g_invulmove
import g_portalhealth
import g_portaltimeout
import g_flagrespawn
import g_noplayerclip
import g_falldamagebig
import g_falldamagesmall
import g_randomteleport
import g_maxweaponpickup
import g_slimedamage
import g_lavadamage
import g_waterdamage
import g_medkitlimit
import g_kamikazeinf
import g_portalinf
import g_teleporterinf
import g_medkitinf
import g_invulinf
import g_kamikazeinfinf
import g_kill
import g_mapcycleposition
import g_useMapcycle
import g_mapcycle
import info_zombie
import g_randomItems
import g_accelerate
import g_slickmove
import g_overlay
import g_lavatowater
import onandroid
import eliminationrespawn
import eliminationredrespawn
import g_spectatorspeed
import g_regenarmor
import tex_newname
import tex_name
import g_roundmode
import g_scoreboardlock
import g_connectmsg
import g_currentmap
import g_tests
import cl_language
import cl_selectedmod
import g_maxEntities
import g_npcdrop
import g_safe
import g_allowgravitygun
import g_allowphysgun
import g_allowtoolgun
import g_allownoclip
import g_allowitems
import g_allownpc
import g_allowsettings
import g_allowprops
import save8_epsession
import save8_session0_lvl
import save8_session0
import save7_epsession
import save7_session0_lvl
import save7_session0
import save6_epsession
import save6_session0_lvl
import save6_session0
import save5_epsession
import save5_session0_lvl
import save5_session0
import save4_epsession
import save4_session0_lvl
import save4_session0
import save3_epsession
import save3_session0_lvl
import save3_session0
import save2_epsession
import save2_session0_lvl
import save2_session0
import save1_epsession
import save1_session0_lvl
import save1_session0
import save_epsession
import save_session0_lvl
import save_session0
import save8_curmap
import save7_curmap
import save6_curmap
import save5_curmap
import save4_curmap
import save3_curmap
import save2_curmap
import save1_curmap
import save_curmap
import g_skyColorA
import g_skyColorB
import g_skyColorG
import g_skyColorR
import g_skyShader
import g_fogColorA
import g_fogColorB
import g_fogColorG
import g_fogColorR
import g_fogInterval
import g_fogDistance
import g_fogShader
import g_fogModel
import g_teamred_pickupitems
import g_teamred_respawnwait
import g_teamred_infammo
import g_teamred_damage
import g_teamred_firespeed
import g_teamred_gravityModifier
import g_teamred_speed
import g_teamblue_pickupitems
import g_teamblue_respawnwait
import g_teamblue_infammo
import g_teamblue_damage
import g_teamblue_firespeed
import g_teamblue_gravityModifier
import g_teamblue_speed
import g_amweaponcount
import g_ftweaponcount
import g_cgweaponcount
import g_plweaponcount
import g_ngweaponcount
import g_bfgweaponcount
import g_pgweaponcount
import g_rgweaponcount
import g_lgweaponcount
import g_rlweaponcount
import g_glweaponcount
import g_sgweaponcount
import g_mgweaponcount
import g_ftammocount
import g_cgammocount
import g_plammocount
import g_ngammocount
import g_bfgammocount
import g_pgammocount
import g_rgammocount
import g_lgammocount
import g_rlammocount
import g_glammocount
import g_sgammocount
import g_mgammocount
import g_ammoregenhealthmodifier
import g_ammoregengravitymodifier
import g_ammoregenspeedfactor
import g_ammoregendamagefactor
import g_ammoregen_infammo
import g_ammoregenfirespeed
import g_guard_infammo
import g_guardgravitymodifier
import g_guardspeedfactor
import g_guarddamagefactor
import g_guardfirespeed
import g_guardhealthmodifier
import g_doublerhealthmodifier
import g_doubler_infammo
import g_doublergravitymodifier
import g_doublerspeedfactor
import g_doublerdamagefactor
import g_doublerfirespeed
import g_scouthealthmodifier
import g_scout_infammo
import g_scoutgravitymodifier
import g_scoutdamagefactor
import g_scoutfirespeed
import g_scoutspeedfactor
import g_amguided
import g_amhoming
import g_ftguided
import g_fthoming
import g_ngguided
import g_nghoming
import g_bfgguided
import g_bfghoming
import g_pgguided
import g_pghoming
import g_rlguided
import g_rlhoming
import g_glguided
import g_glhoming
import g_amknockback
import g_ambouncemodifier
import g_aminf
import g_amvampire
import g_amgravity
import g_ambounce
import g_amtimeout
import g_amdamage
import g_amsdamage
import g_amspeed
import g_amsradius
import g_amdelay
import g_ftknockback
import g_ftbouncemodifier
import g_ftinf
import g_ftvampire
import g_ftgravity
import g_ftbounce
import g_fttimeout
import g_ftdamage
import g_ftsdamage
import g_ftspeed
import g_ftsradius
import g_ftdelay
import g_cgknockback
import g_cginf
import g_cgvampire
import g_cgspread
import g_cgdamage
import g_cgdelay
import g_plknockback
import g_plinf
import g_plvampire
import g_plgravity
import g_pldamage
import g_plsdamage
import g_plsradius
import g_pltimeout
import g_plspeed
import g_pldelay
import g_ngknockback
import g_ngbouncemodifier
import g_nginf
import g_ngvampire
import g_ngrandom
import g_nggravity
import g_ngbounce
import g_ngcount
import g_ngtimeout
import g_ngdamage
import g_ngspread
import g_ngspeed
import g_ngdelay
import g_bfgknockback
import g_bfgbouncemodifier
import g_bfginf
import g_bfgvampire
import g_bfggravity
import g_bfgbounce
import g_bfgdamage
import g_bfgsdamage
import g_bfgsradius
import g_bfgtimeout
import g_bfgspeed
import g_bfgdelay
import g_pgknockback
import g_pgbouncemodifier
import g_pginf
import g_pgvampire
import g_pggravity
import g_pgbounce
import g_pgtimeout
import g_pgdamage
import g_pgsdamage
import g_pgspeed
import g_pgsradius
import g_pgdelay
import g_rgknockback
import g_rginf
import g_rgvampire
import g_rgdamage
import g_rgdelay
import g_lgknockback
import g_lginf
import g_lgvampire
import g_lgsradius
import g_lgsdamage
import g_lgexplode
import g_lgrange
import g_lgdelay
import g_lgdamage
import g_rlknockback
import g_rlbouncemodifier
import g_rlinf
import g_rlvampire
import g_rlgravity
import g_rlbounce
import g_rldamage
import g_rlsdamage
import g_rlsradius
import g_rltimeout
import g_rlspeed
import g_rldelay
import g_glknockback
import g_glbouncemodifier
import g_glinf
import g_glvampire
import g_glgravity
import g_glbounce
import g_gldamage
import g_glsdamage
import g_glsradius
import g_gltimeout
import g_glspeed
import g_gldelay
import g_sgknockback
import g_sginf
import g_sgvampire
import g_sgcount
import g_sgsradius
import g_sgsdamage
import g_sgexplode
import g_sgspread
import g_sgdamage
import g_sgdelay
import g_mgknockback
import g_mginf
import g_mgvampire
import g_mgsradius
import g_mgsdamage
import g_mgexplode
import g_mgspread
import g_mgdamage
import g_mgdelay
import g_gknockback
import g_grange
import g_gdamage
import g_gdelay
import mod_ghtimeout
import g_ghtimeout
import g_ghspeed
import g_minigame
import g_physdamage
import g_physimpulse
import g_physimpact
import cl_giantcharheight
import cl_giantcharwidth
import cl_bigcharheight
import cl_bigcharwidth
import cl_smallcharheight
import cl_smallcharwidth
import cl_propgapwidth
import cl_propspacewidth
import cl_propheight
import cl_propsmallsizescale
import mod_gravity
import mod_zsround
import mod_zround
import mod_roundmode
import mod_overlay
import mod_slickmove
import mod_accelerate
import mod_teamred_damage
import mod_teamblue_damage
import mod_invulinf
import mod_kamikazeinf
import mod_portalinf
import mod_teleporterinf
import mod_medkitinf
import mod_medkitlimit
import mod_teamblue_firespeed
import mod_teamred_firespeed
import mod_invulmove
import mod_noplayerclip
import mod_flighttime
import mod_regentime
import mod_invistime
import mod_hastetime
import mod_bsuittime
import mod_quadtime
import mod_doublerfirespeed
import mod_guardfirespeed
import mod_poweruptime
import mod_scoutfirespeed
import mod_ammoregenfirespeed
import mod_hastefirespeed
import mod_vampire_max_health
import mod_amdelay
import mod_ftdelay
import mod_cgspread
import mod_cgdelay
import mod_pldelay
import mod_ngdelay
import mod_bfgdelay
import mod_rgdelay
import mod_pgdelay
import mod_lgrange
import mod_lgdelay
import mod_rldelay
import mod_gldelay
import mod_sgcount
import mod_sgspread
import mod_sgdelay
import mod_mgspread
import mod_mgdelay
import mod_gdelay
import mod_jumpheight
import mod_ammolimit
import cmapname
import CustomModRun
import Newmodcommands
import nailgun_think
import bfg_think
import grenade_think
import rocket_think
import plasma_think
import G_SendSwepWeapons
import G_SendWeaponProperties
import g_entities
import level
import Team_ForceGesture
import Team_DD_bonusAtPoints
import Team_RemoveDoubleDominationPoints
import Team_SpawnDoubleDominationPoints
import Pickup_Team
import CheckTeamStatus
import TeamplayInfoMessage
import Team_GetLocationMsg
import Team_GetLocation
import Team_Dom_SpawnPoints
import SelectDoubleDominationSpawnPoint
import SelectCTFSpawnPoint
import Team_FreeEntity
import Team_ReturnFlag
import Team_InitGame
import Team_CheckHurtCarrier
import Team_FragBonuses
import Team_DroppedFlagThink
import AddTeamScore
import TeamColorString
import OtherTeamName
import TeamName
import OtherTeam
import BotTestAAS
import BotAIStartFrame
import BotAIShutdownClient
import BotAISetupClient
import BotAILoadMap
import BotAIShutdown
import BotAISetup
import G_LoadMapfileAll_f
import G_LoadMapfile_f
import G_LoadMapfileAll
import G_LoadMapfile
import G_WriteMapfileAll_f
import G_WriteMapfile_f
import G_ClassnameAllowedAll
import G_ClassnameAllowed
import G_GetMapLockArena
import SkippedChar
import G_LoadMapcycle
import G_sendMapcycle
import G_drawMapcycle
import G_drawAllowedMaps
import G_mapIsVoteable
import G_GetMapfile
import G_GetNextMap
import G_GetNextMapCycle
import G_GotoNextMapCycle
import getCustomVote
import VoteParseCustomVotes
import allowedFraglimit
import allowedTimelimit
import allowedGametype
import allowedMap
import getMappage
import custom_vote_info
import ClientLeaving
import CountVotes
import CheckVote
import allowedVote
import PlayerStore_restore
import PlayerStore_store
import PlayerStoreInit
import BotInterbreedEndMatch
import Svcmd_BotList_f
import Svcmd_AddBot_f
import G_BotConnect
import G_RemoveQueuedBotBegin
import G_CheckBotSpawn
import G_GetBotInfoByName
import G_GetBotInfoByNumber
import G_InitBots
import SpawnModelsOnVictoryPads
import UpdateTournamentInfo
import G_WriteSessionData
import G_InitWorldSession
import G_SaveClientSessionDataSave
import G_InitSessionData
import G_ReadSessionData
import Svcmd_GameMem_f
import G_TeamFromString
import ShuffleTeams
import CheckObeliskAttack
import Team_CheckDroppedItem
import OnSameTeam
import G_DefaultSwep
import G_CheckSwepAmmo
import G_CheckSwep
import G_RunClient
import ClientEndFrame
import ClientThink
import PrecacheBotAssets
import SetCustomWeapons
import SetSandboxWeapons
import SetUnlimitedWeapons
import SetupCustomBot
import LinkBotSpawnEntity
import DropClientSilently
import ClientCommand
import ClientBegin
import ClientDisconnect
import ClientUserinfoChanged
import ClientConnect
import G_NpcFactionProp
import G_LevelLoadComplete
import CheckTeamVote
import LogExit
import G_Error
import G_Printf
import SendYourTeamMessageToTeam
import SendDominationPointsStatusMessageToAllClients
import SendDDtimetakenMessageToAllClients
import SendEliminationMessageToAllClients
import SendScoreboardMessageToAllClients
import G_LogPrintf
import ExitLevel
import AddTournamentQueue
import G_RunThink
import CheckTeamLeader
import SetLeader
import FindIntermissionPoint
import SendCustomVoteCommands
import DominationPointStatusMessage
import DominationPointNamesMessage
import RespawnTimeMessage
import EliminationMessage
import ObeliskHealthMessage
import AttackingTeamMessage
import YourTeamMessage
import DoubleDominationScoreTimeMessage
import DeathmatchScoreboardMessage
import G_SetStats
import MoveClientToIntermission
import G_StartCarExplode
import G_StartKamikaze
import KamikazeShockWave
import KamikazeRadiusDamage
import CarExplodeDamage
import KamikazeDamage
import FireWeapon
import ClientForString
import G_FilterPacket
import G_ProcessIPBans
import ConsoleCommand
import SpawnPointIsActive
import SpotWouldTelefrag
import CalculateRanks
import AddScore
import player_die
import ClientSpawn
import InitBodyQue
import InitClientResp
import InitClientPersistant
import BeginIntermission
import ClientRespawn
import CopyToBodyQue
import SelectSpawnPoint
import SetClientViewAngle
import PickTeam
import TeamLeader
import LMSpoint
import EndEliminationRound
import DisableWeapons
import EnableWeapons
import RespawnDead
import RespawnAll
import TeamHealthCount
import TeamLivingCount
import TeamCount
import G_PredictPlayerMove
import G_UnTimeShiftClient
import G_UndoTimeShiftFor
import G_DoTimeShiftFor
import G_UnTimeShiftAllClients
import G_TimeShiftAllClients
import G_StoreHistory
import G_ResetHistory
import Laser_Think
import Laser_Gen
import Weapon_HookThink
import Weapon_HookFree
import CheckGauntletAttack
import SnapVectorTowards
import CalcMuzzlePoint
import LogAccuracyHit
import G_FindEntityForClientNum
import G_FindEntityForEntityNum
import G_ShowObjects
import G_HideObjects
import G_BounceProp
import G_RunProp
import G_ModProp
import DropPortalDestination
import DropPortalSource
import TeleportPlayer
import lock_touch
import trigger_teleporter_touch
import Break_Breakable
import Touch_DoorTrigger
import G_RunMover
import fire_nails
import fire_blaster
import TossClientCubes
import TossClientPersistantPowerups
import TossClientItems
import body_die
import G_InvulnerabilityEffect
import G_RadiusDamage
import G_ExitVehicle
import G_CarDamage
import G_PropDamage
import G_Damage
import CanDamage
import target_finish_use
import target_finish_think
import BuildShaderStateConfig
import AddRemap
import G_SetTargetname
import G_SetTarget
import G_SetOrigin
import G_AddEvent
import G_AddPredictableEvent
import vtos
import tv
import G_TouchSolids
import G_TouchTriggers
import G_EntitiesFree
import G_FreeEntity
import G_GlobalSound
import G_Sound
import G_TempEntity
import G_Spawn
import findradius
import G_InitGentity
import CrosshairPointGravity
import CrosshairPointPhys
import FindEntityForGravitygun
import FindEntityForPhysgun
import VehiclePhys
import botsandbox_check
import G_CalculatePlayerScore
import G_FadeIn
import G_FadeOut
import G_Fade
import G_GetScoringMapName
import G_SetMovedir
import G_UseDeathTargets
import G_UseTargets
import G_PickTarget
import G_ScrFind
import G_Find
import G_KillBox
import G_TeamCommand
import G_SoundIndex
import G_ModelIndex
import Throw_Item
import SaveRegisteredItems
import RegisterItem
import ClearRegisteredItems
import Touch_Item2
import Touch_Item
import Set_Weapon
import Set_Ammo
import Add_Ammo
import ArmorIndex
import Think_Weapon
import FinishSpawningItem
import G_SpawnItem
import SetRespawn
import LaunchBackpack
import LaunchItem
import Drop_Item
import PrecacheItem
import UseHoldableItem
import RespawnItemCtf
import RespawnItem
import G_RunItem
import G_CheckTeamItems
import writeFile_string
import writeFile_int
import readFile_string
import readFile_int
import SanitizeString
import G_ClientIsLagging
import G_ClientNumberFromString
import Cmd_AdminMessage_f
import G_FloodLimited
import G_ClientNumbersFromString
import G_SanitiseString
import G_MatchOnePlayer
import G_DecolorString
import G_SayConcatArgs
import G_SayArgv
import G_SayArgc
import NextCustomRound_f
import G_Say
import ConcatArgs
import Cmd_FollowCycle_f
import SetTeam
import BroadcastTeamChange
import StopFollowing
import Cmd_Score_f
import G_NewString
import G_SpawnEntitiesFromString
import G_SpawnVector4
import G_SpawnVector
import G_SpawnInt
import G_SpawnFloat
import G_SpawnString
import MiTechEntityList
import BG_TeamName
import BG_GetVehicleSettings
import BG_VehicleCheckClass
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_DefragmentMemory
import BG_Free
import BG_InitMemory
import BG_Alloc
import BG_CanAlloc
import BG_CanItemBeGrabbed
import BG_FindItemForBackpack
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindSwepAmmo
import BG_FindSwep
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import COM_LoadLevelScores
import COM_CalculatePlayerScore
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import vectoyaw
import AngleDifference
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import Q_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import Lerp
import VelocityToAxis
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import Q_snprintf
import Q_vsnprintf
import strtol
import _atoi
import atoi
import strtod
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import ifstrlenru
import strlenru
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $327
byte 1 71
byte 1 117
byte 1 105
byte 1 100
byte 1 101
byte 1 100
byte 1 95
byte 1 77
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 95
byte 1 84
byte 1 104
byte 1 105
byte 1 110
byte 1 107
byte 1 32
byte 1 58
byte 1 32
byte 1 109
byte 1 105
byte 1 115
byte 1 115
byte 1 105
byte 1 108
byte 1 101
byte 1 32
byte 1 104
byte 1 97
byte 1 115
byte 1 32
byte 1 110
byte 1 111
byte 1 32
byte 1 111
byte 1 119
byte 1 110
byte 1 101
byte 1 114
byte 1 33
byte 1 10
byte 1 0
align 1
LABELV $239
byte 1 104
byte 1 111
byte 1 111
byte 1 107
byte 1 0
align 1
LABELV $202
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 32
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 0
align 1
LABELV $182
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 95
byte 1 116
byte 1 114
byte 1 105
byte 1 103
byte 1 103
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $181
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 112
byte 1 114
byte 1 111
byte 1 120
byte 1 109
byte 1 105
byte 1 110
byte 1 101
byte 1 47
byte 1 119
byte 1 115
byte 1 116
byte 1 98
byte 1 116
byte 1 105
byte 1 99
byte 1 107
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $161
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 98
byte 1 108
byte 1 117
byte 1 101
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $159
byte 1 116
byte 1 101
byte 1 97
byte 1 109
byte 1 95
byte 1 67
byte 1 84
byte 1 70
byte 1 95
byte 1 114
byte 1 101
byte 1 100
byte 1 102
byte 1 108
byte 1 97
byte 1 103
byte 1 0
align 1
LABELV $112
byte 1 97
byte 1 110
byte 1 116
byte 1 105
byte 1 109
byte 1 97
byte 1 116
byte 1 116
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $106
byte 1 102
byte 1 108
byte 1 97
byte 1 109
byte 1 101
byte 1 0
align 1
LABELV $100
byte 1 110
byte 1 97
byte 1 105
byte 1 108
byte 1 0
align 1
LABELV $94
byte 1 114
byte 1 111
byte 1 99
byte 1 107
byte 1 101
byte 1 116
byte 1 0
align 1
LABELV $88
byte 1 98
byte 1 102
byte 1 103
byte 1 0
align 1
LABELV $82
byte 1 103
byte 1 114
byte 1 101
byte 1 110
byte 1 97
byte 1 100
byte 1 101
byte 1 0
align 1
LABELV $76
byte 1 112
byte 1 108
byte 1 97
byte 1 115
byte 1 109
byte 1 97
byte 1 0
