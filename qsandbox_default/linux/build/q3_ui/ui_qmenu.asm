data
export menu_text_color
align 4
LABELV menu_text_color
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export menu_dim_color
align 4
LABELV menu_dim_color
byte 4 0
byte 4 0
byte 4 0
byte 4 1061158912
export color_black
align 4
LABELV color_black
byte 4 0
byte 4 0
byte 4 0
byte 4 1065353216
export color_white
align 4
LABELV color_white
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export color_yellow
align 4
LABELV color_yellow
byte 4 1065353216
byte 4 1065353216
byte 4 0
byte 4 1065353216
export color_blue
align 4
LABELV color_blue
byte 4 0
byte 4 0
byte 4 1065353216
byte 4 1065353216
export color_lightOrange
align 4
LABELV color_lightOrange
byte 4 1050253722
byte 4 1055286886
byte 4 1058306785
byte 4 1065353216
export color_orange
align 4
LABELV color_orange
byte 4 1050253722
byte 4 1055286886
byte 4 1058306785
byte 4 1065353216
export color_red
align 4
LABELV color_red
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export color_realred
align 4
LABELV color_realred
byte 4 1065353216
byte 4 0
byte 4 0
byte 4 1065353216
export color_dim
align 4
LABELV color_dim
byte 4 0
byte 4 0
byte 4 0
byte 4 1048576000
export color_green
align 4
LABELV color_green
byte 4 0
byte 4 1065185444
byte 4 0
byte 4 1065353216
export pulse_color
align 4
LABELV pulse_color
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export text_color_disabled
align 4
LABELV text_color_disabled
byte 4 1036831949
byte 4 1036831949
byte 4 1045220557
byte 4 1065353216
export text_color_normal
align 4
LABELV text_color_normal
byte 4 1051931443
byte 4 1056964608
byte 4 1056964608
byte 4 1065353216
export text_color_highlight
align 4
LABELV text_color_highlight
byte 4 1065185444
byte 4 1063675494
byte 4 1056964608
byte 4 1065353216
export text_color_highlighty
align 4
LABELV text_color_highlighty
byte 4 1065185444
byte 4 1063675494
byte 4 1056964608
byte 4 1065353216
export listbar_color
align 4
LABELV listbar_color
byte 4 1040522936
byte 4 1048911544
byte 4 1052938076
byte 4 1050253722
export text_color_status
align 4
LABELV text_color_status
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
export UI_FindItem
code
proc UI_FindItem 8 8
file "../../../code/q3_ui/ui_qmenu.c"
line 106
;1:// Copyright (C) 1999-2000 Id Software, Inc.
;2://
;3:/**********************************************************************
;4:	UI_QMENU.C
;5:
;6:	Quake's menu framework system.
;7:**********************************************************************/
;8:
;9:
;10:
;11:
;12:#include "ui_local.h"
;13:
;14:sfxHandle_t menu_in_sound;
;15:sfxHandle_t menu_move_sound;
;16:sfxHandle_t menu_out_sound;
;17:sfxHandle_t menu_buzz_sound;
;18:sfxHandle_t menu_null_sound;
;19:sfxHandle_t weaponChangeSound;
;20:
;21:static qhandle_t	sliderBar;
;22:static qhandle_t	sliderButton_0;
;23:static qhandle_t	sliderButton_1;
;24:
;25:// Original colors
;26:/*
;27:vec4_t menu_text_color	    = {1.0f, 1.0f, 1.0f, 1.0f};
;28:vec4_t menu_dim_color       = {0.0f, 0.0f, 0.0f, 0.75f};
;29:vec4_t color_black	        = {0.00f, 0.00f, 0.00f, 1.00f};
;30:vec4_t color_white	        = {1.00f, 1.00f, 1.00f, 1.00f};
;31:vec4_t color_yellow	        = {1.00f, 1.00f, 0.00f, 1.00f};
;32:vec4_t color_blue	        = {0.00f, 0.00f, 1.00f, 1.00f};
;33:vec4_t color_lightOrange    = {1.00f, 0.68f, 0.00f, 1.00f };
;34:vec4_t color_orange	        = {1.00f, 0.43f, 0.00f, 1.00f};
;35:vec4_t color_red		    = {1.00f, 0.00f, 0.00f, 1.00f};
;36:vec4_t color_dim		    = {0.00f, 0.00f, 0.00f, 0.25f};
;37:
;38:  vec4_t pulse_color          = {1.00f, 1.00f, 1.00f, 1.00f};
;39:vec4_t text_color_disabled  = {0.50f, 0.50f, 0.50f, 1.00f};	// light gray
;40:vec4_t text_color_normal	= {1.00f, 0.43f, 0.00f, 1.00f};	// light orange
;41:vec4_t text_color_highlight = {1.00f, 1.00f, 0.00f, 1.00f};	// bright yellow
;42:vec4_t listbar_color        = {1.00f, 0.43f, 0.00f, 0.30f};	// transluscent orange
;43:vec4_t text_color_status    = {1.00f, 1.00f, 1.00f, 1.00f};	// bright white
;44:
;45:*/
;46:// NEW AND IMPLOVED colors
;47:vec4_t menu_text_color	    = {1.0f, 1.0f, 1.0f, 1.0f};
;48:vec4_t menu_dim_color       = {0.0f, 0.0f, 0.0f, 0.75f};
;49:vec4_t color_black	    = {0.00f, 0.00f, 0.00f, 1.00f};
;50:vec4_t color_white	    = {1.00f, 1.00f, 1.00f, 1.00f};
;51:vec4_t color_yellow	    = {1.00f, 1.00f, 0.00f, 1.00f};
;52:vec4_t color_blue	    = {0.00f, 0.00f, 1.00f, 1.00f};
;53:vec4_t color_lightOrange    = {0.30f, 0.45f, 0.58f, 1.00f };
;54:vec4_t color_orange	    = {0.30f, 0.45f, 0.58f, 1.00f};
;55:vec4_t color_red	    = {1.00f, 1.00f, 1.00f, 1.00f};
;56:vec4_t color_realred		    = {1.00f, 0.00f, 0.00f, 1.00f};
;57:vec4_t color_dim	    = {0.00f, 0.00f, 0.00f, 0.25f};
;58:vec4_t color_green	    = {0.00f, 0.99f, 0.00f, 1.00f};
;59:
;60:// current color scheme
;61:vec4_t pulse_color          = {1.00f, 1.00f, 1.00f, 1.00f};
;62:vec4_t text_color_disabled  = {0.10f, 0.10f, 0.20f, 1.00f};	// light gray
;63:vec4_t text_color_normal    = {0.35f, 0.50f, 0.50f, 1.00f};	// light orange
;64:vec4_t text_color_highlight = {0.99f, 0.90f, 0.50f, 1.00f};	// bright yellow
;65:vec4_t text_color_highlighty = {0.99f, 0.90f, 0.50f, 1.00f};	// bright yellow
;66:vec4_t listbar_color        = {0.13f, 0.26f, 0.38f, 0.30f};	// transluscent orange
;67:vec4_t text_color_status    = {1.00f, 1.00f, 1.00f, 1.00f};	// bright white
;68:
;69:// action widget
;70:static void	Action_Init( menuaction_s *a );
;71:static void	Action_Draw( menuaction_s *a );
;72:
;73:// radio button widget
;74:static void	RadioButton_Draw( menuradiobutton_s *rb );
;75:static sfxHandle_t RadioButton_Key( menuradiobutton_s *rb, int key );
;76:
;77:// slider widget
;78:static void Slider_Init( menuslider_s *s );
;79:static sfxHandle_t Slider_Key( menuslider_s *s, int key );
;80:static void	Slider_Draw( menuslider_s *s );
;81:
;82:// spin control widget
;83:static void	SpinControl_Draw( menulist_s *s );
;84:static sfxHandle_t SpinControl_Key( menulist_s *l, int key );
;85:
;86:// text widget
;87:static void Text_Init( menutext_s *b );
;88:static void Text_Draw( menutext_s *b );
;89:
;90:// scrolllist widget
;91:sfxHandle_t ScrollList_Key( menulist_s *l, int key );
;92:
;93:// proportional text widget
;94:static void PText_Draw( menutext_s *b );
;95:
;96:// proportional banner text widget
;97:static void BText_Init( menutext_s *b );
;98:static void BText_Draw( menutext_s *b );
;99:
;100:/*
;101:===============
;102:UI_FindItem
;103:
;104:===============
;105:*/
;106:gitem_t	*UI_FindItem( const char *pickupName ) {
line 109
;107:	gitem_t	*it;
;108:	
;109:	for ( it = bg_itemlist + 1 ; it->classname ; it++ ) {
ADDRLP4 0
ADDRGP4 bg_itemlist+56
ASGNP4
ADDRGP4 $84
JUMPV
LABELV $81
line 110
;110:		if ( !Q_stricmp( it->pickup_name, pickupName ) )
ADDRLP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $86
line 111
;111:			return it;
ADDRLP4 0
INDIRP4
RETP4
ADDRGP4 $80
JUMPV
LABELV $86
line 112
;112:	}
LABELV $82
line 109
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ASGNP4
LABELV $84
ADDRLP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $81
line 114
;113:
;114:	return NULL;
CNSTP4 0
RETP4
LABELV $80
endproc UI_FindItem 8 8
export UI_FindItemClassname
proc UI_FindItemClassname 8 8
line 117
;115:}
;116:
;117:gitem_t	*UI_FindItemClassname( const char *classname ) {
line 120
;118:	gitem_t	*it;
;119:	
;120:	for ( it = bg_itemlist + 1 ; it->classname ; it++ ) {
ADDRLP4 0
ADDRGP4 bg_itemlist+56
ASGNP4
ADDRGP4 $92
JUMPV
LABELV $89
line 121
;121:		if ( !Q_stricmp( it->classname, classname ) )
ADDRLP4 0
INDIRP4
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 Q_stricmp
CALLI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
NEI4 $94
line 122
;122:			return it;
ADDRLP4 0
INDIRP4
RETP4
ADDRGP4 $88
JUMPV
LABELV $94
line 123
;123:	}
LABELV $90
line 120
ADDRLP4 0
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
ASGNP4
LABELV $92
ADDRLP4 0
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $89
line 125
;124:
;125:	return NULL;
CNSTP4 0
RETP4
LABELV $88
endproc UI_FindItemClassname 8 8
proc Text_Init 4 0
line 134
;126:}
;127:
;128:/*
;129:=================
;130:Text_Init
;131:=================
;132:*/
;133:static void Text_Init( menutext_s *t )
;134:{
line 135
;135:	t->generic.flags |= QMF_INACTIVE;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRU4
CNSTU4 16384
BORU4
ASGNU4
line 136
;136:}
LABELV $96
endproc Text_Init 4 0
proc Text_Draw 524 20
line 144
;137:
;138:/*
;139:=================
;140:Text_Draw
;141:=================
;142:*/
;143:static void Text_Draw( menutext_s *t )
;144:{
line 150
;145:	int		x;
;146:	int		y;
;147:	char	buff[512];	
;148:	float*	color;
;149:
;150:	x = t->generic.x;
ADDRLP4 512
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 151
;151:	y = t->generic.y;
ADDRLP4 516
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 153
;152:
;153:	buff[0] = '\0';
ADDRLP4 0
CNSTI1 0
ASGNI1
line 156
;154:
;155:	// possible label
;156:	if (t->generic.name)
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $98
line 157
;157:		strcpy(buff,t->generic.name);
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcpy
CALLP4
pop
LABELV $98
line 160
;158:
;159:	// possible value
;160:	if (t->string)
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $100
line 161
;161:		strcat(buff,t->string);
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
ARGP4
ADDRGP4 strcat
CALLP4
pop
LABELV $100
line 163
;162:		
;163:	if (t->generic.flags & QMF_GRAYED)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8192
BANDU4
CNSTU4 0
EQU4 $102
line 164
;164:		color = text_color_disabled;
ADDRLP4 520
ADDRGP4 text_color_disabled
ASGNP4
ADDRGP4 $103
JUMPV
LABELV $102
line 166
;165:	else
;166:		color = t->color;
ADDRLP4 520
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRP4
ASGNP4
LABELV $103
line 168
;167:
;168:	UI_DrawString( x, y, buff, t->style, color );
ADDRLP4 512
INDIRI4
ARGI4
ADDRLP4 516
INDIRI4
ARGI4
ADDRLP4 0
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 520
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 169
;169:}
LABELV $97
endproc Text_Draw 524 20
proc BText_Init 4 0
line 177
;170:
;171:/*
;172:=================
;173:BText_Init
;174:=================
;175:*/
;176:static void BText_Init( menutext_s *t )
;177:{
line 178
;178:	t->generic.flags |= QMF_INACTIVE;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 0
INDIRP4
ADDRLP4 0
INDIRP4
INDIRU4
CNSTU4 16384
BORU4
ASGNU4
line 179
;179:}
LABELV $104
endproc BText_Init 4 0
proc BText_Draw 16 20
line 187
;180:
;181:/*
;182:=================
;183:BText_Draw
;184:=================
;185:*/
;186:static void BText_Draw( menutext_s *t )
;187:{
line 192
;188:	int		x;
;189:	int		y;
;190:	float*	color;
;191:
;192:	x = t->generic.x;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 193
;193:	y = t->generic.y;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 195
;194:
;195:	if (t->generic.flags & QMF_GRAYED)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8192
BANDU4
CNSTU4 0
EQU4 $106
line 196
;196:		color = text_color_disabled;
ADDRLP4 8
ADDRGP4 text_color_disabled
ASGNP4
ADDRGP4 $107
JUMPV
LABELV $106
line 198
;197:	else
;198:		color = t->color;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRP4
ASGNP4
LABELV $107
line 200
;199:
;200:	UI_DrawBannerString( x, y, t->string, t->style, color );
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 UI_DrawBannerString
CALLV
pop
line 201
;201:}
LABELV $105
endproc BText_Draw 16 20
export PText_Init
proc PText_Init 40 8
line 209
;202:
;203:/*
;204:=================
;205:PText_Init
;206:=================
;207:*/
;208:void PText_Init( menutext_s *t )
;209:{
line 216
;210:	int	x;
;211:	int	y;
;212:	int	w;
;213:	int	h;
;214:	float	sizeScale;
;215:
;216:	sizeScale = UI_ProportionalSizeScale( t->style, t->customsize );
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ARGF4
ADDRLP4 24
ADDRGP4 UI_ProportionalSizeScale
CALLF4
ASGNF4
ADDRLP4 0
ADDRLP4 24
INDIRF4
ASGNF4
line 218
;217:
;218:	x = t->generic.x;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 219
;219:	y = t->generic.y;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 220
;220:	w = UI_ProportionalStringWidth( t->string ) * sizeScale;
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 UI_ProportionalStringWidth
CALLI4
ASGNI4
ADDRLP4 12
ADDRLP4 28
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 221
;221:	h =	PROP_HEIGHT * sizeScale;
ADDRLP4 16
ADDRGP4 cl_propheight+12
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRF4
MULF4
CVFI4 4
ASGNI4
line 223
;222:
;223:	if( t->generic.flags & QMF_RIGHT_JUSTIFY ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 16
BANDU4
CNSTU4 0
EQU4 $110
line 224
;224:		x -= w;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ASGNI4
line 225
;225:	}
ADDRGP4 $111
JUMPV
LABELV $110
line 226
;226:	else if( t->generic.flags & QMF_CENTER_JUSTIFY ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8
BANDU4
CNSTU4 0
EQU4 $112
line 227
;227:		x -= w / 2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
CNSTI4 2
DIVI4
SUBI4
ASGNI4
line 228
;228:	}
LABELV $112
LABELV $111
line 230
;229:
;230:	t->generic.left   = x - PROP_GAP_WIDTH * sizeScale;
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRGP4 cl_propgapwidth+12
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRF4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 231
;231:	t->generic.right  = x + w + PROP_GAP_WIDTH * sizeScale;
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 4
INDIRI4
ADDRLP4 12
INDIRI4
ADDI4
CVIF4 4
ADDRGP4 cl_propgapwidth+12
INDIRI4
CVIF4 4
ADDRLP4 0
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 232
;232:	if(t->generic.heightmod){
ADDRFP4 0
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
CNSTF4 0
EQF4 $116
line 233
;233:	t->generic.top    = y - (t->generic.heightmod*h);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 8
INDIRI4
CVIF4 4
ADDRLP4 32
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ADDRLP4 16
INDIRI4
CVIF4 4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 234
;234:	t->generic.bottom = y + (t->generic.heightmod*h);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 8
INDIRI4
CVIF4 4
ADDRLP4 36
INDIRP4
CNSTI4 60
ADDP4
INDIRF4
ADDRLP4 16
INDIRI4
CVIF4 4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 235
;235:	} else {
ADDRGP4 $117
JUMPV
LABELV $116
line 236
;236:	t->generic.top    = y;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 8
INDIRI4
ASGNI4
line 237
;237:	t->generic.bottom = y + h;	
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 8
INDIRI4
ADDRLP4 16
INDIRI4
ADDI4
ASGNI4
line 238
;238:	}
LABELV $117
line 239
;239:}
LABELV $108
endproc PText_Init 40 8
proc PText_Draw 28 28
line 247
;240:
;241:/*
;242:=================
;243:PText_Draw
;244:=================
;245:*/
;246:static void PText_Draw( menutext_s *t )
;247:{
line 254
;248:	int		x;
;249:	int		xofs;
;250:	int		y;
;251:	float *	color;
;252:	int		style;
;253:
;254:	x = t->generic.x;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 255
;255:	xofs = t->generic.xoffset;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 36
ADDP4
INDIRI4
ASGNI4
line 256
;256:	y = t->generic.y;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 258
;257:
;258:	if (t->generic.flags & QMF_GRAYED)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8192
BANDU4
CNSTU4 0
EQU4 $119
line 259
;259:		color = text_color_disabled;
ADDRLP4 16
ADDRGP4 text_color_disabled
ASGNP4
ADDRGP4 $120
JUMPV
LABELV $119
line 261
;260:	else
;261:		color = t->color;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRP4
ASGNP4
LABELV $120
line 263
;262:	
;263:	if( t->generic.flags & QMF_HIGHLIGHT_IF_FOCUS ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 128
BANDU4
CNSTU4 0
EQU4 $121
line 264
;264:	if( Menu_ItemAtCursor( t->generic.parent ) == t ) {
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 Menu_ItemAtCursor
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
CVPU4 4
ADDRLP4 24
INDIRP4
CVPU4 4
NEU4 $123
line 265
;265:		t->color = text_color_highlighty;
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ADDRGP4 text_color_highlighty
ASGNP4
line 266
;266:	}
ADDRGP4 $124
JUMPV
LABELV $123
line 267
;267:	else {
line 268
;268:		t->color = color_white;
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ADDRGP4 color_white
ASGNP4
line 269
;269:	}
LABELV $124
line 270
;270:	}
LABELV $121
line 272
;271:
;272:	style = t->style;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 273
;273:	if( t->generic.flags & QMF_PULSEIFFOCUS ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 256
BANDU4
CNSTU4 0
EQU4 $125
line 274
;274:		if( Menu_ItemAtCursor( t->generic.parent ) == t ) {
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 Menu_ItemAtCursor
CALLP4
ASGNP4
ADDRLP4 20
INDIRP4
CVPU4 4
ADDRLP4 24
INDIRP4
CVPU4 4
NEU4 $127
line 275
;275:			style |= UI_PULSE;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 16384
BORI4
ASGNI4
line 276
;276:		}
ADDRGP4 $128
JUMPV
LABELV $127
line 277
;277:		else {
line 278
;278:			style |= UI_INVERSE;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 8192
BORI4
ASGNI4
line 279
;279:		}
LABELV $128
line 280
;280:	}
LABELV $125
line 282
;281:
;282:	UI_DrawStringCustom( x+xofs, y, t->string, style, color, t->customsize, 512 );
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ARGI4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 20
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ARGF4
CNSTF4 1140850688
ARGF4
ADDRGP4 UI_DrawStringCustom
CALLV
pop
line 283
;283:}
LABELV $118
endproc PText_Draw 28 28
export Bitmap_Init
proc Bitmap_Init 16 0
line 291
;284:
;285:/*
;286:=================
;287:Bitmap_Init
;288:=================
;289:*/
;290:void Bitmap_Init( menubitmap_s *b )
;291:{
line 297
;292:	int	x;
;293:	int	y;
;294:	int	w;
;295:	int	h;
;296:
;297:	x = b->generic.x;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 298
;298:	y = b->generic.y;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 299
;299:	w = b->width;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ASGNI4
line 300
;300:	h =	b->height;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ASGNI4
line 301
;301:	if( w < 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $130
line 302
;302:		w = -w;
ADDRLP4 0
ADDRLP4 0
INDIRI4
NEGI4
ASGNI4
line 303
;303:	}
LABELV $130
line 304
;304:	if( h < 0 ) {
ADDRLP4 8
INDIRI4
CNSTI4 0
GEI4 $132
line 305
;305:		h = -h;
ADDRLP4 8
ADDRLP4 8
INDIRI4
NEGI4
ASGNI4
line 306
;306:	}
LABELV $132
line 308
;307:
;308:	if (b->generic.flags & QMF_RIGHT_JUSTIFY)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 16
BANDU4
CNSTU4 0
EQU4 $134
line 309
;309:	{
line 310
;310:		x = x - w;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
SUBI4
ASGNI4
line 311
;311:	}
ADDRGP4 $135
JUMPV
LABELV $134
line 312
;312:	else if (b->generic.flags & QMF_CENTER_JUSTIFY)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8
BANDU4
CNSTU4 0
EQU4 $136
line 313
;313:	{
line 314
;314:		x = x - w/2;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
DIVI4
SUBI4
ASGNI4
line 315
;315:	}
LABELV $136
LABELV $135
line 317
;316:
;317:	b->generic.left   = x;
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 318
;318:	b->generic.right  = x + w;
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 319
;319:	b->generic.top    = y;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 320
;320:	b->generic.bottom = y + h;
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 12
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 322
;321:
;322:	b->shader      = 0;
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
CNSTI4 0
ASGNI4
line 323
;323:	b->focusshader = 0;
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 324
;324:}
LABELV $129
endproc Bitmap_Init 16 0
export Bitmap_Draw
proc Bitmap_Draw 84 20
line 332
;325:
;326:/*
;327:=================
;328:Bitmap_Draw
;329:=================
;330:*/
;331:void Bitmap_Draw( menubitmap_s *b )
;332:{
line 340
;333:	float	x;
;334:	float	y;
;335:	float	w;
;336:	float	h;
;337:	vec4_t	tempcolor;
;338:	float*	color;
;339:
;340:	x = b->generic.x;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 341
;341:	y = b->generic.y;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 342
;342:	w = b->width;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 343
;343:	h =	b->height;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 345
;344:
;345:	if (b->generic.flags & QMF_RIGHT_JUSTIFY)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 16
BANDU4
CNSTU4 0
EQU4 $139
line 346
;346:	{
line 347
;347:		x = x - w;
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
SUBF4
ASGNF4
line 348
;348:	}
ADDRGP4 $140
JUMPV
LABELV $139
line 349
;349:	else if (b->generic.flags & QMF_CENTER_JUSTIFY)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8
BANDU4
CNSTU4 0
EQU4 $141
line 350
;350:	{
line 351
;351:		x = x - w/2;
ADDRLP4 0
ADDRLP4 0
INDIRF4
ADDRLP4 4
INDIRF4
CNSTF4 1073741824
DIVF4
SUBF4
ASGNF4
line 352
;352:	}
LABELV $141
LABELV $140
line 355
;353:
;354:	// used to refresh shader
;355:	if (b->generic.name && !b->shader)
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $143
ADDRLP4 36
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 0
NEI4 $143
line 356
;356:	{
line 357
;357:		b->shader = trap_R_RegisterShaderNoMip( b->generic.name );
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
ADDRLP4 44
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 40
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 44
INDIRI4
ASGNI4
line 358
;358:		if (!b->shader && b->errorpic)
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 0
NEI4 $145
ADDRLP4 48
INDIRP4
CNSTI4 92
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $145
line 359
;359:			b->shader = trap_R_RegisterShaderNoMip( b->errorpic );
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 92
ADDP4
INDIRP4
ARGP4
ADDRLP4 56
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 52
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 56
INDIRI4
ASGNI4
LABELV $145
line 360
;360:	}
LABELV $143
line 362
;361:
;362:	if (b->focuspic && !b->focusshader)
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $147
ADDRLP4 40
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
NEI4 $147
line 363
;363:		b->focusshader = trap_R_RegisterShaderNoMip( b->focuspic );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 88
ADDP4
INDIRP4
ARGP4
ADDRLP4 48
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 44
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 48
INDIRI4
ASGNI4
LABELV $147
line 365
;364:
;365:	if (b->generic.flags & QMF_GRAYED)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8192
BANDU4
CNSTU4 0
EQU4 $149
line 366
;366:	{
line 367
;367:		if (b->shader)
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 0
EQI4 $150
line 368
;368:		{
line 369
;369:			trap_R_SetColor( colorMdGrey );
ADDRGP4 colorMdGrey
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 370
;370:			UI_DrawHandlePic( x, y, w, h, b->shader );
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 371
;371:			trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 372
;372:		}
line 373
;373:	}
ADDRGP4 $150
JUMPV
LABELV $149
line 375
;374:	else
;375:	{
line 376
;376:		if (b->shader)
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 0
EQI4 $153
line 377
;377:			UI_DrawHandlePic( x, y, w, h, b->shader );
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
LABELV $153
line 379
;378:
;379:		if ((b->generic.flags & QMF_PULSE) || (b->generic.flags & QMF_PULSEIFFOCUS) && (Menu_ItemAtCursor( b->generic.parent ) == b))
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
ADDRLP4 52
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
ASGNU4
ADDRLP4 60
CNSTU4 0
ASGNU4
ADDRLP4 56
INDIRU4
CNSTU4 131072
BANDU4
ADDRLP4 60
INDIRU4
NEU4 $157
ADDRLP4 56
INDIRU4
CNSTU4 256
BANDU4
ADDRLP4 60
INDIRU4
EQU4 $155
ADDRLP4 52
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
ARGP4
ADDRLP4 64
ADDRGP4 Menu_ItemAtCursor
CALLP4
ASGNP4
ADDRLP4 52
INDIRP4
CVPU4 4
ADDRLP4 64
INDIRP4
CVPU4 4
NEU4 $155
LABELV $157
line 380
;380:		{	
line 381
;381:			if (b->focuscolor)			
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $158
line 382
;382:			{
line 383
;383:				tempcolor[0] = b->focuscolor[0];
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
INDIRF4
ASGNF4
line 384
;384:				tempcolor[1] = b->focuscolor[1];
ADDRLP4 20+4
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CNSTI4 4
ADDP4
INDIRF4
ASGNF4
line 385
;385:				tempcolor[2] = b->focuscolor[2];
ADDRLP4 20+8
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CNSTI4 8
ADDP4
INDIRF4
ASGNF4
line 386
;386:				color        = tempcolor;	
ADDRLP4 16
ADDRLP4 20
ASGNP4
line 387
;387:			}
ADDRGP4 $159
JUMPV
LABELV $158
line 389
;388:			else
;389:				color = pulse_color;
ADDRLP4 16
ADDRGP4 pulse_color
ASGNP4
LABELV $159
line 390
;390:			color[3] = 0.5+0.5*sin(uis.realtime/PULSE_DIVISOR);
ADDRGP4 uis+4
INDIRI4
CNSTI4 60
DIVI4
CVIF4 4
ARGF4
ADDRLP4 68
ADDRGP4 sin
CALLF4
ASGNF4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
CNSTF4 1056964608
ADDRLP4 68
INDIRF4
MULF4
CNSTF4 1056964608
ADDF4
ASGNF4
line 392
;391:
;392:			trap_R_SetColor( color );
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 393
;393:			UI_DrawHandlePic( x, y, w, h, b->focusshader );
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 394
;394:			trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 395
;395:		}
ADDRGP4 $156
JUMPV
LABELV $155
line 396
;396:		else if ((b->generic.flags & QMF_HIGHLIGHT) || ((b->generic.flags & QMF_HIGHLIGHT_IF_FOCUS) && (Menu_ItemAtCursor( b->generic.parent ) == b)))
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
ADDRLP4 68
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
ASGNU4
ADDRLP4 76
CNSTU4 0
ASGNU4
ADDRLP4 72
INDIRU4
CNSTU4 64
BANDU4
ADDRLP4 76
INDIRU4
NEU4 $165
ADDRLP4 72
INDIRU4
CNSTU4 128
BANDU4
ADDRLP4 76
INDIRU4
EQU4 $163
ADDRLP4 68
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
ARGP4
ADDRLP4 80
ADDRGP4 Menu_ItemAtCursor
CALLP4
ASGNP4
ADDRLP4 68
INDIRP4
CVPU4 4
ADDRLP4 80
INDIRP4
CVPU4 4
NEU4 $163
LABELV $165
line 397
;397:		{	
line 398
;398:			if (b->focuscolor)
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $166
line 399
;399:			{
line 400
;400:				trap_R_SetColor( b->focuscolor );
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 401
;401:				UI_DrawHandlePic( x, y, w, h, b->focusshader );
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 402
;402:				trap_R_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 trap_R_SetColor
CALLV
pop
line 403
;403:			}
ADDRGP4 $167
JUMPV
LABELV $166
line 405
;404:			else
;405:				UI_DrawHandlePic( x, y, w, h, b->focusshader );
ADDRLP4 0
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 4
INDIRF4
ARGF4
ADDRLP4 12
INDIRF4
ARGF4
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
LABELV $167
line 406
;406:		}
LABELV $163
LABELV $156
line 407
;407:	}
LABELV $150
line 408
;408:}
LABELV $138
endproc Bitmap_Draw 84 20
export UIObject_Init
proc UIObject_Init 48 4
line 416
;409:
;410:/*
;411:=================
;412:UIObject_Init
;413:=================
;414:*/
;415:void UIObject_Init( menuobject_s *b )
;416:{
line 424
;417:	int	x;
;418:	int	y;
;419:	int	w;
;420:	int	h;
;421:	int	l;
;422:	int	len;
;423:
;424:if(b->type >= 1 && b->type <= 3 || b->type == 6){
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 1
LTI4 $172
ADDRLP4 24
INDIRI4
CNSTI4 3
LEI4 $171
LABELV $172
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 6
NEI4 $169
LABELV $171
line 425
;425:	x = b->generic.x;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 426
;426:	y = b->generic.y;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 427
;427:	w = b->width;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ASGNI4
line 428
;428:	h =	b->height;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ASGNI4
line 429
;429:	if( w < 0 ) {
ADDRLP4 0
INDIRI4
CNSTI4 0
GEI4 $173
line 430
;430:		w = -w;
ADDRLP4 0
ADDRLP4 0
INDIRI4
NEGI4
ASGNI4
line 431
;431:	}
LABELV $173
line 432
;432:	if( h < 0 ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
GEI4 $175
line 433
;433:		h = -h;
ADDRLP4 4
ADDRLP4 4
INDIRI4
NEGI4
ASGNI4
line 434
;434:	}
LABELV $175
line 436
;435:
;436:	b->generic.left   = x;
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 12
INDIRI4
ASGNI4
line 437
;437:	b->generic.right  = x + w;
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 12
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 438
;438:	b->generic.top    = y;
ADDRFP4 0
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 439
;439:	b->generic.bottom = y + h;
ADDRFP4 0
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 16
INDIRI4
ADDRLP4 4
INDIRI4
ADDI4
ASGNI4
line 440
;440:}
LABELV $169
line 441
;441:if(b->type == 4){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 4
NEI4 $177
line 443
;442:
;443:	MField_Clear( &b->field );
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
ARGP4
ADDRGP4 MField_Clear
CALLV
pop
line 445
;444:
;445:	if (b->generic.flags & QMF_SMALLFONT)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 2
BANDU4
CNSTU4 0
EQU4 $179
line 446
;446:	{
line 447
;447:		w = SMALLCHAR_WIDTH;
ADDRLP4 0
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ASGNI4
line 448
;448:		h = SMALLCHAR_HEIGHT;
ADDRLP4 4
ADDRGP4 cl_smallcharheight+12
INDIRI4
ASGNI4
line 449
;449:	}
ADDRGP4 $180
JUMPV
LABELV $179
line 451
;450:	else
;451:	{
line 452
;452:		w = BIGCHAR_WIDTH;
ADDRLP4 0
ADDRGP4 cl_bigcharwidth+12
INDIRI4
ASGNI4
line 453
;453:		h = BIGCHAR_HEIGHT;
ADDRLP4 4
ADDRGP4 cl_bigcharheight+12
INDIRI4
ASGNI4
line 454
;454:	}	
LABELV $180
line 456
;455:
;456:	if (b->generic.name) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $185
line 457
;457:		l = (strlenru( b->generic.name )+1) * w;		
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 strlenru
CALLI4
ASGNI4
ADDRLP4 20
ADDRLP4 28
INDIRI4
CNSTI4 1
ADDI4
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
line 458
;458:	}
ADDRGP4 $186
JUMPV
LABELV $185
line 459
;459:	else {
line 460
;460:		l = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 461
;461:	}
LABELV $186
line 463
;462:
;463:	b->generic.left   = b->generic.x - l;
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
ASGNI4
line 464
;464:	b->generic.top    = b->generic.y;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 465
;465:	b->generic.right  = b->generic.x + (w*b->fontsize) + b->field.widthInChars*(w*b->fontsize);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
ADDRLP4 0
INDIRI4
CVIF4 4
ADDRLP4 36
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
ASGNF4
ADDRLP4 36
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
ADDF4
ADDRLP4 36
INDIRP4
CNSTI4 148
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 466
;466:	b->generic.bottom = b->generic.y + (h*b->fontsize);
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 4
INDIRI4
CVIF4 4
ADDRLP4 44
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 467
;467:}
LABELV $177
line 468
;468:if(b->type == 5){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 5
NEI4 $187
line 470
;469:	
;470:	b->oldvalue = 0;
ADDRFP4 0
INDIRP4
CNSTI4 412
ADDP4
CNSTI4 0
ASGNI4
line 471
;471:	b->curvalue = 0;
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
CNSTI4 0
ASGNI4
line 472
;472:	b->top      = 0;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 0
ASGNI4
line 474
;473:
;474:	if( !b->columns ) {
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
CNSTI4 0
NEI4 $189
line 475
;475:		b->columns = 1;
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
CNSTI4 1
ASGNI4
line 476
;476:		b->seperation = 0;
ADDRFP4 0
INDIRP4
CNSTI4 440
ADDP4
CNSTI4 0
ASGNI4
line 477
;477:	}
LABELV $189
line 478
;478:	if(b->styles <= 1){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
GTI4 $191
line 479
;479:	w = ( (b->width + b->seperation) * b->columns - b->seperation) * (SMALLCHAR_WIDTH*b->fontsize);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 28
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 28
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 32
INDIRI4
ADDI4
ADDRLP4 28
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
MULI4
ADDRLP4 32
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 28
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
MULF4
CVFI4 4
ASGNI4
line 480
;480:	}
LABELV $191
line 481
;481:	if(b->styles == 2){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 2
NEI4 $194
line 482
;482:	w = ( (b->width + b->seperation) * b->columns - b->seperation) * (SMALLCHAR_WIDTH);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
ADDRLP4 28
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 28
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 32
INDIRI4
ADDI4
ADDRLP4 28
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
MULI4
ADDRLP4 32
INDIRI4
SUBI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
ASGNI4
line 483
;483:	}
LABELV $194
line 485
;484:
;485:	b->generic.left   =	b->generic.x;
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 486
;486:	b->generic.top    = b->generic.y;	
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 487
;487:	b->generic.right  =	b->generic.x + w;
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 488
;488:	if(b->styles <= 1){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
GTI4 $197
line 489
;489:	b->generic.bottom =	b->generic.y + b->height * (SMALLCHAR_HEIGHT*b->fontsize);
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 40
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 490
;490:	}
LABELV $197
line 491
;491:	if(b->styles == 2){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 2
NEI4 $200
line 492
;492:	b->generic.bottom =	b->generic.y + b->height * (SMALLCHAR_WIDTH*b->width);
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ADDRLP4 40
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 40
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
MULI4
MULI4
ADDI4
ASGNI4
line 493
;493:	}
LABELV $200
line 495
;494:
;495:	if( b->generic.flags & QMF_CENTER_JUSTIFY ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8
BANDU4
CNSTU4 0
EQU4 $203
line 496
;496:		b->generic.left -= w / 2;
ADDRLP4 40
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 40
INDIRP4
ADDRLP4 40
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
DIVI4
SUBI4
ASGNI4
line 497
;497:		b->generic.right -= w / 2;
ADDRLP4 44
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 44
INDIRP4
ADDRLP4 44
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
DIVI4
SUBI4
ASGNI4
line 498
;498:	}
LABELV $203
line 499
;499:}
LABELV $187
line 501
;500:
;501:if(b->type == 7){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 7
NEI4 $205
line 503
;502:	// calculate bounds
;503:	if (b->generic.text)
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $207
line 504
;504:		len = strlenru(b->generic.text);
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 strlenru
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 28
INDIRI4
ASGNI4
ADDRGP4 $208
JUMPV
LABELV $207
line 506
;505:	else
;506:		len = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $208
line 509
;507:	
;508:
;509:	b->generic.left   = b->generic.x - (len+1)*(SMALLCHAR_WIDTH*b->fontsize);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
CVIF4 4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 32
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 510
;510:	b->generic.right  = b->generic.x + 6*(SMALLCHAR_WIDTH*b->fontsize);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1086324736
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 36
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 511
;511:	b->generic.top    = b->generic.y;
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 512
;512:	b->generic.bottom = b->generic.y + (SMALLCHAR_HEIGHT*b->fontsize);
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 44
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 513
;513:}
LABELV $205
line 515
;514:
;515:if(b->type == 8){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 8
NEI4 $212
line 517
;516:	// calculate bounds
;517:	if (b->generic.text)
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $214
line 518
;518:		len = strlenru(b->generic.text);
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 strlenru
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 28
INDIRI4
ASGNI4
ADDRGP4 $215
JUMPV
LABELV $214
line 520
;519:	else
;520:		len = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $215
line 522
;521:
;522:	b->generic.left   = b->generic.x - (len+1)*(SMALLCHAR_WIDTH*b->fontsize); 
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
CVIF4 4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 32
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 523
;523:	b->generic.right  = b->generic.x + (SLIDER_RANGE+2+1)*(SMALLCHAR_WIDTH*b->fontsize);
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
CNSTF4 1095761920
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 36
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
CVFI4 4
ASGNI4
line 524
;524:	b->generic.top    = b->generic.y;
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 525
;525:	b->generic.bottom = b->generic.y + (SMALLCHAR_HEIGHT*b->width);
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ADDRGP4 cl_smallcharheight+12
INDIRI4
ADDRLP4 44
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
MULI4
ADDI4
ASGNI4
line 526
;526:}
LABELV $212
line 528
;527:
;528:}
LABELV $168
endproc UIObject_Init 48 4
lit
align 4
LABELV $220
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1061158912
export UIObject_Draw
code
proc UIObject_Draw 244 28
line 536
;529:
;530:/*
;531:=================
;532:UIObject_Draw
;533:=================
;534:*/
;535:void UIObject_Draw( menuobject_s *b )
;536:{
line 551
;537:	float	x;
;538:	float	y;
;539:	float	w;
;540:	float	h;
;541:	int		style;
;542:	qboolean focus;
;543:	float	*color;
;544:	int			u;
;545:	int			i;
;546:	int			base;
;547:	int			column;
;548:	qboolean	hasfocus;
;549:	int			val;
;550:	int			button;
;551:	vec4_t scrollbuttona        = {1.00f, 1.00f, 1.00f, 0.75f};	// transluscent orange
ADDRLP4 120
ADDRGP4 $220
INDIRB
ASGNB 16
line 556
;552:	gitem_t	*it;
;553:	const char	*info;
;554:	char	pic[MAX_QPATH];
;555:	
;556:if(b->type >= 1 && b->type <= 3 || b->type == 6){
ADDRLP4 144
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ASGNI4
ADDRLP4 144
INDIRI4
CNSTI4 1
LTI4 $224
ADDRLP4 144
INDIRI4
CNSTI4 3
LEI4 $223
LABELV $224
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 6
NEI4 $221
LABELV $223
line 558
;557:
;558:	x = b->generic.x;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 559
;559:	y = b->generic.y;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 560
;560:	w = b->width;
ADDRLP4 112
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 561
;561:	h =	b->height;
ADDRLP4 116
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 563
;562:	
;563:	b->shader = trap_R_RegisterShaderNoMip( b->generic.picn );
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
ARGP4
ADDRLP4 152
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 148
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 152
INDIRI4
ASGNI4
line 565
;564:	
;565:	if(b->type == 1){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 1
NEI4 $225
line 566
;566:	UI_DrawRoundedRect(x, y, w, h, b->corner, b->color2);
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 112
INDIRF4
ARGF4
ADDRLP4 116
INDIRF4
ARGF4
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 156
INDIRP4
CNSTI4 132
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 156
INDIRP4
CNSTI4 128
ADDP4
INDIRP4
ARGP4
ADDRGP4 UI_DrawRoundedRect
CALLV
pop
line 567
;567:	}
LABELV $225
line 568
;568:	if(b->type == 2){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 2
NEI4 $227
line 569
;569:	UI_DrawHandlePic( x, y, w, h, b->shader );
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 112
INDIRF4
ARGF4
ADDRLP4 116
INDIRF4
ARGF4
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 570
;570:	}
LABELV $227
line 571
;571:	if(b->type == 3){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 3
NEI4 $229
line 572
;572:	UI_DrawRoundedRect(x, y, w, h, b->corner, b->color2);
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 112
INDIRF4
ARGF4
ADDRLP4 116
INDIRF4
ARGF4
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 156
INDIRP4
CNSTI4 132
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 156
INDIRP4
CNSTI4 128
ADDP4
INDIRP4
ARGP4
ADDRGP4 UI_DrawRoundedRect
CALLV
pop
line 573
;573:	UI_DrawHandlePic( x, y, w, h, b->shader );
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 112
INDIRF4
ARGF4
ADDRLP4 116
INDIRF4
ARGF4
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 574
;574:	}
LABELV $229
line 575
;575:	if(b->type == 6){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 6
NEI4 $231
line 576
;576:	UI_DrawHandleModel( x, y, w, h, b->generic.picn, b->corner );
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 112
INDIRF4
ARGF4
ADDRLP4 116
INDIRF4
ARGF4
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 156
INDIRP4
CNSTI4 12
ADDP4
INDIRP4
ARGP4
ADDRLP4 156
INDIRP4
CNSTI4 132
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandleModel
CALLI4
pop
line 577
;577:	}
LABELV $231
line 578
;578:	UI_DrawStringCustom( x, y, b->string, b->style, b->color, b->fontsize, 512 );
ADDRLP4 12
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 156
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
ARGP4
ADDRLP4 156
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ARGI4
ADDRLP4 156
INDIRP4
CNSTI4 124
ADDP4
INDIRP4
ARGP4
ADDRLP4 156
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
CNSTF4 1140850688
ARGF4
ADDRGP4 UI_DrawStringCustom
CALLV
pop
line 580
;579:	
;580:}
LABELV $221
line 581
;581:if(b->type == 4){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 4
NEI4 $233
line 582
;582:	x =	b->generic.x;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 583
;583:	y =	b->generic.y;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 585
;584:
;585:	if (b->generic.flags & QMF_SMALLFONT)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 2
BANDU4
CNSTU4 0
EQU4 $235
line 586
;586:	{
line 587
;587:		w = SMALLCHAR_WIDTH;
ADDRLP4 112
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ASGNF4
line 588
;588:		h = SMALLCHAR_HEIGHT;
ADDRLP4 116
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ASGNF4
line 589
;589:		style = UI_SMALLFONT;
ADDRLP4 16
CNSTI4 16
ASGNI4
line 590
;590:	}
ADDRGP4 $236
JUMPV
LABELV $235
line 592
;591:	else
;592:	{
line 593
;593:		w = BIGCHAR_WIDTH;
ADDRLP4 112
ADDRGP4 cl_bigcharwidth+12
INDIRI4
CVIF4 4
ASGNF4
line 594
;594:		h = BIGCHAR_HEIGHT;
ADDRLP4 116
ADDRGP4 cl_bigcharheight+12
INDIRI4
CVIF4 4
ASGNF4
line 595
;595:		style = UI_BIGFONT;
ADDRLP4 16
CNSTI4 32
ASGNI4
line 596
;596:	}	
LABELV $236
line 598
;597:
;598:	if (Menu_ItemAtCursor( b->generic.parent ) == b) {
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
ARGP4
ADDRLP4 152
ADDRGP4 Menu_ItemAtCursor
CALLP4
ASGNP4
ADDRLP4 148
INDIRP4
CVPU4 4
ADDRLP4 152
INDIRP4
CVPU4 4
NEU4 $241
line 599
;599:		focus = qtrue;
ADDRLP4 108
CNSTI4 1
ASGNI4
line 600
;600:		style |= UI_PULSE;
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 16384
BORI4
ASGNI4
line 601
;601:	}
ADDRGP4 $242
JUMPV
LABELV $241
line 602
;602:	else {
line 603
;603:		focus = qfalse;
ADDRLP4 108
CNSTI4 0
ASGNI4
line 604
;604:	}
LABELV $242
line 606
;605:
;606:	if (b->generic.flags & QMF_GRAYED)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8192
BANDU4
CNSTU4 0
EQU4 $243
line 607
;607:		color = text_color_disabled;
ADDRLP4 20
ADDRGP4 text_color_disabled
ASGNP4
ADDRGP4 $244
JUMPV
LABELV $243
line 608
;608:	else if (focus)
ADDRLP4 108
INDIRI4
CNSTI4 0
EQI4 $245
line 609
;609:		color = text_color_highlight;
ADDRLP4 20
ADDRGP4 text_color_highlight
ASGNP4
ADDRGP4 $246
JUMPV
LABELV $245
line 611
;610:	else
;611:		if(!b->color){
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $247
line 612
;612:		color = text_color_normal;
ADDRLP4 20
ADDRGP4 text_color_normal
ASGNP4
line 613
;613:		} else {
ADDRGP4 $248
JUMPV
LABELV $247
line 614
;614:		color = b->color;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRP4
ASGNP4
line 615
;615:		}
LABELV $248
LABELV $246
LABELV $244
line 617
;616:
;617:	if ( focus )
ADDRLP4 108
INDIRI4
CNSTI4 0
EQI4 $249
line 618
;618:	{
line 620
;619:		// draw cursor
;620:		UI_DrawCharCustom( x, y, 13, UI_CENTER|UI_BLINK|style, color, b->fontsize);
ADDRLP4 12
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
CNSTI4 13
ARGI4
ADDRLP4 16
INDIRI4
CNSTI4 4097
BORI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
ADDRGP4 UI_DrawCharCustom
CALLV
pop
line 621
;621:	}
LABELV $249
line 623
;622:
;623:	if ( b->generic.text ) {
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $251
line 624
;624:		UI_DrawStringCustom( x - w, y, b->generic.text, style|UI_RIGHT, color, b->fontsize, 512 );
ADDRLP4 12
INDIRF4
ADDRLP4 112
INDIRF4
SUBF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 156
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
INDIRI4
CNSTI4 2
BORI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 156
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
CNSTF4 1140850688
ARGF4
ADDRGP4 UI_DrawStringCustom
CALLV
pop
line 625
;625:	}
LABELV $251
line 627
;626:
;627:	MField_DrawCustom( &b->field, x + w, y, style, color, b->fontsize );
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 156
INDIRP4
CNSTI4 140
ADDP4
ARGP4
ADDRLP4 12
INDIRF4
ADDRLP4 112
INDIRF4
ADDF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 156
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
ADDRGP4 MField_DrawCustom
CALLV
pop
line 628
;628:}
LABELV $233
line 630
;629:
;630:if(b->type == 5){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 5
NEI4 $253
line 631
;631:	hasfocus = (b->generic.parent->cursor == b->generic.menuPosition);
ADDRLP4 152
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 152
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
INDIRI4
ADDRLP4 152
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
NEI4 $256
ADDRLP4 148
CNSTI4 1
ASGNI4
ADDRGP4 $257
JUMPV
LABELV $256
ADDRLP4 148
CNSTI4 0
ASGNI4
LABELV $257
ADDRLP4 100
ADDRLP4 148
INDIRI4
ASGNI4
line 633
;632:
;633:	x =	b->generic.x;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 635
;634:	
;635:	for( column = 0; column < b->columns; column++ ) {
ADDRLP4 104
CNSTI4 0
ASGNI4
ADDRGP4 $261
JUMPV
LABELV $258
line 636
;636:		y =	b->generic.y;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 637
;637:		base = b->top + column * b->height;
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
ADDRLP4 156
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
ADDRLP4 104
INDIRI4
ADDRLP4 156
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
MULI4
ADDI4
ASGNI4
line 638
;638:		for( i = base; i < base + b->height; i++) {
ADDRLP4 0
ADDRLP4 92
INDIRI4
ASGNI4
ADDRGP4 $265
JUMPV
LABELV $262
line 639
;639:			if (i >= b->numitems)
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
LTI4 $266
line 640
;640:				break;
ADDRGP4 $264
JUMPV
LABELV $266
line 642
;641:
;642:			if (i == b->curvalue)
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
NEI4 $268
line 643
;643:			{
line 644
;644:				u = x - 2;
ADDRLP4 24
ADDRLP4 12
INDIRF4
CNSTF4 1073741824
SUBF4
CVFI4 4
ASGNI4
line 645
;645:				if( b->generic.flags & QMF_CENTER_JUSTIFY ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8
BANDU4
CNSTU4 0
EQU4 $270
line 646
;646:					if(b->styles <= 1){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
GTI4 $272
line 647
;647:					u -= (b->width * (SMALLCHAR_WIDTH*b->fontsize)) / 2 + 1;
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 24
INDIRI4
CVIF4 4
ADDRLP4 160
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 160
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
MULF4
CNSTF4 1073741824
DIVF4
CNSTF4 1065353216
ADDF4
SUBF4
CVFI4 4
ASGNI4
line 648
;648:					}
LABELV $272
line 649
;649:					if(b->styles == 2){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 2
NEI4 $275
line 650
;650:					u -= (b->width * (SMALLCHAR_WIDTH)) / 2 + 1;
ADDRLP4 24
ADDRLP4 24
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
CNSTI4 2
DIVI4
CNSTI4 1
ADDI4
SUBI4
ASGNI4
line 651
;651:					}
LABELV $275
line 652
;652:				}
LABELV $270
line 653
;653:				if(b->styles <= 1){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
GTI4 $278
line 654
;654:				UI_FillRect(u,y,(b->width*SMALLCHAR_WIDTH)*b->fontsize,(SMALLCHAR_HEIGHT)*b->fontsize,listbar_color);
ADDRLP4 24
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 164
ADDRLP4 160
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 160
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
CVIF4 4
ADDRLP4 164
INDIRF4
MULF4
ARGF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 164
INDIRF4
MULF4
ARGF4
ADDRGP4 listbar_color
ARGP4
ADDRGP4 UI_FillRect
CALLV
pop
line 655
;655:				}
LABELV $278
line 656
;656:				if(b->styles == 2){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 2
NEI4 $282
line 657
;657:				UI_FillRect(u,y,(b->width*SMALLCHAR_WIDTH),(b->width*SMALLCHAR_WIDTH),listbar_color);
ADDRLP4 24
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 160
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ASGNI4
ADDRLP4 160
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRLP4 160
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRGP4 listbar_color
ARGP4
ADDRGP4 UI_FillRect
CALLV
pop
line 658
;658:				}
LABELV $282
line 659
;659:				color = text_color_highlight;
ADDRLP4 20
ADDRGP4 text_color_highlight
ASGNP4
line 661
;660:
;661:				if (hasfocus)
ADDRLP4 100
INDIRI4
CNSTI4 0
EQI4 $286
line 662
;662:					style = UI_PULSE|UI_LEFT|UI_SMALLFONT;
ADDRLP4 16
CNSTI4 16400
ASGNI4
ADDRGP4 $269
JUMPV
LABELV $286
line 664
;663:				else
;664:					style = UI_LEFT|UI_SMALLFONT;
ADDRLP4 16
CNSTI4 16
ASGNI4
line 665
;665:			}
ADDRGP4 $269
JUMPV
LABELV $268
line 667
;666:			else
;667:			{
line 668
;668:				color = b->color;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRP4
ASGNP4
line 669
;669:				style = UI_LEFT|UI_SMALLFONT;
ADDRLP4 16
CNSTI4 16
ASGNI4
line 670
;670:			}
LABELV $269
line 671
;671:			if( b->generic.flags & QMF_CENTER_JUSTIFY ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8
BANDU4
CNSTU4 0
EQU4 $288
line 672
;672:				style |= UI_CENTER;
ADDRLP4 16
ADDRLP4 16
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 673
;673:			}
LABELV $288
line 674
;674:			if(b->styles <= 0){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 0
GTI4 $290
line 675
;675:			UI_DrawStringCustom(x,y,b->itemnames[i],style,color, b->fontsize, 512 );
ADDRLP4 12
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 160
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 160
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
CNSTF4 1140850688
ARGF4
ADDRGP4 UI_DrawStringCustom
CALLV
pop
line 676
;676:			}
LABELV $290
line 677
;677:			if(b->styles == 1){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
NEI4 $292
line 678
;678:			UI_DrawStringCustom(x+SMALLCHAR_HEIGHT*b->fontsize,y,b->itemnames[i],style,color, b->fontsize, 512 );
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 164
ADDRLP4 160
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 12
INDIRF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 164
INDIRF4
MULF4
ADDF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 160
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 164
INDIRF4
ARGF4
CNSTF4 1140850688
ARGF4
ADDRGP4 UI_DrawStringCustom
CALLV
pop
line 679
;679:			b->shader = trap_R_RegisterShaderNoMip( va("%s/%s", b->string, b->itemnames[i]) );
ADDRGP4 $295
ARGP4
ADDRLP4 168
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 168
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 168
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 172
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 172
INDIRP4
ARGP4
ADDRLP4 176
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 168
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 176
INDIRI4
ASGNI4
line 680
;680:			if(b->shader){
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 0
EQI4 $296
line 681
;681:			UI_DrawHandlePic( x, y, SMALLCHAR_HEIGHT*b->fontsize, SMALLCHAR_HEIGHT*b->fontsize, trap_R_RegisterShaderNoMip( va("%s/%s", b->string, b->itemnames[i]) ) );
ADDRGP4 $295
ARGP4
ADDRLP4 180
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 180
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 184
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 184
INDIRP4
ARGP4
ADDRLP4 188
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 192
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 192
INDIRF4
MULF4
ARGF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 192
INDIRF4
MULF4
ARGF4
ADDRLP4 188
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 682
;682:			}
LABELV $296
line 683
;683:			b->model = trap_R_RegisterModel( va("%s/%s", b->string, b->itemnames[i]) );
ADDRGP4 $295
ARGP4
ADDRLP4 180
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 180
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 180
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 184
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 184
INDIRP4
ARGP4
ADDRLP4 188
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 180
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 188
INDIRI4
ASGNI4
line 684
;684:			if(b->model){
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 0
EQI4 $300
line 685
;685:			UI_DrawHandleModel( x, y, SMALLCHAR_HEIGHT*b->fontsize, SMALLCHAR_HEIGHT*b->fontsize, va("%s/%s", b->string, b->itemnames[i]), b->corner );
ADDRGP4 $295
ARGP4
ADDRLP4 192
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 192
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 192
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 196
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 200
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 204
ADDRLP4 200
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 204
INDIRF4
MULF4
ARGF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 204
INDIRF4
MULF4
ARGF4
ADDRLP4 196
INDIRP4
ARGP4
ADDRLP4 200
INDIRP4
CNSTI4 132
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandleModel
CALLI4
pop
line 686
;686:			}
LABELV $300
line 687
;687:			if(!b->shader && !b->model){
ADDRLP4 192
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
CNSTI4 0
ASGNI4
ADDRLP4 192
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDRLP4 196
INDIRI4
NEI4 $304
ADDRLP4 192
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 196
INDIRI4
NEI4 $304
line 688
;688:			info = UI_GetBotInfoByName( b->itemnames[i] );
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 200
ADDRGP4 UI_GetBotInfoByName
CALLP4
ASGNP4
ADDRLP4 96
ADDRLP4 200
INDIRP4
ASGNP4
line 689
;689:			UI_ServerPlayerIcon( Info_ValueForKey( info, "model" ), pic, MAX_QPATH );
ADDRLP4 96
INDIRP4
ARGP4
ADDRGP4 $306
ARGP4
ADDRLP4 204
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 204
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 UI_ServerPlayerIcon
CALLV
pop
line 690
;690:			b->shader = trap_R_RegisterShaderNoMip( pic );
ADDRLP4 28
ARGP4
ADDRLP4 208
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 208
INDIRI4
ASGNI4
line 691
;691:			if(b->shader){
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 0
EQI4 $307
line 692
;692:			UI_DrawHandlePic( x, y, SMALLCHAR_HEIGHT*b->fontsize, SMALLCHAR_HEIGHT*b->fontsize, trap_R_RegisterShaderNoMip( pic ));
ADDRLP4 28
ARGP4
ADDRLP4 212
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 216
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 216
INDIRF4
MULF4
ARGF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 216
INDIRF4
MULF4
ARGF4
ADDRLP4 212
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 693
;693:			}
LABELV $307
line 694
;694:			}
LABELV $304
line 695
;695:			it = UI_FindItem(b->itemnames[i]);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 200
ADDRGP4 UI_FindItem
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 200
INDIRP4
ASGNP4
line 696
;696:			if(it->classname && it->icon && !b->model && !b->shader){
ADDRLP4 208
CNSTU4 0
ASGNU4
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
ADDRLP4 208
INDIRU4
EQU4 $311
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 208
INDIRU4
EQU4 $311
ADDRLP4 212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 216
CNSTI4 0
ASGNI4
ADDRLP4 212
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 216
INDIRI4
NEI4 $311
ADDRLP4 212
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDRLP4 216
INDIRI4
NEI4 $311
line 697
;697:			UI_DrawHandlePic( x, y, SMALLCHAR_HEIGHT*b->fontsize, SMALLCHAR_HEIGHT*b->fontsize, trap_R_RegisterShaderNoMip( it->icon ) );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 220
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 224
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 224
INDIRF4
MULF4
ARGF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 224
INDIRF4
MULF4
ARGF4
ADDRLP4 220
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 698
;698:			}
LABELV $311
line 699
;699:			if(!it->classname){
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $315
line 700
;700:			it = UI_FindItemClassname(b->itemnames[i]);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 220
ADDRGP4 UI_FindItemClassname
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 220
INDIRP4
ASGNP4
line 701
;701:			if(it->classname && !b->model && !b->shader){
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $317
ADDRLP4 224
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 228
CNSTI4 0
ASGNI4
ADDRLP4 224
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 228
INDIRI4
NEI4 $317
ADDRLP4 224
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDRLP4 228
INDIRI4
NEI4 $317
line 702
;702:			b->model = trap_R_RegisterModel( it->world_model[0] );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 232
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 232
INDIRI4
ASGNI4
line 703
;703:			if(b->model){
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 0
EQI4 $319
line 704
;704:			UI_DrawHandleModel( x, y, SMALLCHAR_HEIGHT*b->fontsize, SMALLCHAR_HEIGHT*b->fontsize, it->world_model[0], b->corner );
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 236
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 240
ADDRLP4 236
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 240
INDIRF4
MULF4
ARGF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 240
INDIRF4
MULF4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 236
INDIRP4
CNSTI4 132
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandleModel
CALLI4
pop
line 705
;705:			}
LABELV $319
line 706
;706:			}
LABELV $317
line 707
;707:			}
LABELV $315
line 708
;708:			if(!b->shader && !b->model && !it){
ADDRLP4 220
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 224
CNSTI4 0
ASGNI4
ADDRLP4 220
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDRLP4 224
INDIRI4
NEI4 $323
ADDRLP4 220
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 224
INDIRI4
NEI4 $323
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $323
line 709
;709:			UI_DrawHandlePicFile( x, y, SMALLCHAR_HEIGHT*b->fontsize, SMALLCHAR_HEIGHT*b->fontsize, va("%s/%s", b->string, b->itemnames[i]) );
ADDRGP4 $295
ARGP4
ADDRLP4 228
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 228
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 228
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 232
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 236
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 236
INDIRF4
MULF4
ARGF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 236
INDIRF4
MULF4
ARGF4
ADDRLP4 232
INDIRP4
ARGP4
ADDRGP4 UI_DrawHandlePicFile
CALLI4
pop
line 710
;710:			}
LABELV $323
line 711
;711:			}
LABELV $292
line 712
;712:			if(b->styles == 2){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 2
NEI4 $327
line 713
;713:			b->shader = trap_R_RegisterShaderNoMip( va("%s/%s", b->string, b->itemnames[i]) );
ADDRGP4 $295
ARGP4
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 160
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 160
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 164
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 168
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 160
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 168
INDIRI4
ASGNI4
line 714
;714:			if(b->shader){
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 0
EQI4 $329
line 715
;715:			UI_DrawHandlePic( x, y, SMALLCHAR_WIDTH*b->width, SMALLCHAR_WIDTH*b->width, trap_R_RegisterShaderNoMip( va("%s/%s", b->string, b->itemnames[i]) ) );
ADDRGP4 $295
ARGP4
ADDRLP4 172
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 172
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 172
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 176
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRLP4 180
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 184
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ASGNI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 184
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 184
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRLP4 180
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 716
;716:			}
LABELV $329
line 717
;717:			b->model = trap_R_RegisterModel( va("%s/%s", b->string, b->itemnames[i]) );
ADDRGP4 $295
ARGP4
ADDRLP4 172
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 172
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 172
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 176
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 176
INDIRP4
ARGP4
ADDRLP4 180
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRLP4 172
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 180
INDIRI4
ASGNI4
line 718
;718:			if(b->model){
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 0
EQI4 $333
line 719
;719:			UI_DrawHandleModel( x, y, (float)(SMALLCHAR_WIDTH*b->width), (float)(SMALLCHAR_WIDTH*b->width), va("%s/%s", b->string, b->itemnames[i]), b->corner );
ADDRGP4 $295
ARGP4
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 184
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 184
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 188
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 192
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 196
ADDRLP4 192
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ASGNI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 196
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 196
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRLP4 188
INDIRP4
ARGP4
ADDRLP4 192
INDIRP4
CNSTI4 132
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandleModel
CALLI4
pop
line 720
;720:			}
LABELV $333
line 721
;721:			if(!b->shader && !b->model){
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 188
CNSTI4 0
ASGNI4
ADDRLP4 184
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDRLP4 188
INDIRI4
NEI4 $337
ADDRLP4 184
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 188
INDIRI4
NEI4 $337
line 722
;722:			info = UI_GetBotInfoByName( b->itemnames[i] );
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 192
ADDRGP4 UI_GetBotInfoByName
CALLP4
ASGNP4
ADDRLP4 96
ADDRLP4 192
INDIRP4
ASGNP4
line 723
;723:			UI_ServerPlayerIcon( Info_ValueForKey( info, "model" ), pic, MAX_QPATH );
ADDRLP4 96
INDIRP4
ARGP4
ADDRGP4 $306
ARGP4
ADDRLP4 196
ADDRGP4 Info_ValueForKey
CALLP4
ASGNP4
ADDRLP4 196
INDIRP4
ARGP4
ADDRLP4 28
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 UI_ServerPlayerIcon
CALLV
pop
line 724
;724:			b->shader = trap_R_RegisterShaderNoMip( pic );
ADDRLP4 28
ARGP4
ADDRLP4 200
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 200
INDIRI4
ASGNI4
line 725
;725:			if(b->shader){
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 0
EQI4 $339
line 726
;726:			UI_DrawHandlePic( x, y, SMALLCHAR_WIDTH*b->width, SMALLCHAR_WIDTH*b->width, trap_R_RegisterShaderNoMip( pic ));
ADDRLP4 28
ARGP4
ADDRLP4 204
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 208
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ASGNI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 208
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 208
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRLP4 204
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 727
;727:			}
LABELV $339
line 728
;728:			}
LABELV $337
line 729
;729:			it = UI_FindItem(b->itemnames[i]);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 192
ADDRGP4 UI_FindItem
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 192
INDIRP4
ASGNP4
line 730
;730:			if(it->classname && it->icon && !b->model && !b->shader){
ADDRLP4 200
CNSTU4 0
ASGNU4
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
ADDRLP4 200
INDIRU4
EQU4 $343
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 200
INDIRU4
EQU4 $343
ADDRLP4 204
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 208
CNSTI4 0
ASGNI4
ADDRLP4 204
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 208
INDIRI4
NEI4 $343
ADDRLP4 204
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDRLP4 208
INDIRI4
NEI4 $343
line 731
;731:			UI_DrawHandlePic( x, y, SMALLCHAR_WIDTH*b->width, SMALLCHAR_WIDTH*b->width, trap_R_RegisterShaderNoMip( it->icon ) );
ADDRLP4 4
INDIRP4
CNSTI4 24
ADDP4
INDIRP4
ARGP4
ADDRLP4 212
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 216
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ASGNI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 216
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 216
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRLP4 212
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 732
;732:			}
LABELV $343
line 733
;733:			if(!it->classname){
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $347
line 734
;734:			it = UI_FindItemClassname(b->itemnames[i]);
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 212
ADDRGP4 UI_FindItemClassname
CALLP4
ASGNP4
ADDRLP4 4
ADDRLP4 212
INDIRP4
ASGNP4
line 735
;735:			if(it->classname && !b->model && !b->shader){
ADDRLP4 4
INDIRP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $349
ADDRLP4 216
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 220
CNSTI4 0
ASGNI4
ADDRLP4 216
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 220
INDIRI4
NEI4 $349
ADDRLP4 216
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDRLP4 220
INDIRI4
NEI4 $349
line 736
;736:			b->model = trap_R_RegisterModel( it->world_model[0] );
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 224
ADDRGP4 trap_R_RegisterModel
CALLI4
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 224
INDIRI4
ASGNI4
line 737
;737:			if(b->model){
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 0
EQI4 $351
line 738
;738:			UI_DrawHandleModel( x, y, (float)(SMALLCHAR_WIDTH*b->width), (float)(SMALLCHAR_WIDTH*b->width), it->world_model[0], b->corner );
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 228
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 232
ADDRLP4 228
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ASGNI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 232
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 232
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 228
INDIRP4
CNSTI4 132
ADDP4
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandleModel
CALLI4
pop
line 739
;739:			}
LABELV $351
line 740
;740:			}
LABELV $349
line 741
;741:			}
LABELV $347
line 742
;742:			if(!b->shader && !b->model && !it){
ADDRLP4 212
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 216
CNSTI4 0
ASGNI4
ADDRLP4 212
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDRLP4 216
INDIRI4
NEI4 $355
ADDRLP4 212
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 216
INDIRI4
NEI4 $355
ADDRLP4 4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $355
line 743
;743:			UI_DrawHandlePicFile( x, y, (float)(SMALLCHAR_WIDTH*b->width), (float)(SMALLCHAR_WIDTH*b->width), va("%s/%s", b->string, b->itemnames[i]) );
ADDRGP4 $295
ARGP4
ADDRLP4 220
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 220
INDIRP4
CNSTI4 112
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 220
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 224
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 12
INDIRF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
ADDRLP4 228
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ASGNI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 228
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 228
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRLP4 224
INDIRP4
ARGP4
ADDRGP4 UI_DrawHandlePicFile
CALLI4
pop
line 744
;744:			}
LABELV $355
line 745
;745:			UI_DrawStringCustom(x,y,b->itemnames[i],style,color, b->fontsize, ((SMALLCHAR_WIDTH*b->width)/(SMALLCHAR_WIDTH*b->fontsize))-4 );
ADDRLP4 12
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 220
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 220
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 224
ADDRLP4 220
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 224
INDIRF4
ARGF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 220
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
MULI4
CVIF4 4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 224
INDIRF4
MULF4
DIVF4
CNSTF4 1082130432
SUBF4
ARGF4
ADDRGP4 UI_DrawStringCustom
CALLV
pop
line 746
;746:			}
LABELV $327
line 747
;747:			if(b->styles <= 1){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
GTI4 $361
line 748
;748:			y += (SMALLCHAR_HEIGHT*b->fontsize);
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
ADDF4
ASGNF4
line 749
;749:			}
LABELV $361
line 750
;750:			if(b->styles == 2){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 2
NEI4 $364
line 751
;751:			y += (b->width*SMALLCHAR_WIDTH);
ADDRLP4 8
ADDRLP4 8
INDIRF4
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
CVIF4 4
ADDF4
ASGNF4
line 752
;752:			}
LABELV $364
line 753
;753:		}
LABELV $263
line 638
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $265
ADDRLP4 0
INDIRI4
ADDRLP4 92
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ADDI4
LTI4 $262
LABELV $264
line 754
;754:		if(b->styles <= 1){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
GTI4 $367
line 755
;755:			x += (b->width + b->seperation) * (SMALLCHAR_WIDTH*b->fontsize);
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 160
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 160
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
ADDI4
CVIF4 4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 160
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
MULF4
ADDF4
ASGNF4
line 756
;756:		}
LABELV $367
line 757
;757:		if(b->styles == 2){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 2
NEI4 $370
line 758
;758:			x += (b->width + b->seperation) * (SMALLCHAR_WIDTH);
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 12
INDIRF4
ADDRLP4 160
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 160
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
ADDI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
CVIF4 4
ADDF4
ASGNF4
line 759
;759:		}
LABELV $370
line 760
;760:	}
LABELV $259
line 635
ADDRLP4 104
ADDRLP4 104
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $261
ADDRLP4 104
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
LTI4 $258
line 762
;761:	
;762:	UI_DrawRoundedRect(b->generic.right-(16*ui_scrollbtnsize.integer),b->generic.bottom-(16*ui_scrollbtnsize.integer),(16*ui_scrollbtnsize.integer),(16*ui_scrollbtnsize.integer), 100, scrollbuttona);
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 160
CNSTI4 4
ASGNI4
ADDRLP4 156
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 160
INDIRI4
LSHI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 156
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 160
INDIRI4
LSHI4
SUBI4
CVIF4 4
ARGF4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 160
INDIRI4
LSHI4
CVIF4 4
ARGF4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 160
INDIRI4
LSHI4
CVIF4 4
ARGF4
CNSTF4 1120403456
ARGF4
ADDRLP4 120
ARGP4
ADDRGP4 UI_DrawRoundedRect
CALLV
pop
line 763
;763:	UI_DrawRoundedRect(b->generic.right-(16*ui_scrollbtnsize.integer),b->generic.top,(16*ui_scrollbtnsize.integer),(16*ui_scrollbtnsize.integer), 100, scrollbuttona);
ADDRLP4 164
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 168
CNSTI4 4
ASGNI4
ADDRLP4 164
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 168
INDIRI4
LSHI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 164
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 168
INDIRI4
LSHI4
CVIF4 4
ARGF4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 168
INDIRI4
LSHI4
CVIF4 4
ARGF4
CNSTF4 1120403456
ARGF4
ADDRLP4 120
ARGP4
ADDRGP4 UI_DrawRoundedRect
CALLV
pop
line 764
;764:}
LABELV $253
line 766
;765:
;766:if(b->type == 7){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 7
NEI4 $380
line 767
;767:	x = b->generic.x;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 768
;768:	y = b->generic.y;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 770
;769:
;770:	focus = (b->generic.parent->cursor == b->generic.menuPosition);
ADDRLP4 152
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 152
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
INDIRI4
ADDRLP4 152
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
NEI4 $383
ADDRLP4 148
CNSTI4 1
ASGNI4
ADDRGP4 $384
JUMPV
LABELV $383
ADDRLP4 148
CNSTI4 0
ASGNI4
LABELV $384
ADDRLP4 108
ADDRLP4 148
INDIRI4
ASGNI4
line 772
;771:
;772:	if ( b->generic.flags & QMF_GRAYED )
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8192
BANDU4
CNSTU4 0
EQU4 $385
line 773
;773:	{
line 774
;774:		color = text_color_disabled;
ADDRLP4 20
ADDRGP4 text_color_disabled
ASGNP4
line 775
;775:		style = UI_LEFT|UI_SMALLFONT;
ADDRLP4 16
CNSTI4 16
ASGNI4
line 776
;776:	}
ADDRGP4 $386
JUMPV
LABELV $385
line 777
;777:	else if ( focus )
ADDRLP4 108
INDIRI4
CNSTI4 0
EQI4 $387
line 778
;778:	{
line 779
;779:		color = text_color_highlight;
ADDRLP4 20
ADDRGP4 text_color_highlight
ASGNP4
line 780
;780:		style = UI_LEFT|UI_PULSE|UI_SMALLFONT;
ADDRLP4 16
CNSTI4 16400
ASGNI4
line 781
;781:	}
ADDRGP4 $388
JUMPV
LABELV $387
line 783
;782:	else
;783:	{
line 784
;784:		if(!b->color){
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $389
line 785
;785:		color = text_color_normal;
ADDRLP4 20
ADDRGP4 text_color_normal
ASGNP4
line 786
;786:		} else {
ADDRGP4 $390
JUMPV
LABELV $389
line 787
;787:		color = b->color;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRP4
ASGNP4
line 788
;788:		}
LABELV $390
line 789
;789:		style = UI_LEFT|UI_SMALLFONT;
ADDRLP4 16
CNSTI4 16
ASGNI4
line 790
;790:	}
LABELV $388
LABELV $386
line 792
;791:
;792:	if ( focus )
ADDRLP4 108
INDIRI4
CNSTI4 0
EQI4 $391
line 793
;793:	{
line 796
;794:		// draw cursor
;795:		//UI_FillRect( b->generic.left, b->generic.top, b->generic.right-b->generic.left+1, b->generic.bottom-b->generic.top+1, listbar_color ); 
;796:		UI_DrawCharCustom( x, y, 13, UI_CENTER|UI_BLINK|UI_SMALLFONT, color, b->fontsize);
ADDRLP4 12
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
CNSTI4 13
ARGI4
CNSTI4 4113
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
ADDRGP4 UI_DrawCharCustom
CALLV
pop
line 797
;797:	}
LABELV $391
line 799
;798:
;799:	if ( b->generic.text )
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $393
line 800
;800:		UI_DrawStringCustom( x - SMALLCHAR_WIDTH, y, b->generic.text, UI_RIGHT|UI_SMALLFONT, color, b->fontsize, 512 );
ADDRLP4 12
INDIRF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
SUBF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 156
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
CNSTI4 18
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 156
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ARGF4
CNSTF4 1140850688
ARGF4
ADDRGP4 UI_DrawStringCustom
CALLV
pop
LABELV $393
line 802
;801:
;802:	if ( !b->curvalue )
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
CNSTI4 0
NEI4 $396
line 803
;803:	{
line 804
;804:		UI_DrawHandlePic( x + SMALLCHAR_WIDTH*b->fontsize, y + 2, 12*b->fontsize, 12*b->fontsize, uis.rb_off);
ADDRLP4 160
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 12
INDIRF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 8
INDIRF4
CNSTF4 1073741824
ADDF4
ARGF4
ADDRLP4 164
CNSTF4 1094713344
ADDRLP4 160
INDIRF4
MULF4
ASGNF4
ADDRLP4 164
INDIRF4
ARGF4
ADDRLP4 164
INDIRF4
ARGF4
ADDRGP4 uis+11440
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 805
;805:		UI_DrawStringCustom( x + SMALLCHAR_WIDTH*b->fontsize + 12*b->fontsize, y, "off", style, color, b->fontsize, 512 );
ADDRLP4 168
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 12
INDIRF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 168
INDIRF4
MULF4
ADDF4
CNSTF4 1094713344
ADDRLP4 168
INDIRF4
MULF4
ADDF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
ADDRGP4 $401
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 168
INDIRF4
ARGF4
CNSTF4 1140850688
ARGF4
ADDRGP4 UI_DrawStringCustom
CALLV
pop
line 806
;806:	}
ADDRGP4 $397
JUMPV
LABELV $396
line 808
;807:	else
;808:	{
line 809
;809:		UI_DrawHandlePic( x + SMALLCHAR_WIDTH*b->fontsize, y + 2, 12*b->fontsize, 12*b->fontsize, uis.rb_on );
ADDRLP4 160
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 12
INDIRF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 160
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 8
INDIRF4
CNSTF4 1073741824
ADDF4
ARGF4
ADDRLP4 164
CNSTF4 1094713344
ADDRLP4 160
INDIRF4
MULF4
ASGNF4
ADDRLP4 164
INDIRF4
ARGF4
ADDRLP4 164
INDIRF4
ARGF4
ADDRGP4 uis+11436
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 810
;810:		UI_DrawStringCustom( x + SMALLCHAR_WIDTH*b->fontsize + 12*b->fontsize, y, "on", style, color, b->fontsize, 512 );
ADDRLP4 168
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 12
INDIRF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 168
INDIRF4
MULF4
ADDF4
CNSTF4 1094713344
ADDRLP4 168
INDIRF4
MULF4
ADDF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
ADDRGP4 $405
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 168
INDIRF4
ARGF4
CNSTF4 1140850688
ARGF4
ADDRGP4 UI_DrawStringCustom
CALLV
pop
line 811
;811:	}
LABELV $397
line 812
;812:}
LABELV $380
line 814
;813:
;814:if(b->type == 8){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 8
NEI4 $406
line 815
;815:	x =	b->generic.x;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 816
;816:	y = b->generic.y;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
CVIF4 4
ASGNF4
line 817
;817:	val = b->curvalue;
ADDRLP4 136
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 818
;818:	focus = (b->generic.parent->cursor == b->generic.menuPosition);
ADDRLP4 152
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 152
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
INDIRI4
ADDRLP4 152
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
NEI4 $409
ADDRLP4 148
CNSTI4 1
ASGNI4
ADDRGP4 $410
JUMPV
LABELV $409
ADDRLP4 148
CNSTI4 0
ASGNI4
LABELV $410
ADDRLP4 108
ADDRLP4 148
INDIRI4
ASGNI4
line 820
;819:
;820:	if( b->generic.flags & QMF_GRAYED ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8192
BANDU4
CNSTU4 0
EQU4 $411
line 821
;821:		color = text_color_disabled;
ADDRLP4 20
ADDRGP4 text_color_disabled
ASGNP4
line 822
;822:		style = UI_SMALLFONT;
ADDRLP4 16
CNSTI4 16
ASGNI4
line 823
;823:	}
ADDRGP4 $412
JUMPV
LABELV $411
line 824
;824:	else if( focus ) {
ADDRLP4 108
INDIRI4
CNSTI4 0
EQI4 $413
line 825
;825:		color  = text_color_highlight;
ADDRLP4 20
ADDRGP4 text_color_highlight
ASGNP4
line 826
;826:		style = UI_SMALLFONT | UI_PULSE;
ADDRLP4 16
CNSTI4 16400
ASGNI4
line 827
;827:	}
ADDRGP4 $414
JUMPV
LABELV $413
line 828
;828:	else {
line 829
;829:		color = b->color;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRP4
ASGNP4
line 830
;830:		style = UI_SMALLFONT;
ADDRLP4 16
CNSTI4 16
ASGNI4
line 831
;831:	}
LABELV $414
LABELV $412
line 834
;832:
;833:	// draw label
;834:	UI_DrawStringCustom( x - (SMALLCHAR_WIDTH*b->fontsize), y, b->generic.text, UI_RIGHT|style, color, b->fontsize, 512 );
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 160
ADDRLP4 156
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 12
INDIRF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 160
INDIRF4
MULF4
SUBF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 156
INDIRP4
CNSTI4 8
ADDP4
INDIRP4
ARGP4
ADDRLP4 16
INDIRI4
CNSTI4 2
BORI4
ARGI4
ADDRLP4 20
INDIRP4
ARGP4
ADDRLP4 160
INDIRF4
ARGF4
CNSTF4 1140850688
ARGF4
ADDRGP4 UI_DrawStringCustom
CALLV
pop
line 835
;835:	UI_DrawStringCustom( x + (SMALLCHAR_WIDTH*b->fontsize)*11, y, va(" %i", val), UI_LEFT|style, colorGreen, b->fontsize, 512 );
ADDRGP4 $417
ARGP4
ADDRLP4 136
INDIRI4
ARGI4
ADDRLP4 164
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 168
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 12
INDIRF4
CNSTF4 1093664768
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 168
INDIRF4
MULF4
MULF4
ADDF4
CVFI4 4
ARGI4
ADDRLP4 8
INDIRF4
CVFI4 4
ARGI4
ADDRLP4 164
INDIRP4
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRGP4 colorGreen
ARGP4
ADDRLP4 168
INDIRF4
ARGF4
CNSTF4 1140850688
ARGF4
ADDRGP4 UI_DrawStringCustom
CALLV
pop
line 838
;836:
;837:	// draw slider
;838:	UI_SetColor( color );
ADDRLP4 20
INDIRP4
ARGP4
ADDRGP4 UI_SetColor
CALLV
pop
line 839
;839:	UI_DrawHandlePic( x + (SMALLCHAR_WIDTH*b->fontsize), y, 93*b->fontsize, 11*b->fontsize, sliderBar );
ADDRLP4 172
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 12
INDIRF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 172
INDIRF4
MULF4
ADDF4
ARGF4
ADDRLP4 8
INDIRF4
ARGF4
CNSTF4 1119485952
ADDRLP4 172
INDIRF4
MULF4
ARGF4
CNSTF4 1093664768
ADDRLP4 172
INDIRF4
MULF4
ARGF4
ADDRGP4 sliderBar
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 840
;840:	UI_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 UI_SetColor
CALLV
pop
line 843
;841:
;842:	// clamp thumb
;843:	if( b->maxvalue > b->minvalue )	{
ADDRLP4 176
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 176
INDIRP4
CNSTI4 448
ADDP4
INDIRI4
ADDRLP4 176
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
LEI4 $419
line 844
;844:		b->range = ( b->curvalue - b->minvalue ) / ( float ) ( b->maxvalue - b->minvalue );
ADDRLP4 180
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 184
ADDRLP4 180
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ASGNI4
ADDRLP4 180
INDIRP4
CNSTI4 452
ADDP4
ADDRLP4 180
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 184
INDIRI4
SUBI4
CVIF4 4
ADDRLP4 180
INDIRP4
CNSTI4 448
ADDP4
INDIRI4
ADDRLP4 184
INDIRI4
SUBI4
CVIF4 4
DIVF4
ASGNF4
line 845
;845:		if( b->range < 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 452
ADDP4
INDIRF4
CNSTF4 0
GEF4 $421
line 846
;846:			b->range = 0;
ADDRFP4 0
INDIRP4
CNSTI4 452
ADDP4
CNSTF4 0
ASGNF4
line 847
;847:		}
ADDRGP4 $420
JUMPV
LABELV $421
line 848
;848:		else if( b->range > 1) {
ADDRFP4 0
INDIRP4
CNSTI4 452
ADDP4
INDIRF4
CNSTF4 1065353216
LEF4 $420
line 849
;849:			b->range = 1;
ADDRFP4 0
INDIRP4
CNSTI4 452
ADDP4
CNSTF4 1065353216
ASGNF4
line 850
;850:		}
line 851
;851:	}
ADDRGP4 $420
JUMPV
LABELV $419
line 852
;852:	else {
line 853
;853:		b->range = 0;
ADDRFP4 0
INDIRP4
CNSTI4 452
ADDP4
CNSTF4 0
ASGNF4
line 854
;854:	}
LABELV $420
line 857
;855:
;856:	// draw thumb
;857:	if( style & UI_PULSE) {
ADDRLP4 16
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $425
line 858
;858:		button = sliderButton_1;
ADDRLP4 140
ADDRGP4 sliderButton_1
INDIRI4
ASGNI4
line 859
;859:	}
ADDRGP4 $426
JUMPV
LABELV $425
line 860
;860:	else {
line 861
;861:		button = sliderButton_0;
ADDRLP4 140
ADDRGP4 sliderButton_0
INDIRI4
ASGNI4
line 862
;862:	}
LABELV $426
line 864
;863:
;864:	UI_DrawHandlePic( (int)( x + 2*(SMALLCHAR_WIDTH*b->fontsize) + (SLIDER_RANGE-1)*(SMALLCHAR_WIDTH*b->fontsize)* b->range ) - 2, y - 2*b->fontsize, 9*b->fontsize, 16*b->fontsize, button );
ADDRLP4 180
CNSTF4 1073741824
ASGNF4
ADDRLP4 184
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 188
ADDRLP4 184
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
ASGNF4
ADDRLP4 192
CNSTF4 1091567616
ASGNF4
ADDRLP4 12
INDIRF4
ADDRLP4 180
INDIRF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 188
INDIRF4
MULF4
MULF4
ADDF4
ADDRLP4 192
INDIRF4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 188
INDIRF4
MULF4
MULF4
ADDRLP4 184
INDIRP4
CNSTI4 452
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
CNSTI4 2
SUBI4
CVIF4 4
ARGF4
ADDRLP4 8
INDIRF4
ADDRLP4 180
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
SUBF4
ARGF4
ADDRLP4 192
INDIRF4
ADDRLP4 188
INDIRF4
MULF4
ARGF4
CNSTF4 1098907648
ADDRLP4 188
INDIRF4
MULF4
ARGF4
ADDRLP4 140
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 865
;865:}
LABELV $406
line 867
;866:
;867:}
LABELV $219
endproc UIObject_Draw 244 28
data
align 4
LABELV $430
byte 4 0
align 4
LABELV $431
byte 4 0
export UIObject_Key
code
proc UIObject_Key 168 16
line 875
;868:
;869:/*
;870:==================
;871:UIObject_Key
;872:==================
;873:*/
;874:sfxHandle_t UIObject_Key( menuobject_s* b, int key )
;875:{
line 892
;876:	static int clicktime = 0;
;877:	int	x;
;878:	int	y;
;879:	int	w;
;880:	int	i;
;881:	int	j;
;882:	int	c;
;883:	int	cursorx;
;884:	int	cursory;
;885:	int	column;
;886:	int	index;
;887:	int clickdelay;
;888:	int keycode;
;889:	static int lastKeypress = 0;
;890:	sfxHandle_t	sound;
;891:	int			oldvalue;
;892:	if(b->type == 4){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 4
NEI4 $432
line 894
;893:
;894:	keycode = key;
ADDRLP4 12
ADDRFP4 4
INDIRI4
ASGNI4
line 896
;895:
;896:	switch ( keycode )
ADDRLP4 56
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 60
CNSTI4 161
ASGNI4
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
EQI4 $435
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
GTI4 $448
LABELV $447
ADDRLP4 64
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 68
CNSTI4 13
ASGNI4
ADDRLP4 64
INDIRI4
ADDRLP4 68
INDIRI4
EQI4 $435
ADDRLP4 64
INDIRI4
ADDRLP4 68
INDIRI4
GTI4 $450
LABELV $449
ADDRLP4 12
INDIRI4
CNSTI4 9
EQI4 $435
ADDRGP4 $434
JUMPV
LABELV $450
ADDRLP4 72
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 132
EQI4 $435
ADDRLP4 72
INDIRI4
CNSTI4 133
EQI4 $435
ADDRGP4 $434
JUMPV
LABELV $448
ADDRLP4 76
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 80
CNSTI4 178
ASGNI4
ADDRLP4 76
INDIRI4
ADDRLP4 80
INDIRI4
EQI4 $435
ADDRLP4 76
INDIRI4
ADDRLP4 80
INDIRI4
GTI4 $452
LABELV $451
ADDRLP4 84
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 167
EQI4 $435
ADDRLP4 84
INDIRI4
CNSTI4 169
EQI4 $435
ADDRGP4 $434
JUMPV
LABELV $452
ADDRLP4 88
ADDRLP4 12
INDIRI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 185
LTI4 $434
ADDRLP4 88
INDIRI4
CNSTI4 188
GTI4 $434
ADDRLP4 88
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $453-740
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $453
address $437
address $437
address $437
address $437
code
line 897
;897:	{
line 901
;898:		case K_KP_ENTER:
;899:		case K_ENTER:
;900:		case K_MOUSE1:
;901:			break;
LABELV $437
line 907
;902:		case K_JOY1:
;903:		case K_JOY2:
;904:		case K_JOY3:
;905:		case K_JOY4:
;906:			// have enter go to next cursor point
;907:			key = K_TAB;
ADDRFP4 4
CNSTI4 9
ASGNI4
line 908
;908:			break;
ADDRGP4 $435
JUMPV
line 915
;909:
;910:		case K_TAB:
;911:		case K_KP_DOWNARROW:
;912:		case K_DOWNARROW:
;913:		case K_KP_UPARROW:
;914:		case K_UPARROW:
;915:			break;
LABELV $434
line 918
;916:
;917:		default:
;918:			if ( keycode & K_CHAR_FLAG )
ADDRLP4 12
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $439
line 919
;919:			{
line 920
;920:				keycode &= ~K_CHAR_FLAG;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 -1025
BANDI4
ASGNI4
line 922
;921:
;922:				if ((b->generic.flags & QMF_UPPERCASE) && Q_islower( keycode ))
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 524288
BANDU4
CNSTU4 0
EQU4 $441
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 92
ADDRGP4 Q_islower
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
EQI4 $441
line 923
;923:					keycode -= 'a' - 'A';
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 32
SUBI4
ASGNI4
ADDRGP4 $442
JUMPV
LABELV $441
line 924
;924:				else if ((b->generic.flags & QMF_LOWERCASE) && Q_isupper( keycode ))
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 262144
BANDU4
CNSTU4 0
EQU4 $443
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 96
ADDRGP4 Q_isupper
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
EQI4 $443
line 925
;925:					keycode -= 'A' - 'a';
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 -32
SUBI4
ASGNI4
ADDRGP4 $444
JUMPV
LABELV $443
line 926
;926:				else if ((b->generic.flags & QMF_NUMBERSONLY) && Q_isalpha( keycode ))
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 32
BANDU4
CNSTU4 0
EQU4 $445
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 100
ADDRGP4 Q_isalpha
CALLI4
ASGNI4
ADDRLP4 100
INDIRI4
CNSTI4 0
EQI4 $445
line 927
;927:					return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $445
LABELV $444
LABELV $442
line 929
;928:
;929:				MField_CharEvent( &b->field, keycode);
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 MField_CharEvent
CALLV
pop
line 930
;930:			}
ADDRGP4 $435
JUMPV
LABELV $439
line 932
;931:			else
;932:				MField_KeyDownEvent( &b->field, keycode );
ADDRFP4 0
INDIRP4
CNSTI4 140
ADDP4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRGP4 MField_KeyDownEvent
CALLV
pop
line 933
;933:			break;
LABELV $435
line 935
;934:	}
;935:	lastKeypress = uis.realtime;
ADDRGP4 $431
ADDRGP4 uis+4
INDIRI4
ASGNI4
line 937
;936:
;937:	return (0);
CNSTI4 0
RETI4
ADDRGP4 $429
JUMPV
LABELV $432
line 939
;938:	}
;939:	if(b->type == 5){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 5
NEI4 $456
line 940
;940:	switch (key)
ADDRLP4 56
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 160
LTI4 $604
ADDRLP4 56
INDIRI4
CNSTI4 168
GTI4 $605
ADDRLP4 56
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $606-640
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $606
address $536
address $568
address $546
address $586
address $458
address $595
address $539
address $577
address $557
code
LABELV $604
ADDRLP4 60
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 132
LTI4 $458
ADDRLP4 60
INDIRI4
CNSTI4 144
GTI4 $458
ADDRLP4 60
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $608-528
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $608
address $568
address $577
address $586
address $595
address $458
address $458
address $458
address $458
address $458
address $557
address $546
address $536
address $539
code
LABELV $605
ADDRLP4 64
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 68
CNSTI4 178
ASGNI4
ADDRLP4 64
INDIRI4
ADDRLP4 68
INDIRI4
EQI4 $460
ADDRLP4 64
INDIRI4
ADDRLP4 68
INDIRI4
LTI4 $458
LABELV $610
ADDRLP4 72
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 183
EQI4 $577
ADDRLP4 72
INDIRI4
CNSTI4 184
EQI4 $568
ADDRGP4 $458
JUMPV
line 941
;941:	{
LABELV $460
line 943
;942:		case K_MOUSE1:
;943:			if (b->generic.flags & QMF_HASMOUSEFOCUS)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 512
BANDU4
CNSTU4 0
EQU4 $459
line 944
;944:			{
line 946
;945:				// check scroll region
;946:				x = b->generic.x;
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 947
;947:				y = b->generic.y;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 948
;948:				if(b->styles <= 1){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
GTI4 $463
line 949
;949:				w = ( (b->width + b->seperation) * b->columns - b->seperation) * (SMALLCHAR_WIDTH*b->fontsize);
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 76
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
ASGNI4
ADDRLP4 32
ADDRLP4 76
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
ADDI4
ADDRLP4 76
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
MULI4
ADDRLP4 80
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 76
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
MULF4
CVFI4 4
ASGNI4
line 950
;950:				}
LABELV $463
line 951
;951:				if(b->styles == 2){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 2
NEI4 $466
line 952
;952:				w = ( (b->width + b->seperation) * b->columns - b->seperation) * (SMALLCHAR_WIDTH);
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
ADDRLP4 76
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
ASGNI4
ADDRLP4 32
ADDRLP4 76
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 80
INDIRI4
ADDI4
ADDRLP4 76
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
MULI4
ADDRLP4 80
INDIRI4
SUBI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
ASGNI4
line 953
;953:				}
LABELV $466
line 954
;954:				if( b->generic.flags & QMF_CENTER_JUSTIFY ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8
BANDU4
CNSTU4 0
EQU4 $469
line 955
;955:					x -= w / 2;
ADDRLP4 20
ADDRLP4 20
INDIRI4
ADDRLP4 32
INDIRI4
CNSTI4 2
DIVI4
SUBI4
ASGNI4
line 956
;956:				}
LABELV $469
line 958
;957:				
;958:				if (UI_CursorInRect( b->generic.right-(16*ui_scrollbtnsize.integer), b->generic.bottom-(16*ui_scrollbtnsize.integer), (16*ui_scrollbtnsize.integer), (16*ui_scrollbtnsize.integer) ))
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
CNSTI4 4
ASGNI4
ADDRLP4 76
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 80
INDIRI4
LSHI4
SUBI4
ARGI4
ADDRLP4 76
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 80
INDIRI4
LSHI4
SUBI4
ARGI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 80
INDIRI4
LSHI4
ARGI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 80
INDIRI4
LSHI4
ARGI4
ADDRLP4 84
ADDRGP4 UI_CursorInRect
CALLI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 0
EQI4 $471
line 959
;959:				{
line 960
;960:					if( b->curvalue == b->numitems - 1 ) {
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 88
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 1
SUBI4
NEI4 $477
line 961
;961:						return menu_buzz_sound;
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $477
line 964
;962:					}
;963:
;964:					b->oldvalue = b->curvalue;
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 92
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 965
;965:					b->curvalue++;
ADDRLP4 96
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 967
;966:
;967:					if( b->curvalue >= b->top + b->columns * b->height ) {
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
MULI4
ADDI4
LTI4 $479
line 968
;968:						if( b->columns == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
CNSTI4 1
NEI4 $481
line 969
;969:							b->top++;
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 970
;970:						}
ADDRGP4 $482
JUMPV
LABELV $481
line 971
;971:						else {
line 972
;972:							b->top += b->height;
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 104
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRI4
ADDRLP4 104
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ADDI4
ASGNI4
line 973
;973:						}
LABELV $482
line 974
;974:					}
LABELV $479
line 976
;975:
;976:					if( b->generic.callback ) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $483
line 977
;977:						b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 104
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 978
;978:					}
LABELV $483
line 980
;979:
;980:					return menu_move_sound;
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $471
line 983
;981:				}
;982:				
;983:				if (UI_CursorInRect( b->generic.right-(16*ui_scrollbtnsize.integer), b->generic.top, (16*ui_scrollbtnsize.integer), (16*ui_scrollbtnsize.integer) ))
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
CNSTI4 4
ASGNI4
ADDRLP4 88
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 92
INDIRI4
LSHI4
SUBI4
ARGI4
ADDRLP4 88
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
ARGI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 92
INDIRI4
LSHI4
ARGI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 92
INDIRI4
LSHI4
ARGI4
ADDRLP4 96
ADDRGP4 UI_CursorInRect
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
EQI4 $485
line 984
;984:				{
line 985
;985:					if( b->curvalue == 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
CNSTI4 0
NEI4 $490
line 986
;986:						return menu_buzz_sound;
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $490
line 989
;987:					}
;988:
;989:					b->oldvalue = b->curvalue;
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 100
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 990
;990:					b->curvalue--;
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 992
;991:
;992:					if( b->curvalue < b->top ) {
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 108
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
GEI4 $492
line 993
;993:						if( b->columns == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
CNSTI4 1
NEI4 $494
line 994
;994:							b->top--;
ADDRLP4 112
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 995
;995:						}
ADDRGP4 $495
JUMPV
LABELV $494
line 996
;996:						else {
line 997
;997:							b->top -= b->height;
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
ADDRLP4 112
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRI4
ADDRLP4 112
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
SUBI4
ASGNI4
line 998
;998:						}
LABELV $495
line 999
;999:					}
LABELV $492
line 1001
;1000:
;1001:					if( b->generic.callback ) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $496
line 1002
;1002:						b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 112
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 1003
;1003:					}
LABELV $496
line 1005
;1004:
;1005:					return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $485
line 1008
;1006:				}
;1007:				
;1008:				if(b->styles <= 1){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
GTI4 $498
line 1009
;1009:				if (UI_CursorInRect( x, y, w, b->height*(SMALLCHAR_HEIGHT*b->fontsize) ))
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CVIF4 4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRLP4 100
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
MULF4
CVFI4 4
ARGI4
ADDRLP4 104
ADDRGP4 UI_CursorInRect
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 0
EQI4 $500
line 1010
;1010:				{
line 1011
;1011:					cursorx = (uis.cursorx - x)/(SMALLCHAR_WIDTH*b->fontsize);
ADDRLP4 40
ADDRGP4 uis+8
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
DIVF4
CVFI4 4
ASGNI4
line 1012
;1012:					column = cursorx / (b->width + b->seperation);
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
ADDRLP4 40
INDIRI4
ADDRLP4 108
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 108
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
ADDI4
DIVI4
ASGNI4
line 1013
;1013:					cursory = (uis.cursory - y)/(SMALLCHAR_HEIGHT*b->fontsize);
ADDRLP4 44
ADDRGP4 uis+12
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
CVIF4 4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
DIVF4
CVFI4 4
ASGNI4
line 1014
;1014:					index = column * b->height + cursory;
ADDRLP4 36
ADDRLP4 48
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
MULI4
ADDRLP4 44
INDIRI4
ADDI4
ASGNI4
line 1015
;1015:					if (b->top + index < b->numitems)
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
ADDRLP4 36
INDIRI4
ADDI4
ADDRLP4 112
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
GEI4 $507
line 1016
;1016:					{
line 1017
;1017:						b->oldvalue = b->curvalue;
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 116
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1018
;1018:						b->curvalue = b->top + index;
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
CNSTI4 416
ADDP4
ADDRLP4 120
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
ADDRLP4 36
INDIRI4
ADDI4
ASGNI4
line 1020
;1019:
;1020:						clickdelay = uis.realtime - clicktime;
ADDRLP4 52
ADDRGP4 uis+4
INDIRI4
ADDRGP4 $430
INDIRI4
SUBI4
ASGNI4
line 1021
;1021:						clicktime = uis.realtime;
ADDRGP4 $430
ADDRGP4 uis+4
INDIRI4
ASGNI4
line 1022
;1022:						if (b->oldvalue != b->curvalue)
ADDRLP4 124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 124
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
ADDRLP4 124
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
EQI4 $511
line 1023
;1023:						{
line 1024
;1024:							if (b->generic.callback) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $513
line 1025
;1025:								b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 128
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 1026
;1026:							}
LABELV $513
line 1027
;1027:							return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $511
line 1029
;1028:						}
;1029:						else {
line 1031
;1030:							// double click
;1031:							if ((clickdelay < 350) && !(b->generic.flags & (QMF_GRAYED|QMF_INACTIVE)))
ADDRLP4 52
INDIRI4
CNSTI4 350
GEI4 $515
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 24576
BANDU4
CNSTU4 0
NEU4 $515
line 1032
;1032:							{
line 1033
;1033:								return (Menu_ActivateItem( b->generic.parent, &b->generic ));
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 Menu_ActivateItem
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $515
line 1035
;1034:							}
;1035:						}
line 1036
;1036:					}
LABELV $507
line 1037
;1037:				}
LABELV $500
line 1038
;1038:				}
LABELV $498
line 1039
;1039:				if(b->styles == 2){
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 2
NEI4 $517
line 1040
;1040:				if (UI_CursorInRect( x, y, w, b->height * (SMALLCHAR_WIDTH*b->width) ))
ADDRLP4 20
INDIRI4
ARGI4
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 32
INDIRI4
ARGI4
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
MULI4
MULI4
ARGI4
ADDRLP4 104
ADDRGP4 UI_CursorInRect
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
CNSTI4 0
EQI4 $519
line 1041
;1041:				{
line 1042
;1042:					cursorx = (uis.cursorx - x)/(SMALLCHAR_WIDTH);
ADDRLP4 40
ADDRGP4 uis+8
INDIRI4
ADDRLP4 20
INDIRI4
SUBI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
DIVI4
ASGNI4
line 1043
;1043:					column = cursorx / (b->width + b->seperation);
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
ADDRLP4 40
INDIRI4
ADDRLP4 108
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
ADDRLP4 108
INDIRP4
CNSTI4 440
ADDP4
INDIRI4
ADDI4
DIVI4
ASGNI4
line 1044
;1044:					cursory = (uis.cursory - y)/(SMALLCHAR_WIDTH*b->width);
ADDRLP4 44
ADDRGP4 uis+12
INDIRI4
ADDRLP4 28
INDIRI4
SUBI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRI4
MULI4
DIVI4
ASGNI4
line 1045
;1045:					index = column * b->height + cursory;
ADDRLP4 36
ADDRLP4 48
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
MULI4
ADDRLP4 44
INDIRI4
ADDI4
ASGNI4
line 1046
;1046:					if (b->top + index < b->numitems)
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
ADDRLP4 36
INDIRI4
ADDI4
ADDRLP4 112
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
GEI4 $526
line 1047
;1047:					{
line 1048
;1048:						b->oldvalue = b->curvalue;
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 116
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1049
;1049:						b->curvalue = b->top + index;
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
CNSTI4 416
ADDP4
ADDRLP4 120
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
ADDRLP4 36
INDIRI4
ADDI4
ASGNI4
line 1051
;1050:
;1051:						clickdelay = uis.realtime - clicktime;
ADDRLP4 52
ADDRGP4 uis+4
INDIRI4
ADDRGP4 $430
INDIRI4
SUBI4
ASGNI4
line 1052
;1052:						clicktime = uis.realtime;
ADDRGP4 $430
ADDRGP4 uis+4
INDIRI4
ASGNI4
line 1053
;1053:						if (b->oldvalue != b->curvalue)
ADDRLP4 124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 124
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
ADDRLP4 124
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
EQI4 $530
line 1054
;1054:						{
line 1055
;1055:							if (b->generic.callback) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $532
line 1056
;1056:								b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 128
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 1057
;1057:							}
LABELV $532
line 1058
;1058:							return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $530
line 1060
;1059:						}
;1060:						else {
line 1062
;1061:							// double click
;1062:							if ((clickdelay < 350) && !(b->generic.flags & (QMF_GRAYED|QMF_INACTIVE)))
ADDRLP4 52
INDIRI4
CNSTI4 350
GEI4 $534
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 24576
BANDU4
CNSTU4 0
NEU4 $534
line 1063
;1063:							{
line 1064
;1064:								return (Menu_ActivateItem( b->generic.parent, &b->generic ));
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
ARGP4
ADDRLP4 128
INDIRP4
ARGP4
ADDRLP4 132
ADDRGP4 Menu_ActivateItem
CALLI4
ASGNI4
ADDRLP4 132
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $534
line 1066
;1065:							}
;1066:						}
line 1067
;1067:					}
LABELV $526
line 1068
;1068:				}
LABELV $519
line 1069
;1069:				}
LABELV $517
line 1072
;1070:
;1071:				// absorbed, silent sound effect
;1072:				return (menu_null_sound);
ADDRGP4 menu_null_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
line 1074
;1073:			}
;1074:			break;
LABELV $536
line 1078
;1075:
;1076:		case K_KP_HOME:
;1077:		case K_HOME:
;1078:			b->oldvalue = b->curvalue;
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 76
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1079
;1079:			b->curvalue = 0;
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
CNSTI4 0
ASGNI4
line 1080
;1080:			b->top      = 0;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 0
ASGNI4
line 1082
;1081:
;1082:			if (b->oldvalue != b->curvalue && b->generic.callback)
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
ADDRLP4 80
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
EQI4 $537
ADDRLP4 80
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $537
line 1083
;1083:			{
line 1084
;1084:				b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 84
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 1085
;1085:				return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $537
line 1087
;1086:			}
;1087:			return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $539
line 1091
;1088:
;1089:		case K_KP_END:
;1090:		case K_END:
;1091:			b->oldvalue = b->curvalue;
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 84
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1092
;1092:			b->curvalue = b->numitems-1;
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 416
ADDP4
ADDRLP4 88
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1093
;1093:			if( b->columns > 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
CNSTI4 1
LEI4 $540
line 1094
;1094:				c = (b->curvalue / b->height + 1) * b->height;
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
ADDRLP4 92
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 92
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 96
INDIRI4
DIVI4
CNSTI4 1
ADDI4
ADDRLP4 96
INDIRI4
MULI4
ASGNI4
line 1095
;1095:				b->top = c - (b->columns * b->height);
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 424
ADDP4
ADDRLP4 4
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
MULI4
SUBI4
ASGNI4
line 1096
;1096:			}
ADDRGP4 $541
JUMPV
LABELV $540
line 1097
;1097:			else {
line 1098
;1098:				b->top = b->curvalue - (b->height - 1);
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 424
ADDP4
ADDRLP4 92
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 92
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 1
SUBI4
SUBI4
ASGNI4
line 1099
;1099:			}
LABELV $541
line 1100
;1100:			if (b->top < 0)
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
CNSTI4 0
GEI4 $542
line 1101
;1101:				b->top = 0;			
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 0
ASGNI4
LABELV $542
line 1103
;1102:
;1103:			if (b->oldvalue != b->curvalue && b->generic.callback)
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 412
ADDP4
INDIRI4
ADDRLP4 92
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
EQI4 $544
ADDRLP4 92
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $544
line 1104
;1104:			{
line 1105
;1105:				b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 96
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 1106
;1106:				return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $544
line 1108
;1107:			}
;1108:			return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $546
line 1112
;1109:
;1110:		case K_PGUP:
;1111:		case K_KP_PGUP:
;1112:			if( b->columns > 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
CNSTI4 1
LEI4 $547
line 1113
;1113:				return menu_null_sound;
ADDRGP4 menu_null_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $547
line 1116
;1114:			}
;1115:
;1116:			if (b->curvalue > 0)
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
CNSTI4 0
LEI4 $549
line 1117
;1117:			{
line 1118
;1118:				b->oldvalue = b->curvalue;
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 96
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1119
;1119:				b->curvalue -= b->height-1;
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
ADDRLP4 100
INDIRP4
CNSTI4 416
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 1
SUBI4
SUBI4
ASGNI4
line 1120
;1120:				if (b->curvalue < 0)
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
CNSTI4 0
GEI4 $551
line 1121
;1121:					b->curvalue = 0;
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
CNSTI4 0
ASGNI4
LABELV $551
line 1122
;1122:				b->top = b->curvalue;
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CNSTI4 424
ADDP4
ADDRLP4 108
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1123
;1123:				if (b->top < 0)
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
CNSTI4 0
GEI4 $553
line 1124
;1124:					b->top = 0;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 0
ASGNI4
LABELV $553
line 1126
;1125:
;1126:				if (b->generic.callback)
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $555
line 1127
;1127:					b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 112
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
LABELV $555
line 1129
;1128:
;1129:				return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $549
line 1131
;1130:			}
;1131:			return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $557
line 1135
;1132:
;1133:		case K_PGDN:
;1134:		case K_KP_PGDN:
;1135:			if( b->columns > 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
CNSTI4 1
LEI4 $558
line 1136
;1136:				return menu_null_sound;
ADDRGP4 menu_null_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $558
line 1139
;1137:			}
;1138:
;1139:			if (b->curvalue < b->numitems-1)
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 96
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 1
SUBI4
GEI4 $560
line 1140
;1140:			{
line 1141
;1141:				b->oldvalue = b->curvalue;
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 100
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1142
;1142:				b->curvalue += b->height-1;
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
ADDRLP4 104
INDIRP4
CNSTI4 416
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRI4
ADDRLP4 104
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ADDI4
ASGNI4
line 1143
;1143:				if (b->curvalue > b->numitems-1)
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 112
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 1
SUBI4
LEI4 $562
line 1144
;1144:					b->curvalue = b->numitems-1;
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTI4 416
ADDP4
ADDRLP4 116
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $562
line 1145
;1145:				b->top = b->curvalue - (b->height-1);
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
CNSTI4 424
ADDP4
ADDRLP4 120
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 120
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
CNSTI4 1
SUBI4
SUBI4
ASGNI4
line 1146
;1146:				if (b->top < 0)
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
CNSTI4 0
GEI4 $564
line 1147
;1147:					b->top = 0;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
CNSTI4 0
ASGNI4
LABELV $564
line 1149
;1148:
;1149:				if (b->generic.callback)
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $566
line 1150
;1150:					b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 124
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 124
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
LABELV $566
line 1152
;1151:
;1152:				return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $560
line 1154
;1153:			}
;1154:			return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $568
line 1159
;1155:
;1156:		case K_KP_UPARROW:
;1157:		case K_UPARROW:
;1158:		case K_MWHEELUP:
;1159:			if( b->curvalue == 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
CNSTI4 0
NEI4 $569
line 1160
;1160:				return menu_buzz_sound;
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $569
line 1163
;1161:			}
;1162:
;1163:			b->oldvalue = b->curvalue;
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 100
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1164
;1164:			b->curvalue--;
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1166
;1165:
;1166:			if( b->curvalue < b->top ) {
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 108
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
GEI4 $571
line 1167
;1167:				if( b->columns == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
CNSTI4 1
NEI4 $573
line 1168
;1168:					b->top--;
ADDRLP4 112
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1169
;1169:				}
ADDRGP4 $574
JUMPV
LABELV $573
line 1170
;1170:				else {
line 1171
;1171:					b->top -= b->height;
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
ADDRLP4 112
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRI4
ADDRLP4 112
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1172
;1172:				}
LABELV $574
line 1173
;1173:			}
LABELV $571
line 1175
;1174:
;1175:			if( b->generic.callback ) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $575
line 1176
;1176:				b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 112
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 1177
;1177:			}
LABELV $575
line 1179
;1178:
;1179:			return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $577
line 1184
;1180:
;1181:		case K_KP_DOWNARROW:
;1182:		case K_DOWNARROW:
;1183:		case K_MWHEELDOWN:
;1184:			if( b->curvalue == b->numitems - 1 ) {
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 112
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
CNSTI4 1
SUBI4
NEI4 $578
line 1185
;1185:				return menu_buzz_sound;
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $578
line 1188
;1186:			}
;1187:
;1188:			b->oldvalue = b->curvalue;
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 116
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1189
;1189:			b->curvalue++;
ADDRLP4 120
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1191
;1190:
;1191:			if( b->curvalue >= b->top + b->columns * b->height ) {
ADDRLP4 124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 124
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 124
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
ADDRLP4 124
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ADDRLP4 124
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
MULI4
ADDI4
LTI4 $580
line 1192
;1192:				if( b->columns == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
CNSTI4 1
NEI4 $582
line 1193
;1193:					b->top++;
ADDRLP4 128
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1194
;1194:				}
ADDRGP4 $583
JUMPV
LABELV $582
line 1195
;1195:				else {
line 1196
;1196:					b->top += b->height;
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
ADDRLP4 128
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 132
INDIRP4
ADDRLP4 132
INDIRP4
INDIRI4
ADDRLP4 128
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1197
;1197:				}
LABELV $583
line 1198
;1198:			}
LABELV $580
line 1200
;1199:
;1200:			if( b->generic.callback ) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $584
line 1201
;1201:				b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 128
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 1202
;1202:			}
LABELV $584
line 1204
;1203:
;1204:			return menu_move_sound;
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $586
line 1208
;1205:
;1206:		case K_KP_LEFTARROW:
;1207:		case K_LEFTARROW:
;1208:			if( b->columns == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
CNSTI4 1
NEI4 $587
line 1209
;1209:				return menu_null_sound;
ADDRGP4 menu_null_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $587
line 1212
;1210:			}
;1211:
;1212:			if( b->curvalue < b->height ) {
ADDRLP4 128
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 128
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
GEI4 $589
line 1213
;1213:				return menu_buzz_sound;
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $589
line 1216
;1214:			}
;1215:
;1216:			b->oldvalue = b->curvalue;
ADDRLP4 132
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 132
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1217
;1217:			b->curvalue -= b->height;
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
ADDRLP4 136
INDIRP4
CNSTI4 416
ADDP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRI4
ADDRLP4 136
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1219
;1218:
;1219:			if( b->curvalue < b->top ) {
ADDRLP4 144
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 144
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 144
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
GEI4 $591
line 1220
;1220:				b->top -= b->height;
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 152
ADDRLP4 148
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRI4
ADDRLP4 148
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1221
;1221:			}
LABELV $591
line 1223
;1222:
;1223:			if( b->generic.callback ) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $593
line 1224
;1224:				b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 148
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 1225
;1225:			}
LABELV $593
line 1227
;1226:
;1227:			return menu_move_sound;
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $595
line 1231
;1228:
;1229:		case K_KP_RIGHTARROW:
;1230:		case K_RIGHTARROW:
;1231:			if( b->columns == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
CNSTI4 1
NEI4 $596
line 1232
;1232:				return menu_null_sound;
ADDRGP4 menu_null_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $596
line 1235
;1233:			}
;1234:
;1235:			c = b->curvalue + b->height;
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 148
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 148
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1237
;1236:
;1237:			if( c >= b->numitems ) {
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
LTI4 $598
line 1238
;1238:				return menu_buzz_sound;
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $598
line 1241
;1239:			}
;1240:
;1241:			b->oldvalue = b->curvalue;
ADDRLP4 152
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 152
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 152
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1242
;1242:			b->curvalue = c;
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 1244
;1243:
;1244:			if( b->curvalue > b->top + b->columns * b->height - 1 ) {
ADDRLP4 156
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 156
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 156
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
ADDRLP4 156
INDIRP4
CNSTI4 436
ADDP4
INDIRI4
ADDRLP4 156
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
MULI4
ADDI4
CNSTI4 1
SUBI4
LEI4 $600
line 1245
;1245:				b->top += b->height;
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 164
ADDRLP4 160
INDIRP4
CNSTI4 424
ADDP4
ASGNP4
ADDRLP4 164
INDIRP4
ADDRLP4 164
INDIRP4
INDIRI4
ADDRLP4 160
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ADDI4
ASGNI4
line 1246
;1246:			}
LABELV $600
line 1248
;1247:
;1248:			if( b->generic.callback ) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $602
line 1249
;1249:				b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 160
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 160
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 160
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 1250
;1250:			}
LABELV $602
line 1252
;1251:
;1252:			return menu_move_sound;
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $458
LABELV $459
line 1256
;1253:	}
;1254:
;1255:	// cycle look for ascii key inside list items
;1256:	if ( !Q_isprint( key ) )
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 Q_isprint
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
NEI4 $611
line 1257
;1257:		return (0);
CNSTI4 0
RETI4
ADDRGP4 $429
JUMPV
LABELV $611
line 1260
;1258:
;1259:	// force to lower for case insensitive compare
;1260:	if ( Q_isupper( key ) )
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 80
ADDRGP4 Q_isupper
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
EQI4 $613
line 1261
;1261:	{
line 1262
;1262:		key -= 'A' - 'a';
ADDRFP4 4
ADDRFP4 4
INDIRI4
CNSTI4 -32
SUBI4
ASGNI4
line 1263
;1263:	}
LABELV $613
line 1266
;1264:
;1265:	// iterate list items
;1266:	for (i=1; i<=b->numitems; i++)
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRGP4 $618
JUMPV
LABELV $615
line 1267
;1267:	{
line 1268
;1268:		j = (b->curvalue + i) % b->numitems;
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 84
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ADDRLP4 84
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
MODI4
ASGNI4
line 1269
;1269:		c = b->itemnames[j][0];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 428
ADDP4
INDIRP4
ADDP4
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 1270
;1270:		if ( Q_isupper( c ) )
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 88
ADDRGP4 Q_isupper
CALLI4
ASGNI4
ADDRLP4 88
INDIRI4
CNSTI4 0
EQI4 $619
line 1271
;1271:		{
line 1272
;1272:			c -= 'A' - 'a';
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 -32
SUBI4
ASGNI4
line 1273
;1273:		}
LABELV $619
line 1275
;1274:
;1275:		if (c == key)
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRI4
NEI4 $621
line 1276
;1276:		{
line 1278
;1277:			// set current item, mimic windows listbox scroll behavior
;1278:			if (j < b->top)
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
GEI4 $623
line 1279
;1279:			{
line 1281
;1280:				// behind top most item, set this as new top
;1281:				b->top = j;
ADDRFP4 0
INDIRP4
CNSTI4 424
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1282
;1282:			}
ADDRGP4 $624
JUMPV
LABELV $623
line 1283
;1283:			else if (j > b->top+b->height-1)
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
ADDRLP4 92
INDIRP4
CNSTI4 424
ADDP4
INDIRI4
ADDRLP4 92
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
ADDI4
CNSTI4 1
SUBI4
LEI4 $625
line 1284
;1284:			{
line 1286
;1285:				// past end of list box, do page down
;1286:				b->top = (j+1) - b->height;
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 424
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ADDRLP4 96
INDIRP4
CNSTI4 108
ADDP4
INDIRI4
SUBI4
ASGNI4
line 1287
;1287:			}
LABELV $625
LABELV $624
line 1289
;1288:			
;1289:			if (b->curvalue != j)
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $627
line 1290
;1290:			{
line 1291
;1291:				b->oldvalue = b->curvalue;
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 412
ADDP4
ADDRLP4 96
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1292
;1292:				b->curvalue = j;
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 1293
;1293:				if (b->generic.callback)
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $629
line 1294
;1294:					b->generic.callback( b, QM_GOTFOCUS );
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 100
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
LABELV $629
line 1295
;1295:				return ( menu_move_sound );			
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $627
line 1298
;1296:			}
;1297:
;1298:			return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $621
line 1300
;1299:		}
;1300:	}
LABELV $616
line 1266
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $618
ADDRLP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 420
ADDP4
INDIRI4
LEI4 $615
line 1302
;1301:
;1302:	return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $456
line 1304
;1303:	}
;1304:if(b->type == 7){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 7
NEI4 $631
line 1305
;1305:	switch (key)
ADDRLP4 56
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 163
EQI4 $638
ADDRLP4 60
CNSTI4 165
ASGNI4
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
EQI4 $638
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
GTI4 $645
LABELV $644
ADDRLP4 64
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 68
CNSTI4 13
ASGNI4
ADDRLP4 64
INDIRI4
ADDRLP4 68
INDIRI4
EQI4 $638
ADDRLP4 64
INDIRI4
ADDRLP4 68
INDIRI4
LTI4 $633
LABELV $646
ADDRLP4 72
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 134
EQI4 $638
ADDRLP4 72
INDIRI4
CNSTI4 135
EQI4 $638
ADDRGP4 $633
JUMPV
LABELV $645
ADDRLP4 76
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 80
CNSTI4 178
ASGNI4
ADDRLP4 76
INDIRI4
ADDRLP4 80
INDIRI4
EQI4 $635
ADDRLP4 76
INDIRI4
ADDRLP4 80
INDIRI4
GTI4 $648
LABELV $647
ADDRFP4 4
INDIRI4
CNSTI4 169
EQI4 $638
ADDRGP4 $633
JUMPV
LABELV $648
ADDRLP4 84
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 84
INDIRI4
CNSTI4 185
LTI4 $633
ADDRLP4 84
INDIRI4
CNSTI4 188
GTI4 $633
ADDRLP4 84
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $649-740
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $649
address $638
address $638
address $638
address $638
code
line 1306
;1306:	{
LABELV $635
line 1308
;1307:		case K_MOUSE1:
;1308:			if (!(b->generic.flags & QMF_HASMOUSEFOCUS))
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 512
BANDU4
CNSTU4 0
NEU4 $636
line 1309
;1309:				break;
ADDRGP4 $634
JUMPV
LABELV $636
LABELV $638
line 1321
;1310:
;1311:		case K_JOY1:
;1312:		case K_JOY2:
;1313:		case K_JOY3:
;1314:		case K_JOY4:
;1315:		case K_ENTER:
;1316:		case K_KP_ENTER:
;1317:		case K_KP_LEFTARROW:
;1318:		case K_LEFTARROW:
;1319:		case K_KP_RIGHTARROW:
;1320:		case K_RIGHTARROW:
;1321:			b->curvalue = !b->curvalue;
ADDRLP4 92
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $640
ADDRLP4 88
CNSTI4 1
ASGNI4
ADDRGP4 $641
JUMPV
LABELV $640
ADDRLP4 88
CNSTI4 0
ASGNI4
LABELV $641
ADDRLP4 92
INDIRP4
ADDRLP4 88
INDIRI4
ASGNI4
line 1322
;1322:			if ( b->generic.callback )
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $642
line 1323
;1323:				b->generic.callback( b, QM_ACTIVATED );
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 96
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
LABELV $642
line 1325
;1324:
;1325:			return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $633
LABELV $634
line 1327
;1326:	}
;1327:}
LABELV $631
line 1329
;1328:
;1329:if(b->type == 8){
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 8
NEI4 $651
line 1330
;1330:	switch (key)
ADDRLP4 56
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 56
INDIRI4
CNSTI4 163
EQI4 $665
ADDRLP4 60
CNSTI4 165
ASGNI4
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
EQI4 $668
ADDRLP4 56
INDIRI4
ADDRLP4 60
INDIRI4
GTI4 $672
LABELV $671
ADDRLP4 64
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 134
EQI4 $665
ADDRLP4 64
INDIRI4
CNSTI4 135
EQI4 $668
ADDRGP4 $653
JUMPV
LABELV $672
ADDRFP4 4
INDIRI4
CNSTI4 178
EQI4 $655
ADDRGP4 $653
JUMPV
line 1331
;1331:	{
LABELV $655
line 1333
;1332:		case K_MOUSE1:
;1333:			x           = uis.cursorx - b->generic.x - 2*(SMALLCHAR_WIDTH*b->fontsize);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRGP4 uis+8
INDIRI4
ADDRLP4 68
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
SUBI4
CVIF4 4
CNSTF4 1073741824
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 68
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
MULF4
SUBF4
CVFI4 4
ASGNI4
line 1334
;1334:			oldvalue    = b->curvalue;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ASGNI4
line 1335
;1335:			b->curvalue = (x/(float)(SLIDER_RANGE*(SMALLCHAR_WIDTH*b->fontsize))) * (b->maxvalue-b->minvalue) + b->minvalue;
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
ADDRLP4 72
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 416
ADDP4
ADDRLP4 20
INDIRI4
CVIF4 4
CNSTF4 1092616192
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CVIF4 4
ADDRLP4 72
INDIRP4
CNSTI4 136
ADDP4
INDIRF4
MULF4
MULF4
DIVF4
ADDRLP4 72
INDIRP4
CNSTI4 448
ADDP4
INDIRI4
ADDRLP4 76
INDIRI4
SUBI4
CVIF4 4
MULF4
ADDRLP4 76
INDIRI4
CVIF4 4
ADDF4
CVFI4 4
ASGNI4
line 1337
;1336:
;1337:			if (b->curvalue < b->minvalue)
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 80
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
GEI4 $659
line 1338
;1338:				b->curvalue = b->minvalue;
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 416
ADDP4
ADDRLP4 84
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
ASGNI4
ADDRGP4 $660
JUMPV
LABELV $659
line 1339
;1339:			else if (b->curvalue > b->maxvalue)
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 88
INDIRP4
CNSTI4 448
ADDP4
INDIRI4
LEI4 $661
line 1340
;1340:				b->curvalue = b->maxvalue;
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
CNSTI4 416
ADDP4
ADDRLP4 92
INDIRP4
CNSTI4 448
ADDP4
INDIRI4
ASGNI4
LABELV $661
LABELV $660
line 1341
;1341:			if (b->curvalue != oldvalue)
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
EQI4 $663
line 1342
;1342:				sound = menu_move_sound;
ADDRLP4 16
ADDRGP4 menu_move_sound
INDIRI4
ASGNI4
ADDRGP4 $654
JUMPV
LABELV $663
line 1344
;1343:			else
;1344:				sound = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 1345
;1345:			break;
ADDRGP4 $654
JUMPV
LABELV $665
line 1349
;1346:
;1347:		case K_KP_LEFTARROW:
;1348:		case K_LEFTARROW:
;1349:			if (b->curvalue > b->minvalue)
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 96
INDIRP4
CNSTI4 444
ADDP4
INDIRI4
LEI4 $666
line 1350
;1350:			{
line 1351
;1351:				b->curvalue--;
ADDRLP4 100
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1352
;1352:				sound = menu_move_sound;
ADDRLP4 16
ADDRGP4 menu_move_sound
INDIRI4
ASGNI4
line 1353
;1353:			}
ADDRGP4 $654
JUMPV
LABELV $666
line 1355
;1354:			else
;1355:				sound = menu_buzz_sound;
ADDRLP4 16
ADDRGP4 menu_buzz_sound
INDIRI4
ASGNI4
line 1356
;1356:			break;			
ADDRGP4 $654
JUMPV
LABELV $668
line 1360
;1357:
;1358:		case K_KP_RIGHTARROW:
;1359:		case K_RIGHTARROW:
;1360:			if (b->curvalue < b->maxvalue)
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 416
ADDP4
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 448
ADDP4
INDIRI4
GEI4 $669
line 1361
;1361:			{
line 1362
;1362:				b->curvalue++;
ADDRLP4 104
ADDRFP4 0
INDIRP4
CNSTI4 416
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1363
;1363:				sound = menu_move_sound;
ADDRLP4 16
ADDRGP4 menu_move_sound
INDIRI4
ASGNI4
line 1364
;1364:			}
ADDRGP4 $654
JUMPV
LABELV $669
line 1366
;1365:			else
;1366:				sound = menu_buzz_sound;
ADDRLP4 16
ADDRGP4 menu_buzz_sound
INDIRI4
ASGNI4
line 1367
;1367:			break;			
ADDRGP4 $654
JUMPV
LABELV $653
line 1371
;1368:
;1369:		default:
;1370:			// key not handled
;1371:			sound = 0;
ADDRLP4 16
CNSTI4 0
ASGNI4
line 1372
;1372:			break;
LABELV $654
line 1375
;1373:	}
;1374:
;1375:	if ( sound && b->generic.callback )
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $673
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $673
line 1376
;1376:		b->generic.callback( b, QM_ACTIVATED );
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 68
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
LABELV $673
line 1378
;1377:
;1378:	return (sound);
ADDRLP4 16
INDIRI4
RETI4
ADDRGP4 $429
JUMPV
LABELV $651
line 1380
;1379:}
;1380:	return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
LABELV $429
endproc UIObject_Key 168 16
proc Action_Init 24 4
line 1389
;1381:}
;1382:
;1383:/*
;1384:=================
;1385:Action_Init
;1386:=================
;1387:*/
;1388:static void Action_Init( menuaction_s *a )
;1389:{
line 1393
;1390:	int	len;
;1391:
;1392:	// calculate bounds
;1393:	if (a->generic.name)
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $676
line 1394
;1394:		len = strlenru(a->generic.name);
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 strlenru
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
ADDRGP4 $677
JUMPV
LABELV $676
line 1396
;1395:	else
;1396:		len = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $677
line 1399
;1397:
;1398:	// left justify text
;1399:	a->generic.left   = a->generic.x; 
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 1400
;1400:	a->generic.right  = a->generic.x + len*BIGCHAR_WIDTH;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
ADDRGP4 cl_bigcharwidth+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 1401
;1401:	a->generic.top    = a->generic.y;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 1402
;1402:	a->generic.bottom = a->generic.y + BIGCHAR_HEIGHT;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ADDRGP4 cl_bigcharheight+12
INDIRI4
ADDI4
ASGNI4
line 1403
;1403:}
LABELV $675
endproc Action_Init 24 4
proc Action_Draw 28 20
line 1411
;1404:
;1405:/*
;1406:=================
;1407:Action_Draw
;1408:=================
;1409:*/
;1410:static void Action_Draw( menuaction_s *a )
;1411:{
line 1416
;1412:	int		x, y;
;1413:	int		style;
;1414:	float*	color;
;1415:
;1416:	style = 0;
ADDRLP4 12
CNSTI4 0
ASGNI4
line 1417
;1417:	color = menu_text_color;
ADDRLP4 0
ADDRGP4 menu_text_color
ASGNP4
line 1418
;1418:	if ( a->generic.flags & QMF_GRAYED )
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8192
BANDU4
CNSTU4 0
EQU4 $681
line 1419
;1419:	{
line 1420
;1420:		color = text_color_disabled;
ADDRLP4 0
ADDRGP4 text_color_disabled
ASGNP4
line 1421
;1421:	}
ADDRGP4 $682
JUMPV
LABELV $681
line 1422
;1422:	else if (( a->generic.flags & QMF_PULSEIFFOCUS ) && ( a->generic.parent->cursor == a->generic.menuPosition ))
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 256
BANDU4
CNSTU4 0
EQU4 $683
ADDRLP4 16
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
NEI4 $683
line 1423
;1423:	{
line 1424
;1424:		color = text_color_highlight;
ADDRLP4 0
ADDRGP4 text_color_highlight
ASGNP4
line 1425
;1425:		style = UI_PULSE;
ADDRLP4 12
CNSTI4 16384
ASGNI4
line 1426
;1426:	}
ADDRGP4 $684
JUMPV
LABELV $683
line 1427
;1427:	else if (( a->generic.flags & QMF_HIGHLIGHT_IF_FOCUS ) && ( a->generic.parent->cursor == a->generic.menuPosition ))
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 128
BANDU4
CNSTU4 0
EQU4 $685
ADDRLP4 20
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
NEI4 $685
line 1428
;1428:	{
line 1429
;1429:		color = text_color_highlight;
ADDRLP4 0
ADDRGP4 text_color_highlight
ASGNP4
line 1430
;1430:	}
ADDRGP4 $686
JUMPV
LABELV $685
line 1431
;1431:	else if ( a->generic.flags & QMF_BLINK )
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 1
BANDU4
CNSTU4 0
EQU4 $687
line 1432
;1432:	{
line 1433
;1433:		style = UI_BLINK;
ADDRLP4 12
CNSTI4 4096
ASGNI4
line 1434
;1434:		color = text_color_highlight;
ADDRLP4 0
ADDRGP4 text_color_highlight
ASGNP4
line 1435
;1435:	}
LABELV $687
LABELV $686
LABELV $684
LABELV $682
line 1437
;1436:
;1437:	x = a->generic.x;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 1438
;1438:	y = a->generic.y;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 1440
;1439:
;1440:	UI_DrawString( x, y, a->generic.name, UI_LEFT|style, color );
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 1442
;1441:
;1442:	if ( a->generic.parent->cursor == a->generic.menuPosition )
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
NEI4 $689
line 1443
;1443:	{
line 1445
;1444:		// draw cursor
;1445:		UI_DrawChar( x - BIGCHAR_WIDTH, y, 13, UI_LEFT|UI_BLINK, color);
ADDRLP4 4
INDIRI4
ADDRGP4 cl_bigcharwidth+12
INDIRI4
SUBI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
CNSTI4 13
ARGI4
CNSTI4 4096
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 UI_DrawChar
CALLV
pop
line 1446
;1446:	}
LABELV $689
line 1447
;1447:}
LABELV $680
endproc Action_Draw 28 20
export RadioButton_Init
proc RadioButton_Init 24 4
line 1455
;1448:
;1449:/*
;1450:=================
;1451:RadioButton_Init
;1452:=================
;1453:*/
;1454:void RadioButton_Init( menuradiobutton_s *rb )
;1455:{
line 1458
;1456:	int	len;
;1457:	// calculate bounds
;1458:	if (rb->generic.name)
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $693
line 1459
;1459:		len = strlenru(rb->generic.name);
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 strlenru
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
ADDRGP4 $694
JUMPV
LABELV $693
line 1461
;1460:	else
;1461:		len = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $694
line 1464
;1462:	
;1463:
;1464:	rb->generic.left   = rb->generic.x - (len+1)*SMALLCHAR_WIDTH;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
SUBI4
ASGNI4
line 1465
;1465:	rb->generic.right  = rb->generic.x + 6*SMALLCHAR_WIDTH;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CNSTI4 6
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 1466
;1466:	rb->generic.top    = rb->generic.y;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 1467
;1467:	rb->generic.bottom = rb->generic.y + SMALLCHAR_HEIGHT;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ADDRGP4 cl_smallcharheight+12
INDIRI4
ADDI4
ASGNI4
line 1468
;1468:}
LABELV $692
endproc RadioButton_Init 24 4
proc RadioButton_Key 44 8
line 1476
;1469:
;1470:/*
;1471:=================
;1472:RadioButton_Key
;1473:=================
;1474:*/
;1475:static sfxHandle_t RadioButton_Key( menuradiobutton_s *rb, int key )
;1476:{
line 1477
;1477:	switch (key)
ADDRLP4 0
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 0
INDIRI4
CNSTI4 163
EQI4 $704
ADDRLP4 4
CNSTI4 165
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
EQI4 $704
ADDRLP4 0
INDIRI4
ADDRLP4 4
INDIRI4
GTI4 $711
LABELV $710
ADDRLP4 8
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
CNSTI4 13
ASGNI4
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
EQI4 $704
ADDRLP4 8
INDIRI4
ADDRLP4 12
INDIRI4
LTI4 $699
LABELV $712
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 134
EQI4 $704
ADDRLP4 16
INDIRI4
CNSTI4 135
EQI4 $704
ADDRGP4 $699
JUMPV
LABELV $711
ADDRLP4 20
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 24
CNSTI4 178
ASGNI4
ADDRLP4 20
INDIRI4
ADDRLP4 24
INDIRI4
EQI4 $701
ADDRLP4 20
INDIRI4
ADDRLP4 24
INDIRI4
GTI4 $714
LABELV $713
ADDRFP4 4
INDIRI4
CNSTI4 169
EQI4 $704
ADDRGP4 $699
JUMPV
LABELV $714
ADDRLP4 28
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 185
LTI4 $699
ADDRLP4 28
INDIRI4
CNSTI4 188
GTI4 $699
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $715-740
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $715
address $704
address $704
address $704
address $704
code
line 1478
;1478:	{
LABELV $701
line 1480
;1479:		case K_MOUSE1:
;1480:			if (!(rb->generic.flags & QMF_HASMOUSEFOCUS))
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 512
BANDU4
CNSTU4 0
NEU4 $702
line 1481
;1481:				break;
ADDRGP4 $700
JUMPV
LABELV $702
LABELV $704
line 1493
;1482:
;1483:		case K_JOY1:
;1484:		case K_JOY2:
;1485:		case K_JOY3:
;1486:		case K_JOY4:
;1487:		case K_ENTER:
;1488:		case K_KP_ENTER:
;1489:		case K_KP_LEFTARROW:
;1490:		case K_LEFTARROW:
;1491:		case K_KP_RIGHTARROW:
;1492:		case K_RIGHTARROW:
;1493:			rb->curvalue = !rb->curvalue;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 0
NEI4 $706
ADDRLP4 32
CNSTI4 1
ASGNI4
ADDRGP4 $707
JUMPV
LABELV $706
ADDRLP4 32
CNSTI4 0
ASGNI4
LABELV $707
ADDRLP4 36
INDIRP4
ADDRLP4 32
INDIRI4
ASGNI4
line 1494
;1494:			if ( rb->generic.callback )
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $708
line 1495
;1495:				rb->generic.callback( rb, QM_ACTIVATED );
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 40
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
LABELV $708
line 1497
;1496:
;1497:			return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $698
JUMPV
LABELV $699
LABELV $700
line 1501
;1498:	}
;1499:
;1500:	// key not handled
;1501:	return 0;
CNSTI4 0
RETI4
LABELV $698
endproc RadioButton_Key 44 8
proc RadioButton_Draw 32 20
line 1510
;1502:}
;1503:
;1504:/*
;1505:=================
;1506:RadioButton_Draw
;1507:=================
;1508:*/
;1509:static void RadioButton_Draw( menuradiobutton_s *rb )
;1510:{
line 1517
;1511:	int	x;
;1512:	int y;
;1513:	float *color;
;1514:	int	style;
;1515:	qboolean focus;
;1516:
;1517:	x = rb->generic.x;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 1518
;1518:	y = rb->generic.y;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 1520
;1519:
;1520:	focus = (rb->generic.parent->cursor == rb->generic.menuPosition);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
NEI4 $719
ADDRLP4 20
CNSTI4 1
ASGNI4
ADDRGP4 $720
JUMPV
LABELV $719
ADDRLP4 20
CNSTI4 0
ASGNI4
LABELV $720
ADDRLP4 12
ADDRLP4 20
INDIRI4
ASGNI4
line 1522
;1521:
;1522:	if ( rb->generic.flags & QMF_GRAYED )
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8192
BANDU4
CNSTU4 0
EQU4 $721
line 1523
;1523:	{
line 1524
;1524:		color = text_color_disabled;
ADDRLP4 8
ADDRGP4 text_color_disabled
ASGNP4
line 1525
;1525:		style = UI_LEFT|UI_SMALLFONT;
ADDRLP4 16
CNSTI4 16
ASGNI4
line 1526
;1526:	}
ADDRGP4 $722
JUMPV
LABELV $721
line 1527
;1527:	else if ( focus )
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $723
line 1528
;1528:	{
line 1529
;1529:		color = text_color_highlight;
ADDRLP4 8
ADDRGP4 text_color_highlight
ASGNP4
line 1530
;1530:		style = UI_LEFT|UI_PULSE|UI_SMALLFONT;
ADDRLP4 16
CNSTI4 16400
ASGNI4
line 1531
;1531:	}
ADDRGP4 $724
JUMPV
LABELV $723
line 1533
;1532:	else
;1533:	{
line 1534
;1534:		if(!rb->color){
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $725
line 1535
;1535:		color = text_color_normal;
ADDRLP4 8
ADDRGP4 text_color_normal
ASGNP4
line 1536
;1536:		} else {
ADDRGP4 $726
JUMPV
LABELV $725
line 1537
;1537:		color = rb->color;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRP4
ASGNP4
line 1538
;1538:		}
LABELV $726
line 1539
;1539:		style = UI_LEFT|UI_SMALLFONT;
ADDRLP4 16
CNSTI4 16
ASGNI4
line 1540
;1540:	}
LABELV $724
LABELV $722
line 1542
;1541:
;1542:	if ( focus )
ADDRLP4 12
INDIRI4
CNSTI4 0
EQI4 $727
line 1543
;1543:	{
line 1546
;1544:		// draw cursor
;1545:		//UI_FillRect( rb->generic.left, rb->generic.top, rb->generic.right-rb->generic.left+1, rb->generic.bottom-rb->generic.top+1, listbar_color ); 
;1546:		UI_DrawChar( x, y, 13, UI_CENTER|UI_BLINK|UI_SMALLFONT, color);
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
CNSTI4 13
ARGI4
CNSTI4 4113
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 UI_DrawChar
CALLV
pop
line 1547
;1547:	}
LABELV $727
line 1549
;1548:
;1549:	if ( rb->generic.name )
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $729
line 1550
;1550:		UI_DrawString( x - SMALLCHAR_WIDTH, y, rb->generic.name, UI_RIGHT|UI_SMALLFONT, color );
ADDRLP4 0
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
SUBI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
CNSTI4 18
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
LABELV $729
line 1552
;1551:
;1552:	if ( !rb->curvalue )
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
CNSTI4 0
NEI4 $732
line 1553
;1553:	{
line 1554
;1554:		UI_DrawHandlePic( x + SMALLCHAR_WIDTH, y + 2, 12, 12, uis.rb_off);
ADDRLP4 0
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 28
CNSTF4 1094713344
ASGNF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRGP4 uis+11440
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 1555
;1555:		if(cl_language.integer == 0){
ADDRGP4 cl_language+12
INDIRI4
CNSTI4 0
NEI4 $736
line 1556
;1556:		UI_DrawString( x + SMALLCHAR_WIDTH + 12, y, "off", style, color );
ADDRLP4 0
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDI4
CNSTI4 12
ADDI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 $401
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 1557
;1557:		}
LABELV $736
line 1558
;1558:		if(cl_language.integer == 1){
ADDRGP4 cl_language+12
INDIRI4
CNSTI4 1
NEI4 $733
line 1559
;1559:		UI_DrawString( x + SMALLCHAR_WIDTH + 12, y, "откл", style, color );
ADDRLP4 0
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDI4
CNSTI4 12
ADDI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 $744
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 1560
;1560:		}
line 1561
;1561:	}
ADDRGP4 $733
JUMPV
LABELV $732
line 1563
;1562:	else
;1563:	{
line 1564
;1564:		UI_DrawHandlePic( x + SMALLCHAR_WIDTH, y + 2, 12, 12, uis.rb_on );
ADDRLP4 0
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CNSTI4 2
ADDI4
CVIF4 4
ARGF4
ADDRLP4 28
CNSTF4 1094713344
ASGNF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRLP4 28
INDIRF4
ARGF4
ADDRGP4 uis+11436
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 1565
;1565:		if(cl_language.integer == 0){
ADDRGP4 cl_language+12
INDIRI4
CNSTI4 0
NEI4 $747
line 1566
;1566:		UI_DrawString( x + SMALLCHAR_WIDTH + 12, y, "on", style, color );
ADDRLP4 0
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDI4
CNSTI4 12
ADDI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 $405
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 1567
;1567:		}
LABELV $747
line 1568
;1568:		if(cl_language.integer == 1){
ADDRGP4 cl_language+12
INDIRI4
CNSTI4 1
NEI4 $751
line 1569
;1569:		UI_DrawString( x + SMALLCHAR_WIDTH + 12, y, "вкл", style, color );
ADDRLP4 0
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDI4
CNSTI4 12
ADDI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRGP4 $755
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 8
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 1570
;1570:		}
LABELV $751
line 1571
;1571:	}
LABELV $733
line 1572
;1572:}
LABELV $717
endproc RadioButton_Draw 32 20
proc Slider_Init 24 4
line 1580
;1573:
;1574:/*
;1575:=================
;1576:Slider_Init
;1577:=================
;1578:*/
;1579:static void Slider_Init( menuslider_s *s )
;1580:{
line 1584
;1581:	int len;
;1582:
;1583:	// calculate bounds
;1584:	if (s->generic.name)
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $757
line 1585
;1585:		len = strlenru(s->generic.name);
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
ADDRLP4 4
ADDRGP4 strlenru
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
ADDRGP4 $758
JUMPV
LABELV $757
line 1587
;1586:	else
;1587:		len = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
LABELV $758
line 1589
;1588:
;1589:	s->generic.left   = s->generic.x - (len+1)*SMALLCHAR_WIDTH; 
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 8
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
SUBI4
ASGNI4
line 1590
;1590:	s->generic.right  = s->generic.x + (SLIDER_RANGE+2+1)*SMALLCHAR_WIDTH;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
CNSTI4 13
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 1591
;1591:	s->generic.top    = s->generic.y;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 1592
;1592:	s->generic.bottom = s->generic.y + SMALLCHAR_HEIGHT;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ADDRGP4 cl_smallcharheight+12
INDIRI4
ADDI4
ASGNI4
line 1593
;1593:}
LABELV $756
endproc Slider_Init 24 4
proc Slider_Key 60 8
line 1601
;1594:
;1595:/*
;1596:=================
;1597:Slider_Key
;1598:=================
;1599:*/
;1600:static sfxHandle_t Slider_Key( menuslider_s *s, int key )
;1601:{
line 1606
;1602:	sfxHandle_t	sound;
;1603:	int			x;
;1604:	int			oldvalue;
;1605:
;1606:	switch (key)
ADDRLP4 12
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 163
EQI4 $775
ADDRLP4 16
CNSTI4 165
ASGNI4
ADDRLP4 12
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $778
ADDRLP4 12
INDIRI4
ADDRLP4 16
INDIRI4
GTI4 $782
LABELV $781
ADDRLP4 20
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 134
EQI4 $775
ADDRLP4 20
INDIRI4
CNSTI4 135
EQI4 $778
ADDRGP4 $763
JUMPV
LABELV $782
ADDRFP4 4
INDIRI4
CNSTI4 178
EQI4 $765
ADDRGP4 $763
JUMPV
line 1607
;1607:	{
LABELV $765
line 1609
;1608:		case K_MOUSE1:
;1609:			x           = uis.cursorx - s->generic.x - 2*SMALLCHAR_WIDTH;
ADDRLP4 4
ADDRGP4 uis+8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
SUBI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CNSTI4 1
LSHI4
SUBI4
ASGNI4
line 1610
;1610:			oldvalue    = s->curvalue;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 1611
;1611:			s->curvalue = (x/(float)(SLIDER_RANGE*SMALLCHAR_WIDTH)) * (s->maxvalue-s->minvalue) + s->minvalue;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ASGNF4
ADDRLP4 24
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 4
INDIRI4
CVIF4 4
CNSTI4 10
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
CVIF4 4
DIVF4
ADDRLP4 24
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ADDRLP4 28
INDIRF4
SUBF4
MULF4
ADDRLP4 28
INDIRF4
ADDF4
ASGNF4
line 1613
;1612:
;1613:			if (s->curvalue < s->minvalue)
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ADDRLP4 32
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
GEF4 $769
line 1614
;1614:				s->curvalue = s->minvalue;
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ASGNF4
ADDRGP4 $770
JUMPV
LABELV $769
line 1615
;1615:			else if (s->curvalue > s->maxvalue)
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
LEF4 $771
line 1616
;1616:				s->curvalue = s->maxvalue;
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 44
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ASGNF4
LABELV $771
LABELV $770
line 1617
;1617:			if (s->curvalue != oldvalue)
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ADDRLP4 8
INDIRI4
CVIF4 4
EQF4 $773
line 1618
;1618:				sound = menu_move_sound;
ADDRLP4 0
ADDRGP4 menu_move_sound
INDIRI4
ASGNI4
ADDRGP4 $764
JUMPV
LABELV $773
line 1620
;1619:			else
;1620:				sound = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1621
;1621:			break;
ADDRGP4 $764
JUMPV
LABELV $775
line 1625
;1622:
;1623:		case K_KP_LEFTARROW:
;1624:		case K_LEFTARROW:
;1625:			if (s->curvalue > s->minvalue)
ADDRLP4 48
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ADDRLP4 48
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
LEF4 $776
line 1626
;1626:			{
line 1627
;1627:				s->curvalue--;
ADDRLP4 52
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
ASGNP4
ADDRLP4 52
INDIRP4
ADDRLP4 52
INDIRP4
INDIRF4
CNSTF4 1065353216
SUBF4
ASGNF4
line 1628
;1628:				sound = menu_move_sound;
ADDRLP4 0
ADDRGP4 menu_move_sound
INDIRI4
ASGNI4
line 1629
;1629:			}
ADDRGP4 $764
JUMPV
LABELV $776
line 1631
;1630:			else
;1631:				sound = menu_buzz_sound;
ADDRLP4 0
ADDRGP4 menu_buzz_sound
INDIRI4
ASGNI4
line 1632
;1632:			break;			
ADDRGP4 $764
JUMPV
LABELV $778
line 1636
;1633:
;1634:		case K_KP_RIGHTARROW:
;1635:		case K_RIGHTARROW:
;1636:			if (s->curvalue < s->maxvalue)
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ADDRLP4 52
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
GEF4 $779
line 1637
;1637:			{
line 1638
;1638:				s->curvalue++;
ADDRLP4 56
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
ASGNP4
ADDRLP4 56
INDIRP4
ADDRLP4 56
INDIRP4
INDIRF4
CNSTF4 1065353216
ADDF4
ASGNF4
line 1639
;1639:				sound = menu_move_sound;
ADDRLP4 0
ADDRGP4 menu_move_sound
INDIRI4
ASGNI4
line 1640
;1640:			}
ADDRGP4 $764
JUMPV
LABELV $779
line 1642
;1641:			else
;1642:				sound = menu_buzz_sound;
ADDRLP4 0
ADDRGP4 menu_buzz_sound
INDIRI4
ASGNI4
line 1643
;1643:			break;			
ADDRGP4 $764
JUMPV
LABELV $763
line 1647
;1644:
;1645:		default:
;1646:			// key not handled
;1647:			sound = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1648
;1648:			break;
LABELV $764
line 1651
;1649:	}
;1650:
;1651:	if ( sound && s->generic.callback )
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $783
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $783
line 1652
;1652:		s->generic.callback( s, QM_ACTIVATED );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 24
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
LABELV $783
line 1654
;1653:
;1654:	return (sound);
ADDRLP4 0
INDIRI4
RETI4
LABELV $762
endproc Slider_Key 60 8
proc Slider_Draw 52 20
line 1663
;1655:}
;1656:
;1657:#if 1
;1658:/*
;1659:=================
;1660:Slider_Draw
;1661:=================
;1662:*/
;1663:static void Slider_Draw( menuslider_s *s ) {
line 1672
;1664:	int			x;
;1665:	int			y;
;1666:	int			val;
;1667:	int			style;
;1668:	float		*color;
;1669:	int			button;
;1670:	qboolean	focus;
;1671:	
;1672:	x =	s->generic.x;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 1673
;1673:	y = s->generic.y;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 1674
;1674:	val = s->curvalue;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
CVFI4 4
ASGNI4
line 1675
;1675:	focus = (s->generic.parent->cursor == s->generic.menuPosition);
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
INDIRI4
ADDRLP4 32
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
NEI4 $787
ADDRLP4 28
CNSTI4 1
ASGNI4
ADDRGP4 $788
JUMPV
LABELV $787
ADDRLP4 28
CNSTI4 0
ASGNI4
LABELV $788
ADDRLP4 24
ADDRLP4 28
INDIRI4
ASGNI4
line 1677
;1676:
;1677:	if( s->generic.flags & QMF_GRAYED ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8192
BANDU4
CNSTU4 0
EQU4 $789
line 1678
;1678:		color = text_color_disabled;
ADDRLP4 12
ADDRGP4 text_color_disabled
ASGNP4
line 1679
;1679:		style = UI_SMALLFONT;
ADDRLP4 8
CNSTI4 16
ASGNI4
line 1680
;1680:	}
ADDRGP4 $790
JUMPV
LABELV $789
line 1681
;1681:	else if( focus ) {
ADDRLP4 24
INDIRI4
CNSTI4 0
EQI4 $791
line 1682
;1682:		color  = text_color_highlight;
ADDRLP4 12
ADDRGP4 text_color_highlight
ASGNP4
line 1683
;1683:		style = UI_SMALLFONT | UI_PULSE;
ADDRLP4 8
CNSTI4 16400
ASGNI4
line 1684
;1684:	}
ADDRGP4 $792
JUMPV
LABELV $791
line 1685
;1685:	else {
line 1686
;1686:		color = text_color_normal;
ADDRLP4 12
ADDRGP4 text_color_normal
ASGNP4
line 1687
;1687:		style = UI_SMALLFONT;
ADDRLP4 8
CNSTI4 16
ASGNI4
line 1688
;1688:	}
LABELV $792
LABELV $790
line 1691
;1689:
;1690:	// draw label
;1691:	UI_DrawString( x - SMALLCHAR_WIDTH, y, s->generic.name, UI_RIGHT|style, color );
ADDRLP4 0
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
SUBI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
CNSTI4 2
BORI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 1692
;1692:	UI_DrawString( x + SMALLCHAR_WIDTH*13, y, va(" %i", val), UI_LEFT|style, colorGreen );
ADDRGP4 $417
ARGP4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 0
INDIRI4
CNSTI4 13
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
ADDI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 36
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRGP4 colorGreen
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 1695
;1693:
;1694:	// draw slider
;1695:	UI_SetColor( color );
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 UI_SetColor
CALLV
pop
line 1696
;1696:	UI_DrawHandlePic( x + SMALLCHAR_WIDTH, y, 93, 11, sliderBar );
ADDRLP4 0
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
CNSTF4 1119485952
ARGF4
CNSTF4 1093664768
ARGF4
ADDRGP4 sliderBar
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 1697
;1697:	UI_SetColor( NULL );
CNSTP4 0
ARGP4
ADDRGP4 UI_SetColor
CALLV
pop
line 1700
;1698:
;1699:	// clamp thumb
;1700:	if( s->maxvalue > s->minvalue )	{
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ADDRLP4 40
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
LEF4 $796
line 1701
;1701:		s->range = ( s->curvalue - s->minvalue ) / ( float ) ( s->maxvalue - s->minvalue );
ADDRLP4 44
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 48
ADDRLP4 44
INDIRP4
CNSTI4 88
ADDP4
INDIRF4
ASGNF4
ADDRLP4 44
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 44
INDIRP4
CNSTI4 96
ADDP4
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
ADDRLP4 44
INDIRP4
CNSTI4 92
ADDP4
INDIRF4
ADDRLP4 48
INDIRF4
SUBF4
DIVF4
ASGNF4
line 1702
;1702:		if( s->range < 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
CNSTF4 0
GEF4 $798
line 1703
;1703:			s->range = 0;
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 1704
;1704:		}
ADDRGP4 $797
JUMPV
LABELV $798
line 1705
;1705:		else if( s->range > 1) {
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
CNSTF4 1065353216
LEF4 $797
line 1706
;1706:			s->range = 1;
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 1065353216
ASGNF4
line 1707
;1707:		}
line 1708
;1708:	}
ADDRGP4 $797
JUMPV
LABELV $796
line 1709
;1709:	else {
line 1710
;1710:		s->range = 0;
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTF4 0
ASGNF4
line 1711
;1711:	}
LABELV $797
line 1714
;1712:
;1713:	// draw thumb
;1714:	if( style & UI_PULSE) {
ADDRLP4 8
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
EQI4 $802
line 1715
;1715:		button = sliderButton_1;
ADDRLP4 20
ADDRGP4 sliderButton_1
INDIRI4
ASGNI4
line 1716
;1716:	}
ADDRGP4 $803
JUMPV
LABELV $802
line 1717
;1717:	else {
line 1718
;1718:		button = sliderButton_0;
ADDRLP4 20
ADDRGP4 sliderButton_0
INDIRI4
ASGNI4
line 1719
;1719:	}
LABELV $803
line 1721
;1720:
;1721:	UI_DrawHandlePic( (int)( x + 2*SMALLCHAR_WIDTH + (SLIDER_RANGE-1)*SMALLCHAR_WIDTH* s->range ) - 2, y - 2, 9, 16, button );
ADDRLP4 44
CNSTI4 2
ASGNI4
ADDRLP4 0
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CNSTI4 1
LSHI4
ADDI4
CVIF4 4
CNSTI4 9
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
CVIF4 4
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRF4
MULF4
ADDF4
CVFI4 4
ADDRLP4 44
INDIRI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
ADDRLP4 44
INDIRI4
SUBI4
CVIF4 4
ARGF4
CNSTF4 1091567616
ARGF4
CNSTF4 1098907648
ARGF4
ADDRLP4 20
INDIRI4
ARGI4
ADDRGP4 UI_DrawHandlePic
CALLV
pop
line 1722
;1722:}
LABELV $785
endproc Slider_Draw 52 20
export SpinControl_Init
proc SpinControl_Init 44 4
line 1799
;1723:#else
;1724:/*
;1725:=================
;1726:Slider_Draw
;1727:=================
;1728:*/
;1729:static void Slider_Draw( menuslider_s *s )
;1730:{
;1731:	float *color;
;1732:	int	style;
;1733:	int	i;
;1734:	int x;
;1735:	int y;
;1736:	qboolean focus;
;1737:	
;1738:	x =	s->generic.x;
;1739:	y = s->generic.y;
;1740:	focus = (s->generic.parent->cursor == s->generic.menuPosition);
;1741:
;1742:	style = UI_SMALLFONT;
;1743:	if ( s->generic.flags & QMF_GRAYED )
;1744:	{
;1745:		color = text_color_disabled;
;1746:	}
;1747:	else if (focus)
;1748:	{
;1749:		color  = text_color_highlight;
;1750:		style |= UI_PULSE;
;1751:	}
;1752:	else
;1753:	{
;1754:		color = text_color_normal;
;1755:	}
;1756:
;1757:	if ( focus )
;1758:	{
;1759:		// draw cursor
;1760:		//UI_FillRect( s->generic.left, s->generic.top, s->generic.right-s->generic.left+1, s->generic.bottom-s->generic.top+1, listbar_color ); 
;1761:		UI_DrawChar( x, y, 13, UI_CENTER|UI_BLINK|UI_SMALLFONT, color);
;1762:	}
;1763:
;1764:	// draw label
;1765:	UI_DrawString( x - SMALLCHAR_WIDTH, y, s->generic.name, UI_RIGHT|style, color );
;1766:
;1767:	// draw slider
;1768:	UI_DrawChar( x + SMALLCHAR_WIDTH, y, 128, UI_LEFT|style, color);
;1769:	for ( i = 0; i < SLIDER_RANGE; i++ )
;1770:		UI_DrawChar( x + (i+2)*SMALLCHAR_WIDTH, y, 129, UI_LEFT|style, color);
;1771:	UI_DrawChar( x + (i+2)*SMALLCHAR_WIDTH, y, 130, UI_LEFT|style, color);
;1772:
;1773:	// clamp thumb
;1774:	if (s->maxvalue > s->minvalue)
;1775:	{
;1776:		s->range = ( s->curvalue - s->minvalue ) / ( float ) ( s->maxvalue - s->minvalue );
;1777:		if ( s->range < 0)
;1778:			s->range = 0;
;1779:		else if ( s->range > 1)
;1780:			s->range = 1;
;1781:	}
;1782:	else
;1783:		s->range = 0;
;1784:
;1785:	// draw thumb
;1786:	if (style & UI_PULSE) {
;1787:		style &= ~UI_PULSE;
;1788:		style |= UI_BLINK;
;1789:	}
;1790:	UI_DrawChar( (int)( x + 2*SMALLCHAR_WIDTH + (SLIDER_RANGE-1)*SMALLCHAR_WIDTH* s->range ), y, 131, UI_LEFT|style, color);
;1791:}
;1792:#endif
;1793:
;1794:/*
;1795:=================
;1796:SpinControl_Init
;1797:=================
;1798:*/
;1799:void SpinControl_Init( menulist_s *s ) {
line 1804
;1800:	int	len;
;1801:	int	l;
;1802:	const char* str;
;1803:
;1804:	if (s->generic.name)
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $807
line 1805
;1805:		len = strlenru(s->generic.name) * SMALLCHAR_WIDTH;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 strlenru
CALLI4
ASGNI4
ADDRLP4 8
ADDRLP4 12
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
ASGNI4
ADDRGP4 $808
JUMPV
LABELV $807
line 1807
;1806:	else
;1807:		len = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
LABELV $808
line 1809
;1808:
;1809:	s->generic.left	= s->generic.x - SMALLCHAR_WIDTH - len;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
SUBI4
ADDRLP4 8
INDIRI4
SUBI4
ASGNI4
line 1811
;1810:
;1811:	len = s->numitems = 0;
ADDRLP4 20
CNSTI4 0
ASGNI4
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
ADDRLP4 20
INDIRI4
ASGNI4
ADDRLP4 8
ADDRLP4 20
INDIRI4
ASGNI4
ADDRGP4 $812
JUMPV
LABELV $811
line 1813
;1812:	while ( (str = s->itemnames[s->numitems]) != 0 )
;1813:	{
line 1814
;1814:		l = strlenru(str);
ADDRLP4 4
INDIRP4
ARGP4
ADDRLP4 24
ADDRGP4 strlenru
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 24
INDIRI4
ASGNI4
line 1816
;1815:
;1816:		if (l > len)
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
LEI4 $814
line 1817
;1817:			len = l;
ADDRLP4 8
ADDRLP4 0
INDIRI4
ASGNI4
LABELV $814
line 1819
;1818:
;1819:		s->numitems++;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1820
;1820:	}		
LABELV $812
line 1812
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 24
INDIRP4
CNSTI4 104
ADDP4
INDIRP4
ADDP4
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 28
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $811
line 1822
;1821:
;1822:	s->generic.top	  =	s->generic.y;
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 32
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 1823
;1823:	s->generic.right  =	s->generic.x + (len+1)*SMALLCHAR_WIDTH;
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 36
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 1824
;1824:	s->generic.bottom =	s->generic.y + SMALLCHAR_HEIGHT;
ADDRLP4 40
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 40
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 40
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ADDRGP4 cl_smallcharheight+12
INDIRI4
ADDI4
ASGNI4
line 1825
;1825:}
LABELV $806
endproc SpinControl_Init 44 4
proc SpinControl_Key 32 8
line 1833
;1826:
;1827:/*
;1828:=================
;1829:SpinControl_Key
;1830:=================
;1831:*/
;1832:static sfxHandle_t SpinControl_Key( menulist_s *s, int key )
;1833:{
line 1836
;1834:	sfxHandle_t	sound;
;1835:
;1836:	sound = 0;
ADDRLP4 0
CNSTI4 0
ASGNI4
line 1837
;1837:	switch (key)
ADDRLP4 4
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 163
EQI4 $824
ADDRLP4 8
CNSTI4 165
ASGNI4
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $827
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
GTI4 $831
LABELV $830
ADDRLP4 12
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 134
EQI4 $824
ADDRLP4 12
INDIRI4
CNSTI4 135
EQI4 $827
ADDRGP4 $819
JUMPV
LABELV $831
ADDRFP4 4
INDIRI4
CNSTI4 178
EQI4 $821
ADDRGP4 $819
JUMPV
line 1838
;1838:	{
LABELV $821
line 1840
;1839:		case K_MOUSE1:
;1840:			s->curvalue++;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1841
;1841:			if (s->curvalue >= s->numitems)
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
LTI4 $822
line 1842
;1842:				s->curvalue = 0;
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTI4 0
ASGNI4
LABELV $822
line 1843
;1843:			sound = menu_move_sound;
ADDRLP4 0
ADDRGP4 menu_move_sound
INDIRI4
ASGNI4
line 1844
;1844:			break;
ADDRGP4 $820
JUMPV
LABELV $824
line 1848
;1845:		
;1846:		case K_KP_LEFTARROW:
;1847:		case K_LEFTARROW:
;1848:			if (s->curvalue > 0)
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 0
LEI4 $825
line 1849
;1849:			{
line 1850
;1850:				s->curvalue--;
ADDRLP4 24
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 1851
;1851:				sound = menu_move_sound;
ADDRLP4 0
ADDRGP4 menu_move_sound
INDIRI4
ASGNI4
line 1852
;1852:			}
ADDRGP4 $820
JUMPV
LABELV $825
line 1854
;1853:			else
;1854:				sound = menu_buzz_sound;
ADDRLP4 0
ADDRGP4 menu_buzz_sound
INDIRI4
ASGNI4
line 1855
;1855:			break;
ADDRGP4 $820
JUMPV
LABELV $827
line 1859
;1856:
;1857:		case K_KP_RIGHTARROW:
;1858:		case K_RIGHTARROW:
;1859:			if (s->curvalue < s->numitems-1)
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 1
SUBI4
GEI4 $828
line 1860
;1860:			{
line 1861
;1861:				s->curvalue++;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1862
;1862:				sound = menu_move_sound;
ADDRLP4 0
ADDRGP4 menu_move_sound
INDIRI4
ASGNI4
line 1863
;1863:			}
ADDRGP4 $820
JUMPV
LABELV $828
line 1865
;1864:			else
;1865:				sound = menu_buzz_sound;
ADDRLP4 0
ADDRGP4 menu_buzz_sound
INDIRI4
ASGNI4
line 1866
;1866:			break;
LABELV $819
LABELV $820
line 1869
;1867:	}
;1868:
;1869:	if ( sound && s->generic.callback )
ADDRLP4 0
INDIRI4
CNSTI4 0
EQI4 $832
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $832
line 1870
;1870:		s->generic.callback( s, QM_ACTIVATED );
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 16
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
LABELV $832
line 1872
;1871:
;1872:	return (sound);
ADDRLP4 0
INDIRI4
RETI4
LABELV $818
endproc SpinControl_Key 32 8
proc SpinControl_Draw 32 20
line 1881
;1873:}
;1874:
;1875:/*
;1876:=================
;1877:SpinControl_Draw
;1878:=================
;1879:*/
;1880:static void SpinControl_Draw( menulist_s *s )
;1881:{
line 1887
;1882:	float *color;
;1883:	int	x,y;
;1884:	int	style;
;1885:	qboolean focus;
;1886:
;1887:	x = s->generic.x;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 1888
;1888:	y =	s->generic.y;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 1890
;1889:
;1890:	style = UI_SMALLFONT;
ADDRLP4 12
CNSTI4 16
ASGNI4
line 1891
;1891:	focus = (s->generic.parent->cursor == s->generic.menuPosition);
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
NEI4 $836
ADDRLP4 20
CNSTI4 1
ASGNI4
ADDRGP4 $837
JUMPV
LABELV $836
ADDRLP4 20
CNSTI4 0
ASGNI4
LABELV $837
ADDRLP4 16
ADDRLP4 20
INDIRI4
ASGNI4
line 1893
;1892:
;1893:	if ( s->generic.flags & QMF_GRAYED )
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8192
BANDU4
CNSTU4 0
EQU4 $838
line 1894
;1894:		color = text_color_disabled;
ADDRLP4 0
ADDRGP4 text_color_disabled
ASGNP4
ADDRGP4 $839
JUMPV
LABELV $838
line 1895
;1895:	else if ( focus )
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $840
line 1896
;1896:	{
line 1897
;1897:		color = text_color_highlight;
ADDRLP4 0
ADDRGP4 text_color_highlight
ASGNP4
line 1898
;1898:		style |= UI_PULSE;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 16384
BORI4
ASGNI4
line 1899
;1899:	}
ADDRGP4 $841
JUMPV
LABELV $840
line 1900
;1900:	else if ( s->generic.flags & QMF_BLINK )
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 1
BANDU4
CNSTU4 0
EQU4 $842
line 1901
;1901:	{
line 1902
;1902:		color = text_color_highlight;
ADDRLP4 0
ADDRGP4 text_color_highlight
ASGNP4
line 1903
;1903:		style |= UI_BLINK;
ADDRLP4 12
ADDRLP4 12
INDIRI4
CNSTI4 4096
BORI4
ASGNI4
line 1904
;1904:	}
ADDRGP4 $843
JUMPV
LABELV $842
line 1906
;1905:	else
;1906:		color = text_color_normal;
ADDRLP4 0
ADDRGP4 text_color_normal
ASGNP4
LABELV $843
LABELV $841
LABELV $839
line 1908
;1907:
;1908:	if ( focus )
ADDRLP4 16
INDIRI4
CNSTI4 0
EQI4 $844
line 1909
;1909:	{
line 1912
;1910:		// draw cursor
;1911:		//UI_FillRect( s->generic.left, s->generic.top, s->generic.right-s->generic.left+1, s->generic.bottom-s->generic.top+1, listbar_color ); 
;1912:		UI_DrawChar( x, y, 13, UI_CENTER|UI_BLINK|UI_SMALLFONT, color);
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
CNSTI4 13
ARGI4
CNSTI4 4113
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 UI_DrawChar
CALLV
pop
line 1913
;1913:	}
LABELV $844
line 1915
;1914:
;1915:	UI_DrawString( x - SMALLCHAR_WIDTH, y, s->generic.name, style|UI_RIGHT, color );
ADDRLP4 4
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
SUBI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
INDIRI4
CNSTI4 2
BORI4
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 1916
;1916:	UI_DrawString( x + SMALLCHAR_WIDTH, y, s->itemnames[s->curvalue], style|UI_LEFT, color );
ADDRLP4 4
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ADDI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
INDIRP4
CNSTI4 104
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 1917
;1917:}
LABELV $834
endproc SpinControl_Draw 32 20
export ScrollList_Init
proc ScrollList_Init 36 0
line 1925
;1918:
;1919:/*
;1920:=================
;1921:ScrollList_Init
;1922:=================
;1923:*/
;1924:void ScrollList_Init( menulist_s *l )
;1925:{
line 1928
;1926:	int		w;
;1927:
;1928:	l->oldvalue = 0;
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
CNSTI4 0
ASGNI4
line 1929
;1929:	l->curvalue = 0;
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTI4 0
ASGNI4
line 1930
;1930:	l->top      = 0;
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 1932
;1931:
;1932:	if( !l->columns ) {
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 0
NEI4 $849
line 1933
;1933:		l->columns = 1;
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
CNSTI4 1
ASGNI4
line 1934
;1934:		l->seperation = 0;
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
CNSTI4 0
ASGNI4
line 1935
;1935:	}
ADDRGP4 $850
JUMPV
LABELV $849
line 1936
;1936:	else if( !l->seperation ) {
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
CNSTI4 0
NEI4 $851
line 1937
;1937:		l->seperation = 3;
ADDRFP4 0
INDIRP4
CNSTI4 124
ADDP4
CNSTI4 3
ASGNI4
line 1938
;1938:	}
LABELV $851
LABELV $850
line 1940
;1939:
;1940:	w = ( (l->width + l->seperation) * l->columns - l->seperation) * SMALLCHAR_WIDTH;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
ADDRLP4 4
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ADDRLP4 4
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
MULI4
ADDRLP4 8
INDIRI4
SUBI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
ASGNI4
line 1942
;1941:
;1942:	l->generic.left   =	l->generic.x;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 1943
;1943:	l->generic.top    = l->generic.y;	
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 1944
;1944:	l->generic.right  =	l->generic.x + w;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ASGNI4
line 1945
;1945:	l->generic.bottom =	l->generic.y + l->height * SMALLCHAR_HEIGHT;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 24
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ADDRGP4 cl_smallcharheight+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 1947
;1946:
;1947:	if( l->generic.flags & QMF_CENTER_JUSTIFY ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8
BANDU4
CNSTU4 0
EQU4 $855
line 1948
;1948:		l->generic.left -= w / 2;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 44
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
DIVI4
SUBI4
ASGNI4
line 1949
;1949:		l->generic.right -= w / 2;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 52
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 2
DIVI4
SUBI4
ASGNI4
line 1950
;1950:	}
LABELV $855
line 1951
;1951:}
LABELV $848
endproc ScrollList_Init 36 0
data
align 4
LABELV $858
byte 4 0
export ScrollList_Key
code
proc ScrollList_Key 156 16
line 1959
;1952:
;1953:/*
;1954:=================
;1955:ScrollList_Key
;1956:=================
;1957:*/
;1958:sfxHandle_t ScrollList_Key( menulist_s *l, int key )
;1959:{
line 1974
;1960:	static int clicktime = 0;
;1961:
;1962:	int	x;
;1963:	int	y;
;1964:	int	w;
;1965:	int	i;
;1966:	int	j;
;1967:	int	c;
;1968:	int	cursorx;
;1969:	int	cursory;
;1970:	int	column;
;1971:	int	index;
;1972:	int clickdelay;
;1973:
;1974:	switch (key)
ADDRLP4 44
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 160
LTI4 $979
ADDRLP4 44
INDIRI4
CNSTI4 168
GTI4 $980
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $981-640
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $981
address $911
address $943
address $921
address $961
address $859
address $970
address $914
address $952
address $932
code
LABELV $979
ADDRLP4 48
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 132
LTI4 $859
ADDRLP4 48
INDIRI4
CNSTI4 144
GTI4 $859
ADDRLP4 48
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $983-528
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $983
address $943
address $952
address $961
address $970
address $859
address $859
address $859
address $859
address $859
address $932
address $921
address $911
address $914
code
LABELV $980
ADDRLP4 52
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 56
CNSTI4 178
ASGNI4
ADDRLP4 52
INDIRI4
ADDRLP4 56
INDIRI4
EQI4 $861
ADDRLP4 52
INDIRI4
ADDRLP4 56
INDIRI4
LTI4 $859
LABELV $985
ADDRLP4 60
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 183
EQI4 $952
ADDRLP4 60
INDIRI4
CNSTI4 184
EQI4 $943
ADDRGP4 $859
JUMPV
line 1975
;1975:	{
LABELV $861
line 1977
;1976:		case K_MOUSE1:
;1977:			if (l->generic.flags & QMF_HASMOUSEFOCUS)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 512
BANDU4
CNSTU4 0
EQU4 $860
line 1978
;1978:			{
line 1980
;1979:				// check scroll region
;1980:				x = l->generic.x;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 1981
;1981:				y = l->generic.y;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 1982
;1982:				w = ( (l->width + l->seperation) * l->columns - l->seperation) * SMALLCHAR_WIDTH;
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
ADDRLP4 64
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
ADDRLP4 64
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ADDRLP4 68
INDIRI4
ADDI4
ADDRLP4 64
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
MULI4
ADDRLP4 68
INDIRI4
SUBI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
ASGNI4
line 1983
;1983:				if( l->generic.flags & QMF_CENTER_JUSTIFY ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8
BANDU4
CNSTU4 0
EQU4 $865
line 1984
;1984:					x -= w / 2;
ADDRLP4 12
ADDRLP4 12
INDIRI4
ADDRLP4 20
INDIRI4
CNSTI4 2
DIVI4
SUBI4
ASGNI4
line 1985
;1985:				}
LABELV $865
line 1987
;1986:				
;1987:				if (UI_CursorInRect( l->generic.right-(16*ui_scrollbtnsize.integer), l->generic.bottom-(16*ui_scrollbtnsize.integer), (16*ui_scrollbtnsize.integer), (16*ui_scrollbtnsize.integer) ))
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
CNSTI4 4
ASGNI4
ADDRLP4 72
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 76
INDIRI4
LSHI4
SUBI4
ARGI4
ADDRLP4 72
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 76
INDIRI4
LSHI4
SUBI4
ARGI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 76
INDIRI4
LSHI4
ARGI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 76
INDIRI4
LSHI4
ARGI4
ADDRLP4 80
ADDRGP4 UI_CursorInRect
CALLI4
ASGNI4
ADDRLP4 80
INDIRI4
CNSTI4 0
EQI4 $867
line 1988
;1988:				{
line 1989
;1989:					if( l->curvalue == l->numitems - 1 ) {
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 84
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 1
SUBI4
NEI4 $873
line 1990
;1990:						return menu_buzz_sound;
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $873
line 1993
;1991:					}
;1992:
;1993:					l->oldvalue = l->curvalue;
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 88
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 1994
;1994:					l->curvalue++;
ADDRLP4 92
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1996
;1995:
;1996:					if( l->curvalue >= l->top + l->columns * l->height ) {
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 96
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ADDRLP4 96
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
ADDRLP4 96
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
MULI4
ADDI4
LTI4 $875
line 1997
;1997:						if( l->columns == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
NEI4 $877
line 1998
;1998:							l->top++;
ADDRLP4 100
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 1999
;1999:						}
ADDRGP4 $878
JUMPV
LABELV $877
line 2000
;2000:						else {
line 2001
;2001:							l->top += l->height;
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
ADDRLP4 100
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ADDI4
ASGNI4
line 2002
;2002:						}
LABELV $878
line 2003
;2003:					}
LABELV $875
line 2005
;2004:
;2005:					if( l->generic.callback ) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $879
line 2006
;2006:						l->generic.callback( l, QM_GOTFOCUS );
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 100
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 2007
;2007:					}
LABELV $879
line 2009
;2008:
;2009:					return menu_move_sound;
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $867
line 2012
;2010:				}
;2011:				
;2012:				if (UI_CursorInRect( l->generic.right-(16*ui_scrollbtnsize.integer), l->generic.top, (16*ui_scrollbtnsize.integer), (16*ui_scrollbtnsize.integer) ))
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
CNSTI4 4
ASGNI4
ADDRLP4 84
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 88
INDIRI4
LSHI4
SUBI4
ARGI4
ADDRLP4 84
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
ARGI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 88
INDIRI4
LSHI4
ARGI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 88
INDIRI4
LSHI4
ARGI4
ADDRLP4 92
ADDRGP4 UI_CursorInRect
CALLI4
ASGNI4
ADDRLP4 92
INDIRI4
CNSTI4 0
EQI4 $881
line 2013
;2013:				{
line 2014
;2014:					if( l->curvalue == 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 0
NEI4 $886
line 2015
;2015:						return menu_buzz_sound;
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $886
line 2018
;2016:					}
;2017:
;2018:					l->oldvalue = l->curvalue;
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 96
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 2019
;2019:					l->curvalue--;
ADDRLP4 100
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2021
;2020:
;2021:					if( l->curvalue < l->top ) {
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 104
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
GEI4 $888
line 2022
;2022:						if( l->columns == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
NEI4 $890
line 2023
;2023:							l->top--;
ADDRLP4 108
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2024
;2024:						}
ADDRGP4 $891
JUMPV
LABELV $890
line 2025
;2025:						else {
line 2026
;2026:							l->top -= l->height;
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
ADDRLP4 108
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 112
INDIRP4
ADDRLP4 112
INDIRP4
INDIRI4
ADDRLP4 108
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
SUBI4
ASGNI4
line 2027
;2027:						}
LABELV $891
line 2028
;2028:					}
LABELV $888
line 2030
;2029:
;2030:					if( l->generic.callback ) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $892
line 2031
;2031:						l->generic.callback( l, QM_GOTFOCUS );
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 108
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 2032
;2032:					}
LABELV $892
line 2034
;2033:
;2034:					return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $881
line 2037
;2035:				}
;2036:				
;2037:				if (UI_CursorInRect( x, y, w, l->height*SMALLCHAR_HEIGHT ))
ADDRLP4 12
INDIRI4
ARGI4
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 20
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ADDRGP4 cl_smallcharheight+12
INDIRI4
MULI4
ARGI4
ADDRLP4 96
ADDRGP4 UI_CursorInRect
CALLI4
ASGNI4
ADDRLP4 96
INDIRI4
CNSTI4 0
EQI4 $894
line 2038
;2038:				{
line 2039
;2039:					cursorx = (uis.cursorx - x)/SMALLCHAR_WIDTH;
ADDRLP4 28
ADDRGP4 uis+8
INDIRI4
ADDRLP4 12
INDIRI4
SUBI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
DIVI4
ASGNI4
line 2040
;2040:					column = cursorx / (l->width + l->seperation);
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
ADDRLP4 28
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ADDI4
DIVI4
ASGNI4
line 2041
;2041:					cursory = (uis.cursory - y)/SMALLCHAR_HEIGHT;
ADDRLP4 32
ADDRGP4 uis+12
INDIRI4
ADDRLP4 16
INDIRI4
SUBI4
ADDRGP4 cl_smallcharheight+12
INDIRI4
DIVI4
ASGNI4
line 2042
;2042:					index = column * l->height + cursory;
ADDRLP4 24
ADDRLP4 36
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
MULI4
ADDRLP4 32
INDIRI4
ADDI4
ASGNI4
line 2043
;2043:					if (l->top + index < l->numitems)
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
ADDI4
ADDRLP4 104
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
GEI4 $901
line 2044
;2044:					{
line 2045
;2045:						l->oldvalue = l->curvalue;
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 108
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 2046
;2046:						l->curvalue = l->top + index;
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 112
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
ADDI4
ASGNI4
line 2048
;2047:
;2048:						clickdelay = uis.realtime - clicktime;
ADDRLP4 40
ADDRGP4 uis+4
INDIRI4
ADDRGP4 $858
INDIRI4
SUBI4
ASGNI4
line 2049
;2049:						clicktime = uis.realtime;
ADDRGP4 $858
ADDRGP4 uis+4
INDIRI4
ASGNI4
line 2050
;2050:						if (l->oldvalue != l->curvalue)
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDRLP4 116
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
EQI4 $905
line 2051
;2051:						{
line 2052
;2052:							if (l->generic.callback) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $907
line 2053
;2053:								l->generic.callback( l, QM_GOTFOCUS );
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 120
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 2054
;2054:							}
LABELV $907
line 2055
;2055:							return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $905
line 2057
;2056:						}
;2057:						else {
line 2059
;2058:							// double click
;2059:							if ((clickdelay < 350) && !(l->generic.flags & (QMF_GRAYED|QMF_INACTIVE)))
ADDRLP4 40
INDIRI4
CNSTI4 350
GEI4 $909
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 24576
BANDU4
CNSTU4 0
NEU4 $909
line 2060
;2060:							{
line 2061
;2061:								return (Menu_ActivateItem( l->generic.parent, &l->generic ));
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
ARGP4
ADDRLP4 120
INDIRP4
ARGP4
ADDRLP4 124
ADDRGP4 Menu_ActivateItem
CALLI4
ASGNI4
ADDRLP4 124
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $909
line 2063
;2062:							}
;2063:						}
line 2064
;2064:					}
LABELV $901
line 2065
;2065:				}
LABELV $894
line 2068
;2066:
;2067:				// absorbed, silent sound effect
;2068:				return (menu_null_sound);
ADDRGP4 menu_null_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
line 2070
;2069:			}
;2070:			break;
LABELV $911
line 2074
;2071:
;2072:		case K_KP_HOME:
;2073:		case K_HOME:
;2074:			l->oldvalue = l->curvalue;
ADDRLP4 64
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 64
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 2075
;2075:			l->curvalue = 0;
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTI4 0
ASGNI4
line 2076
;2076:			l->top      = 0;
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
line 2078
;2077:
;2078:			if (l->oldvalue != l->curvalue && l->generic.callback)
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 68
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDRLP4 68
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
EQI4 $912
ADDRLP4 68
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $912
line 2079
;2079:			{
line 2080
;2080:				l->generic.callback( l, QM_GOTFOCUS );
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 72
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 2081
;2081:				return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $912
line 2083
;2082:			}
;2083:			return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $914
line 2087
;2084:
;2085:		case K_KP_END:
;2086:		case K_END:
;2087:			l->oldvalue = l->curvalue;
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 2088
;2088:			l->curvalue = l->numitems-1;
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 76
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 76
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2089
;2089:			if( l->columns > 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
LEI4 $915
line 2090
;2090:				c = (l->curvalue / l->height + 1) * l->height;
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
ADDRLP4 80
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ASGNI4
ADDRLP4 4
ADDRLP4 80
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 84
INDIRI4
DIVI4
CNSTI4 1
ADDI4
ADDRLP4 84
INDIRI4
MULI4
ASGNI4
line 2091
;2091:				l->top = c - (l->columns * l->height);
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 4
INDIRI4
ADDRLP4 88
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
ADDRLP4 88
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
MULI4
SUBI4
ASGNI4
line 2092
;2092:			}
ADDRGP4 $916
JUMPV
LABELV $915
line 2093
;2093:			else {
line 2094
;2094:				l->top = l->curvalue - (l->height - 1);
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 80
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 80
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 1
SUBI4
SUBI4
ASGNI4
line 2095
;2095:			}
LABELV $916
line 2096
;2096:			if (l->top < 0)
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
GEI4 $917
line 2097
;2097:				l->top = 0;			
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
LABELV $917
line 2099
;2098:
;2099:			if (l->oldvalue != l->curvalue && l->generic.callback)
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 88
ADDP4
INDIRI4
ADDRLP4 80
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
EQI4 $919
ADDRLP4 80
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $919
line 2100
;2100:			{
line 2101
;2101:				l->generic.callback( l, QM_GOTFOCUS );
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 84
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 2102
;2102:				return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $919
line 2104
;2103:			}
;2104:			return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $921
line 2108
;2105:
;2106:		case K_PGUP:
;2107:		case K_KP_PGUP:
;2108:			if( l->columns > 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
LEI4 $922
line 2109
;2109:				return menu_null_sound;
ADDRGP4 menu_null_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $922
line 2112
;2110:			}
;2111:
;2112:			if (l->curvalue > 0)
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 0
LEI4 $924
line 2113
;2113:			{
line 2114
;2114:				l->oldvalue = l->curvalue;
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 84
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 2115
;2115:				l->curvalue -= l->height-1;
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
ADDRLP4 88
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRI4
ADDRLP4 88
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 1
SUBI4
SUBI4
ASGNI4
line 2116
;2116:				if (l->curvalue < 0)
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 0
GEI4 $926
line 2117
;2117:					l->curvalue = 0;
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
CNSTI4 0
ASGNI4
LABELV $926
line 2118
;2118:				l->top = l->curvalue;
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 96
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 2119
;2119:				if (l->top < 0)
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
GEI4 $928
line 2120
;2120:					l->top = 0;
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
LABELV $928
line 2122
;2121:
;2122:				if (l->generic.callback)
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $930
line 2123
;2123:					l->generic.callback( l, QM_GOTFOCUS );
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 100
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
LABELV $930
line 2125
;2124:
;2125:				return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $924
line 2127
;2126:			}
;2127:			return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $932
line 2131
;2128:
;2129:		case K_PGDN:
;2130:		case K_KP_PGDN:
;2131:			if( l->columns > 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
LEI4 $933
line 2132
;2132:				return menu_null_sound;
ADDRGP4 menu_null_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $933
line 2135
;2133:			}
;2134:
;2135:			if (l->curvalue < l->numitems-1)
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 84
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 1
SUBI4
GEI4 $935
line 2136
;2136:			{
line 2137
;2137:				l->oldvalue = l->curvalue;
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 88
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 2138
;2138:				l->curvalue += l->height-1;
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
ADDRLP4 92
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 96
INDIRP4
ADDRLP4 96
INDIRP4
INDIRI4
ADDRLP4 92
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ADDI4
ASGNI4
line 2139
;2139:				if (l->curvalue > l->numitems-1)
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 1
SUBI4
LEI4 $937
line 2140
;2140:					l->curvalue = l->numitems-1;
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 104
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
LABELV $937
line 2141
;2141:				l->top = l->curvalue - (l->height-1);
ADDRLP4 108
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 108
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 108
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 108
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
CNSTI4 1
SUBI4
SUBI4
ASGNI4
line 2142
;2142:				if (l->top < 0)
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
CNSTI4 0
GEI4 $939
line 2143
;2143:					l->top = 0;
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
CNSTI4 0
ASGNI4
LABELV $939
line 2145
;2144:
;2145:				if (l->generic.callback)
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $941
line 2146
;2146:					l->generic.callback( l, QM_GOTFOCUS );
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 112
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
LABELV $941
line 2148
;2147:
;2148:				return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $935
line 2150
;2149:			}
;2150:			return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $943
line 2155
;2151:
;2152:		case K_KP_UPARROW:
;2153:		case K_UPARROW:
;2154:		case K_MWHEELUP:
;2155:			if( l->curvalue == 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
CNSTI4 0
NEI4 $944
line 2156
;2156:				return menu_buzz_sound;
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $944
line 2159
;2157:			}
;2158:
;2159:			l->oldvalue = l->curvalue;
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 88
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 2160
;2160:			l->curvalue--;
ADDRLP4 92
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2162
;2161:
;2162:			if( l->curvalue < l->top ) {
ADDRLP4 96
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 96
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 96
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
GEI4 $946
line 2163
;2163:				if( l->columns == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
NEI4 $948
line 2164
;2164:					l->top--;
ADDRLP4 100
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 100
INDIRP4
ADDRLP4 100
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2165
;2165:				}
ADDRGP4 $949
JUMPV
LABELV $948
line 2166
;2166:				else {
line 2167
;2167:					l->top -= l->height;
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
ADDRLP4 100
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 104
INDIRP4
ADDRLP4 104
INDIRP4
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
SUBI4
ASGNI4
line 2168
;2168:				}
LABELV $949
line 2169
;2169:			}
LABELV $946
line 2171
;2170:
;2171:			if( l->generic.callback ) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $950
line 2172
;2172:				l->generic.callback( l, QM_GOTFOCUS );
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 100
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 2173
;2173:			}
LABELV $950
line 2175
;2174:
;2175:			return (menu_move_sound);
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $952
line 2180
;2176:
;2177:		case K_KP_DOWNARROW:
;2178:		case K_DOWNARROW:
;2179:		case K_MWHEELDOWN:
;2180:			if( l->curvalue == l->numitems - 1 ) {
ADDRLP4 100
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 100
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 100
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
CNSTI4 1
SUBI4
NEI4 $953
line 2181
;2181:				return menu_buzz_sound;
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $953
line 2184
;2182:			}
;2183:
;2184:			l->oldvalue = l->curvalue;
ADDRLP4 104
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 104
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 104
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 2185
;2185:			l->curvalue++;
ADDRLP4 108
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 108
INDIRP4
ADDRLP4 108
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2187
;2186:
;2187:			if( l->curvalue >= l->top + l->columns * l->height ) {
ADDRLP4 112
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 112
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 112
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ADDRLP4 112
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
ADDRLP4 112
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
MULI4
ADDI4
LTI4 $955
line 2188
;2188:				if( l->columns == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
NEI4 $957
line 2189
;2189:					l->top++;
ADDRLP4 116
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 116
INDIRP4
ADDRLP4 116
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2190
;2190:				}
ADDRGP4 $958
JUMPV
LABELV $957
line 2191
;2191:				else {
line 2192
;2192:					l->top += l->height;
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
ADDRLP4 116
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 120
INDIRP4
ADDRLP4 120
INDIRP4
INDIRI4
ADDRLP4 116
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ADDI4
ASGNI4
line 2193
;2193:				}
LABELV $958
line 2194
;2194:			}
LABELV $955
line 2196
;2195:
;2196:			if( l->generic.callback ) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $959
line 2197
;2197:				l->generic.callback( l, QM_GOTFOCUS );
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 116
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 2198
;2198:			}
LABELV $959
line 2200
;2199:
;2200:			return menu_move_sound;
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $961
line 2204
;2201:
;2202:		case K_KP_LEFTARROW:
;2203:		case K_LEFTARROW:
;2204:			if( l->columns == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
NEI4 $962
line 2205
;2205:				return menu_null_sound;
ADDRGP4 menu_null_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $962
line 2208
;2206:			}
;2207:
;2208:			if( l->curvalue < l->height ) {
ADDRLP4 116
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 116
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 116
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
GEI4 $964
line 2209
;2209:				return menu_buzz_sound;
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $964
line 2212
;2210:			}
;2211:
;2212:			l->oldvalue = l->curvalue;
ADDRLP4 120
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 120
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 120
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 2213
;2213:			l->curvalue -= l->height;
ADDRLP4 124
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 128
ADDRLP4 124
INDIRP4
CNSTI4 92
ADDP4
ASGNP4
ADDRLP4 128
INDIRP4
ADDRLP4 128
INDIRP4
INDIRI4
ADDRLP4 124
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
SUBI4
ASGNI4
line 2215
;2214:
;2215:			if( l->curvalue < l->top ) {
ADDRLP4 132
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 132
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 132
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
GEI4 $966
line 2216
;2216:				l->top -= l->height;
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
ADDRLP4 136
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 140
INDIRP4
ADDRLP4 140
INDIRP4
INDIRI4
ADDRLP4 136
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
SUBI4
ASGNI4
line 2217
;2217:			}
LABELV $966
line 2219
;2218:
;2219:			if( l->generic.callback ) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $968
line 2220
;2220:				l->generic.callback( l, QM_GOTFOCUS );
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 136
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 136
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 2221
;2221:			}
LABELV $968
line 2223
;2222:
;2223:			return menu_move_sound;
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $970
line 2227
;2224:
;2225:		case K_KP_RIGHTARROW:
;2226:		case K_RIGHTARROW:
;2227:			if( l->columns == 1 ) {
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
CNSTI4 1
NEI4 $971
line 2228
;2228:				return menu_null_sound;
ADDRGP4 menu_null_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $971
line 2231
;2229:			}
;2230:
;2231:			c = l->curvalue + l->height;
ADDRLP4 136
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 136
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 136
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ADDI4
ASGNI4
line 2233
;2232:
;2233:			if( c >= l->numitems ) {
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
LTI4 $973
line 2234
;2234:				return menu_buzz_sound;
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $973
line 2237
;2235:			}
;2236:
;2237:			l->oldvalue = l->curvalue;
ADDRLP4 140
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 140
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 140
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 2238
;2238:			l->curvalue = c;
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 4
INDIRI4
ASGNI4
line 2240
;2239:
;2240:			if( l->curvalue > l->top + l->columns * l->height - 1 ) {
ADDRLP4 144
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 144
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 144
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ADDRLP4 144
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
ADDRLP4 144
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
MULI4
ADDI4
CNSTI4 1
SUBI4
LEI4 $975
line 2241
;2241:				l->top += l->height;
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 152
ADDRLP4 148
INDIRP4
CNSTI4 100
ADDP4
ASGNP4
ADDRLP4 152
INDIRP4
ADDRLP4 152
INDIRP4
INDIRI4
ADDRLP4 148
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ADDI4
ASGNI4
line 2242
;2242:			}
LABELV $975
line 2244
;2243:
;2244:			if( l->generic.callback ) {
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $977
line 2245
;2245:				l->generic.callback( l, QM_GOTFOCUS );
ADDRLP4 148
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 148
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 148
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 2246
;2246:			}
LABELV $977
line 2248
;2247:
;2248:			return menu_move_sound;
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $859
LABELV $860
line 2252
;2249:	}
;2250:
;2251:	// cycle look for ascii key inside list items
;2252:	if ( !Q_isprint( key ) )
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 64
ADDRGP4 Q_isprint
CALLI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 0
NEI4 $986
line 2253
;2253:		return (0);
CNSTI4 0
RETI4
ADDRGP4 $857
JUMPV
LABELV $986
line 2256
;2254:
;2255:	// force to lower for case insensitive compare
;2256:	if ( Q_isupper( key ) )
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 68
ADDRGP4 Q_isupper
CALLI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 0
EQI4 $988
line 2257
;2257:	{
line 2258
;2258:		key -= 'A' - 'a';
ADDRFP4 4
ADDRFP4 4
INDIRI4
CNSTI4 -32
SUBI4
ASGNI4
line 2259
;2259:	}
LABELV $988
line 2262
;2260:
;2261:	// iterate list items
;2262:	for (i=1; i<=l->numitems; i++)
ADDRLP4 8
CNSTI4 1
ASGNI4
ADDRGP4 $993
JUMPV
LABELV $990
line 2263
;2263:	{
line 2264
;2264:		j = (l->curvalue + i) % l->numitems;
ADDRLP4 72
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 72
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ADDRLP4 72
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
MODI4
ASGNI4
line 2265
;2265:		c = l->itemnames[j][0];
ADDRLP4 4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRP4
ADDP4
INDIRP4
INDIRI1
CVII4 1
ASGNI4
line 2266
;2266:		if ( Q_isupper( c ) )
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 Q_isupper
CALLI4
ASGNI4
ADDRLP4 76
INDIRI4
CNSTI4 0
EQI4 $994
line 2267
;2267:		{
line 2268
;2268:			c -= 'A' - 'a';
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 -32
SUBI4
ASGNI4
line 2269
;2269:		}
LABELV $994
line 2271
;2270:
;2271:		if (c == key)
ADDRLP4 4
INDIRI4
ADDRFP4 4
INDIRI4
NEI4 $996
line 2272
;2272:		{
line 2274
;2273:			// set current item, mimic windows listbox scroll behavior
;2274:			if (j < l->top)
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
GEI4 $998
line 2275
;2275:			{
line 2277
;2276:				// behind top most item, set this as new top
;2277:				l->top = j;
ADDRFP4 0
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2278
;2278:			}
ADDRGP4 $999
JUMPV
LABELV $998
line 2279
;2279:			else if (j > l->top+l->height-1)
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRI4
ADDRLP4 80
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ADDRLP4 80
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ADDI4
CNSTI4 1
SUBI4
LEI4 $1000
line 2280
;2280:			{
line 2282
;2281:				// past end of list box, do page down
;2282:				l->top = (j+1) - l->height;
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 100
ADDP4
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ADDRLP4 84
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
SUBI4
ASGNI4
line 2283
;2283:			}
LABELV $1000
LABELV $999
line 2285
;2284:			
;2285:			if (l->curvalue != j)
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
EQI4 $1002
line 2286
;2286:			{
line 2287
;2287:				l->oldvalue = l->curvalue;
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
CNSTI4 88
ADDP4
ADDRLP4 84
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
ASGNI4
line 2288
;2288:				l->curvalue = j;
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
ADDRLP4 0
INDIRI4
ASGNI4
line 2289
;2289:				if (l->generic.callback)
ADDRFP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1004
line 2290
;2290:					l->generic.callback( l, QM_GOTFOCUS );
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 88
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
LABELV $1004
line 2291
;2291:				return ( menu_move_sound );			
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $1002
line 2294
;2292:			}
;2293:
;2294:			return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $857
JUMPV
LABELV $996
line 2296
;2295:		}
;2296:	}
LABELV $991
line 2262
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $993
ADDRLP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
LEI4 $990
line 2298
;2297:
;2298:	return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
LABELV $857
endproc ScrollList_Key 156 16
lit
align 4
LABELV $1007
byte 4 1065353216
byte 4 1065353216
byte 4 1065353216
byte 4 1061158912
export ScrollList_Draw
code
proc ScrollList_Draw 84 24
line 2307
;2299:}
;2300:
;2301:/*
;2302:=================
;2303:ScrollList_Draw
;2304:=================
;2305:*/
;2306:void ScrollList_Draw( menulist_s *l )
;2307:{
line 2317
;2308:	int			x;
;2309:	int			u;
;2310:	int			y;
;2311:	int			i;
;2312:	int			base;
;2313:	int			column;
;2314:	float*		color;
;2315:	qboolean	hasfocus;
;2316:	int			style;
;2317:	vec4_t scrollbuttona        = {1.00f, 1.00f, 1.00f, 0.75f};	// transluscent orange
ADDRLP4 36
ADDRGP4 $1007
INDIRB
ASGNB 16
line 2319
;2318:
;2319:	hasfocus = (l->generic.parent->cursor == l->generic.menuPosition);
ADDRLP4 56
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 56
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
INDIRI4
ADDRLP4 56
INDIRP4
CNSTI4 68
ADDP4
INDIRI4
NEI4 $1009
ADDRLP4 52
CNSTI4 1
ASGNI4
ADDRGP4 $1010
JUMPV
LABELV $1009
ADDRLP4 52
CNSTI4 0
ASGNI4
LABELV $1010
ADDRLP4 28
ADDRLP4 52
INDIRI4
ASGNI4
line 2321
;2320:
;2321:	x =	l->generic.x;
ADDRLP4 16
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 2323
;2322:	
;2323:	UI_DrawRoundedRect(l->generic.right-(16*ui_scrollbtnsize.integer),l->generic.bottom-(16*ui_scrollbtnsize.integer),(16*ui_scrollbtnsize.integer),(16*ui_scrollbtnsize.integer), 100, scrollbuttona);
ADDRLP4 60
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 64
CNSTI4 4
ASGNI4
ADDRLP4 60
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 64
INDIRI4
LSHI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 60
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 64
INDIRI4
LSHI4
SUBI4
CVIF4 4
ARGF4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 64
INDIRI4
LSHI4
CVIF4 4
ARGF4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 64
INDIRI4
LSHI4
CVIF4 4
ARGF4
CNSTF4 1120403456
ARGF4
ADDRLP4 36
ARGP4
ADDRGP4 UI_DrawRoundedRect
CALLV
pop
line 2324
;2324:	UI_DrawRoundedRect(l->generic.right-(16*ui_scrollbtnsize.integer),l->generic.top,(16*ui_scrollbtnsize.integer),(16*ui_scrollbtnsize.integer), 100, scrollbuttona);
ADDRLP4 68
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 72
CNSTI4 4
ASGNI4
ADDRLP4 68
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 72
INDIRI4
LSHI4
SUBI4
CVIF4 4
ARGF4
ADDRLP4 68
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 72
INDIRI4
LSHI4
CVIF4 4
ARGF4
ADDRGP4 ui_scrollbtnsize+12
INDIRI4
ADDRLP4 72
INDIRI4
LSHI4
CVIF4 4
ARGF4
CNSTF4 1120403456
ARGF4
ADDRLP4 36
ARGP4
ADDRGP4 UI_DrawRoundedRect
CALLV
pop
line 2325
;2325:	for( column = 0; column < l->columns; column++ ) {
ADDRLP4 32
CNSTI4 0
ASGNI4
ADDRGP4 $1021
JUMPV
LABELV $1018
line 2326
;2326:		y =	l->generic.y;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 2327
;2327:		base = l->top + column * l->height;
ADDRLP4 76
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 76
INDIRP4
CNSTI4 100
ADDP4
INDIRI4
ADDRLP4 32
INDIRI4
ADDRLP4 76
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
MULI4
ADDI4
ASGNI4
line 2328
;2328:		for( i = base; i < base + l->height; i++) {
ADDRLP4 0
ADDRLP4 24
INDIRI4
ASGNI4
ADDRGP4 $1025
JUMPV
LABELV $1022
line 2329
;2329:			if (i >= l->numitems)
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
LTI4 $1026
line 2330
;2330:				break;
ADDRGP4 $1024
JUMPV
LABELV $1026
line 2332
;2331:
;2332:			if (i == l->curvalue)
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 92
ADDP4
INDIRI4
NEI4 $1028
line 2333
;2333:			{
line 2334
;2334:				u = x - 2;
ADDRLP4 20
ADDRLP4 16
INDIRI4
CNSTI4 2
SUBI4
ASGNI4
line 2335
;2335:				if( l->generic.flags & QMF_CENTER_JUSTIFY ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8
BANDU4
CNSTU4 0
EQU4 $1030
line 2336
;2336:					u -= (l->width * SMALLCHAR_WIDTH) / 2 + 1;
ADDRLP4 20
ADDRLP4 20
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
CNSTI4 2
DIVI4
CNSTI4 1
ADDI4
SUBI4
ASGNI4
line 2337
;2337:				}
LABELV $1030
line 2339
;2338:
;2339:				UI_FillRect(u,y,l->width*SMALLCHAR_WIDTH,SMALLCHAR_HEIGHT,listbar_color);
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 4
INDIRI4
CVIF4 4
ARGF4
ADDRFP4 0
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
CVIF4 4
ARGF4
ADDRGP4 cl_smallcharheight+12
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 listbar_color
ARGP4
ADDRGP4 UI_FillRect
CALLV
pop
line 2340
;2340:				color = text_color_highlight;
ADDRLP4 12
ADDRGP4 text_color_highlight
ASGNP4
line 2342
;2341:
;2342:				if (hasfocus)
ADDRLP4 28
INDIRI4
CNSTI4 0
EQI4 $1035
line 2343
;2343:					style = UI_PULSE|UI_LEFT|UI_SMALLFONT;
ADDRLP4 8
CNSTI4 16400
ASGNI4
ADDRGP4 $1029
JUMPV
LABELV $1035
line 2345
;2344:				else
;2345:					style = UI_LEFT|UI_SMALLFONT;
ADDRLP4 8
CNSTI4 16
ASGNI4
line 2346
;2346:			}
ADDRGP4 $1029
JUMPV
LABELV $1028
line 2348
;2347:			else
;2348:			{
line 2349
;2349:				color = l->color;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 128
ADDP4
INDIRP4
ASGNP4
line 2350
;2350:				style = UI_LEFT|UI_SMALLFONT;
ADDRLP4 8
CNSTI4 16
ASGNI4
line 2351
;2351:			}
LABELV $1029
line 2352
;2352:			if( l->generic.flags & QMF_CENTER_JUSTIFY ) {
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8
BANDU4
CNSTU4 0
EQU4 $1037
line 2353
;2353:				style |= UI_CENTER;
ADDRLP4 8
ADDRLP4 8
INDIRI4
CNSTI4 1
BORI4
ASGNI4
line 2354
;2354:			}
LABELV $1037
line 2356
;2355:			//if(!l->itemnames2[i]){
;2356:			UI_DrawString(x,y,l->itemnames[i],style,color);
ADDRLP4 16
INDIRI4
ARGI4
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 104
ADDP4
INDIRP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 2362
;2357:			//}
;2358:			//if(l->itemnames2[i]){
;2359:			//UI_DrawString(x,y,l->itemnames2[i],style,color);
;2360:			//}
;2361:
;2362:			y += SMALLCHAR_HEIGHT;
ADDRLP4 4
ADDRLP4 4
INDIRI4
ADDRGP4 cl_smallcharheight+12
INDIRI4
ADDI4
ASGNI4
line 2363
;2363:		}
LABELV $1023
line 2328
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1025
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 116
ADDP4
INDIRI4
ADDI4
LTI4 $1022
LABELV $1024
line 2364
;2364:		x += (l->width + l->seperation) * SMALLCHAR_WIDTH;
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 16
INDIRI4
ADDRLP4 80
INDIRP4
CNSTI4 112
ADDP4
INDIRI4
ADDRLP4 80
INDIRP4
CNSTI4 124
ADDP4
INDIRI4
ADDI4
ADDRGP4 cl_smallcharwidth+12
INDIRI4
MULI4
ADDI4
ASGNI4
line 2365
;2365:	}
LABELV $1019
line 2325
ADDRLP4 32
ADDRLP4 32
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1021
ADDRLP4 32
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 120
ADDP4
INDIRI4
LTI4 $1018
line 2366
;2366:}
LABELV $1006
endproc ScrollList_Draw 84 24
export Menu_AddItem
proc Menu_AddItem 40 8
line 2374
;2367:
;2368:/*
;2369:=================
;2370:Menu_AddItem
;2371:=================
;2372:*/
;2373:void Menu_AddItem( menuframework_s *menu, void *item )
;2374:{
line 2377
;2375:	menucommon_s	*itemptr;
;2376:
;2377:	if (menu->nitems >= MAX_MENUITEMS)
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 256
LTI4 $1042
line 2378
;2378:		trap_Error ("Menu_AddItem: excessive items");
ADDRGP4 $1044
ARGP4
ADDRGP4 trap_Error
CALLV
pop
LABELV $1042
line 2380
;2379:
;2380:	menu->items[menu->nitems] = item;
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 4
INDIRP4
CNSTI4 12
ADDP4
ADDP4
ADDRFP4 4
INDIRP4
ASGNP4
line 2381
;2381:	((menucommon_s*)menu->items[menu->nitems])->parent        = menu;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRP4
CNSTI4 64
ADDP4
ADDRLP4 8
INDIRP4
ASGNP4
line 2382
;2382:	((menucommon_s*)menu->items[menu->nitems])->menuPosition  = menu->nitems;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
ADDRLP4 12
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 12
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRP4
CNSTI4 68
ADDP4
ADDRLP4 16
INDIRI4
ASGNI4
line 2383
;2383:	((menucommon_s*)menu->items[menu->nitems])->flags        &= ~QMF_HASMOUSEFOCUS;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 20
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRP4
CNSTI4 72
ADDP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRU4
CNSTI4 -513
CVIU4 4
BANDU4
ASGNU4
line 2386
;2384:
;2385:	// perform any item specific initializations
;2386:	itemptr = (menucommon_s*)item;
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
line 2387
;2387:	if (!(itemptr->flags & QMF_NODEFAULTINIT))
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 32768
BANDU4
CNSTU4 0
NEU4 $1045
line 2388
;2388:	{
line 2389
;2389:		switch (itemptr->type)
ADDRLP4 28
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 1
LTI4 $1047
ADDRLP4 28
INDIRI4
CNSTI4 11
GTI4 $1047
ADDRLP4 28
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1062-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1062
address $1054
address $1050
address $1052
address $1051
address $1053
address $1055
address $1056
address $1057
address $1058
address $1059
address $1060
code
line 2390
;2390:		{
LABELV $1050
line 2392
;2391:			case MTYPE_ACTION:
;2392:				Action_Init((menuaction_s*)item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Action_Init
CALLV
pop
line 2393
;2393:				break;
ADDRGP4 $1048
JUMPV
LABELV $1051
line 2396
;2394:
;2395:			case MTYPE_FIELD:
;2396:				MenuField_Init((menufield_s*)item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 MenuField_Init
CALLV
pop
line 2397
;2397:				break;
ADDRGP4 $1048
JUMPV
LABELV $1052
line 2400
;2398:
;2399:			case MTYPE_SPINCONTROL:
;2400:				SpinControl_Init((menulist_s*)item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 SpinControl_Init
CALLV
pop
line 2401
;2401:				break;
ADDRGP4 $1048
JUMPV
LABELV $1053
line 2404
;2402:
;2403:			case MTYPE_RADIOBUTTON:
;2404:				RadioButton_Init((menuradiobutton_s*)item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 RadioButton_Init
CALLV
pop
line 2405
;2405:				break;
ADDRGP4 $1048
JUMPV
LABELV $1054
line 2408
;2406:
;2407:			case MTYPE_SLIDER:
;2408:				Slider_Init((menuslider_s*)item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Slider_Init
CALLV
pop
line 2409
;2409:				break;
ADDRGP4 $1048
JUMPV
LABELV $1055
line 2412
;2410:
;2411:			case MTYPE_BITMAP:
;2412:				Bitmap_Init((menubitmap_s*)item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Bitmap_Init
CALLV
pop
line 2413
;2413:				break;
ADDRGP4 $1048
JUMPV
LABELV $1056
line 2416
;2414:
;2415:			case MTYPE_TEXT:
;2416:				Text_Init((menutext_s*)item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 Text_Init
CALLV
pop
line 2417
;2417:				break;
ADDRGP4 $1048
JUMPV
LABELV $1057
line 2420
;2418:
;2419:			case MTYPE_SCROLLLIST:
;2420:				ScrollList_Init((menulist_s*)item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 ScrollList_Init
CALLV
pop
line 2421
;2421:				break;
ADDRGP4 $1048
JUMPV
LABELV $1058
line 2424
;2422:
;2423:			case MTYPE_PTEXT:
;2424:				PText_Init((menutext_s*)item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 PText_Init
CALLV
pop
line 2425
;2425:				break;
ADDRGP4 $1048
JUMPV
LABELV $1059
line 2428
;2426:
;2427:			case MTYPE_BTEXT:
;2428:				BText_Init((menutext_s*)item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 BText_Init
CALLV
pop
line 2429
;2429:				break;
ADDRGP4 $1048
JUMPV
LABELV $1060
line 2432
;2430:				
;2431:			case MTYPE_UIOBJECT:
;2432:				UIObject_Init((menuobject_s*)item);
ADDRFP4 4
INDIRP4
ARGP4
ADDRGP4 UIObject_Init
CALLV
pop
line 2433
;2433:				break;
ADDRGP4 $1048
JUMPV
LABELV $1047
line 2436
;2434:
;2435:			default:
;2436:				trap_Error( va("Menu_Init: unknown type %d", itemptr->type) );
ADDRGP4 $1061
ARGP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 36
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 36
INDIRP4
ARGP4
ADDRGP4 trap_Error
CALLV
pop
line 2437
;2437:		}
LABELV $1048
line 2438
;2438:	}
LABELV $1045
line 2440
;2439:
;2440:	menu->nitems++;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2441
;2441:}
LABELV $1041
endproc Menu_AddItem 40 8
export Menu_CursorMoved
proc Menu_CursorMoved 32 8
line 2449
;2442:
;2443:/*
;2444:=================
;2445:Menu_CursorMoved
;2446:=================
;2447:*/
;2448:void Menu_CursorMoved( menuframework_s *m )
;2449:{
line 2452
;2450:	void (*callback)( void *self, int notification );
;2451:	
;2452:	if (m->cursor_prev == m->cursor)
ADDRLP4 4
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 4
INDIRP4
INDIRI4
NEI4 $1065
line 2453
;2453:		return;
ADDRGP4 $1064
JUMPV
LABELV $1065
line 2455
;2454:
;2455:	if (m->cursor_prev >= 0 && m->cursor_prev < m->nitems)
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
LTI4 $1067
ADDRLP4 12
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
GEI4 $1067
line 2456
;2456:	{
line 2457
;2457:		callback = ((menucommon_s*)(m->items[m->cursor_prev]))->callback;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
line 2458
;2458:		if (callback)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1069
line 2459
;2459:			callback(m->items[m->cursor_prev],QM_LOSTFOCUS);
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
CNSTI4 2
ASGNI4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 24
INDIRI4
LSHI4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRP4
ARGP4
ADDRLP4 24
INDIRI4
ARGI4
ADDRLP4 0
INDIRP4
CALLV
pop
LABELV $1069
line 2460
;2460:	}
LABELV $1067
line 2462
;2461:	
;2462:	if (m->cursor >= 0 && m->cursor < m->nitems)
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 16
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
LTI4 $1071
ADDRLP4 20
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
GEI4 $1071
line 2463
;2463:	{
line 2464
;2464:		callback = ((menucommon_s*)(m->items[m->cursor]))->callback;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
ASGNP4
line 2465
;2465:		if (callback)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1073
line 2466
;2466:			callback(m->items[m->cursor],QM_GOTFOCUS);
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 28
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRLP4 0
INDIRP4
CALLV
pop
LABELV $1073
line 2467
;2467:	}
LABELV $1071
line 2468
;2468:}
LABELV $1064
endproc Menu_CursorMoved 32 8
export Menu_SetCursor
proc Menu_SetCursor 4 4
line 2476
;2469:
;2470:/*
;2471:=================
;2472:Menu_SetCursor
;2473:=================
;2474:*/
;2475:void Menu_SetCursor( menuframework_s *m, int cursor )
;2476:{
line 2477
;2477:	if (((menucommon_s*)(m->items[cursor]))->flags & (QMF_GRAYED|QMF_INACTIVE))
ADDRFP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 24576
BANDU4
CNSTU4 0
EQU4 $1076
line 2478
;2478:	{
line 2480
;2479:		// cursor can't go there
;2480:		return;
ADDRGP4 $1075
JUMPV
LABELV $1076
line 2483
;2481:	}
;2482:
;2483:	m->cursor_prev = m->cursor;
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
line 2484
;2484:	m->cursor      = cursor;
ADDRFP4 0
INDIRP4
ADDRFP4 4
INDIRI4
ASGNI4
line 2486
;2485:
;2486:	Menu_CursorMoved( m );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Menu_CursorMoved
CALLV
pop
line 2487
;2487:}
LABELV $1075
endproc Menu_SetCursor 4 4
export Menu_SetCursorToItem
proc Menu_SetCursorToItem 4 8
line 2495
;2488:
;2489:/*
;2490:=================
;2491:Menu_SetCursorToItem
;2492:=================
;2493:*/
;2494:void Menu_SetCursorToItem( menuframework_s *m, void* ptr )
;2495:{
line 2498
;2496:	int	i;
;2497:
;2498:	for (i=0; i<m->nitems; i++)
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1082
JUMPV
LABELV $1079
line 2499
;2499:	{
line 2500
;2500:		if (m->items[i] == ptr)
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRP4
CVPU4 4
ADDRFP4 4
INDIRP4
CVPU4 4
NEU4 $1083
line 2501
;2501:		{
line 2502
;2502:			Menu_SetCursor( m, i );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 Menu_SetCursor
CALLV
pop
line 2503
;2503:			return;
ADDRGP4 $1078
JUMPV
LABELV $1083
line 2505
;2504:		}
;2505:	}
LABELV $1080
line 2498
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1082
ADDRLP4 0
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LTI4 $1079
line 2506
;2506:}
LABELV $1078
endproc Menu_SetCursorToItem 4 8
export Menu_AdjustCursor
proc Menu_AdjustCursor 24 0
line 2515
;2507:
;2508:/*
;2509:** Menu_AdjustCursor
;2510:**
;2511:** This function takes the given menu, the direction, and attempts
;2512:** to adjust the menu's cursor so that it's at the next available
;2513:** slot.
;2514:*/
;2515:void Menu_AdjustCursor( menuframework_s *m, int dir ) {
line 2516
;2516:	menucommon_s	*item = NULL;
ADDRLP4 0
CNSTP4 0
ASGNP4
line 2517
;2517:	qboolean		wrapped = qfalse;
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $1088
JUMPV
LABELV $1087
line 2520
;2518:
;2519:wrap:
;2520:	while ( m->cursor >= 0 && m->cursor < m->nitems ) {
line 2521
;2521:		item = ( menucommon_s * ) m->items[m->cursor];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRP4
ASGNP4
line 2522
;2522:		if (( item->flags & (QMF_GRAYED|QMF_MOUSEONLY|QMF_INACTIVE) ) ) {
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 26624
BANDU4
CNSTU4 0
EQU4 $1089
line 2523
;2523:			m->cursor += dir;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
ADDRLP4 12
INDIRP4
INDIRI4
ADDRFP4 4
INDIRI4
ADDI4
ASGNI4
line 2524
;2524:		}
line 2525
;2525:		else {
line 2526
;2526:			break;
LABELV $1091
line 2528
;2527:		}
;2528:	}
LABELV $1088
line 2520
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
LTI4 $1092
ADDRLP4 12
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LTI4 $1087
LABELV $1092
LABELV $1089
line 2530
;2529:
;2530:	if ( dir == 1 ) {
ADDRFP4 4
INDIRI4
CNSTI4 1
NEI4 $1093
line 2531
;2531:		if ( m->cursor >= m->nitems ) {
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LTI4 $1094
line 2532
;2532:			if ( m->wrapAround ) {
ADDRFP4 0
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1097
line 2533
;2533:				if ( wrapped ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1099
line 2534
;2534:					m->cursor = m->cursor_prev;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2535
;2535:					return;
ADDRGP4 $1085
JUMPV
LABELV $1099
line 2537
;2536:				}
;2537:				m->cursor = 0;
ADDRFP4 0
INDIRP4
CNSTI4 0
ASGNI4
line 2538
;2538:				wrapped = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 2539
;2539:				goto wrap;
ADDRGP4 $1088
JUMPV
LABELV $1097
line 2541
;2540:			}
;2541:			m->cursor = m->cursor_prev;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2542
;2542:		}
line 2543
;2543:	}
ADDRGP4 $1094
JUMPV
LABELV $1093
line 2544
;2544:	else {
line 2545
;2545:		if ( m->cursor < 0 ) {
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
GEI4 $1101
line 2546
;2546:			if ( m->wrapAround ) {
ADDRFP4 0
INDIRP4
CNSTI4 1044
ADDP4
INDIRI4
CNSTI4 0
EQI4 $1103
line 2547
;2547:				if ( wrapped ) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1105
line 2548
;2548:					m->cursor = m->cursor_prev;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2549
;2549:					return;
ADDRGP4 $1085
JUMPV
LABELV $1105
line 2551
;2550:				}
;2551:				m->cursor = m->nitems - 1;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2552
;2552:				wrapped = qtrue;
ADDRLP4 4
CNSTI4 1
ASGNI4
line 2553
;2553:				goto wrap;
ADDRGP4 $1088
JUMPV
LABELV $1103
line 2555
;2554:			}
;2555:			m->cursor = m->cursor_prev;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
ADDRLP4 16
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2556
;2556:		}
LABELV $1101
line 2557
;2557:	}
LABELV $1094
line 2558
;2558:}
LABELV $1085
endproc Menu_AdjustCursor 24 0
export Menu_Draw
proc Menu_Draw 32 20
line 2566
;2559:
;2560:/*
;2561:=================
;2562:Menu_Draw
;2563:=================
;2564:*/
;2565:void Menu_Draw( menuframework_s *menu )
;2566:{
line 2571
;2567:	int				i;
;2568:	menucommon_s	*itemptr;
;2569:
;2570:	// draw menu
;2571:	for (i=0; i<menu->nitems; i++)
ADDRLP4 4
CNSTI4 0
ASGNI4
ADDRGP4 $1111
JUMPV
LABELV $1108
line 2572
;2572:	{
line 2573
;2573:		itemptr = (menucommon_s*)menu->items[i];
ADDRLP4 0
ADDRLP4 4
INDIRI4
CNSTI4 2
LSHI4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRP4
ASGNP4
line 2575
;2574:
;2575:		if (itemptr->flags & QMF_HIDDEN)
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 4096
BANDU4
CNSTU4 0
EQU4 $1112
line 2576
;2576:			continue;
ADDRGP4 $1109
JUMPV
LABELV $1112
line 2578
;2577:
;2578:		if (itemptr->ownerdraw)
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1114
line 2579
;2579:		{
line 2581
;2580:			// total subclassing, owner draws everything
;2581:			itemptr->ownerdraw( itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 84
ADDP4
INDIRP4
CALLV
pop
line 2582
;2582:		}	
ADDRGP4 $1115
JUMPV
LABELV $1114
line 2584
;2583:		else 
;2584:		{
line 2585
;2585:			switch (itemptr->type)
ADDRLP4 8
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 1
LTI4 $1116
ADDRLP4 8
INDIRI4
CNSTI4 11
GTI4 $1116
ADDRLP4 8
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1131-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1131
address $1121
address $1123
address $1122
address $1120
address $1119
address $1124
address $1125
address $1126
address $1127
address $1128
address $1129
code
line 2586
;2586:			{	
LABELV $1119
line 2588
;2587:				case MTYPE_RADIOBUTTON:
;2588:					RadioButton_Draw( (menuradiobutton_s*)itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 RadioButton_Draw
CALLV
pop
line 2589
;2589:					break;
ADDRGP4 $1117
JUMPV
LABELV $1120
line 2592
;2590:
;2591:				case MTYPE_FIELD:
;2592:					MenuField_Draw( (menufield_s*)itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 MenuField_Draw
CALLV
pop
line 2593
;2593:					break;
ADDRGP4 $1117
JUMPV
LABELV $1121
line 2596
;2594:		
;2595:				case MTYPE_SLIDER:
;2596:					Slider_Draw( (menuslider_s*)itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Slider_Draw
CALLV
pop
line 2597
;2597:					break;
ADDRGP4 $1117
JUMPV
LABELV $1122
line 2600
;2598: 
;2599:				case MTYPE_SPINCONTROL:
;2600:					SpinControl_Draw( (menulist_s*)itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 SpinControl_Draw
CALLV
pop
line 2601
;2601:					break;
ADDRGP4 $1117
JUMPV
LABELV $1123
line 2604
;2602:		
;2603:				case MTYPE_ACTION:
;2604:					Action_Draw( (menuaction_s*)itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Action_Draw
CALLV
pop
line 2605
;2605:					break;
ADDRGP4 $1117
JUMPV
LABELV $1124
line 2608
;2606:		
;2607:				case MTYPE_BITMAP:
;2608:					Bitmap_Draw( (menubitmap_s*)itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Bitmap_Draw
CALLV
pop
line 2609
;2609:					break;
ADDRGP4 $1117
JUMPV
LABELV $1125
line 2612
;2610:
;2611:				case MTYPE_TEXT:
;2612:					Text_Draw( (menutext_s*)itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 Text_Draw
CALLV
pop
line 2613
;2613:					break;
ADDRGP4 $1117
JUMPV
LABELV $1126
line 2616
;2614:
;2615:				case MTYPE_SCROLLLIST:
;2616:					ScrollList_Draw( (menulist_s*)itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 ScrollList_Draw
CALLV
pop
line 2617
;2617:					break;
ADDRGP4 $1117
JUMPV
LABELV $1127
line 2620
;2618:				
;2619:				case MTYPE_PTEXT:
;2620:					PText_Draw( (menutext_s*)itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 PText_Draw
CALLV
pop
line 2621
;2621:					break;
ADDRGP4 $1117
JUMPV
LABELV $1128
line 2624
;2622:
;2623:				case MTYPE_BTEXT:
;2624:					BText_Draw( (menutext_s*)itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 BText_Draw
CALLV
pop
line 2625
;2625:					break;
ADDRGP4 $1117
JUMPV
LABELV $1129
line 2628
;2626:					
;2627:				case MTYPE_UIOBJECT:
;2628:					UIObject_Draw( (menuobject_s*)itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRGP4 UIObject_Draw
CALLV
pop
line 2629
;2629:					break;
ADDRGP4 $1117
JUMPV
LABELV $1116
line 2632
;2630:
;2631:				default:
;2632:					trap_Error( va("Menu_Draw: unknown type %d", itemptr->type) );
ADDRGP4 $1130
ARGP4
ADDRLP4 0
INDIRP4
INDIRI4
ARGI4
ADDRLP4 16
ADDRGP4 va
CALLP4
ASGNP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRGP4 trap_Error
CALLV
pop
line 2633
;2633:			}
LABELV $1117
line 2634
;2634:		}
LABELV $1115
line 2636
;2635:#ifndef NDEBUG
;2636:		if( uis.debug ) {
ADDRGP4 uis+11392
INDIRI4
CNSTI4 0
EQI4 $1133
line 2642
;2637:			int	x;
;2638:			int	y;
;2639:			int	w;
;2640:			int	h;
;2641:
;2642:			if( !( itemptr->flags & QMF_INACTIVE ) ) {
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 16384
BANDU4
CNSTU4 0
NEU4 $1136
line 2643
;2643:				x = itemptr->left;
ADDRLP4 8
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
ASGNI4
line 2644
;2644:				y = itemptr->top;
ADDRLP4 12
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
ASGNI4
line 2645
;2645:				w = itemptr->right - itemptr->left + 1;
ADDRLP4 16
ADDRLP4 0
INDIRP4
CNSTI4 52
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 44
ADDP4
INDIRI4
SUBI4
CNSTI4 1
ADDI4
ASGNI4
line 2646
;2646:				h =	itemptr->bottom - itemptr->top + 1;
ADDRLP4 20
ADDRLP4 0
INDIRP4
CNSTI4 56
ADDP4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 48
ADDP4
INDIRI4
SUBI4
CNSTI4 1
ADDI4
ASGNI4
line 2648
;2647:
;2648:				if (itemptr->flags & QMF_HASMOUSEFOCUS) {
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 512
BANDU4
CNSTU4 0
EQU4 $1138
line 2649
;2649:					UI_DrawRect(x, y, w, h, colorYellow );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 colorYellow
ARGP4
ADDRGP4 UI_DrawRect
CALLV
pop
line 2650
;2650:				}
ADDRGP4 $1139
JUMPV
LABELV $1138
line 2651
;2651:				else {
line 2652
;2652:					UI_DrawRect(x, y, w, h, colorWhite );
ADDRLP4 8
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 12
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 16
INDIRI4
CVIF4 4
ARGF4
ADDRLP4 20
INDIRI4
CVIF4 4
ARGF4
ADDRGP4 colorWhite
ARGP4
ADDRGP4 UI_DrawRect
CALLV
pop
line 2653
;2653:				}
LABELV $1139
line 2654
;2654:			}
LABELV $1136
line 2655
;2655:		}
LABELV $1133
line 2657
;2656:#endif
;2657:	}
LABELV $1109
line 2571
ADDRLP4 4
ADDRLP4 4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1111
ADDRLP4 4
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LTI4 $1108
line 2659
;2658:
;2659:	itemptr = Menu_ItemAtCursor( menu );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 8
ADDRGP4 Menu_ItemAtCursor
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 8
INDIRP4
ASGNP4
line 2660
;2660:	if ( itemptr && itemptr->statusbar)
ADDRLP4 16
CNSTU4 0
ASGNU4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 16
INDIRU4
EQU4 $1140
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRP4
CVPU4 4
ADDRLP4 16
INDIRU4
EQU4 $1140
line 2661
;2661:		itemptr->statusbar( ( void * ) itemptr );
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
CNSTI4 80
ADDP4
INDIRP4
CALLV
pop
LABELV $1140
line 2662
;2662:}
LABELV $1107
endproc Menu_Draw 32 20
export Menu_ItemAtCursor
proc Menu_ItemAtCursor 12 0
line 2670
;2663:
;2664:/*
;2665:=================
;2666:Menu_ItemAtCursor
;2667:=================
;2668:*/
;2669:void *Menu_ItemAtCursor( menuframework_s *m )
;2670:{
line 2671
;2671:	if ( m->cursor < 0 || m->cursor >= m->nitems )
ADDRLP4 0
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 4
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 0
LTI4 $1145
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LTI4 $1143
LABELV $1145
line 2672
;2672:		return 0;
CNSTP4 0
RETP4
ADDRGP4 $1142
JUMPV
LABELV $1143
line 2674
;2673:
;2674:	return m->items[m->cursor];
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
INDIRI4
CNSTI4 2
LSHI4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
ADDP4
INDIRP4
RETP4
LABELV $1142
endproc Menu_ItemAtCursor 12 0
export Menu_ActivateItem
proc Menu_ActivateItem 4 8
line 2682
;2675:}
;2676:
;2677:/*
;2678:=================
;2679:Menu_ActivateItem
;2680:=================
;2681:*/
;2682:sfxHandle_t Menu_ActivateItem( menuframework_s *s, menucommon_s* item ) {
line 2683
;2683:	if ( item->callback ) {
ADDRFP4 4
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1147
line 2684
;2684:		item->callback( item, QM_ACTIVATED );
ADDRLP4 0
ADDRFP4 4
INDIRP4
ASGNP4
ADDRLP4 0
INDIRP4
ARGP4
CNSTI4 3
ARGI4
ADDRLP4 0
INDIRP4
CNSTI4 76
ADDP4
INDIRP4
CALLV
pop
line 2685
;2685:		if( !( item->flags & QMF_SILENT ) ) {
ADDRFP4 4
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 1048576
BANDU4
CNSTU4 0
NEU4 $1149
line 2686
;2686:			return menu_move_sound;
ADDRGP4 menu_move_sound
INDIRI4
RETI4
ADDRGP4 $1146
JUMPV
LABELV $1149
line 2688
;2687:		}
;2688:	}
LABELV $1147
line 2690
;2689:
;2690:	return 0;
CNSTI4 0
RETI4
LABELV $1146
endproc Menu_ActivateItem 4 8
export Menu_DefaultKey
proc Menu_DefaultKey 112 8
line 2699
;2691:}
;2692:
;2693:/*
;2694:=================
;2695:Menu_DefaultKey
;2696:=================
;2697:*/
;2698:sfxHandle_t Menu_DefaultKey( menuframework_s *m, int key )
;2699:{
line 2700
;2700:	sfxHandle_t		sound = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 2708
;2701:	menucommon_s	*item;
;2702:	int				cursor_prev;
;2703:	menuobject_s* b;
;2704:	
;2705:	
;2706:
;2707:	// menu system keys
;2708:	switch ( key )
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
CNSTI4 27
ASGNI4
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
EQI4 $1154
ADDRLP4 16
INDIRI4
ADDRLP4 20
INDIRI4
LTI4 $1152
LABELV $1155
ADDRFP4 4
INDIRI4
CNSTI4 179
EQI4 $1154
ADDRGP4 $1152
JUMPV
line 2709
;2709:	{
LABELV $1154
line 2712
;2710:		case K_MOUSE2:
;2711:		case K_ESCAPE:
;2712:			UI_PopMenu();
ADDRGP4 UI_PopMenu
CALLV
pop
line 2713
;2713:			return menu_out_sound;
ADDRGP4 menu_out_sound
INDIRI4
RETI4
ADDRGP4 $1151
JUMPV
LABELV $1152
line 2716
;2714:	}
;2715:
;2716:	if (!m || !m->nitems)
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1158
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
CNSTI4 0
NEI4 $1156
LABELV $1158
line 2717
;2717:		return 0;
CNSTI4 0
RETI4
ADDRGP4 $1151
JUMPV
LABELV $1156
line 2720
;2718:
;2719:	// route key stimulus to widget
;2720:	item = Menu_ItemAtCursor( m );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 28
ADDRGP4 Menu_ItemAtCursor
CALLP4
ASGNP4
ADDRLP4 0
ADDRLP4 28
INDIRP4
ASGNP4
line 2721
;2721:	b = (menuobject_s*)item;
ADDRLP4 8
ADDRLP4 0
INDIRP4
ASGNP4
line 2722
;2722:	if (item && (item->flags & (QMF_HASMOUSEFOCUS)) && !(item->flags & (QMF_GRAYED|QMF_INACTIVE)))
ADDRLP4 36
CNSTU4 0
ASGNU4
ADDRLP4 0
INDIRP4
CVPU4 4
ADDRLP4 36
INDIRU4
EQU4 $1159
ADDRLP4 40
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
ASGNU4
ADDRLP4 40
INDIRU4
CNSTU4 512
BANDU4
ADDRLP4 36
INDIRU4
EQU4 $1159
ADDRLP4 40
INDIRU4
CNSTU4 24576
BANDU4
ADDRLP4 36
INDIRU4
NEU4 $1159
line 2723
;2723:	{
line 2724
;2724:		switch (item->type)
ADDRLP4 44
ADDRLP4 0
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 1
LTI4 $1161
ADDRLP4 44
INDIRI4
CNSTI4 11
GTI4 $1161
ADDRLP4 44
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1175-4
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1175
address $1166
address $1161
address $1164
address $1168
address $1165
address $1161
address $1161
address $1167
address $1161
address $1161
address $1169
code
line 2725
;2725:		{
LABELV $1164
line 2727
;2726:			case MTYPE_SPINCONTROL:
;2727:				sound = SpinControl_Key( (menulist_s*)item, key );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 SpinControl_Key
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 52
INDIRI4
ASGNI4
line 2728
;2728:				break;
ADDRGP4 $1162
JUMPV
LABELV $1165
line 2731
;2729:
;2730:			case MTYPE_RADIOBUTTON:
;2731:				sound = RadioButton_Key( (menuradiobutton_s*)item, key );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 56
ADDRGP4 RadioButton_Key
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 56
INDIRI4
ASGNI4
line 2732
;2732:				break;
ADDRGP4 $1162
JUMPV
LABELV $1166
line 2735
;2733:
;2734:			case MTYPE_SLIDER:
;2735:				sound = Slider_Key( (menuslider_s*)item, key );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 60
ADDRGP4 Slider_Key
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 60
INDIRI4
ASGNI4
line 2736
;2736:				break;
ADDRGP4 $1162
JUMPV
LABELV $1167
line 2739
;2737:
;2738:			case MTYPE_SCROLLLIST:
;2739:				sound = ScrollList_Key( (menulist_s*)item, key );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 64
ADDRGP4 ScrollList_Key
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 64
INDIRI4
ASGNI4
line 2740
;2740:				break;
ADDRGP4 $1162
JUMPV
LABELV $1168
line 2743
;2741:
;2742:			case MTYPE_FIELD:
;2743:				sound = MenuField_Key( (menufield_s*)item, &key );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
ARGP4
ADDRLP4 68
ADDRGP4 MenuField_Key
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 68
INDIRI4
ASGNI4
line 2744
;2744:				break;
ADDRGP4 $1162
JUMPV
LABELV $1169
line 2747
;2745:				
;2746:			case MTYPE_UIOBJECT:
;2747:				if(b->type == 4 || b->type == 5 || b->type == 7 || b->type == 8){
ADDRLP4 72
ADDRLP4 8
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 4
EQI4 $1174
ADDRLP4 72
INDIRI4
CNSTI4 5
EQI4 $1174
ADDRLP4 72
INDIRI4
CNSTI4 7
EQI4 $1174
ADDRLP4 72
INDIRI4
CNSTI4 8
NEI4 $1162
LABELV $1174
line 2748
;2748:				sound = UIObject_Key( (menuobject_s*)item, key );
ADDRLP4 0
INDIRP4
ARGP4
ADDRFP4 4
INDIRI4
ARGI4
ADDRLP4 76
ADDRGP4 UIObject_Key
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 76
INDIRI4
ASGNI4
line 2749
;2749:				}
line 2750
;2750:				break;
LABELV $1161
LABELV $1162
line 2754
;2751:
;2752:		}
;2753:
;2754:		if (sound) {
ADDRLP4 4
INDIRI4
CNSTI4 0
EQI4 $1177
line 2756
;2755:			// key was handled
;2756:			return sound;		
ADDRLP4 4
INDIRI4
RETI4
ADDRGP4 $1151
JUMPV
LABELV $1177
line 2758
;2757:		}
;2758:	}
LABELV $1159
line 2761
;2759:
;2760:	// default handling
;2761:	switch ( key )
ADDRLP4 44
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 141
EQI4 $1181
ADDRLP4 48
CNSTI4 142
ASGNI4
ADDRLP4 44
INDIRI4
ADDRLP4 48
INDIRI4
EQI4 $1190
ADDRLP4 44
INDIRI4
ADDRLP4 48
INDIRI4
GTI4 $1222
LABELV $1221
ADDRLP4 52
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 56
CNSTI4 13
ASGNI4
ADDRLP4 52
INDIRI4
ADDRLP4 56
INDIRI4
EQI4 $1216
ADDRLP4 52
INDIRI4
ADDRLP4 56
INDIRI4
GTI4 $1224
LABELV $1223
ADDRFP4 4
INDIRI4
CNSTI4 9
EQI4 $1208
ADDRGP4 $1179
JUMPV
LABELV $1224
ADDRLP4 60
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 132
EQI4 $1205
ADDRLP4 60
INDIRI4
CNSTI4 133
EQI4 $1208
ADDRGP4 $1179
JUMPV
LABELV $1222
ADDRLP4 64
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 64
INDIRI4
CNSTI4 178
LTI4 $1225
ADDRLP4 64
INDIRI4
CNSTI4 188
GTI4 $1226
ADDRLP4 64
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1227-712
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1227
address $1211
address $1179
address $1211
address $1179
address $1179
address $1181
address $1190
address $1216
address $1216
address $1216
address $1216
code
LABELV $1225
ADDRLP4 68
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 68
INDIRI4
CNSTI4 154
LTI4 $1179
ADDRLP4 68
INDIRI4
CNSTI4 169
GTI4 $1179
ADDRLP4 68
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1229-616
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1229
address $1199
address $1201
address $1203
address $1179
address $1179
address $1179
address $1179
address $1205
address $1190
address $1179
address $1179
address $1179
address $1179
address $1208
address $1181
address $1216
code
LABELV $1226
ADDRLP4 72
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 72
INDIRI4
CNSTI4 217
LTI4 $1179
ADDRLP4 72
INDIRI4
CNSTI4 232
GTI4 $1179
ADDRLP4 72
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1231-868
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1231
address $1216
address $1216
address $1216
address $1216
address $1216
address $1216
address $1216
address $1216
address $1216
address $1216
address $1216
address $1216
address $1216
address $1216
address $1216
address $1216
code
line 2762
;2762:	{
LABELV $1181
line 2767
;2763:#ifndef NDEBUG
;2764:		case K_PGDN:
;2765:		case K_KP_PGDN:
;2766:		case K_MWHEELDOWN:
;2767:		if(uis.menuscroll - 20 >= -uis.activemenu->downlimitscroll){
ADDRGP4 uis+11468
INDIRI4
CNSTI4 20
SUBI4
ADDRGP4 uis+24
INDIRP4
CNSTI4 1064
ADDP4
INDIRI4
NEGI4
LTI4 $1182
line 2768
;2768:			uis.menuscroll -= 20;
ADDRLP4 76
ADDRGP4 uis+11468
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 20
SUBI4
ASGNI4
line 2769
;2769:			uis.cursory += 20*0.666;
ADDRLP4 80
ADDRGP4 uis+12
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CVIF4 4
CNSTF4 1096097464
ADDF4
CVFI4 4
ASGNI4
line 2770
;2770:		} else {
ADDRGP4 $1180
JUMPV
LABELV $1182
line 2771
;2771:			uis.menuscroll = -uis.activemenu->downlimitscroll;
ADDRGP4 uis+11468
ADDRGP4 uis+24
INDIRP4
CNSTI4 1064
ADDP4
INDIRI4
NEGI4
ASGNI4
line 2772
;2772:		}
line 2773
;2773:			break;
ADDRGP4 $1180
JUMPV
LABELV $1190
line 2777
;2774:		case K_PGUP:
;2775:		case K_KP_PGUP:
;2776:		case K_MWHEELUP:
;2777:		if(uis.menuscroll + 20 <= -uis.activemenu->uplimitscroll){
ADDRGP4 uis+11468
INDIRI4
CNSTI4 20
ADDI4
ADDRGP4 uis+24
INDIRP4
CNSTI4 1060
ADDP4
INDIRI4
NEGI4
GTI4 $1191
line 2778
;2778:			uis.menuscroll += 20;
ADDRLP4 76
ADDRGP4 uis+11468
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 20
ADDI4
ASGNI4
line 2779
;2779:			uis.cursory -= 20*0.666;	
ADDRLP4 80
ADDRGP4 uis+12
ASGNP4
ADDRLP4 80
INDIRP4
ADDRLP4 80
INDIRP4
INDIRI4
CVIF4 4
CNSTF4 1096097464
SUBF4
CVFI4 4
ASGNI4
line 2780
;2780:		} else {
ADDRGP4 $1180
JUMPV
LABELV $1191
line 2781
;2781:			uis.menuscroll = uis.activemenu->uplimitscroll;
ADDRGP4 uis+11468
ADDRGP4 uis+24
INDIRP4
CNSTI4 1060
ADDP4
INDIRI4
ASGNI4
line 2782
;2782:		}
line 2783
;2783:			break;
ADDRGP4 $1180
JUMPV
LABELV $1199
line 2786
;2784:			
;2785:		case K_F10:
;2786:			trap_Cmd_ExecuteText( EXEC_NOW, "toggle cl_rusinput\n");
CNSTI4 0
ARGI4
ADDRGP4 $1200
ARGP4
ADDRGP4 trap_Cmd_ExecuteText
CALLV
pop
line 2787
;2787:			break;
ADDRGP4 $1180
JUMPV
LABELV $1201
line 2789
;2788:		case K_F11:
;2789:			uis.debug ^= 1;
ADDRLP4 76
ADDRGP4 uis+11392
ASGNP4
ADDRLP4 76
INDIRP4
ADDRLP4 76
INDIRP4
INDIRI4
CNSTI4 1
BXORI4
ASGNI4
line 2790
;2790:			break;
ADDRGP4 $1180
JUMPV
LABELV $1203
line 2793
;2791:
;2792:		case K_F12:
;2793:			trap_Cmd_ExecuteText(EXEC_APPEND, "screenshotJPEG\n");
CNSTI4 2
ARGI4
ADDRGP4 $1204
ARGP4
ADDRGP4 trap_Cmd_ExecuteText
CALLV
pop
line 2794
;2794:			break;
ADDRGP4 $1180
JUMPV
LABELV $1205
line 2798
;2795:#endif
;2796:		case K_KP_UPARROW:
;2797:		case K_UPARROW:
;2798:			cursor_prev    = m->cursor;
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 2799
;2799:			m->cursor_prev = m->cursor;
ADDRLP4 80
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 80
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 80
INDIRP4
INDIRI4
ASGNI4
line 2800
;2800:			m->cursor--;
ADDRLP4 84
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 84
INDIRP4
ADDRLP4 84
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 2801
;2801:			Menu_AdjustCursor( m, -1 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 -1
ARGI4
ADDRGP4 Menu_AdjustCursor
CALLV
pop
line 2802
;2802:			if ( cursor_prev != m->cursor ) {
ADDRLP4 12
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
EQI4 $1180
line 2803
;2803:				Menu_CursorMoved( m );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Menu_CursorMoved
CALLV
pop
line 2804
;2804:				sound = menu_move_sound;
ADDRLP4 4
ADDRGP4 menu_move_sound
INDIRI4
ASGNI4
line 2805
;2805:			}
line 2806
;2806:			break;
ADDRGP4 $1180
JUMPV
LABELV $1208
line 2811
;2807:
;2808:		case K_TAB:
;2809:		case K_KP_DOWNARROW:
;2810:		case K_DOWNARROW:
;2811:			cursor_prev    = m->cursor;
ADDRLP4 12
ADDRFP4 0
INDIRP4
INDIRI4
ASGNI4
line 2812
;2812:			m->cursor_prev = m->cursor;
ADDRLP4 88
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 88
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 88
INDIRP4
INDIRI4
ASGNI4
line 2813
;2813:			m->cursor++;
ADDRLP4 92
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 92
INDIRP4
ADDRLP4 92
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2814
;2814:			Menu_AdjustCursor( m, 1 );
ADDRFP4 0
INDIRP4
ARGP4
CNSTI4 1
ARGI4
ADDRGP4 Menu_AdjustCursor
CALLV
pop
line 2815
;2815:			if ( cursor_prev != m->cursor ) {
ADDRLP4 12
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
EQI4 $1180
line 2816
;2816:				Menu_CursorMoved( m );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 Menu_CursorMoved
CALLV
pop
line 2817
;2817:				sound = menu_move_sound;
ADDRLP4 4
ADDRGP4 menu_move_sound
INDIRI4
ASGNI4
line 2818
;2818:			}
line 2819
;2819:			break;
ADDRGP4 $1180
JUMPV
LABELV $1211
line 2823
;2820:
;2821:		case K_MOUSE1:
;2822:		case K_MOUSE3:
;2823:			if (item)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1180
line 2824
;2824:				if ((item->flags & QMF_HASMOUSEFOCUS) && !(item->flags & (QMF_GRAYED|QMF_INACTIVE)))
ADDRLP4 96
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
ASGNU4
ADDRLP4 100
CNSTU4 0
ASGNU4
ADDRLP4 96
INDIRU4
CNSTU4 512
BANDU4
ADDRLP4 100
INDIRU4
EQU4 $1180
ADDRLP4 96
INDIRU4
CNSTU4 24576
BANDU4
ADDRLP4 100
INDIRU4
NEU4 $1180
line 2825
;2825:					return (Menu_ActivateItem( m, item ));
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 104
ADDRGP4 Menu_ActivateItem
CALLI4
ASGNI4
ADDRLP4 104
INDIRI4
RETI4
ADDRGP4 $1151
JUMPV
line 2826
;2826:			break;
LABELV $1216
line 2850
;2827:
;2828:		case K_JOY1:
;2829:		case K_JOY2:
;2830:		case K_JOY3:
;2831:		case K_JOY4:
;2832:		case K_AUX1:
;2833:		case K_AUX2:
;2834:		case K_AUX3:
;2835:		case K_AUX4:
;2836:		case K_AUX5:
;2837:		case K_AUX6:
;2838:		case K_AUX7:
;2839:		case K_AUX8:
;2840:		case K_AUX9:
;2841:		case K_AUX10:
;2842:		case K_AUX11:
;2843:		case K_AUX12:
;2844:		case K_AUX13:
;2845:		case K_AUX14:
;2846:		case K_AUX15:
;2847:		case K_AUX16:
;2848:		case K_KP_ENTER:
;2849:		case K_ENTER:
;2850:			if (item)
ADDRLP4 0
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1180
line 2851
;2851:				if (!(item->flags & (QMF_MOUSEONLY|QMF_GRAYED|QMF_INACTIVE)))
ADDRLP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 26624
BANDU4
CNSTU4 0
NEU4 $1180
line 2852
;2852:					return (Menu_ActivateItem( m, item ));
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRP4
ARGP4
ADDRLP4 108
ADDRGP4 Menu_ActivateItem
CALLI4
ASGNI4
ADDRLP4 108
INDIRI4
RETI4
ADDRGP4 $1151
JUMPV
line 2853
;2853:			break;
LABELV $1179
LABELV $1180
line 2856
;2854:	}
;2855:
;2856:	return sound;
ADDRLP4 4
INDIRI4
RETI4
LABELV $1151
endproc Menu_DefaultKey 112 8
export Menu_Cache
proc Menu_Cache 84 8
line 2865
;2857:}
;2858:
;2859:/*
;2860:=================
;2861:Menu_Cache
;2862:=================
;2863:*/
;2864:void Menu_Cache( void )
;2865:{
line 2867
;2866:	int i;
;2867:	uis.charset			= trap_R_RegisterShaderNoMip( "gfx/2d/bigchars" );
ADDRGP4 $1235
ARGP4
ADDRLP4 4
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 uis+11412
ADDRLP4 4
INDIRI4
ASGNI4
line 2868
;2868:	uis.charsetProp		= trap_R_RegisterShaderNoMip( "menu/art/font1_prop.tga" );
ADDRGP4 $1237
ARGP4
ADDRLP4 8
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 uis+11416
ADDRLP4 8
INDIRI4
ASGNI4
line 2869
;2869:	uis.charsetPropGlow	= trap_R_RegisterShaderNoMip( "menu/art/font1_prop_glo.tga" );
ADDRGP4 $1239
ARGP4
ADDRLP4 12
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 uis+11420
ADDRLP4 12
INDIRI4
ASGNI4
line 2870
;2870:	uis.charsetPropB	= trap_R_RegisterShaderNoMip( "menu/art/font2_prop.tga" );
ADDRGP4 $1241
ARGP4
ADDRLP4 16
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 uis+11424
ADDRLP4 16
INDIRI4
ASGNI4
line 2871
;2871:	uis.cursor          = trap_R_RegisterShaderNoMip( "menu/art/3_cursor2" );
ADDRGP4 $1243
ARGP4
ADDRLP4 20
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 uis+11428
ADDRLP4 20
INDIRI4
ASGNI4
line 2872
;2872:	uis.corner          = trap_R_RegisterShaderNoMip( "corner" );
ADDRGP4 $1245
ARGP4
ADDRLP4 24
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 uis+11432
ADDRLP4 24
INDIRI4
ASGNI4
line 2873
;2873:	uis.rb_on           = trap_R_RegisterShaderNoMip( "menu/art/switch_on" );
ADDRGP4 $1247
ARGP4
ADDRLP4 28
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 uis+11436
ADDRLP4 28
INDIRI4
ASGNI4
line 2874
;2874:	uis.rb_off          = trap_R_RegisterShaderNoMip( "menu/art/switch_off" );
ADDRGP4 $1249
ARGP4
ADDRLP4 32
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 uis+11440
ADDRLP4 32
INDIRI4
ASGNI4
line 2876
;2875:
;2876:	uis.whiteShader = trap_R_RegisterShaderNoMip( "white" );
ADDRGP4 $1251
ARGP4
ADDRLP4 36
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 uis+11396
ADDRLP4 36
INDIRI4
ASGNI4
line 2877
;2877:	uis.menuBlack		= trap_R_RegisterShaderNoMip( "menu/art/blacktrans" );
ADDRGP4 $1253
ARGP4
ADDRLP4 40
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 uis+11400
ADDRLP4 40
INDIRI4
ASGNI4
line 2878
;2878:	uis.menuWallpapers = trap_R_RegisterShaderNoMip( "menu/animbg" );
ADDRGP4 $1255
ARGP4
ADDRLP4 44
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 uis+11404
ADDRLP4 44
INDIRI4
ASGNI4
line 2880
;2879:	
;2880:	uis.menuLoadingIcon = trap_R_RegisterShaderNoMip( "menu/art/loading" );
ADDRGP4 $1257
ARGP4
ADDRLP4 48
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 uis+11408
ADDRLP4 48
INDIRI4
ASGNI4
line 2882
;2881:
;2882:	menu_in_sound	= trap_S_RegisterSound( "sound/misc/menu1.wav", qfalse );
ADDRGP4 $1258
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 52
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 menu_in_sound
ADDRLP4 52
INDIRI4
ASGNI4
line 2883
;2883:	menu_move_sound	= trap_S_RegisterSound( "sound/misc/menu2.wav", qfalse );
ADDRGP4 $1259
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 56
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 menu_move_sound
ADDRLP4 56
INDIRI4
ASGNI4
line 2884
;2884:	menu_out_sound	= trap_S_RegisterSound( "sound/misc/menu3.wav", qfalse );
ADDRGP4 $1260
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 60
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 menu_out_sound
ADDRLP4 60
INDIRI4
ASGNI4
line 2885
;2885:	menu_buzz_sound	= trap_S_RegisterSound( "sound/misc/menu4.wav", qfalse );
ADDRGP4 $1261
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 64
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 menu_buzz_sound
ADDRLP4 64
INDIRI4
ASGNI4
line 2886
;2886:	weaponChangeSound	= trap_S_RegisterSound( "sound/weapons/change.wav", qfalse );
ADDRGP4 $1262
ARGP4
CNSTI4 0
ARGI4
ADDRLP4 68
ADDRGP4 trap_S_RegisterSound
CALLI4
ASGNI4
ADDRGP4 weaponChangeSound
ADDRLP4 68
INDIRI4
ASGNI4
line 2889
;2887:
;2888:	// need a nonzero sound, make an empty sound for this
;2889:	menu_null_sound = -1;
ADDRGP4 menu_null_sound
CNSTI4 -1
ASGNI4
line 2891
;2890:
;2891:	sliderBar = trap_R_RegisterShaderNoMip( "menu/art/slider2" );
ADDRGP4 $1263
ARGP4
ADDRLP4 72
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 sliderBar
ADDRLP4 72
INDIRI4
ASGNI4
line 2892
;2892:	sliderButton_0 = trap_R_RegisterShaderNoMip( "menu/art/sliderbutt_0" );
ADDRGP4 $1264
ARGP4
ADDRLP4 76
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 sliderButton_0
ADDRLP4 76
INDIRI4
ASGNI4
line 2893
;2893:	sliderButton_1 = trap_R_RegisterShaderNoMip( "menu/art/sliderbutt_1" );
ADDRGP4 $1265
ARGP4
ADDRLP4 80
ADDRGP4 trap_R_RegisterShaderNoMip
CALLI4
ASGNI4
ADDRGP4 sliderButton_1
ADDRLP4 80
INDIRI4
ASGNI4
line 2894
;2894:}
LABELV $1233
endproc Menu_Cache 84 8
export MField_Draw
proc MField_Draw 1056 20
line 2908
;2895:
;2896://Copyright (C) 1999-2005 Id Software, Inc.
;2897://
;2898:#include "ui_local.h"
;2899:
;2900:/*
;2901:===================
;2902:MField_Draw
;2903:
;2904:Handles horizontal scrolling and cursor blinking
;2905:x, y, are in pixels
;2906:===================
;2907:*/
;2908:void MField_Draw( mfield_t *edit, int x, int y, int style, vec4_t color ) {
line 2916
;2909:	int		len;
;2910:	int		charw;
;2911:	int		drawLen;
;2912:	int		prestep;
;2913:	int		cursorChar;
;2914:	char	str[MAX_STRING_CHARS];
;2915:
;2916:	drawLen = edit->widthInChars;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 2917
;2917:	len     = strlen( edit->buffer ) + 1;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 1044
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 1044
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 2920
;2918:
;2919:	// guarantee that cursor will be visible
;2920:	if ( len <= drawLen ) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
GTI4 $1267
line 2921
;2921:		prestep = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 2922
;2922:	} else {
ADDRGP4 $1268
JUMPV
LABELV $1267
line 2923
;2923:		if ( edit->scroll + drawLen > len ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ADDRLP4 4
INDIRI4
LEI4 $1269
line 2924
;2924:			edit->scroll = len - drawLen;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
SUBI4
ASGNI4
line 2925
;2925:			if ( edit->scroll < 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 0
GEI4 $1271
line 2926
;2926:				edit->scroll = 0;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 2927
;2927:			}
LABELV $1271
line 2928
;2928:		}
LABELV $1269
line 2929
;2929:		prestep = edit->scroll;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 2930
;2930:	}
LABELV $1268
line 2932
;2931:
;2932:	if ( prestep + drawLen > len ) {
ADDRLP4 8
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ADDRLP4 4
INDIRI4
LEI4 $1273
line 2933
;2933:		drawLen = len - prestep;
ADDRLP4 0
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ASGNI4
line 2934
;2934:	}
LABELV $1273
line 2937
;2935:
;2936:	// extract <drawLen> characters from the field at <prestep>
;2937:	if ( drawLen >= MAX_STRING_CHARS ) {
ADDRLP4 0
INDIRI4
CNSTI4 1024
LTI4 $1275
line 2938
;2938:		trap_Error( "drawLen >= MAX_STRING_CHARS" );
ADDRGP4 $1277
ARGP4
ADDRGP4 trap_Error
CALLV
pop
line 2939
;2939:	}
LABELV $1275
line 2940
;2940:	memcpy( str, edit->buffer + prestep, drawLen );
ADDRLP4 12
ARGP4
ADDRLP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 2941
;2941:	str[ drawLen ] = 0;
ADDRLP4 0
INDIRI4
ADDRLP4 12
ADDP4
CNSTI1 0
ASGNI1
line 2943
;2942:
;2943:	UI_DrawString( x, y, str, style, color );
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 2946
;2944:
;2945:	// draw the cursor
;2946:	if (!(style & UI_PULSE)) {
ADDRFP4 12
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
NEI4 $1278
line 2947
;2947:		return;
ADDRGP4 $1266
JUMPV
LABELV $1278
line 2950
;2948:	}
;2949:
;2950:	if ( trap_Key_GetOverstrikeMode() ) {
ADDRLP4 1048
ADDRGP4 trap_Key_GetOverstrikeMode
CALLI4
ASGNI4
ADDRLP4 1048
INDIRI4
CNSTI4 0
EQI4 $1280
line 2951
;2951:		cursorChar = 11;
ADDRLP4 1040
CNSTI4 11
ASGNI4
line 2952
;2952:	} else {
ADDRGP4 $1281
JUMPV
LABELV $1280
line 2953
;2953:		cursorChar = 10;
ADDRLP4 1040
CNSTI4 10
ASGNI4
line 2954
;2954:	}
LABELV $1281
line 2956
;2955:
;2956:	style &= ~UI_PULSE;
ADDRFP4 12
ADDRFP4 12
INDIRI4
CNSTI4 -16385
BANDI4
ASGNI4
line 2957
;2957:	style |= UI_BLINK;
ADDRFP4 12
ADDRFP4 12
INDIRI4
CNSTI4 4096
BORI4
ASGNI4
line 2959
;2958:
;2959:	if (style & UI_SMALLFONT)
ADDRFP4 12
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1282
line 2960
;2960:	{
line 2961
;2961:		charw =	SMALLCHAR_WIDTH;
ADDRLP4 1036
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ASGNI4
line 2962
;2962:	}
ADDRGP4 $1283
JUMPV
LABELV $1282
line 2963
;2963:	else if (style & UI_GIANTFONT)
ADDRFP4 12
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $1285
line 2964
;2964:	{
line 2965
;2965:		charw =	GIANTCHAR_WIDTH;
ADDRLP4 1036
ADDRGP4 cl_giantcharwidth+12
INDIRI4
ASGNI4
line 2966
;2966:	}
ADDRGP4 $1286
JUMPV
LABELV $1285
line 2967
;2967:	else if (style & UI_TINYFONT)
ADDRFP4 12
INDIRI4
CNSTI4 131072
BANDI4
CNSTI4 0
EQI4 $1288
line 2968
;2968:	{
line 2969
;2969:		charw =	TINYCHAR_WIDTH;
ADDRLP4 1036
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CNSTI4 2
DIVI4
ASGNI4
line 2970
;2970:	}
ADDRGP4 $1289
JUMPV
LABELV $1288
line 2972
;2971:	else
;2972:	{
line 2973
;2973:		charw =	BIGCHAR_WIDTH;
ADDRLP4 1036
ADDRGP4 cl_bigcharwidth+12
INDIRI4
ASGNI4
line 2974
;2974:	}
LABELV $1289
LABELV $1286
LABELV $1283
line 2976
;2975:
;2976:	if (style & UI_CENTER)
ADDRFP4 12
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $1292
line 2977
;2977:	{
line 2978
;2978:		len = strlen(str);
ADDRLP4 12
ARGP4
ADDRLP4 1052
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 1052
INDIRI4
ASGNI4
line 2979
;2979:		x = x - len*charw/2;
ADDRFP4 4
ADDRFP4 4
INDIRI4
ADDRLP4 4
INDIRI4
ADDRLP4 1036
INDIRI4
MULI4
CNSTI4 2
DIVI4
SUBI4
ASGNI4
line 2980
;2980:	}
ADDRGP4 $1293
JUMPV
LABELV $1292
line 2981
;2981:	else if (style & UI_RIGHT)
ADDRFP4 12
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1294
line 2982
;2982:	{
line 2983
;2983:		len = strlen(str);
ADDRLP4 12
ARGP4
ADDRLP4 1052
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 1052
INDIRI4
ASGNI4
line 2984
;2984:		x = x - len*charw;
ADDRFP4 4
ADDRFP4 4
INDIRI4
ADDRLP4 4
INDIRI4
ADDRLP4 1036
INDIRI4
MULI4
SUBI4
ASGNI4
line 2985
;2985:	}
LABELV $1294
LABELV $1293
line 2987
;2986:	
;2987:	UI_DrawChar( x + ( edit->cursor - prestep ) * charw, y, cursorChar, style & ~(UI_CENTER|UI_RIGHT), color );
ADDRFP4 4
INDIRI4
ADDRFP4 0
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ADDRLP4 1036
INDIRI4
MULI4
ADDI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 1040
INDIRI4
ARGI4
ADDRFP4 12
INDIRI4
CNSTI4 -4
BANDI4
ARGI4
ADDRFP4 16
INDIRP4
ARGP4
ADDRGP4 UI_DrawChar
CALLV
pop
line 2988
;2988:}
LABELV $1266
endproc MField_Draw 1056 20
export MField_DrawCustom
proc MField_DrawCustom 1056 28
line 2998
;2989:
;2990:/*
;2991:===================
;2992:MField_DrawCustom
;2993:
;2994:Handles horizontal scrolling and cursor blinking
;2995:x, y, are in pixels
;2996:===================
;2997:*/
;2998:void MField_DrawCustom( mfield_t *edit, int x, int y, int style, vec4_t color, float csize ) {
line 3006
;2999:	int		len;
;3000:	int		charw;
;3001:	int		drawLen;
;3002:	int		prestep;
;3003:	int		cursorChar;
;3004:	char	str[MAX_STRING_CHARS];
;3005:
;3006:	drawLen = edit->widthInChars;
ADDRLP4 0
ADDRFP4 0
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ASGNI4
line 3007
;3007:	len     = strlen( edit->buffer ) + 1;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 1044
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 1044
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3010
;3008:
;3009:	// guarantee that cursor will be visible
;3010:	if ( len <= drawLen ) {
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
GTI4 $1297
line 3011
;3011:		prestep = 0;
ADDRLP4 8
CNSTI4 0
ASGNI4
line 3012
;3012:	} else {
ADDRGP4 $1298
JUMPV
LABELV $1297
line 3013
;3013:		if ( edit->scroll + drawLen > len ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ADDRLP4 4
INDIRI4
LEI4 $1299
line 3014
;3014:			edit->scroll = len - drawLen;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 4
INDIRI4
ADDRLP4 0
INDIRI4
SUBI4
ASGNI4
line 3015
;3015:			if ( edit->scroll < 0 ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 0
GEI4 $1301
line 3016
;3016:				edit->scroll = 0;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 3017
;3017:			}
LABELV $1301
line 3018
;3018:		}
LABELV $1299
line 3019
;3019:		prestep = edit->scroll;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ASGNI4
line 3020
;3020:	}
LABELV $1298
line 3022
;3021:
;3022:	if ( prestep + drawLen > len ) {
ADDRLP4 8
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ADDRLP4 4
INDIRI4
LEI4 $1303
line 3023
;3023:		drawLen = len - prestep;
ADDRLP4 0
ADDRLP4 4
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ASGNI4
line 3024
;3024:	}
LABELV $1303
line 3027
;3025:
;3026:	// extract <drawLen> characters from the field at <prestep>
;3027:	if ( drawLen >= MAX_STRING_CHARS ) {
ADDRLP4 0
INDIRI4
CNSTI4 1024
LTI4 $1305
line 3028
;3028:		trap_Error( "drawLen >= MAX_STRING_CHARS" );
ADDRGP4 $1277
ARGP4
ADDRGP4 trap_Error
CALLV
pop
line 3029
;3029:	}
LABELV $1305
line 3030
;3030:	memcpy( str, edit->buffer + prestep, drawLen );
ADDRLP4 12
ARGP4
ADDRLP4 8
INDIRI4
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 memcpy
CALLP4
pop
line 3031
;3031:	str[ drawLen ] = 0;
ADDRLP4 0
INDIRI4
ADDRLP4 12
ADDP4
CNSTI1 0
ASGNI1
line 3033
;3032:
;3033:	UI_DrawStringCustom( x, y, str, style, color, csize, 512 );
ADDRFP4 4
INDIRI4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 12
ARGP4
ADDRFP4 12
INDIRI4
ARGI4
ADDRFP4 16
INDIRP4
ARGP4
ADDRFP4 20
INDIRF4
ARGF4
CNSTF4 1140850688
ARGF4
ADDRGP4 UI_DrawStringCustom
CALLV
pop
line 3036
;3034:
;3035:	// draw the cursor
;3036:	if (!(style & UI_PULSE)) {
ADDRFP4 12
INDIRI4
CNSTI4 16384
BANDI4
CNSTI4 0
NEI4 $1307
line 3037
;3037:		return;
ADDRGP4 $1296
JUMPV
LABELV $1307
line 3040
;3038:	}
;3039:
;3040:	if ( trap_Key_GetOverstrikeMode() ) {
ADDRLP4 1048
ADDRGP4 trap_Key_GetOverstrikeMode
CALLI4
ASGNI4
ADDRLP4 1048
INDIRI4
CNSTI4 0
EQI4 $1309
line 3041
;3041:		cursorChar = 11;
ADDRLP4 1040
CNSTI4 11
ASGNI4
line 3042
;3042:	} else {
ADDRGP4 $1310
JUMPV
LABELV $1309
line 3043
;3043:		cursorChar = 10;
ADDRLP4 1040
CNSTI4 10
ASGNI4
line 3044
;3044:	}
LABELV $1310
line 3046
;3045:
;3046:	style &= ~UI_PULSE;
ADDRFP4 12
ADDRFP4 12
INDIRI4
CNSTI4 -16385
BANDI4
ASGNI4
line 3047
;3047:	style |= UI_BLINK;
ADDRFP4 12
ADDRFP4 12
INDIRI4
CNSTI4 4096
BORI4
ASGNI4
line 3049
;3048:
;3049:	if (style & UI_SMALLFONT)
ADDRFP4 12
INDIRI4
CNSTI4 16
BANDI4
CNSTI4 0
EQI4 $1311
line 3050
;3050:	{
line 3051
;3051:		charw =	SMALLCHAR_WIDTH;
ADDRLP4 1036
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ASGNI4
line 3052
;3052:	}
ADDRGP4 $1312
JUMPV
LABELV $1311
line 3053
;3053:	else if (style & UI_TINYFONT)
ADDRFP4 12
INDIRI4
CNSTI4 131072
BANDI4
CNSTI4 0
EQI4 $1314
line 3054
;3054:	{
line 3055
;3055:		charw =	TINYCHAR_WIDTH;
ADDRLP4 1036
ADDRGP4 cl_smallcharwidth+12
INDIRI4
CNSTI4 2
DIVI4
ASGNI4
line 3056
;3056:	}
ADDRGP4 $1315
JUMPV
LABELV $1314
line 3057
;3057:	else if (style & UI_GIANTFONT)
ADDRFP4 12
INDIRI4
CNSTI4 64
BANDI4
CNSTI4 0
EQI4 $1317
line 3058
;3058:	{
line 3059
;3059:		charw =	GIANTCHAR_WIDTH;
ADDRLP4 1036
ADDRGP4 cl_giantcharwidth+12
INDIRI4
ASGNI4
line 3060
;3060:	}
ADDRGP4 $1318
JUMPV
LABELV $1317
line 3062
;3061:	else
;3062:	{
line 3063
;3063:		charw =	BIGCHAR_WIDTH;
ADDRLP4 1036
ADDRGP4 cl_bigcharwidth+12
INDIRI4
ASGNI4
line 3064
;3064:	}
LABELV $1318
LABELV $1315
LABELV $1312
line 3066
;3065:
;3066:	if (style & UI_CENTER)
ADDRFP4 12
INDIRI4
CNSTI4 1
BANDI4
CNSTI4 0
EQI4 $1321
line 3067
;3067:	{
line 3068
;3068:		len = strlen(str);
ADDRLP4 12
ARGP4
ADDRLP4 1052
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 1052
INDIRI4
ASGNI4
line 3069
;3069:		x = x - len*charw/2;
ADDRFP4 4
ADDRFP4 4
INDIRI4
ADDRLP4 4
INDIRI4
ADDRLP4 1036
INDIRI4
MULI4
CNSTI4 2
DIVI4
SUBI4
ASGNI4
line 3070
;3070:	}
ADDRGP4 $1322
JUMPV
LABELV $1321
line 3071
;3071:	else if (style & UI_RIGHT)
ADDRFP4 12
INDIRI4
CNSTI4 2
BANDI4
CNSTI4 0
EQI4 $1323
line 3072
;3072:	{
line 3073
;3073:		len = strlen(str);
ADDRLP4 12
ARGP4
ADDRLP4 1052
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 1052
INDIRI4
ASGNI4
line 3074
;3074:		x = x - len*charw;
ADDRFP4 4
ADDRFP4 4
INDIRI4
ADDRLP4 4
INDIRI4
ADDRLP4 1036
INDIRI4
MULI4
SUBI4
ASGNI4
line 3075
;3075:	}
LABELV $1323
LABELV $1322
line 3077
;3076:	
;3077:	UI_DrawCharCustom( x + ( edit->cursor - prestep ) * charw*csize, y, cursorChar, style & ~(UI_CENTER|UI_RIGHT), color, csize );
ADDRLP4 1052
ADDRFP4 20
INDIRF4
ASGNF4
ADDRFP4 4
INDIRI4
CVIF4 4
ADDRFP4 0
INDIRP4
INDIRI4
ADDRLP4 8
INDIRI4
SUBI4
ADDRLP4 1036
INDIRI4
MULI4
CVIF4 4
ADDRLP4 1052
INDIRF4
MULF4
ADDF4
CVFI4 4
ARGI4
ADDRFP4 8
INDIRI4
ARGI4
ADDRLP4 1040
INDIRI4
ARGI4
ADDRFP4 12
INDIRI4
CNSTI4 -4
BANDI4
ARGI4
ADDRFP4 16
INDIRP4
ARGP4
ADDRLP4 1052
INDIRF4
ARGF4
ADDRGP4 UI_DrawCharCustom
CALLV
pop
line 3078
;3078:}
LABELV $1296
endproc MField_DrawCustom 1056 28
export MField_Paste
proc MField_Paste 76 8
line 3085
;3079:
;3080:/*
;3081:================
;3082:MField_Paste
;3083:================
;3084:*/
;3085:void MField_Paste( mfield_t *edit ) {
line 3089
;3086:	char	pasteBuffer[64];
;3087:	int		pasteLen, i;
;3088:
;3089:	trap_GetClipboardData( pasteBuffer, 64 );
ADDRLP4 4
ARGP4
CNSTI4 64
ARGI4
ADDRGP4 trap_GetClipboardData
CALLV
pop
line 3092
;3090:
;3091:	// send as if typed, so insert / overstrike works properly
;3092:	pasteLen = strlen( pasteBuffer );
ADDRLP4 4
ARGP4
ADDRLP4 72
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 68
ADDRLP4 72
INDIRI4
ASGNI4
line 3093
;3093:	for ( i = 0 ; i < pasteLen ; i++ ) {
ADDRLP4 0
CNSTI4 0
ASGNI4
ADDRGP4 $1329
JUMPV
LABELV $1326
line 3094
;3094:		MField_CharEvent( edit, pasteBuffer[i] );
ADDRFP4 0
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ADDRLP4 4
ADDP4
INDIRI1
CVII4 1
ARGI4
ADDRGP4 MField_CharEvent
CALLV
pop
line 3095
;3095:	}
LABELV $1327
line 3093
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1329
ADDRLP4 0
INDIRI4
ADDRLP4 68
INDIRI4
LTI4 $1326
line 3096
;3096:}
LABELV $1325
endproc MField_Paste 76 8
export MField_KeyDownEvent
proc MField_KeyDownEvent 64 12
line 3108
;3097:
;3098:/*
;3099:=================
;3100:MField_KeyDownEvent
;3101:
;3102:Performs the basic line editing functions for the console,
;3103:in-game talk, and menu fields
;3104:
;3105:Key events are used for non-printable characters, others are gotten from char events.
;3106:=================
;3107:*/
;3108:void MField_KeyDownEvent( mfield_t *edit, int key ) {
line 3112
;3109:	int		len;
;3110:
;3111:	// shift-insert is paste
;3112:	if ( ( ( key == K_INS ) || ( key == K_KP_INS ) ) && trap_Key_IsDown( K_SHIFT ) ) {
ADDRLP4 4
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 4
INDIRI4
CNSTI4 139
EQI4 $1333
ADDRLP4 4
INDIRI4
CNSTI4 170
NEI4 $1331
LABELV $1333
CNSTI4 138
ARGI4
ADDRLP4 8
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 8
INDIRI4
CNSTI4 0
EQI4 $1331
line 3113
;3113:		MField_Paste( edit );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 MField_Paste
CALLV
pop
line 3114
;3114:		return;
ADDRGP4 $1330
JUMPV
LABELV $1331
line 3117
;3115:	}
;3116:
;3117:	len = strlen( edit->buffer );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 12
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 12
INDIRI4
ASGNI4
line 3119
;3118:
;3119:	if ( key == K_DEL || key == K_KP_DEL ) {
ADDRLP4 16
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 16
INDIRI4
CNSTI4 140
EQI4 $1336
ADDRLP4 16
INDIRI4
CNSTI4 171
NEI4 $1334
LABELV $1336
line 3120
;3120:		if ( edit->cursor < len ) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
GEI4 $1330
line 3121
;3121:			memmove( edit->buffer + edit->cursor, 
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 20
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 28
ADDRLP4 24
INDIRI4
ADDRLP4 20
INDIRP4
CNSTI4 12
ADDP4
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ARGP4
ADDRLP4 28
INDIRP4
CNSTI4 1
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ADDRLP4 24
INDIRI4
SUBI4
ARGI4
ADDRGP4 memmove
CALLP4
pop
line 3123
;3122:				edit->buffer + edit->cursor + 1, len - edit->cursor );
;3123:		}
line 3124
;3124:		return;
ADDRGP4 $1330
JUMPV
LABELV $1334
line 3127
;3125:	}
;3126:
;3127:	if ( key == K_RIGHTARROW || key == K_KP_RIGHTARROW ) 
ADDRLP4 20
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 135
EQI4 $1341
ADDRLP4 20
INDIRI4
CNSTI4 165
NEI4 $1339
LABELV $1341
line 3128
;3128:	{
line 3129
;3129:		if ( edit->cursor < len ) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
GEI4 $1342
line 3130
;3130:			edit->cursor++;
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
ADDRLP4 24
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3131
;3131:		}
LABELV $1342
line 3132
;3132:		if ( edit->cursor >= edit->scroll + edit->widthInChars && edit->cursor <= len )
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
ADDI4
LTI4 $1330
ADDRLP4 28
INDIRI4
ADDRLP4 0
INDIRI4
GTI4 $1330
line 3133
;3133:		{
line 3134
;3134:			edit->scroll++;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3135
;3135:		}
line 3136
;3136:		return;
ADDRGP4 $1330
JUMPV
LABELV $1339
line 3139
;3137:	}
;3138:
;3139:	if ( key == K_LEFTARROW || key == K_KP_LEFTARROW ) 
ADDRLP4 24
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 134
EQI4 $1348
ADDRLP4 24
INDIRI4
CNSTI4 163
NEI4 $1346
LABELV $1348
line 3140
;3140:	{
line 3141
;3141:		if ( edit->cursor > 0 ) {
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
LEI4 $1349
line 3142
;3142:			edit->cursor--;
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 3143
;3143:		}
LABELV $1349
line 3144
;3144:		if ( edit->cursor < edit->scroll )
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
INDIRI4
ADDRLP4 28
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
GEI4 $1330
line 3145
;3145:		{
line 3146
;3146:			edit->scroll--;
ADDRLP4 32
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 32
INDIRP4
ADDRLP4 32
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 3147
;3147:		}
line 3148
;3148:		return;
ADDRGP4 $1330
JUMPV
LABELV $1346
line 3151
;3149:	}
;3150:
;3151:	if ( key == K_HOME || key == K_KP_HOME || ( tolower(key) == 'a' && trap_Key_IsDown( K_CTRL ) ) ) {
ADDRLP4 28
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 28
INDIRI4
CNSTI4 143
EQI4 $1356
ADDRLP4 28
INDIRI4
CNSTI4 160
EQI4 $1356
ADDRLP4 28
INDIRI4
ARGI4
ADDRLP4 32
ADDRGP4 tolower
CALLI4
ASGNI4
ADDRLP4 32
INDIRI4
CNSTI4 97
NEI4 $1353
CNSTI4 137
ARGI4
ADDRLP4 36
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 36
INDIRI4
CNSTI4 0
EQI4 $1353
LABELV $1356
line 3152
;3152:		edit->cursor = 0;
ADDRFP4 0
INDIRP4
CNSTI4 0
ASGNI4
line 3153
;3153:		edit->scroll = 0;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 3154
;3154:		return;
ADDRGP4 $1330
JUMPV
LABELV $1353
line 3157
;3155:	}
;3156:
;3157:	if ( key == K_END || key == K_KP_END || ( tolower(key) == 'e' && trap_Key_IsDown( K_CTRL ) ) ) {
ADDRLP4 40
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 40
INDIRI4
CNSTI4 144
EQI4 $1360
ADDRLP4 40
INDIRI4
CNSTI4 166
EQI4 $1360
ADDRLP4 40
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 tolower
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 101
NEI4 $1357
CNSTI4 137
ARGI4
ADDRLP4 48
ADDRGP4 trap_Key_IsDown
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $1357
LABELV $1360
line 3158
;3158:		edit->cursor = len;
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRI4
ASGNI4
line 3159
;3159:		edit->scroll = len - edit->widthInChars + 1;
ADDRLP4 52
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 52
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 0
INDIRI4
ADDRLP4 52
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
CNSTI4 1
ADDI4
ASGNI4
line 3160
;3160:		if (edit->scroll < 0)
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 0
GEI4 $1330
line 3161
;3161:			edit->scroll = 0;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 3162
;3162:		return;
ADDRGP4 $1330
JUMPV
LABELV $1357
line 3165
;3163:	}
;3164:
;3165:	if ( key == K_INS || key == K_KP_INS ) {
ADDRLP4 52
ADDRFP4 4
INDIRI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 139
EQI4 $1365
ADDRLP4 52
INDIRI4
CNSTI4 170
NEI4 $1363
LABELV $1365
line 3166
;3166:		trap_Key_SetOverstrikeMode( !trap_Key_GetOverstrikeMode() );
ADDRLP4 60
ADDRGP4 trap_Key_GetOverstrikeMode
CALLI4
ASGNI4
ADDRLP4 60
INDIRI4
CNSTI4 0
NEI4 $1367
ADDRLP4 56
CNSTI4 1
ASGNI4
ADDRGP4 $1368
JUMPV
LABELV $1367
ADDRLP4 56
CNSTI4 0
ASGNI4
LABELV $1368
ADDRLP4 56
INDIRI4
ARGI4
ADDRGP4 trap_Key_SetOverstrikeMode
CALLV
pop
line 3167
;3167:		return;
LABELV $1363
line 3169
;3168:	}
;3169:}
LABELV $1330
endproc MField_KeyDownEvent 64 12
export MField_CharEvent
proc MField_CharEvent 40 12
line 3176
;3170:
;3171:/*
;3172:==================
;3173:MField_CharEvent
;3174:==================
;3175:*/
;3176:void MField_CharEvent( mfield_t *edit, int ch ) {
line 3179
;3177:	int		len;
;3178:
;3179:	if ( ch == 'v' - 'a' + 1 ) {	// ctrl-v is paste
ADDRFP4 4
INDIRI4
CNSTI4 22
NEI4 $1370
line 3180
;3180:		MField_Paste( edit );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 MField_Paste
CALLV
pop
line 3181
;3181:		return;
ADDRGP4 $1369
JUMPV
LABELV $1370
line 3184
;3182:	}
;3183:
;3184:	if ( ch == 'c' - 'a' + 1 ) {	// ctrl-c clears the field
ADDRFP4 4
INDIRI4
CNSTI4 3
NEI4 $1372
line 3185
;3185:		MField_Clear( edit );
ADDRFP4 0
INDIRP4
ARGP4
ADDRGP4 MField_Clear
CALLV
pop
line 3186
;3186:		return;
ADDRGP4 $1369
JUMPV
LABELV $1372
line 3189
;3187:	}
;3188:
;3189:	len = strlen( edit->buffer );
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
ARGP4
ADDRLP4 4
ADDRGP4 strlen
CALLI4
ASGNI4
ADDRLP4 0
ADDRLP4 4
INDIRI4
ASGNI4
line 3191
;3190:
;3191:	if ( ch == 'h' - 'a' + 1 )	{	// ctrl-h is backspace
ADDRFP4 4
INDIRI4
CNSTI4 8
NEI4 $1374
line 3192
;3192:		if ( edit->cursor > 0 ) {
ADDRFP4 0
INDIRP4
INDIRI4
CNSTI4 0
LEI4 $1369
line 3193
;3193:			memmove( edit->buffer + edit->cursor - 1, 
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
ADDRLP4 8
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 16
ADDRLP4 12
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 12
ADDP4
ADDP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 -1
ADDP4
ARGP4
ADDRLP4 16
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
ADDRLP4 12
INDIRI4
SUBI4
ARGI4
ADDRGP4 memmove
CALLP4
pop
line 3195
;3194:				edit->buffer + edit->cursor, len + 1 - edit->cursor );
;3195:			edit->cursor--;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
ADDRLP4 20
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 3196
;3196:			if ( edit->cursor < edit->scroll )
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
INDIRP4
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
GEI4 $1369
line 3197
;3197:			{
line 3198
;3198:				edit->scroll--;
ADDRLP4 28
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
SUBI4
ASGNI4
line 3199
;3199:			}
line 3200
;3200:		}
line 3201
;3201:		return;
ADDRGP4 $1369
JUMPV
LABELV $1374
line 3204
;3202:	}
;3203:
;3204:	if ( ch == 'a' - 'a' + 1 ) {	// ctrl-a is home
ADDRFP4 4
INDIRI4
CNSTI4 1
NEI4 $1380
line 3205
;3205:		edit->cursor = 0;
ADDRFP4 0
INDIRP4
CNSTI4 0
ASGNI4
line 3206
;3206:		edit->scroll = 0;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 3207
;3207:		return;
ADDRGP4 $1369
JUMPV
LABELV $1380
line 3210
;3208:	}
;3209:
;3210:	if ( ch == 'e' - 'a' + 1 ) {	// ctrl-e is end
ADDRFP4 4
INDIRI4
CNSTI4 5
NEI4 $1382
line 3211
;3211:		edit->cursor = len;
ADDRFP4 0
INDIRP4
ADDRLP4 0
INDIRI4
ASGNI4
line 3212
;3212:		edit->scroll = edit->cursor - edit->widthInChars + 1;
ADDRLP4 8
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 8
INDIRP4
CNSTI4 4
ADDP4
ADDRLP4 8
INDIRP4
INDIRI4
ADDRLP4 8
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
SUBI4
CNSTI4 1
ADDI4
ASGNI4
line 3213
;3213:		if (edit->scroll < 0)
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRI4
CNSTI4 0
GEI4 $1369
line 3214
;3214:			edit->scroll = 0;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 3215
;3215:		return;
ADDRGP4 $1369
JUMPV
LABELV $1382
line 3221
;3216:	}
;3217:
;3218:	//
;3219:	// ignore any other non printable chars
;3220:	//
;3221:	if ( ch == -48 ) {
ADDRFP4 4
INDIRI4
CNSTI4 -48
NEI4 $1386
line 3222
;3222:		return;
ADDRGP4 $1369
JUMPV
LABELV $1386
line 3225
;3223:	}
;3224:	
;3225:	if(trap_Cvar_VariableValue("cl_rusinput")){
ADDRGP4 $1390
ARGP4
ADDRLP4 8
ADDRGP4 trap_Cvar_VariableValue
CALLF4
ASGNF4
ADDRLP4 8
INDIRF4
CNSTF4 0
EQF4 $1388
line 3226
;3226:	ch -= 128;
ADDRFP4 4
ADDRFP4 4
INDIRI4
CNSTI4 128
SUBI4
ASGNI4
line 3227
;3227:	}
LABELV $1388
line 3229
;3228:
;3229:	if ( !trap_Key_GetOverstrikeMode() ) {	
ADDRLP4 12
ADDRGP4 trap_Key_GetOverstrikeMode
CALLI4
ASGNI4
ADDRLP4 12
INDIRI4
CNSTI4 0
NEI4 $1391
line 3230
;3230:		if ((edit->cursor == MAX_EDIT_LINE - 1) || (edit->maxchars && edit->cursor >= edit->maxchars))
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
ADDRLP4 16
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 255
EQI4 $1395
ADDRLP4 24
ADDRLP4 16
INDIRP4
CNSTI4 268
ADDP4
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
EQI4 $1392
ADDRLP4 20
INDIRI4
ADDRLP4 24
INDIRI4
LTI4 $1392
LABELV $1395
line 3231
;3231:			return;
ADDRGP4 $1369
JUMPV
line 3232
;3232:	} else {
LABELV $1391
line 3234
;3233:		// insert mode
;3234:		if (( len == MAX_EDIT_LINE - 1 ) || (edit->maxchars && len >= edit->maxchars))
ADDRLP4 0
INDIRI4
CNSTI4 255
EQI4 $1398
ADDRLP4 20
ADDRFP4 0
INDIRP4
CNSTI4 268
ADDP4
INDIRI4
ASGNI4
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $1396
ADDRLP4 0
INDIRI4
ADDRLP4 20
INDIRI4
LTI4 $1396
LABELV $1398
line 3235
;3235:			return;
ADDRGP4 $1369
JUMPV
LABELV $1396
line 3236
;3236:		memmove( edit->buffer + edit->cursor + 1, edit->buffer + edit->cursor, len + 1 - edit->cursor );
ADDRLP4 24
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
ADDRLP4 24
INDIRP4
INDIRI4
ASGNI4
ADDRLP4 32
ADDRLP4 28
INDIRI4
ADDRLP4 24
INDIRP4
CNSTI4 12
ADDP4
ADDP4
ASGNP4
ADDRLP4 36
CNSTI4 1
ASGNI4
ADDRLP4 32
INDIRP4
ADDRLP4 36
INDIRI4
ADDP4
ARGP4
ADDRLP4 32
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
ADDRLP4 36
INDIRI4
ADDI4
ADDRLP4 28
INDIRI4
SUBI4
ARGI4
ADDRGP4 memmove
CALLP4
pop
line 3237
;3237:	}
LABELV $1392
line 3239
;3238:
;3239:	edit->buffer[edit->cursor] = ch;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
INDIRI4
ADDRLP4 16
INDIRP4
CNSTI4 12
ADDP4
ADDP4
ADDRFP4 4
INDIRI4
CVII1 4
ASGNI1
line 3240
;3240:	if (!edit->maxchars || edit->cursor < edit->maxchars-1)
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 24
ADDRLP4 20
INDIRP4
CNSTI4 268
ADDP4
INDIRI4
ASGNI4
ADDRLP4 24
INDIRI4
CNSTI4 0
EQI4 $1401
ADDRLP4 20
INDIRP4
INDIRI4
ADDRLP4 24
INDIRI4
CNSTI4 1
SUBI4
GEI4 $1399
LABELV $1401
line 3241
;3241:		edit->cursor++;
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
ADDRLP4 28
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
LABELV $1399
line 3243
;3242:
;3243:	if ( edit->cursor >= edit->widthInChars )
ADDRLP4 32
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 32
INDIRP4
INDIRI4
ADDRLP4 32
INDIRP4
CNSTI4 8
ADDP4
INDIRI4
LTI4 $1402
line 3244
;3244:	{
line 3245
;3245:		edit->scroll++;
ADDRLP4 36
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
ASGNP4
ADDRLP4 36
INDIRP4
ADDRLP4 36
INDIRP4
INDIRI4
CNSTI4 1
ADDI4
ASGNI4
line 3246
;3246:	}
LABELV $1402
line 3248
;3247:
;3248:	if ( edit->cursor == len + 1) {
ADDRFP4 0
INDIRP4
INDIRI4
ADDRLP4 0
INDIRI4
CNSTI4 1
ADDI4
NEI4 $1404
line 3249
;3249:		edit->buffer[edit->cursor] = 0;
ADDRLP4 36
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 36
INDIRP4
INDIRI4
ADDRLP4 36
INDIRP4
CNSTI4 12
ADDP4
ADDP4
CNSTI1 0
ASGNI1
line 3250
;3250:	}
LABELV $1404
line 3251
;3251:}
LABELV $1369
endproc MField_CharEvent 40 12
export MField_Clear
proc MField_Clear 0 0
line 3258
;3252:
;3253:/*
;3254:==================
;3255:MField_Clear
;3256:==================
;3257:*/
;3258:void MField_Clear( mfield_t *edit ) {
line 3259
;3259:	edit->buffer[0] = 0;
ADDRFP4 0
INDIRP4
CNSTI4 12
ADDP4
CNSTI1 0
ASGNI1
line 3260
;3260:	edit->cursor = 0;
ADDRFP4 0
INDIRP4
CNSTI4 0
ASGNI4
line 3261
;3261:	edit->scroll = 0;
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
CNSTI4 0
ASGNI4
line 3262
;3262:}
LABELV $1406
endproc MField_Clear 0 0
export MenuField_Init
proc MenuField_Init 32 4
line 3269
;3263:
;3264:/*
;3265:==================
;3266:MenuField_Init
;3267:==================
;3268:*/
;3269:void MenuField_Init( menufield_s* m ) {
line 3274
;3270:	int	l;
;3271:	int	w;
;3272:	int	h;
;3273:
;3274:	MField_Clear( &m->field );
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
ARGP4
ADDRGP4 MField_Clear
CALLV
pop
line 3276
;3275:
;3276:	if (m->generic.flags & QMF_SMALLFONT)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 2
BANDU4
CNSTU4 0
EQU4 $1408
line 3277
;3277:	{
line 3278
;3278:		w = SMALLCHAR_WIDTH;
ADDRLP4 0
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ASGNI4
line 3279
;3279:		h = SMALLCHAR_HEIGHT;
ADDRLP4 8
ADDRGP4 cl_smallcharheight+12
INDIRI4
ASGNI4
line 3280
;3280:	}
ADDRGP4 $1409
JUMPV
LABELV $1408
line 3282
;3281:	else
;3282:	{
line 3283
;3283:		w = BIGCHAR_WIDTH;
ADDRLP4 0
ADDRGP4 cl_bigcharwidth+12
INDIRI4
ASGNI4
line 3284
;3284:		h = BIGCHAR_HEIGHT;
ADDRLP4 8
ADDRGP4 cl_bigcharheight+12
INDIRI4
ASGNI4
line 3285
;3285:	}	
LABELV $1409
line 3287
;3286:
;3287:	if (m->generic.name) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1414
line 3288
;3288:		l = (strlenru( m->generic.name )+1) * w;		
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
ADDRLP4 12
ADDRGP4 strlenru
CALLI4
ASGNI4
ADDRLP4 4
ADDRLP4 12
INDIRI4
CNSTI4 1
ADDI4
ADDRLP4 0
INDIRI4
MULI4
ASGNI4
line 3289
;3289:	}
ADDRGP4 $1415
JUMPV
LABELV $1414
line 3290
;3290:	else {
line 3291
;3291:		l = 0;
ADDRLP4 4
CNSTI4 0
ASGNI4
line 3292
;3292:	}
LABELV $1415
line 3294
;3293:
;3294:	m->generic.left   = m->generic.x - l;
ADDRLP4 12
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 12
INDIRP4
CNSTI4 44
ADDP4
ADDRLP4 12
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ADDRLP4 4
INDIRI4
SUBI4
ASGNI4
line 3295
;3295:	m->generic.top    = m->generic.y;
ADDRLP4 16
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 16
INDIRP4
CNSTI4 48
ADDP4
ADDRLP4 16
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 3296
;3296:	m->generic.right  = m->generic.x + w + m->field.widthInChars*w;
ADDRLP4 20
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 20
INDIRP4
CNSTI4 52
ADDP4
ADDRLP4 20
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
ADDI4
ADDRLP4 20
INDIRP4
CNSTI4 96
ADDP4
INDIRI4
ADDRLP4 0
INDIRI4
MULI4
ADDI4
ASGNI4
line 3297
;3297:	m->generic.bottom = m->generic.y + h;
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 56
ADDP4
ADDRLP4 28
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ADDRLP4 8
INDIRI4
ADDI4
ASGNI4
line 3298
;3298:}
LABELV $1407
endproc MenuField_Init 32 4
export MenuField_Draw
proc MenuField_Draw 36 20
line 3306
;3299:
;3300:/*
;3301:==================
;3302:MenuField_Draw
;3303:==================
;3304:*/
;3305:void MenuField_Draw( menufield_s *f )
;3306:{
line 3315
;3307:	int		x;
;3308:	int		y;
;3309:	int		w;
;3310:	int		h;
;3311:	int		style;
;3312:	qboolean focus;
;3313:	float	*color;
;3314:
;3315:	x =	f->generic.x;
ADDRLP4 4
ADDRFP4 0
INDIRP4
CNSTI4 28
ADDP4
INDIRI4
ASGNI4
line 3316
;3316:	y =	f->generic.y;
ADDRLP4 8
ADDRFP4 0
INDIRP4
CNSTI4 32
ADDP4
INDIRI4
ASGNI4
line 3318
;3317:
;3318:	if (f->generic.flags & QMF_SMALLFONT)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 2
BANDU4
CNSTU4 0
EQU4 $1417
line 3319
;3319:	{
line 3320
;3320:		w = SMALLCHAR_WIDTH;
ADDRLP4 16
ADDRGP4 cl_smallcharwidth+12
INDIRI4
ASGNI4
line 3321
;3321:		h = SMALLCHAR_HEIGHT;
ADDRLP4 24
ADDRGP4 cl_smallcharheight+12
INDIRI4
ASGNI4
line 3322
;3322:		style = UI_SMALLFONT;
ADDRLP4 0
CNSTI4 16
ASGNI4
line 3323
;3323:	}
ADDRGP4 $1418
JUMPV
LABELV $1417
line 3325
;3324:	else
;3325:	{
line 3326
;3326:		w = BIGCHAR_WIDTH;
ADDRLP4 16
ADDRGP4 cl_bigcharwidth+12
INDIRI4
ASGNI4
line 3327
;3327:		h = BIGCHAR_HEIGHT;
ADDRLP4 24
ADDRGP4 cl_bigcharheight+12
INDIRI4
ASGNI4
line 3328
;3328:		style = UI_BIGFONT;
ADDRLP4 0
CNSTI4 32
ASGNI4
line 3329
;3329:	}	
LABELV $1418
line 3331
;3330:
;3331:	if (Menu_ItemAtCursor( f->generic.parent ) == f) {
ADDRLP4 28
ADDRFP4 0
INDIRP4
ASGNP4
ADDRLP4 28
INDIRP4
CNSTI4 64
ADDP4
INDIRP4
ARGP4
ADDRLP4 32
ADDRGP4 Menu_ItemAtCursor
CALLP4
ASGNP4
ADDRLP4 28
INDIRP4
CVPU4 4
ADDRLP4 32
INDIRP4
CVPU4 4
NEU4 $1423
line 3332
;3332:		focus = qtrue;
ADDRLP4 20
CNSTI4 1
ASGNI4
line 3333
;3333:		style |= UI_PULSE;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 16384
BORI4
ASGNI4
line 3334
;3334:	}
ADDRGP4 $1424
JUMPV
LABELV $1423
line 3335
;3335:	else {
line 3336
;3336:		focus = qfalse;
ADDRLP4 20
CNSTI4 0
ASGNI4
line 3337
;3337:	}
LABELV $1424
line 3339
;3338:
;3339:	if (f->generic.flags & QMF_GRAYED)
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 8192
BANDU4
CNSTU4 0
EQU4 $1425
line 3340
;3340:		color = text_color_disabled;
ADDRLP4 12
ADDRGP4 text_color_disabled
ASGNP4
ADDRGP4 $1426
JUMPV
LABELV $1425
line 3341
;3341:	else if (focus)
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $1427
line 3342
;3342:		color = text_color_highlight;
ADDRLP4 12
ADDRGP4 text_color_highlight
ASGNP4
ADDRGP4 $1428
JUMPV
LABELV $1427
line 3344
;3343:	else
;3344:		if(!f->color){
ADDRFP4 0
INDIRP4
CNSTI4 360
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
NEU4 $1429
line 3345
;3345:		color = text_color_normal;
ADDRLP4 12
ADDRGP4 text_color_normal
ASGNP4
line 3346
;3346:		} else {
ADDRGP4 $1430
JUMPV
LABELV $1429
line 3347
;3347:		color = f->color;
ADDRLP4 12
ADDRFP4 0
INDIRP4
CNSTI4 360
ADDP4
INDIRP4
ASGNP4
line 3348
;3348:		}
LABELV $1430
LABELV $1428
LABELV $1426
line 3350
;3349:
;3350:	if ( focus )
ADDRLP4 20
INDIRI4
CNSTI4 0
EQI4 $1431
line 3351
;3351:	{
line 3354
;3352:		// draw cursor
;3353:		//UI_FillRect( f->generic.left, f->generic.top, f->generic.right-f->generic.left+1, f->generic.bottom-f->generic.top+1, listbar_color ); 
;3354:		UI_DrawChar( x, y, 13, UI_CENTER|UI_BLINK|style, color);
ADDRLP4 4
INDIRI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
CNSTI4 13
ARGI4
ADDRLP4 0
INDIRI4
CNSTI4 4097
BORI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 UI_DrawChar
CALLV
pop
line 3355
;3355:	}
LABELV $1431
line 3357
;3356:
;3357:	if ( f->generic.name ) {
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
CVPU4 4
CNSTU4 0
EQU4 $1433
line 3358
;3358:		UI_DrawString( x - w, y, f->generic.name, style|UI_RIGHT, color );
ADDRLP4 4
INDIRI4
ADDRLP4 16
INDIRI4
SUBI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRFP4 0
INDIRP4
CNSTI4 4
ADDP4
INDIRP4
ARGP4
ADDRLP4 0
INDIRI4
CNSTI4 2
BORI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 UI_DrawString
CALLV
pop
line 3359
;3359:	}
LABELV $1433
line 3361
;3360:
;3361:	MField_Draw( &f->field, x + w, y, style, color );
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
ARGP4
ADDRLP4 4
INDIRI4
ADDRLP4 16
INDIRI4
ADDI4
ARGI4
ADDRLP4 8
INDIRI4
ARGI4
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 12
INDIRP4
ARGP4
ADDRGP4 MField_Draw
CALLV
pop
line 3362
;3362:}
LABELV $1416
endproc MenuField_Draw 36 20
data
align 4
LABELV $1436
byte 4 0
export MenuField_Key
code
proc MenuField_Key 56 8
line 3370
;3363:
;3364:/*
;3365:==================
;3366:MenuField_Key
;3367:==================
;3368:*/
;3369:sfxHandle_t MenuField_Key( menufield_s* m, int* key )
;3370:{
line 3374
;3371:	int keycode;
;3372:	static int lastKeypress = 0;
;3373:
;3374:	keycode = *key;
ADDRLP4 0
ADDRFP4 4
INDIRP4
INDIRI4
ASGNI4
line 3376
;3375:
;3376:	switch ( keycode )
ADDRLP4 8
CNSTI4 154
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
EQI4 $1441
ADDRLP4 0
INDIRI4
ADDRLP4 8
INDIRI4
GTI4 $1452
LABELV $1451
ADDRLP4 16
CNSTI4 13
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
EQI4 $1438
ADDRLP4 0
INDIRI4
ADDRLP4 16
INDIRI4
GTI4 $1454
LABELV $1453
ADDRLP4 0
INDIRI4
CNSTI4 9
EQI4 $1438
ADDRGP4 $1437
JUMPV
LABELV $1454
ADDRLP4 0
INDIRI4
CNSTI4 132
EQI4 $1438
ADDRLP4 0
INDIRI4
CNSTI4 133
EQI4 $1438
ADDRGP4 $1437
JUMPV
LABELV $1452
ADDRLP4 0
INDIRI4
CNSTI4 167
EQI4 $1438
ADDRLP4 28
CNSTI4 169
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 28
INDIRI4
EQI4 $1438
ADDRLP4 0
INDIRI4
ADDRLP4 28
INDIRI4
GTI4 $1456
LABELV $1455
ADDRLP4 0
INDIRI4
CNSTI4 161
EQI4 $1438
ADDRGP4 $1437
JUMPV
LABELV $1456
ADDRLP4 36
CNSTI4 178
ASGNI4
ADDRLP4 0
INDIRI4
ADDRLP4 36
INDIRI4
EQI4 $1438
ADDRLP4 0
INDIRI4
ADDRLP4 36
INDIRI4
LTI4 $1437
LABELV $1457
ADDRLP4 0
INDIRI4
CNSTI4 185
LTI4 $1437
ADDRLP4 0
INDIRI4
CNSTI4 188
GTI4 $1437
ADDRLP4 0
INDIRI4
CNSTI4 2
LSHI4
ADDRGP4 $1458-740
ADDP4
INDIRP4
JUMPV
lit
align 4
LABELV $1458
address $1440
address $1440
address $1440
address $1440
code
line 3377
;3377:	{
line 3381
;3378:		case K_KP_ENTER:
;3379:		case K_ENTER:
;3380:		case K_MOUSE1:
;3381:			break;
LABELV $1440
line 3387
;3382:		case K_JOY1:
;3383:		case K_JOY2:
;3384:		case K_JOY3:
;3385:		case K_JOY4:
;3386:			// have enter go to next cursor point
;3387:			*key = K_TAB;
ADDRFP4 4
INDIRP4
CNSTI4 9
ASGNI4
line 3388
;3388:			break;
ADDRGP4 $1438
JUMPV
LABELV $1441
line 3391
;3389:
;3390:		case K_F10:
;3391:			trap_Cmd_ExecuteText( EXEC_NOW, "toggle cl_rusinput\n");
CNSTI4 0
ARGI4
ADDRGP4 $1200
ARGP4
ADDRGP4 trap_Cmd_ExecuteText
CALLV
pop
line 3392
;3392:			break;
ADDRGP4 $1438
JUMPV
line 3398
;3393:		case K_TAB:
;3394:		case K_KP_DOWNARROW:
;3395:		case K_DOWNARROW:
;3396:		case K_KP_UPARROW:
;3397:		case K_UPARROW:
;3398:			break;
LABELV $1437
line 3401
;3399:
;3400:		default:
;3401:			if ( keycode & K_CHAR_FLAG )
ADDRLP4 0
INDIRI4
CNSTI4 1024
BANDI4
CNSTI4 0
EQI4 $1443
line 3402
;3402:			{
line 3403
;3403:				keycode &= ~K_CHAR_FLAG;
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 -1025
BANDI4
ASGNI4
line 3405
;3404:
;3405:				if ((m->generic.flags & QMF_UPPERCASE) && Q_islower( keycode ))
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 524288
BANDU4
CNSTU4 0
EQU4 $1445
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 44
ADDRGP4 Q_islower
CALLI4
ASGNI4
ADDRLP4 44
INDIRI4
CNSTI4 0
EQI4 $1445
line 3406
;3406:					keycode -= 'a' - 'A';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 32
SUBI4
ASGNI4
ADDRGP4 $1446
JUMPV
LABELV $1445
line 3407
;3407:				else if ((m->generic.flags & QMF_LOWERCASE) && Q_isupper( keycode ))
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 262144
BANDU4
CNSTU4 0
EQU4 $1447
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 48
ADDRGP4 Q_isupper
CALLI4
ASGNI4
ADDRLP4 48
INDIRI4
CNSTI4 0
EQI4 $1447
line 3408
;3408:					keycode -= 'A' - 'a';
ADDRLP4 0
ADDRLP4 0
INDIRI4
CNSTI4 -32
SUBI4
ASGNI4
ADDRGP4 $1448
JUMPV
LABELV $1447
line 3409
;3409:				else if ((m->generic.flags & QMF_NUMBERSONLY) && Q_isalpha( keycode ))
ADDRFP4 0
INDIRP4
CNSTI4 72
ADDP4
INDIRU4
CNSTU4 32
BANDU4
CNSTU4 0
EQU4 $1449
ADDRLP4 0
INDIRI4
ARGI4
ADDRLP4 52
ADDRGP4 Q_isalpha
CALLI4
ASGNI4
ADDRLP4 52
INDIRI4
CNSTI4 0
EQI4 $1449
line 3410
;3410:					return (menu_buzz_sound);
ADDRGP4 menu_buzz_sound
INDIRI4
RETI4
ADDRGP4 $1435
JUMPV
LABELV $1449
LABELV $1448
LABELV $1446
line 3412
;3411:
;3412:				MField_CharEvent( &m->field, keycode);
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 MField_CharEvent
CALLV
pop
line 3413
;3413:			}
ADDRGP4 $1438
JUMPV
LABELV $1443
line 3415
;3414:			else
;3415:				MField_KeyDownEvent( &m->field, keycode );
ADDRFP4 0
INDIRP4
CNSTI4 88
ADDP4
ARGP4
ADDRLP4 0
INDIRI4
ARGI4
ADDRGP4 MField_KeyDownEvent
CALLV
pop
line 3416
;3416:			break;
LABELV $1438
line 3418
;3417:	}
;3418:	lastKeypress = uis.realtime;
ADDRGP4 $1436
ADDRGP4 uis+4
INDIRI4
ASGNI4
line 3420
;3419:
;3420:	return (0);
CNSTI4 0
RETI4
LABELV $1435
endproc MenuField_Key 56 8
import UI_DrawHandlePicFile
import UI_DrawHandleModel
bss
align 4
LABELV sliderButton_1
skip 4
align 4
LABELV sliderButton_0
skip 4
align 4
LABELV sliderBar
skip 4
import UI_MapCallVote
import UI_saveMapEdMenu
import UI_saveMapEdMenu_Cache
import UI_loadMapEdMenu
import UI_loadMapEd_Cache
import UI_SPKickDupe_f
import UI_RankStatusMenu
import RankStatus_Cache
import UI_SignupMenu
import Signup_Cache
import UI_LoginMenu
import Login_Cache
import UI_RankingsMenu
import Rankings_Cache
import Rankings_DrawPassword
import Rankings_DrawName
import Rankings_DrawText
import UI_InitGameinfo
import UI_SPUnlockMedals_f
import UI_SPUnlock_f
import UI_GetAwardLevel
import UI_LogAwardData
import UI_NewGame
import UI_GetCurrentGame
import UI_CanShowTierVideo
import UI_ShowTierVideo
import UI_TierCompleted
import UI_SetBestScore
import UI_GetBestScore
import UI_GetNumBots
import UI_GetBotNumByName
import UI_GetBotInfoByName
import UI_GetBotInfoByNumber
import UI_GetNumSPTiers
import UI_GetNumSPArenas
import UI_GetNumArenas
import UI_GetSpecialArenaInfo
import UI_GetArenaInfoByMap
import UI_GetArenaInfoByNumber
import UI_SetDefaultCvar
import UI_UpdateCvars
import UI_RegisterCvars
import MainMenu_ReloadGame
import UI_MainMenu
import MainMenu_Cache
import color_translucent
import UI_NetworkOptionsMenu
import UI_NetworkOptionsMenu_Cache
import UI_SoundOptionsMenu
import UI_SoundOptionsMenu_Cache
import UI_DisplayOptionsMenu
import UI_DisplayOptionsMenu_Cache
import UI_ConfigMenu
import UI_SaveConfigMenu
import UI_LoadConfigMenu
import UI_LoadConfig_Cache
import LoadConfig_SetStatusText
import UI_TeamOrdersMenu_Cache
import UI_TeamOrdersMenu_f
import UI_TeamOrdersMenu
import UI_RemoveBotsMenu
import UI_RemoveBots_Cache
import UI_AddBotsMenu
import UI_AddBots_Cache
import trap_SetPbClStatus
import trap_RealTime
import trap_VerifyCDKey
import trap_SetCDKey
import trap_GetCDKey
import trap_MemoryRemaining
import trap_LAN_GetPingInfo
import trap_LAN_GetPing
import trap_LAN_ClearPing
import trap_LAN_ServerStatus
import trap_LAN_GetPingQueueCount
import trap_LAN_GetServerInfo
import trap_LAN_GetServerAddressString
import trap_LAN_GetServerCount
import trap_GetConfigString
import trap_GetGlconfig
import trap_GetClientState
import trap_GetClipboardData
import trap_Key_SetCatcher
import trap_Key_GetCatcher
import trap_Key_ClearStates
import trap_Key_SetOverstrikeMode
import trap_Key_GetOverstrikeMode
import trap_Key_IsDown
import trap_Key_SetBinding
import trap_Key_GetBindingBuf
import trap_Key_KeynumToStringBuf
import trap_S_RegisterSound
import trap_S_StartLocalSound
import trap_CM_LerpTag
import trap_UpdateScreen
import trap_R_DrawStretchPic
import trap_R_SetColor
import trap_R_RenderScene
import trap_R_AddLightToScene
import trap_R_AddPolyToScene
import trap_R_AddRefEntityToScene
import trap_R_ClearScene
import trap_R_RegisterShaderNoMip
import trap_R_RegisterSkin
import trap_R_RegisterModel
import trap_FS_Seek
import trap_FS_GetFileList
import trap_FS_FCloseFile
import trap_FS_Write
import trap_FS_Read
import trap_FS_FOpenFile
import trap_Cmd_ExecuteText
import trap_Argv
import trap_Argc
import trap_Cvar_InfoStringBuffer
import trap_Cvar_Create
import trap_Cvar_Reset
import trap_Cvar_SetValue
import trap_Cvar_VariableStringBuffer
import trap_Cvar_VariableValue
import trap_Cvar_Set
import trap_Cvar_Update
import trap_Cvar_Register
import trap_Milliseconds
import trap_Error
import trap_Print
import UI_SPSkillMenu_Cache
import UI_SPSkillMenu
import UI_SPPostgameMenu_f
import UI_SPPostgameMenu_Cache
import UI_SPArena_Start
import UI_SPLevelMenu_ReInit
import UI_SPLevelMenu_f
import UI_SPLevelMenu
import UI_SPLevelMenu_Cache
import UIE_AwardIcons_DrawValues
import UIE_AwardIcons_PlaySound
import UIE_AwardIcons_InitControls
import UIE_AwardIcons_Cache
import uis
import m_entersound
import UI_StartDemoLoop
import UI_Cvar_VariableString
import UI_Argv
import UI_ForceMenuOff
import UI_PopMenu
import UI_PushMenu
import UI_SetActiveMenu
import UI_IsFullscreen
import UI_DrawTextBox
import UI_AdjustFrom640
import UI_CursorInRect
import UI_DrawCharCustom
import UI_DrawChar
import UI_DrawStringCustom
import UI_DrawString
import UI_ProportionalStringWidth
import UI_DrawProportionalString_AutoWrapped
import UI_DrawProportionalString
import UI_DrawScaledProportionalString
import UI_ProportionalSizeScale
import UI_DrawBannerString
import UI_LerpColor
import UI_SetColor
import UI_UpdateScreen
import UI_DrawRect
import UI_FillRect
import UI_DrawRoundedRect
import vycalc
import vxcalc
import vy
import vx
import UI_DrawHandlePic
import UI_DrawNamedPic
import UI_ClampCvar
import UI_ConsoleCommand
import UI_Refresh
import UI_MouseEvent
import UI_KeyEvent
import UI_Shutdown
import UI_Init
import UIE_PlayerInfo_InitRotateModel
import PlayerInfo_ModelSpinEvent
import UIE_PlayerInfo_IsTeamModel
import UIE_PlayerInfo_DrawTeamModel
import UIE_ModelSkin
import UIE_ModelName
import UIE_PlayerInfo_AnimateModel
import UIE_PlayerInfo_InitModel
import UIE_PlayerInfo_ChangeAnimation
import UIE_PlayerInfo_ChangeTimedAnimation
import DriverInfo_Cache
import GraphicsOptions_Cache
import UI_GraphicsOptionsMenu
import ServerInfo_Cache
import UI_ServerInfoMenu
import UIE_DefaultIconFromGameType
import UIE_StartServer_RegisterDisableCvars
import UIE_InGame_EnabledItems
import UI_ServerPlayerIcon
import Clamp_Random
import UI_BotSelect_Cache
import UI_BotSelect
import ServerOptions_Cache
import StartServer_Cache
import UI_StartServerMenu
import ArenaServers_Cache
import UI_ArenaServersMenu
import SpecifyServer_Cache
import UI_SpecifyServerMenu
import SpecifyLeague_Cache
import UI_SpecifyLeagueMenu
import Preferences_Cache
import UI_PreferencesMenu
import PlayerSettings_Cache
import UI_PlayerSettingsMenu
import PlayerModel_Cache
import UI_PlayerModelMenu
import UI_CDKeyMenu_f
import UI_CDKeyMenu_Cache
import UI_CDKeyMenu
import UI_WorkshopMenu_Cache
import UI_WorkshopMenu
import UI_ModsMenu_Cache
import UI_ModsMenu
import UI_CinematicsMenu_Cache
import UI_CinematicsMenu_f
import UI_CinematicsMenu
import Demos_Cache
import UI_DemosMenu
import Controls_Cache
import UI_ControlsMenu
import UI_DrawConnectScreen
import TeamMain_Cache
import UI_TeamMainMenu
import UI_SetupMenu
import UI_SetupMenu_Cache
import UI_SandboxMainMenu
import UI_Message
import UI_ConfirmMenu_Style
import UI_ConfirmMenu
import ConfirmMenu_Cache
import UI_BotCommandMenu_f
import UI_DynamicMenuCache
import UI_InGameMenu
import InGame_Cache
import UI_CurrentPlayerTeam
import UI_CreditMenu
import UI_AdvancedMenu_Cache
import UI_AdvancedMenu
import MGUI_Load
import UI_ArenaScriptAutoFloat
import UI_ArenaScriptAutoChar
import UI_ArenaScriptAutoInt
import ui_medalSounds
import ui_medalPicNames
import ui_medalNames
import list_color
import name_color
import s_sandboxmain_color1
import menu_black_color
import menu_red_color
import menu_highlight_color
import menu_dark_color
import menu_grayed_color
export weaponChangeSound
align 4
LABELV weaponChangeSound
skip 4
export menu_null_sound
align 4
LABELV menu_null_sound
skip 4
export menu_buzz_sound
align 4
LABELV menu_buzz_sound
skip 4
export menu_out_sound
align 4
LABELV menu_out_sound
skip 4
export menu_move_sound
align 4
LABELV menu_move_sound
skip 4
export menu_in_sound
align 4
LABELV menu_in_sound
skip 4
import Menu_Focus
import UI_IsValidCvar
import uie_olditemmenu
import uie_ingame_dynamicmenu
import uie_autoclosebotmenu
import uie_mapicons
import uie_animsfx
import ui_cdkeychecked
import ui_cdkey
import ui_server32
import ui_server31
import ui_server30
import ui_server29
import ui_server28
import ui_server27
import ui_server26
import ui_server25
import ui_server24
import ui_server23
import ui_server22
import ui_server21
import ui_server20
import ui_server19
import ui_server18
import ui_server17
import ui_server16
import ui_server15
import ui_server14
import ui_server13
import ui_server12
import ui_server11
import ui_server10
import ui_server9
import ui_server8
import ui_server7
import ui_server6
import ui_server5
import ui_server4
import ui_server3
import ui_server2
import ui_server1
import ui_marks
import ui_drawCrosshairNames
import ui_drawCrosshair
import ui_brassTime
import ui_browserShowEmpty
import ui_browserShowFull
import ui_browserSortKey
import ui_browserGameType
import ui_browserMaster
import ui_spSelection
import ui_spSkill
import ui_spVideos
import ui_spAwards
import ui_spScores5
import ui_spScores4
import ui_spScores3
import ui_spScores2
import ui_spScores1
import ui_botsFile
import ui_arenasFile
import ui_ctf_friendly
import ui_ctf_timelimit
import ui_ctf_capturelimit
import ui_team_friendly
import ui_team_timelimit
import ui_team_fraglimit
import ui_tourney_timelimit
import ui_tourney_fraglimit
import ui_ffa_timelimit
import ui_ffa_fraglimit
import ui_backcolors
import cl_screenoffset
import ui_loaded
import cl_language
import cl_selectedmod
import team_legsskin
import sensitivitymenu
import legsskin
import ui_singlemode
import ui_3dmap
import ui_scrollbtnsize
import sbt_wallpaper
import sbt_color3_3
import sbt_color3_2
import sbt_color3_1
import sbt_color3_0
import sbt_color2_3
import sbt_color2_2
import sbt_color2_1
import sbt_color2_0
import sbt_color1_3
import sbt_color1_2
import sbt_color1_1
import sbt_color1_0
import sbt_color0_3
import sbt_color0_2
import sbt_color0_1
import sbt_color0_0
import mgui_none
import mgui_api_active
import cl_sprun
import toolgun_disabledarg4
import toolgun_disabledarg3
import toolgun_disabledarg2
import toolgun_disabledarg1
import toolgun_toolset18
import toolgun_toolset17
import toolgun_toolset16
import toolgun_toolset15
import toolgun_toolset14
import toolgun_toolset13
import toolgun_toolset12
import toolgun_toolset11
import toolgun_toolset10
import toolgun_toolset9
import toolgun_toolset8
import toolgun_toolset7
import toolgun_toolset6
import toolgun_toolset5
import toolgun_toolset4
import toolgun_toolset3
import toolgun_toolset2
import toolgun_toolset1
import tool_modifypreset4
import tool_modifypreset3
import tool_modifypreset2
import tool_modifypreset
import tool_spawnpreset
import spawn_preset
import sb_tab
import sb_texturenum
import sb_classnum
import sb_modelnum
import sb_grid
import sb_texturename
import sb_texture
import sb_private
import test9
import test8
import test7
import test6
import test5
import test4
import test3
import test2
import test1
import cl_giantcharheight
import cl_giantcharwidth
import cl_bigcharheight
import cl_bigcharwidth
import cl_smallcharheight
import cl_smallcharwidth
import cl_propgapwidth
import cl_propspacewidth
import cl_propheight
import cl_propsmallsizescale
import BG_TeamName
import BG_GetVehicleSettings
import BG_VehicleCheckClass
import BG_PlayerTouchesItem
import BG_PlayerStateToEntityStateExtraPolate
import BG_PlayerStateToEntityState
import BG_TouchJumpPad
import BG_AddPredictableEventToPlayerstate
import BG_EvaluateTrajectoryDelta
import BG_EvaluateTrajectory
import BG_DefragmentMemory
import BG_Free
import BG_InitMemory
import BG_Alloc
import BG_CanAlloc
import BG_CanItemBeGrabbed
import BG_FindItemForBackpack
import BG_FindItemForHoldable
import BG_FindItemForPowerup
import BG_FindItemForWeapon
import BG_FindSwepAmmo
import BG_FindSwep
import BG_FindItem
import bg_numItems
import bg_itemlist
import Pmove
import PM_UpdateViewAngles
import COM_LoadLevelScores
import COM_CalculatePlayerScore
import Com_Printf
import Com_Error
import Info_NextPair
import Info_Validate
import Info_SetValueForKey_Big
import Info_SetValueForKey
import Info_RemoveKey_big
import Info_RemoveKey
import Info_ValueForKey
import vectoyaw
import AngleDifference
import Com_TruncateLongString
import va
import Q_CountChar
import Q_CleanStr
import Q_PrintStrlen
import Q_strcat
import Q_strncpyz
import Q_stristr
import Q_strupr
import Q_strlwr
import Q_stricmpn
import Q_strncmp
import Q_stricmp
import Q_isalpha
import Q_isupper
import Q_islower
import Q_isprint
import Com_RandomBytes
import Com_SkipCharset
import Com_SkipTokens
import Com_sprintf
import Parse3DMatrix
import Parse2DMatrix
import Parse1DMatrix
import SkipRestOfLine
import SkipBracedSection
import COM_MatchToken
import COM_ParseWarning
import COM_ParseError
import COM_Compress
import COM_ParseExt
import COM_Parse
import COM_GetCurrentParseLine
import COM_BeginParseSession
import COM_DefaultExtension
import COM_StripExtension
import COM_GetExtension
import COM_SkipPath
import Com_Clamp
import Q_isnan
import PerpendicularVector
import AngleVectors
import MatrixMultiply
import MakeNormalVectors
import RotateAroundDirection
import RotatePointAroundVector
import ProjectPointOnPlane
import PlaneFromPoints
import AngleDelta
import AngleNormalize180
import AngleNormalize360
import AnglesSubtract
import AngleSubtract
import LerpAngle
import AngleMod
import BoundsIntersectPoint
import BoundsIntersectSphere
import BoundsIntersect
import BoxOnPlaneSide
import SetPlaneSignbits
import AxisCopy
import AxisClear
import Lerp
import VelocityToAxis
import AnglesToAxis
import vectoangles
import Q_crandom
import Q_random
import Q_rand
import Q_acos
import Q_log2
import VectorRotate
import Vector4Scale
import VectorNormalize2
import VectorNormalize
import CrossProduct
import VectorInverse
import VectorNormalizeFast
import DistanceSquared
import Distance
import VectorLengthSquared
import VectorLength
import VectorCompare
import AddPointToBounds
import ClearBounds
import RadiusFromBounds
import NormalizeColor
import ColorBytes4
import ColorBytes3
import _VectorMA
import _VectorScale
import _VectorCopy
import _VectorAdd
import _VectorSubtract
import _DotProduct
import ByteToDir
import DirToByte
import ClampShort
import ClampChar
import Q_rsqrt
import Q_fabs
import axisDefault
import vec3_origin
import g_color_table
import colorDkGrey
import colorMdGrey
import colorLtGrey
import colorWhite
import colorCyan
import colorMagenta
import colorYellow
import colorBlue
import colorGreen
import colorRed
import colorBlack
import bytedirs
import Hunk_Alloc
import FloatSwap
import LongSwap
import ShortSwap
import acos
import fabs
import abs
import tan
import atan2
import cos
import sin
import sqrt
import floor
import ceil
import memcpy
import memset
import memmove
import sscanf
import Q_snprintf
import Q_vsnprintf
import strtol
import _atoi
import atoi
import strtod
import _atof
import atof
import toupper
import tolower
import strncpy
import strstr
import strrchr
import strchr
import strcmp
import strcpy
import strcat
import ifstrlenru
import strlenru
import strlen
import rand
import srand
import qsort
lit
align 1
LABELV $1390
byte 1 99
byte 1 108
byte 1 95
byte 1 114
byte 1 117
byte 1 115
byte 1 105
byte 1 110
byte 1 112
byte 1 117
byte 1 116
byte 1 0
align 1
LABELV $1277
byte 1 100
byte 1 114
byte 1 97
byte 1 119
byte 1 76
byte 1 101
byte 1 110
byte 1 32
byte 1 62
byte 1 61
byte 1 32
byte 1 77
byte 1 65
byte 1 88
byte 1 95
byte 1 83
byte 1 84
byte 1 82
byte 1 73
byte 1 78
byte 1 71
byte 1 95
byte 1 67
byte 1 72
byte 1 65
byte 1 82
byte 1 83
byte 1 0
align 1
LABELV $1265
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 47
byte 1 97
byte 1 114
byte 1 116
byte 1 47
byte 1 115
byte 1 108
byte 1 105
byte 1 100
byte 1 101
byte 1 114
byte 1 98
byte 1 117
byte 1 116
byte 1 116
byte 1 95
byte 1 49
byte 1 0
align 1
LABELV $1264
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 47
byte 1 97
byte 1 114
byte 1 116
byte 1 47
byte 1 115
byte 1 108
byte 1 105
byte 1 100
byte 1 101
byte 1 114
byte 1 98
byte 1 117
byte 1 116
byte 1 116
byte 1 95
byte 1 48
byte 1 0
align 1
LABELV $1263
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 47
byte 1 97
byte 1 114
byte 1 116
byte 1 47
byte 1 115
byte 1 108
byte 1 105
byte 1 100
byte 1 101
byte 1 114
byte 1 50
byte 1 0
align 1
LABELV $1262
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 119
byte 1 101
byte 1 97
byte 1 112
byte 1 111
byte 1 110
byte 1 115
byte 1 47
byte 1 99
byte 1 104
byte 1 97
byte 1 110
byte 1 103
byte 1 101
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $1261
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 52
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $1260
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 51
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $1259
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 50
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $1258
byte 1 115
byte 1 111
byte 1 117
byte 1 110
byte 1 100
byte 1 47
byte 1 109
byte 1 105
byte 1 115
byte 1 99
byte 1 47
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 49
byte 1 46
byte 1 119
byte 1 97
byte 1 118
byte 1 0
align 1
LABELV $1257
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 47
byte 1 97
byte 1 114
byte 1 116
byte 1 47
byte 1 108
byte 1 111
byte 1 97
byte 1 100
byte 1 105
byte 1 110
byte 1 103
byte 1 0
align 1
LABELV $1255
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 47
byte 1 97
byte 1 110
byte 1 105
byte 1 109
byte 1 98
byte 1 103
byte 1 0
align 1
LABELV $1253
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 47
byte 1 97
byte 1 114
byte 1 116
byte 1 47
byte 1 98
byte 1 108
byte 1 97
byte 1 99
byte 1 107
byte 1 116
byte 1 114
byte 1 97
byte 1 110
byte 1 115
byte 1 0
align 1
LABELV $1251
byte 1 119
byte 1 104
byte 1 105
byte 1 116
byte 1 101
byte 1 0
align 1
LABELV $1249
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 47
byte 1 97
byte 1 114
byte 1 116
byte 1 47
byte 1 115
byte 1 119
byte 1 105
byte 1 116
byte 1 99
byte 1 104
byte 1 95
byte 1 111
byte 1 102
byte 1 102
byte 1 0
align 1
LABELV $1247
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 47
byte 1 97
byte 1 114
byte 1 116
byte 1 47
byte 1 115
byte 1 119
byte 1 105
byte 1 116
byte 1 99
byte 1 104
byte 1 95
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $1245
byte 1 99
byte 1 111
byte 1 114
byte 1 110
byte 1 101
byte 1 114
byte 1 0
align 1
LABELV $1243
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 47
byte 1 97
byte 1 114
byte 1 116
byte 1 47
byte 1 51
byte 1 95
byte 1 99
byte 1 117
byte 1 114
byte 1 115
byte 1 111
byte 1 114
byte 1 50
byte 1 0
align 1
LABELV $1241
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 47
byte 1 97
byte 1 114
byte 1 116
byte 1 47
byte 1 102
byte 1 111
byte 1 110
byte 1 116
byte 1 50
byte 1 95
byte 1 112
byte 1 114
byte 1 111
byte 1 112
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1239
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 47
byte 1 97
byte 1 114
byte 1 116
byte 1 47
byte 1 102
byte 1 111
byte 1 110
byte 1 116
byte 1 49
byte 1 95
byte 1 112
byte 1 114
byte 1 111
byte 1 112
byte 1 95
byte 1 103
byte 1 108
byte 1 111
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1237
byte 1 109
byte 1 101
byte 1 110
byte 1 117
byte 1 47
byte 1 97
byte 1 114
byte 1 116
byte 1 47
byte 1 102
byte 1 111
byte 1 110
byte 1 116
byte 1 49
byte 1 95
byte 1 112
byte 1 114
byte 1 111
byte 1 112
byte 1 46
byte 1 116
byte 1 103
byte 1 97
byte 1 0
align 1
LABELV $1235
byte 1 103
byte 1 102
byte 1 120
byte 1 47
byte 1 50
byte 1 100
byte 1 47
byte 1 98
byte 1 105
byte 1 103
byte 1 99
byte 1 104
byte 1 97
byte 1 114
byte 1 115
byte 1 0
align 1
LABELV $1204
byte 1 115
byte 1 99
byte 1 114
byte 1 101
byte 1 101
byte 1 110
byte 1 115
byte 1 104
byte 1 111
byte 1 116
byte 1 74
byte 1 80
byte 1 69
byte 1 71
byte 1 10
byte 1 0
align 1
LABELV $1200
byte 1 116
byte 1 111
byte 1 103
byte 1 103
byte 1 108
byte 1 101
byte 1 32
byte 1 99
byte 1 108
byte 1 95
byte 1 114
byte 1 117
byte 1 115
byte 1 105
byte 1 110
byte 1 112
byte 1 117
byte 1 116
byte 1 10
byte 1 0
align 1
LABELV $1130
byte 1 77
byte 1 101
byte 1 110
byte 1 117
byte 1 95
byte 1 68
byte 1 114
byte 1 97
byte 1 119
byte 1 58
byte 1 32
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 32
byte 1 37
byte 1 100
byte 1 0
align 1
LABELV $1061
byte 1 77
byte 1 101
byte 1 110
byte 1 117
byte 1 95
byte 1 73
byte 1 110
byte 1 105
byte 1 116
byte 1 58
byte 1 32
byte 1 117
byte 1 110
byte 1 107
byte 1 110
byte 1 111
byte 1 119
byte 1 110
byte 1 32
byte 1 116
byte 1 121
byte 1 112
byte 1 101
byte 1 32
byte 1 37
byte 1 100
byte 1 0
align 1
LABELV $1044
byte 1 77
byte 1 101
byte 1 110
byte 1 117
byte 1 95
byte 1 65
byte 1 100
byte 1 100
byte 1 73
byte 1 116
byte 1 101
byte 1 109
byte 1 58
byte 1 32
byte 1 101
byte 1 120
byte 1 99
byte 1 101
byte 1 115
byte 1 115
byte 1 105
byte 1 118
byte 1 101
byte 1 32
byte 1 105
byte 1 116
byte 1 101
byte 1 109
byte 1 115
byte 1 0
align 1
LABELV $755
byte 1 208
byte 1 178
byte 1 208
byte 1 186
byte 1 208
byte 1 187
byte 1 0
align 1
LABELV $744
byte 1 208
byte 1 190
byte 1 209
byte 1 130
byte 1 208
byte 1 186
byte 1 208
byte 1 187
byte 1 0
align 1
LABELV $417
byte 1 32
byte 1 37
byte 1 105
byte 1 0
align 1
LABELV $405
byte 1 111
byte 1 110
byte 1 0
align 1
LABELV $401
byte 1 111
byte 1 102
byte 1 102
byte 1 0
align 1
LABELV $306
byte 1 109
byte 1 111
byte 1 100
byte 1 101
byte 1 108
byte 1 0
align 1
LABELV $295
byte 1 37
byte 1 115
byte 1 47
byte 1 37
byte 1 115
byte 1 0
